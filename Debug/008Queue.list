
008Queue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006da4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  08006f34  08006f34  00016f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070f8  080070f8  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  080070f8  080070f8  000170f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007100  08007100  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007100  08007100  00017100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007104  08007104  00017104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08007108  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020020  2**0
                  CONTENTS
 10 .bss          00012eac  20000020  20000020  00020020  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20012ecc  20012ecc  00020020  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016394  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003419  00000000  00000000  000363e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001358  00000000  00000000  00039800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001210  00000000  00000000  0003ab58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023f95  00000000  00000000  0003bd68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000175f8  00000000  00000000  0005fcfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da469  00000000  00000000  000772f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015175e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005060  00000000  00000000  001517b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000020 	.word	0x20000020
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006f1c 	.word	0x08006f1c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000024 	.word	0x20000024
 80001cc:	08006f1c 	.word	0x08006f1c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr

080001f4 <__aeabi_uldivmod>:
 80001f4:	b953      	cbnz	r3, 800020c <__aeabi_uldivmod+0x18>
 80001f6:	b94a      	cbnz	r2, 800020c <__aeabi_uldivmod+0x18>
 80001f8:	2900      	cmp	r1, #0
 80001fa:	bf08      	it	eq
 80001fc:	2800      	cmpeq	r0, #0
 80001fe:	bf1c      	itt	ne
 8000200:	f04f 31ff 	movne.w	r1, #4294967295
 8000204:	f04f 30ff 	movne.w	r0, #4294967295
 8000208:	f000 b974 	b.w	80004f4 <__aeabi_idiv0>
 800020c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000210:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000214:	f000 f806 	bl	8000224 <__udivmoddi4>
 8000218:	f8dd e004 	ldr.w	lr, [sp, #4]
 800021c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000220:	b004      	add	sp, #16
 8000222:	4770      	bx	lr

08000224 <__udivmoddi4>:
 8000224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000228:	9d08      	ldr	r5, [sp, #32]
 800022a:	4604      	mov	r4, r0
 800022c:	468e      	mov	lr, r1
 800022e:	2b00      	cmp	r3, #0
 8000230:	d14d      	bne.n	80002ce <__udivmoddi4+0xaa>
 8000232:	428a      	cmp	r2, r1
 8000234:	4694      	mov	ip, r2
 8000236:	d969      	bls.n	800030c <__udivmoddi4+0xe8>
 8000238:	fab2 f282 	clz	r2, r2
 800023c:	b152      	cbz	r2, 8000254 <__udivmoddi4+0x30>
 800023e:	fa01 f302 	lsl.w	r3, r1, r2
 8000242:	f1c2 0120 	rsb	r1, r2, #32
 8000246:	fa20 f101 	lsr.w	r1, r0, r1
 800024a:	fa0c fc02 	lsl.w	ip, ip, r2
 800024e:	ea41 0e03 	orr.w	lr, r1, r3
 8000252:	4094      	lsls	r4, r2
 8000254:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000258:	0c21      	lsrs	r1, r4, #16
 800025a:	fbbe f6f8 	udiv	r6, lr, r8
 800025e:	fa1f f78c 	uxth.w	r7, ip
 8000262:	fb08 e316 	mls	r3, r8, r6, lr
 8000266:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800026a:	fb06 f107 	mul.w	r1, r6, r7
 800026e:	4299      	cmp	r1, r3
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x64>
 8000272:	eb1c 0303 	adds.w	r3, ip, r3
 8000276:	f106 30ff 	add.w	r0, r6, #4294967295
 800027a:	f080 811f 	bcs.w	80004bc <__udivmoddi4+0x298>
 800027e:	4299      	cmp	r1, r3
 8000280:	f240 811c 	bls.w	80004bc <__udivmoddi4+0x298>
 8000284:	3e02      	subs	r6, #2
 8000286:	4463      	add	r3, ip
 8000288:	1a5b      	subs	r3, r3, r1
 800028a:	b2a4      	uxth	r4, r4
 800028c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000290:	fb08 3310 	mls	r3, r8, r0, r3
 8000294:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000298:	fb00 f707 	mul.w	r7, r0, r7
 800029c:	42a7      	cmp	r7, r4
 800029e:	d90a      	bls.n	80002b6 <__udivmoddi4+0x92>
 80002a0:	eb1c 0404 	adds.w	r4, ip, r4
 80002a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a8:	f080 810a 	bcs.w	80004c0 <__udivmoddi4+0x29c>
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	f240 8107 	bls.w	80004c0 <__udivmoddi4+0x29c>
 80002b2:	4464      	add	r4, ip
 80002b4:	3802      	subs	r0, #2
 80002b6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ba:	1be4      	subs	r4, r4, r7
 80002bc:	2600      	movs	r6, #0
 80002be:	b11d      	cbz	r5, 80002c8 <__udivmoddi4+0xa4>
 80002c0:	40d4      	lsrs	r4, r2
 80002c2:	2300      	movs	r3, #0
 80002c4:	e9c5 4300 	strd	r4, r3, [r5]
 80002c8:	4631      	mov	r1, r6
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d909      	bls.n	80002e6 <__udivmoddi4+0xc2>
 80002d2:	2d00      	cmp	r5, #0
 80002d4:	f000 80ef 	beq.w	80004b6 <__udivmoddi4+0x292>
 80002d8:	2600      	movs	r6, #0
 80002da:	e9c5 0100 	strd	r0, r1, [r5]
 80002de:	4630      	mov	r0, r6
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	fab3 f683 	clz	r6, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d14a      	bne.n	8000384 <__udivmoddi4+0x160>
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xd4>
 80002f2:	4282      	cmp	r2, r0
 80002f4:	f200 80f9 	bhi.w	80004ea <__udivmoddi4+0x2c6>
 80002f8:	1a84      	subs	r4, r0, r2
 80002fa:	eb61 0303 	sbc.w	r3, r1, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	469e      	mov	lr, r3
 8000302:	2d00      	cmp	r5, #0
 8000304:	d0e0      	beq.n	80002c8 <__udivmoddi4+0xa4>
 8000306:	e9c5 4e00 	strd	r4, lr, [r5]
 800030a:	e7dd      	b.n	80002c8 <__udivmoddi4+0xa4>
 800030c:	b902      	cbnz	r2, 8000310 <__udivmoddi4+0xec>
 800030e:	deff      	udf	#255	; 0xff
 8000310:	fab2 f282 	clz	r2, r2
 8000314:	2a00      	cmp	r2, #0
 8000316:	f040 8092 	bne.w	800043e <__udivmoddi4+0x21a>
 800031a:	eba1 010c 	sub.w	r1, r1, ip
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f fe8c 	uxth.w	lr, ip
 8000326:	2601      	movs	r6, #1
 8000328:	0c20      	lsrs	r0, r4, #16
 800032a:	fbb1 f3f7 	udiv	r3, r1, r7
 800032e:	fb07 1113 	mls	r1, r7, r3, r1
 8000332:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000336:	fb0e f003 	mul.w	r0, lr, r3
 800033a:	4288      	cmp	r0, r1
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x12c>
 800033e:	eb1c 0101 	adds.w	r1, ip, r1
 8000342:	f103 38ff 	add.w	r8, r3, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x12a>
 8000348:	4288      	cmp	r0, r1
 800034a:	f200 80cb 	bhi.w	80004e4 <__udivmoddi4+0x2c0>
 800034e:	4643      	mov	r3, r8
 8000350:	1a09      	subs	r1, r1, r0
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb1 f0f7 	udiv	r0, r1, r7
 8000358:	fb07 1110 	mls	r1, r7, r0, r1
 800035c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000360:	fb0e fe00 	mul.w	lr, lr, r0
 8000364:	45a6      	cmp	lr, r4
 8000366:	d908      	bls.n	800037a <__udivmoddi4+0x156>
 8000368:	eb1c 0404 	adds.w	r4, ip, r4
 800036c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x154>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f200 80bb 	bhi.w	80004ee <__udivmoddi4+0x2ca>
 8000378:	4608      	mov	r0, r1
 800037a:	eba4 040e 	sub.w	r4, r4, lr
 800037e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000382:	e79c      	b.n	80002be <__udivmoddi4+0x9a>
 8000384:	f1c6 0720 	rsb	r7, r6, #32
 8000388:	40b3      	lsls	r3, r6
 800038a:	fa22 fc07 	lsr.w	ip, r2, r7
 800038e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000392:	fa20 f407 	lsr.w	r4, r0, r7
 8000396:	fa01 f306 	lsl.w	r3, r1, r6
 800039a:	431c      	orrs	r4, r3
 800039c:	40f9      	lsrs	r1, r7
 800039e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a2:	fa00 f306 	lsl.w	r3, r0, r6
 80003a6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003aa:	0c20      	lsrs	r0, r4, #16
 80003ac:	fa1f fe8c 	uxth.w	lr, ip
 80003b0:	fb09 1118 	mls	r1, r9, r8, r1
 80003b4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b8:	fb08 f00e 	mul.w	r0, r8, lr
 80003bc:	4288      	cmp	r0, r1
 80003be:	fa02 f206 	lsl.w	r2, r2, r6
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b8>
 80003c4:	eb1c 0101 	adds.w	r1, ip, r1
 80003c8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003cc:	f080 8088 	bcs.w	80004e0 <__udivmoddi4+0x2bc>
 80003d0:	4288      	cmp	r0, r1
 80003d2:	f240 8085 	bls.w	80004e0 <__udivmoddi4+0x2bc>
 80003d6:	f1a8 0802 	sub.w	r8, r8, #2
 80003da:	4461      	add	r1, ip
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003e4:	fb09 1110 	mls	r1, r9, r0, r1
 80003e8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003ec:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f0:	458e      	cmp	lr, r1
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1e2>
 80003f4:	eb1c 0101 	adds.w	r1, ip, r1
 80003f8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fc:	d26c      	bcs.n	80004d8 <__udivmoddi4+0x2b4>
 80003fe:	458e      	cmp	lr, r1
 8000400:	d96a      	bls.n	80004d8 <__udivmoddi4+0x2b4>
 8000402:	3802      	subs	r0, #2
 8000404:	4461      	add	r1, ip
 8000406:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800040a:	fba0 9402 	umull	r9, r4, r0, r2
 800040e:	eba1 010e 	sub.w	r1, r1, lr
 8000412:	42a1      	cmp	r1, r4
 8000414:	46c8      	mov	r8, r9
 8000416:	46a6      	mov	lr, r4
 8000418:	d356      	bcc.n	80004c8 <__udivmoddi4+0x2a4>
 800041a:	d053      	beq.n	80004c4 <__udivmoddi4+0x2a0>
 800041c:	b15d      	cbz	r5, 8000436 <__udivmoddi4+0x212>
 800041e:	ebb3 0208 	subs.w	r2, r3, r8
 8000422:	eb61 010e 	sbc.w	r1, r1, lr
 8000426:	fa01 f707 	lsl.w	r7, r1, r7
 800042a:	fa22 f306 	lsr.w	r3, r2, r6
 800042e:	40f1      	lsrs	r1, r6
 8000430:	431f      	orrs	r7, r3
 8000432:	e9c5 7100 	strd	r7, r1, [r5]
 8000436:	2600      	movs	r6, #0
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	f1c2 0320 	rsb	r3, r2, #32
 8000442:	40d8      	lsrs	r0, r3
 8000444:	fa0c fc02 	lsl.w	ip, ip, r2
 8000448:	fa21 f303 	lsr.w	r3, r1, r3
 800044c:	4091      	lsls	r1, r2
 800044e:	4301      	orrs	r1, r0
 8000450:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000454:	fa1f fe8c 	uxth.w	lr, ip
 8000458:	fbb3 f0f7 	udiv	r0, r3, r7
 800045c:	fb07 3610 	mls	r6, r7, r0, r3
 8000460:	0c0b      	lsrs	r3, r1, #16
 8000462:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000466:	fb00 f60e 	mul.w	r6, r0, lr
 800046a:	429e      	cmp	r6, r3
 800046c:	fa04 f402 	lsl.w	r4, r4, r2
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x260>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 38ff 	add.w	r8, r0, #4294967295
 800047a:	d22f      	bcs.n	80004dc <__udivmoddi4+0x2b8>
 800047c:	429e      	cmp	r6, r3
 800047e:	d92d      	bls.n	80004dc <__udivmoddi4+0x2b8>
 8000480:	3802      	subs	r0, #2
 8000482:	4463      	add	r3, ip
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	b289      	uxth	r1, r1
 8000488:	fbb3 f6f7 	udiv	r6, r3, r7
 800048c:	fb07 3316 	mls	r3, r7, r6, r3
 8000490:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000494:	fb06 f30e 	mul.w	r3, r6, lr
 8000498:	428b      	cmp	r3, r1
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x28a>
 800049c:	eb1c 0101 	adds.w	r1, ip, r1
 80004a0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004a4:	d216      	bcs.n	80004d4 <__udivmoddi4+0x2b0>
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d914      	bls.n	80004d4 <__udivmoddi4+0x2b0>
 80004aa:	3e02      	subs	r6, #2
 80004ac:	4461      	add	r1, ip
 80004ae:	1ac9      	subs	r1, r1, r3
 80004b0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004b4:	e738      	b.n	8000328 <__udivmoddi4+0x104>
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e705      	b.n	80002c8 <__udivmoddi4+0xa4>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e3      	b.n	8000288 <__udivmoddi4+0x64>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6f8      	b.n	80002b6 <__udivmoddi4+0x92>
 80004c4:	454b      	cmp	r3, r9
 80004c6:	d2a9      	bcs.n	800041c <__udivmoddi4+0x1f8>
 80004c8:	ebb9 0802 	subs.w	r8, r9, r2
 80004cc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7a3      	b.n	800041c <__udivmoddi4+0x1f8>
 80004d4:	4646      	mov	r6, r8
 80004d6:	e7ea      	b.n	80004ae <__udivmoddi4+0x28a>
 80004d8:	4620      	mov	r0, r4
 80004da:	e794      	b.n	8000406 <__udivmoddi4+0x1e2>
 80004dc:	4640      	mov	r0, r8
 80004de:	e7d1      	b.n	8000484 <__udivmoddi4+0x260>
 80004e0:	46d0      	mov	r8, sl
 80004e2:	e77b      	b.n	80003dc <__udivmoddi4+0x1b8>
 80004e4:	3b02      	subs	r3, #2
 80004e6:	4461      	add	r1, ip
 80004e8:	e732      	b.n	8000350 <__udivmoddi4+0x12c>
 80004ea:	4630      	mov	r0, r6
 80004ec:	e709      	b.n	8000302 <__udivmoddi4+0xde>
 80004ee:	4464      	add	r4, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e742      	b.n	800037a <__udivmoddi4+0x156>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <led_effect_stop>:
 */

#include "main.h"

void led_effect_stop(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b084      	sub	sp, #16
 80004fc:	af02      	add	r7, sp, #8
	for(int i = 0; i < 4; i++)
 80004fe:	2300      	movs	r3, #0
 8000500:	607b      	str	r3, [r7, #4]
 8000502:	e00e      	b.n	8000522 <led_effect_stop+0x2a>
	{
		xTimerStop(handle_led_timer[i], portMAX_DELAY);
 8000504:	4a0b      	ldr	r2, [pc, #44]	; (8000534 <led_effect_stop+0x3c>)
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800050c:	f04f 33ff 	mov.w	r3, #4294967295
 8000510:	9300      	str	r3, [sp, #0]
 8000512:	2300      	movs	r3, #0
 8000514:	2200      	movs	r2, #0
 8000516:	2103      	movs	r1, #3
 8000518:	f005 fcf4 	bl	8005f04 <xTimerGenericCommand>
	for(int i = 0; i < 4; i++)
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	3301      	adds	r3, #1
 8000520:	607b      	str	r3, [r7, #4]
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	2b03      	cmp	r3, #3
 8000526:	dded      	ble.n	8000504 <led_effect_stop+0xc>
	}
}
 8000528:	bf00      	nop
 800052a:	bf00      	nop
 800052c:	3708      	adds	r7, #8
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	200000c8 	.word	0x200000c8

08000538 <led_effect>:

void led_effect(int n)
{
 8000538:	b590      	push	{r4, r7, lr}
 800053a:	b085      	sub	sp, #20
 800053c:	af02      	add	r7, sp, #8
 800053e:	6078      	str	r0, [r7, #4]
	led_effect_stop();
 8000540:	f7ff ffda 	bl	80004f8 <led_effect_stop>
	xTimerStart(handle_led_timer[n-1], portMAX_DELAY);
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	3b01      	subs	r3, #1
 8000548:	4a08      	ldr	r2, [pc, #32]	; (800056c <led_effect+0x34>)
 800054a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800054e:	f004 fddb 	bl	8005108 <xTaskGetTickCount>
 8000552:	4602      	mov	r2, r0
 8000554:	f04f 33ff 	mov.w	r3, #4294967295
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	2300      	movs	r3, #0
 800055c:	2101      	movs	r1, #1
 800055e:	4620      	mov	r0, r4
 8000560:	f005 fcd0 	bl	8005f04 <xTimerGenericCommand>
}
 8000564:	bf00      	nop
 8000566:	370c      	adds	r7, #12
 8000568:	46bd      	mov	sp, r7
 800056a:	bd90      	pop	{r4, r7, pc}
 800056c:	200000c8 	.word	0x200000c8

08000570 <turn_off_all_leds>:

void turn_off_all_leds(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000574:	2200      	movs	r2, #0
 8000576:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800057a:	480b      	ldr	r0, [pc, #44]	; (80005a8 <turn_off_all_leds+0x38>)
 800057c:	f001 fb34 	bl	8001be8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000580:	2200      	movs	r2, #0
 8000582:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000586:	4808      	ldr	r0, [pc, #32]	; (80005a8 <turn_off_all_leds+0x38>)
 8000588:	f001 fb2e 	bl	8001be8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 800058c:	2200      	movs	r2, #0
 800058e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000592:	4805      	ldr	r0, [pc, #20]	; (80005a8 <turn_off_all_leds+0x38>)
 8000594:	f001 fb28 	bl	8001be8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 8000598:	2200      	movs	r2, #0
 800059a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800059e:	4802      	ldr	r0, [pc, #8]	; (80005a8 <turn_off_all_leds+0x38>)
 80005a0:	f001 fb22 	bl	8001be8 <HAL_GPIO_WritePin>
}
 80005a4:	bf00      	nop
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	40020c00 	.word	0x40020c00

080005ac <turn_on_all_leds>:

void turn_on_all_leds(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80005b0:	2201      	movs	r2, #1
 80005b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005b6:	480b      	ldr	r0, [pc, #44]	; (80005e4 <turn_on_all_leds+0x38>)
 80005b8:	f001 fb16 	bl	8001be8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 80005bc:	2201      	movs	r2, #1
 80005be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005c2:	4808      	ldr	r0, [pc, #32]	; (80005e4 <turn_on_all_leds+0x38>)
 80005c4:	f001 fb10 	bl	8001be8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD5_Pin, GPIO_PIN_SET);
 80005c8:	2201      	movs	r2, #1
 80005ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005ce:	4805      	ldr	r0, [pc, #20]	; (80005e4 <turn_on_all_leds+0x38>)
 80005d0:	f001 fb0a 	bl	8001be8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD6_Pin, GPIO_PIN_SET);
 80005d4:	2201      	movs	r2, #1
 80005d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005da:	4802      	ldr	r0, [pc, #8]	; (80005e4 <turn_on_all_leds+0x38>)
 80005dc:	f001 fb04 	bl	8001be8 <HAL_GPIO_WritePin>
}
 80005e0:	bf00      	nop
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	40020c00 	.word	0x40020c00

080005e8 <LED_effect1>:

void LED_effect1(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
	static int flag = 1;
	(flag ^= 1) ? turn_off_all_leds() : turn_on_all_leds();
 80005ec:	4b08      	ldr	r3, [pc, #32]	; (8000610 <LED_effect1+0x28>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f083 0301 	eor.w	r3, r3, #1
 80005f4:	4a06      	ldr	r2, [pc, #24]	; (8000610 <LED_effect1+0x28>)
 80005f6:	6013      	str	r3, [r2, #0]
 80005f8:	4b05      	ldr	r3, [pc, #20]	; (8000610 <LED_effect1+0x28>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d002      	beq.n	8000606 <LED_effect1+0x1e>
 8000600:	f7ff ffb6 	bl	8000570 <turn_off_all_leds>
}
 8000604:	e001      	b.n	800060a <LED_effect1+0x22>
	(flag ^= 1) ? turn_off_all_leds() : turn_on_all_leds();
 8000606:	f7ff ffd1 	bl	80005ac <turn_on_all_leds>
}
 800060a:	bf00      	nop
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	20000000 	.word	0x20000000

08000614 <turn_on_even_leds>:

void turn_on_even_leds(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000618:	2200      	movs	r2, #0
 800061a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800061e:	480b      	ldr	r0, [pc, #44]	; (800064c <turn_on_even_leds+0x38>)
 8000620:	f001 fae2 	bl	8001be8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 8000624:	2201      	movs	r2, #1
 8000626:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800062a:	4808      	ldr	r0, [pc, #32]	; (800064c <turn_on_even_leds+0x38>)
 800062c:	f001 fadc 	bl	8001be8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 8000630:	2200      	movs	r2, #0
 8000632:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000636:	4805      	ldr	r0, [pc, #20]	; (800064c <turn_on_even_leds+0x38>)
 8000638:	f001 fad6 	bl	8001be8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD6_Pin, GPIO_PIN_SET);
 800063c:	2201      	movs	r2, #1
 800063e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000642:	4802      	ldr	r0, [pc, #8]	; (800064c <turn_on_even_leds+0x38>)
 8000644:	f001 fad0 	bl	8001be8 <HAL_GPIO_WritePin>
}
 8000648:	bf00      	nop
 800064a:	bd80      	pop	{r7, pc}
 800064c:	40020c00 	.word	0x40020c00

08000650 <turn_on_odd_leds>:

void turn_on_odd_leds(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000654:	2201      	movs	r2, #1
 8000656:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800065a:	480b      	ldr	r0, [pc, #44]	; (8000688 <turn_on_odd_leds+0x38>)
 800065c:	f001 fac4 	bl	8001be8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000660:	2200      	movs	r2, #0
 8000662:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000666:	4808      	ldr	r0, [pc, #32]	; (8000688 <turn_on_odd_leds+0x38>)
 8000668:	f001 fabe 	bl	8001be8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD5_Pin, GPIO_PIN_SET);
 800066c:	2201      	movs	r2, #1
 800066e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000672:	4805      	ldr	r0, [pc, #20]	; (8000688 <turn_on_odd_leds+0x38>)
 8000674:	f001 fab8 	bl	8001be8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 8000678:	2200      	movs	r2, #0
 800067a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800067e:	4802      	ldr	r0, [pc, #8]	; (8000688 <turn_on_odd_leds+0x38>)
 8000680:	f001 fab2 	bl	8001be8 <HAL_GPIO_WritePin>
}
 8000684:	bf00      	nop
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40020c00 	.word	0x40020c00

0800068c <LED_effect2>:

void LED_effect2(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
	static int flag = 1;
	(flag ^= 1) ? turn_on_even_leds() : turn_on_odd_leds();
 8000690:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <LED_effect2+0x28>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f083 0301 	eor.w	r3, r3, #1
 8000698:	4a06      	ldr	r2, [pc, #24]	; (80006b4 <LED_effect2+0x28>)
 800069a:	6013      	str	r3, [r2, #0]
 800069c:	4b05      	ldr	r3, [pc, #20]	; (80006b4 <LED_effect2+0x28>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d002      	beq.n	80006aa <LED_effect2+0x1e>
 80006a4:	f7ff ffb6 	bl	8000614 <turn_on_even_leds>
}
 80006a8:	e001      	b.n	80006ae <LED_effect2+0x22>
	(flag ^= 1) ? turn_on_even_leds() : turn_on_odd_leds();
 80006aa:	f7ff ffd1 	bl	8000650 <turn_on_odd_leds>
}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	20000004 	.word	0x20000004

080006b8 <LED_control>:

void LED_control(int value)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < 4; i++)
 80006c0:	2300      	movs	r3, #0
 80006c2:	60fb      	str	r3, [r7, #12]
 80006c4:	e014      	b.n	80006f0 <LED_control+0x38>
		HAL_GPIO_WritePin(LD3_GPIO_Port, (LED1 << i), ((value >> i)& 0x1));
 80006c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	fa02 f303 	lsl.w	r3, r2, r3
 80006d0:	b299      	uxth	r1, r3
 80006d2:	687a      	ldr	r2, [r7, #4]
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	fa42 f303 	asr.w	r3, r2, r3
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	f003 0301 	and.w	r3, r3, #1
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	461a      	mov	r2, r3
 80006e4:	4806      	ldr	r0, [pc, #24]	; (8000700 <LED_control+0x48>)
 80006e6:	f001 fa7f 	bl	8001be8 <HAL_GPIO_WritePin>
	for(int i = 0; i < 4; i++)
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	3301      	adds	r3, #1
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	2b03      	cmp	r3, #3
 80006f4:	dde7      	ble.n	80006c6 <LED_control+0xe>
}
 80006f6:	bf00      	nop
 80006f8:	bf00      	nop
 80006fa:	3710      	adds	r7, #16
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40020c00 	.word	0x40020c00

08000704 <LED_effect3>:

void LED_effect3(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
	static int i = 0;
	LED_control( 0x1 << (i++ % 4));
 8000708:	4b09      	ldr	r3, [pc, #36]	; (8000730 <LED_effect3+0x2c>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	1c5a      	adds	r2, r3, #1
 800070e:	4908      	ldr	r1, [pc, #32]	; (8000730 <LED_effect3+0x2c>)
 8000710:	600a      	str	r2, [r1, #0]
 8000712:	425a      	negs	r2, r3
 8000714:	f003 0303 	and.w	r3, r3, #3
 8000718:	f002 0203 	and.w	r2, r2, #3
 800071c:	bf58      	it	pl
 800071e:	4253      	negpl	r3, r2
 8000720:	2201      	movs	r2, #1
 8000722:	fa02 f303 	lsl.w	r3, r2, r3
 8000726:	4618      	mov	r0, r3
 8000728:	f7ff ffc6 	bl	80006b8 <LED_control>
}
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}
 8000730:	2000003c 	.word	0x2000003c

08000734 <LED_effect4>:

void LED_effect4(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
	static int i = 0;
	LED_control( 0x08 >> (i++ % 4));
 8000738:	4b09      	ldr	r3, [pc, #36]	; (8000760 <LED_effect4+0x2c>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	1c5a      	adds	r2, r3, #1
 800073e:	4908      	ldr	r1, [pc, #32]	; (8000760 <LED_effect4+0x2c>)
 8000740:	600a      	str	r2, [r1, #0]
 8000742:	425a      	negs	r2, r3
 8000744:	f003 0303 	and.w	r3, r3, #3
 8000748:	f002 0203 	and.w	r2, r2, #3
 800074c:	bf58      	it	pl
 800074e:	4253      	negpl	r3, r2
 8000750:	2208      	movs	r2, #8
 8000752:	fa42 f303 	asr.w	r3, r2, r3
 8000756:	4618      	mov	r0, r3
 8000758:	f7ff ffae 	bl	80006b8 <LED_control>
}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}
 8000760:	20000040 	.word	0x20000040

08000764 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b08c      	sub	sp, #48	; 0x30
 8000768:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800076a:	f000 feeb 	bl	8001544 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800076e:	f000 f907 	bl	8000980 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000772:	f000 f9c1 	bl	8000af8 <MX_GPIO_Init>
  MX_RTC_Init();
 8000776:	f000 f96f 	bl	8000a58 <MX_RTC_Init>
  MX_USART2_UART_Init();
 800077a:	f000 f993 	bl	8000aa4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  DWT_CTRL |= (1 << 0);
 800077e:	4b69      	ldr	r3, [pc, #420]	; (8000924 <main+0x1c0>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4a68      	ldr	r2, [pc, #416]	; (8000924 <main+0x1c0>)
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	6013      	str	r3, [r2, #0]

  status = xTaskCreate(menu_task, "MENU", 250, NULL, 2, &menu_task_handle);
 800078a:	4b67      	ldr	r3, [pc, #412]	; (8000928 <main+0x1c4>)
 800078c:	9301      	str	r3, [sp, #4]
 800078e:	2302      	movs	r3, #2
 8000790:	9300      	str	r3, [sp, #0]
 8000792:	2300      	movs	r3, #0
 8000794:	22fa      	movs	r2, #250	; 0xfa
 8000796:	4965      	ldr	r1, [pc, #404]	; (800092c <main+0x1c8>)
 8000798:	4865      	ldr	r0, [pc, #404]	; (8000930 <main+0x1cc>)
 800079a:	f004 fa73 	bl	8004c84 <xTaskCreate>
 800079e:	6238      	str	r0, [r7, #32]
	configASSERT(status == pdPASS);
 80007a0:	6a3b      	ldr	r3, [r7, #32]
 80007a2:	2b01      	cmp	r3, #1
 80007a4:	d00a      	beq.n	80007bc <main+0x58>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80007a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007aa:	f383 8811 	msr	BASEPRI, r3
 80007ae:	f3bf 8f6f 	isb	sy
 80007b2:	f3bf 8f4f 	dsb	sy
 80007b6:	61fb      	str	r3, [r7, #28]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80007b8:	bf00      	nop
 80007ba:	e7fe      	b.n	80007ba <main+0x56>

	status = xTaskCreate(led_task, "LED", 250, NULL, 2, &led_task_handle);
 80007bc:	4b5d      	ldr	r3, [pc, #372]	; (8000934 <main+0x1d0>)
 80007be:	9301      	str	r3, [sp, #4]
 80007c0:	2302      	movs	r3, #2
 80007c2:	9300      	str	r3, [sp, #0]
 80007c4:	2300      	movs	r3, #0
 80007c6:	22fa      	movs	r2, #250	; 0xfa
 80007c8:	495b      	ldr	r1, [pc, #364]	; (8000938 <main+0x1d4>)
 80007ca:	485c      	ldr	r0, [pc, #368]	; (800093c <main+0x1d8>)
 80007cc:	f004 fa5a 	bl	8004c84 <xTaskCreate>
 80007d0:	6238      	str	r0, [r7, #32]
	configASSERT(status == pdPASS);
 80007d2:	6a3b      	ldr	r3, [r7, #32]
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d00a      	beq.n	80007ee <main+0x8a>
        __asm volatile
 80007d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007dc:	f383 8811 	msr	BASEPRI, r3
 80007e0:	f3bf 8f6f 	isb	sy
 80007e4:	f3bf 8f4f 	dsb	sy
 80007e8:	61bb      	str	r3, [r7, #24]
    }
 80007ea:	bf00      	nop
 80007ec:	e7fe      	b.n	80007ec <main+0x88>

	status = xTaskCreate(rtc_task, "RTC", 250, NULL, 2, &rtc_task_handle);
 80007ee:	4b54      	ldr	r3, [pc, #336]	; (8000940 <main+0x1dc>)
 80007f0:	9301      	str	r3, [sp, #4]
 80007f2:	2302      	movs	r3, #2
 80007f4:	9300      	str	r3, [sp, #0]
 80007f6:	2300      	movs	r3, #0
 80007f8:	22fa      	movs	r2, #250	; 0xfa
 80007fa:	4952      	ldr	r1, [pc, #328]	; (8000944 <main+0x1e0>)
 80007fc:	4852      	ldr	r0, [pc, #328]	; (8000948 <main+0x1e4>)
 80007fe:	f004 fa41 	bl	8004c84 <xTaskCreate>
 8000802:	6238      	str	r0, [r7, #32]
	configASSERT(status == pdPASS);
 8000804:	6a3b      	ldr	r3, [r7, #32]
 8000806:	2b01      	cmp	r3, #1
 8000808:	d00a      	beq.n	8000820 <main+0xbc>
        __asm volatile
 800080a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800080e:	f383 8811 	msr	BASEPRI, r3
 8000812:	f3bf 8f6f 	isb	sy
 8000816:	f3bf 8f4f 	dsb	sy
 800081a:	617b      	str	r3, [r7, #20]
    }
 800081c:	bf00      	nop
 800081e:	e7fe      	b.n	800081e <main+0xba>

	status = xTaskCreate(print_task, "PRINT", 250, NULL, 2, &print_task_handle);
 8000820:	4b4a      	ldr	r3, [pc, #296]	; (800094c <main+0x1e8>)
 8000822:	9301      	str	r3, [sp, #4]
 8000824:	2302      	movs	r3, #2
 8000826:	9300      	str	r3, [sp, #0]
 8000828:	2300      	movs	r3, #0
 800082a:	22fa      	movs	r2, #250	; 0xfa
 800082c:	4948      	ldr	r1, [pc, #288]	; (8000950 <main+0x1ec>)
 800082e:	4849      	ldr	r0, [pc, #292]	; (8000954 <main+0x1f0>)
 8000830:	f004 fa28 	bl	8004c84 <xTaskCreate>
 8000834:	6238      	str	r0, [r7, #32]
	configASSERT(status == pdPASS);
 8000836:	6a3b      	ldr	r3, [r7, #32]
 8000838:	2b01      	cmp	r3, #1
 800083a:	d00a      	beq.n	8000852 <main+0xee>
        __asm volatile
 800083c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000840:	f383 8811 	msr	BASEPRI, r3
 8000844:	f3bf 8f6f 	isb	sy
 8000848:	f3bf 8f4f 	dsb	sy
 800084c:	613b      	str	r3, [r7, #16]
    }
 800084e:	bf00      	nop
 8000850:	e7fe      	b.n	8000850 <main+0xec>

	status = xTaskCreate(command_handling_task, "COMMAND", 250, NULL, 2, &command_handling_task_handle);
 8000852:	4b41      	ldr	r3, [pc, #260]	; (8000958 <main+0x1f4>)
 8000854:	9301      	str	r3, [sp, #4]
 8000856:	2302      	movs	r3, #2
 8000858:	9300      	str	r3, [sp, #0]
 800085a:	2300      	movs	r3, #0
 800085c:	22fa      	movs	r2, #250	; 0xfa
 800085e:	493f      	ldr	r1, [pc, #252]	; (800095c <main+0x1f8>)
 8000860:	483f      	ldr	r0, [pc, #252]	; (8000960 <main+0x1fc>)
 8000862:	f004 fa0f 	bl	8004c84 <xTaskCreate>
 8000866:	6238      	str	r0, [r7, #32]
	configASSERT(status == pdPASS);
 8000868:	6a3b      	ldr	r3, [r7, #32]
 800086a:	2b01      	cmp	r3, #1
 800086c:	d00a      	beq.n	8000884 <main+0x120>
        __asm volatile
 800086e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000872:	f383 8811 	msr	BASEPRI, r3
 8000876:	f3bf 8f6f 	isb	sy
 800087a:	f3bf 8f4f 	dsb	sy
 800087e:	60fb      	str	r3, [r7, #12]
    }
 8000880:	bf00      	nop
 8000882:	e7fe      	b.n	8000882 <main+0x11e>

	input_data_queue_handle = xQueueCreate(10, sizeof(char));
 8000884:	2200      	movs	r2, #0
 8000886:	2101      	movs	r1, #1
 8000888:	200a      	movs	r0, #10
 800088a:	f003 fcaf 	bl	80041ec <xQueueGenericCreate>
 800088e:	4603      	mov	r3, r0
 8000890:	4a34      	ldr	r2, [pc, #208]	; (8000964 <main+0x200>)
 8000892:	6013      	str	r3, [r2, #0]
	configASSERT(input_data_queue_handle != NULL);
 8000894:	4b33      	ldr	r3, [pc, #204]	; (8000964 <main+0x200>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d10a      	bne.n	80008b2 <main+0x14e>
        __asm volatile
 800089c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008a0:	f383 8811 	msr	BASEPRI, r3
 80008a4:	f3bf 8f6f 	isb	sy
 80008a8:	f3bf 8f4f 	dsb	sy
 80008ac:	60bb      	str	r3, [r7, #8]
    }
 80008ae:	bf00      	nop
 80008b0:	e7fe      	b.n	80008b0 <main+0x14c>
	print_queue_handle = xQueueCreate(10, sizeof(size_t));
 80008b2:	2200      	movs	r2, #0
 80008b4:	2104      	movs	r1, #4
 80008b6:	200a      	movs	r0, #10
 80008b8:	f003 fc98 	bl	80041ec <xQueueGenericCreate>
 80008bc:	4603      	mov	r3, r0
 80008be:	4a2a      	ldr	r2, [pc, #168]	; (8000968 <main+0x204>)
 80008c0:	6013      	str	r3, [r2, #0]
	configASSERT(print_queue_handle != NULL);
 80008c2:	4b29      	ldr	r3, [pc, #164]	; (8000968 <main+0x204>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d10a      	bne.n	80008e0 <main+0x17c>
        __asm volatile
 80008ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008ce:	f383 8811 	msr	BASEPRI, r3
 80008d2:	f3bf 8f6f 	isb	sy
 80008d6:	f3bf 8f4f 	dsb	sy
 80008da:	607b      	str	r3, [r7, #4]
    }
 80008dc:	bf00      	nop
 80008de:	e7fe      	b.n	80008de <main+0x17a>

	// Create software timer for led effect
	for(int i = 0; i < 4; i++)
 80008e0:	2300      	movs	r3, #0
 80008e2:	627b      	str	r3, [r7, #36]	; 0x24
 80008e4:	e013      	b.n	800090e <main+0x1aa>
	{
		handle_led_timer[i] = xTimerCreate("led_timer", pdMS_TO_TICKS(500), pdTRUE, (void*)(i+1), led_effect_callback);
 80008e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e8:	3301      	adds	r3, #1
 80008ea:	461a      	mov	r2, r3
 80008ec:	4b1f      	ldr	r3, [pc, #124]	; (800096c <main+0x208>)
 80008ee:	9300      	str	r3, [sp, #0]
 80008f0:	4613      	mov	r3, r2
 80008f2:	2201      	movs	r2, #1
 80008f4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80008f8:	481d      	ldr	r0, [pc, #116]	; (8000970 <main+0x20c>)
 80008fa:	f005 faa7 	bl	8005e4c <xTimerCreate>
 80008fe:	4602      	mov	r2, r0
 8000900:	491c      	ldr	r1, [pc, #112]	; (8000974 <main+0x210>)
 8000902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000904:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < 4; i++)
 8000908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800090a:	3301      	adds	r3, #1
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
 800090e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000910:	2b03      	cmp	r3, #3
 8000912:	dde8      	ble.n	80008e6 <main+0x182>
	}

	// UART Handle
	HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 8000914:	2201      	movs	r2, #1
 8000916:	4918      	ldr	r1, [pc, #96]	; (8000978 <main+0x214>)
 8000918:	4818      	ldr	r0, [pc, #96]	; (800097c <main+0x218>)
 800091a:	f002 fbb2 	bl	8003082 <HAL_UART_Receive_IT>

  vTaskStartScheduler();
 800091e:	f004 faf7 	bl	8004f10 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000922:	e7fe      	b.n	8000922 <main+0x1be>
 8000924:	e0001000 	.word	0xe0001000
 8000928:	200000a8 	.word	0x200000a8
 800092c:	08006f34 	.word	0x08006f34
 8000930:	0800117d 	.word	0x0800117d
 8000934:	200000ac 	.word	0x200000ac
 8000938:	08006f3c 	.word	0x08006f3c
 800093c:	0800125d 	.word	0x0800125d
 8000940:	200000b0 	.word	0x200000b0
 8000944:	08006f40 	.word	0x08006f40
 8000948:	08001389 	.word	0x08001389
 800094c:	200000b4 	.word	0x200000b4
 8000950:	08006f44 	.word	0x08006f44
 8000954:	08001395 	.word	0x08001395
 8000958:	200000b8 	.word	0x200000b8
 800095c:	08006f4c 	.word	0x08006f4c
 8000960:	080013d5 	.word	0x080013d5
 8000964:	200000bc 	.word	0x200000bc
 8000968:	200000c0 	.word	0x200000c0
 800096c:	08000db5 	.word	0x08000db5
 8000970:	08006f54 	.word	0x08006f54
 8000974:	200000c8 	.word	0x200000c8
 8000978:	200000c4 	.word	0x200000c4
 800097c:	20000064 	.word	0x20000064

08000980 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b094      	sub	sp, #80	; 0x50
 8000984:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000986:	f107 0320 	add.w	r3, r7, #32
 800098a:	2230      	movs	r2, #48	; 0x30
 800098c:	2100      	movs	r1, #0
 800098e:	4618      	mov	r0, r3
 8000990:	f006 fabc 	bl	8006f0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000994:	f107 030c 	add.w	r3, r7, #12
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]
 80009a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a4:	2300      	movs	r3, #0
 80009a6:	60bb      	str	r3, [r7, #8]
 80009a8:	4b29      	ldr	r3, [pc, #164]	; (8000a50 <SystemClock_Config+0xd0>)
 80009aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ac:	4a28      	ldr	r2, [pc, #160]	; (8000a50 <SystemClock_Config+0xd0>)
 80009ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b2:	6413      	str	r3, [r2, #64]	; 0x40
 80009b4:	4b26      	ldr	r3, [pc, #152]	; (8000a50 <SystemClock_Config+0xd0>)
 80009b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009bc:	60bb      	str	r3, [r7, #8]
 80009be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009c0:	2300      	movs	r3, #0
 80009c2:	607b      	str	r3, [r7, #4]
 80009c4:	4b23      	ldr	r3, [pc, #140]	; (8000a54 <SystemClock_Config+0xd4>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a22      	ldr	r2, [pc, #136]	; (8000a54 <SystemClock_Config+0xd4>)
 80009ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ce:	6013      	str	r3, [r2, #0]
 80009d0:	4b20      	ldr	r3, [pc, #128]	; (8000a54 <SystemClock_Config+0xd4>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009d8:	607b      	str	r3, [r7, #4]
 80009da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80009dc:	230a      	movs	r3, #10
 80009de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009e0:	2301      	movs	r3, #1
 80009e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009e4:	2310      	movs	r3, #16
 80009e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80009e8:	2301      	movs	r3, #1
 80009ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ec:	2302      	movs	r3, #2
 80009ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009f0:	2300      	movs	r3, #0
 80009f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009f4:	2308      	movs	r3, #8
 80009f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80009f8:	23a8      	movs	r3, #168	; 0xa8
 80009fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009fc:	2302      	movs	r3, #2
 80009fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a00:	2307      	movs	r3, #7
 8000a02:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a04:	f107 0320 	add.w	r3, r7, #32
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f001 f907 	bl	8001c1c <HAL_RCC_OscConfig>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000a14:	f000 fa52 	bl	8000ebc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a18:	230f      	movs	r3, #15
 8000a1a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a20:	2300      	movs	r3, #0
 8000a22:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a24:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a28:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a2e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a30:	f107 030c 	add.w	r3, r7, #12
 8000a34:	2105      	movs	r1, #5
 8000a36:	4618      	mov	r0, r3
 8000a38:	f001 fb68 	bl	800210c <HAL_RCC_ClockConfig>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000a42:	f000 fa3b 	bl	8000ebc <Error_Handler>
  }
}
 8000a46:	bf00      	nop
 8000a48:	3750      	adds	r7, #80	; 0x50
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40023800 	.word	0x40023800
 8000a54:	40007000 	.word	0x40007000

08000a58 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a5c:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <MX_RTC_Init+0x44>)
 8000a5e:	4a10      	ldr	r2, [pc, #64]	; (8000aa0 <MX_RTC_Init+0x48>)
 8000a60:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000a62:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <MX_RTC_Init+0x44>)
 8000a64:	2240      	movs	r2, #64	; 0x40
 8000a66:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a68:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <MX_RTC_Init+0x44>)
 8000a6a:	227f      	movs	r2, #127	; 0x7f
 8000a6c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a6e:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <MX_RTC_Init+0x44>)
 8000a70:	22ff      	movs	r2, #255	; 0xff
 8000a72:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a74:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <MX_RTC_Init+0x44>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a7a:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <MX_RTC_Init+0x44>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <MX_RTC_Init+0x44>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a86:	4805      	ldr	r0, [pc, #20]	; (8000a9c <MX_RTC_Init+0x44>)
 8000a88:	f001 fe74 	bl	8002774 <HAL_RTC_Init>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000a92:	f000 fa13 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000044 	.word	0x20000044
 8000aa0:	40002800 	.word	0x40002800

08000aa4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000aa8:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <MX_USART2_UART_Init+0x4c>)
 8000aaa:	4a12      	ldr	r2, [pc, #72]	; (8000af4 <MX_USART2_UART_Init+0x50>)
 8000aac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000aae:	4b10      	ldr	r3, [pc, #64]	; (8000af0 <MX_USART2_UART_Init+0x4c>)
 8000ab0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ab4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <MX_USART2_UART_Init+0x4c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000abc:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <MX_USART2_UART_Init+0x4c>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ac2:	4b0b      	ldr	r3, [pc, #44]	; (8000af0 <MX_USART2_UART_Init+0x4c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ac8:	4b09      	ldr	r3, [pc, #36]	; (8000af0 <MX_USART2_UART_Init+0x4c>)
 8000aca:	220c      	movs	r2, #12
 8000acc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ace:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <MX_USART2_UART_Init+0x4c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad4:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <MX_USART2_UART_Init+0x4c>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ada:	4805      	ldr	r0, [pc, #20]	; (8000af0 <MX_USART2_UART_Init+0x4c>)
 8000adc:	f002 f9f2 	bl	8002ec4 <HAL_UART_Init>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ae6:	f000 f9e9 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	20000064 	.word	0x20000064
 8000af4:	40004400 	.word	0x40004400

08000af8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08c      	sub	sp, #48	; 0x30
 8000afc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afe:	f107 031c 	add.w	r3, r7, #28
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	605a      	str	r2, [r3, #4]
 8000b08:	609a      	str	r2, [r3, #8]
 8000b0a:	60da      	str	r2, [r3, #12]
 8000b0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	61bb      	str	r3, [r7, #24]
 8000b12:	4ba2      	ldr	r3, [pc, #648]	; (8000d9c <MX_GPIO_Init+0x2a4>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	4aa1      	ldr	r2, [pc, #644]	; (8000d9c <MX_GPIO_Init+0x2a4>)
 8000b18:	f043 0310 	orr.w	r3, r3, #16
 8000b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1e:	4b9f      	ldr	r3, [pc, #636]	; (8000d9c <MX_GPIO_Init+0x2a4>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	f003 0310 	and.w	r3, r3, #16
 8000b26:	61bb      	str	r3, [r7, #24]
 8000b28:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	617b      	str	r3, [r7, #20]
 8000b2e:	4b9b      	ldr	r3, [pc, #620]	; (8000d9c <MX_GPIO_Init+0x2a4>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a9a      	ldr	r2, [pc, #616]	; (8000d9c <MX_GPIO_Init+0x2a4>)
 8000b34:	f043 0304 	orr.w	r3, r3, #4
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b98      	ldr	r3, [pc, #608]	; (8000d9c <MX_GPIO_Init+0x2a4>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0304 	and.w	r3, r3, #4
 8000b42:	617b      	str	r3, [r7, #20]
 8000b44:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	613b      	str	r3, [r7, #16]
 8000b4a:	4b94      	ldr	r3, [pc, #592]	; (8000d9c <MX_GPIO_Init+0x2a4>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4a93      	ldr	r2, [pc, #588]	; (8000d9c <MX_GPIO_Init+0x2a4>)
 8000b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
 8000b56:	4b91      	ldr	r3, [pc, #580]	; (8000d9c <MX_GPIO_Init+0x2a4>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b5e:	613b      	str	r3, [r7, #16]
 8000b60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	4b8d      	ldr	r3, [pc, #564]	; (8000d9c <MX_GPIO_Init+0x2a4>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a8c      	ldr	r2, [pc, #560]	; (8000d9c <MX_GPIO_Init+0x2a4>)
 8000b6c:	f043 0301 	orr.w	r3, r3, #1
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b8a      	ldr	r3, [pc, #552]	; (8000d9c <MX_GPIO_Init+0x2a4>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60bb      	str	r3, [r7, #8]
 8000b82:	4b86      	ldr	r3, [pc, #536]	; (8000d9c <MX_GPIO_Init+0x2a4>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a85      	ldr	r2, [pc, #532]	; (8000d9c <MX_GPIO_Init+0x2a4>)
 8000b88:	f043 0302 	orr.w	r3, r3, #2
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4b83      	ldr	r3, [pc, #524]	; (8000d9c <MX_GPIO_Init+0x2a4>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f003 0302 	and.w	r3, r3, #2
 8000b96:	60bb      	str	r3, [r7, #8]
 8000b98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	607b      	str	r3, [r7, #4]
 8000b9e:	4b7f      	ldr	r3, [pc, #508]	; (8000d9c <MX_GPIO_Init+0x2a4>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	4a7e      	ldr	r2, [pc, #504]	; (8000d9c <MX_GPIO_Init+0x2a4>)
 8000ba4:	f043 0308 	orr.w	r3, r3, #8
 8000ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8000baa:	4b7c      	ldr	r3, [pc, #496]	; (8000d9c <MX_GPIO_Init+0x2a4>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	f003 0308 	and.w	r3, r3, #8
 8000bb2:	607b      	str	r3, [r7, #4]
 8000bb4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2108      	movs	r1, #8
 8000bba:	4879      	ldr	r0, [pc, #484]	; (8000da0 <MX_GPIO_Init+0x2a8>)
 8000bbc:	f001 f814 	bl	8001be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	2101      	movs	r1, #1
 8000bc4:	4877      	ldr	r0, [pc, #476]	; (8000da4 <MX_GPIO_Init+0x2ac>)
 8000bc6:	f001 f80f 	bl	8001be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000bca:	2200      	movs	r2, #0
 8000bcc:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000bd0:	4875      	ldr	r0, [pc, #468]	; (8000da8 <MX_GPIO_Init+0x2b0>)
 8000bd2:	f001 f809 	bl	8001be8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000bd6:	2308      	movs	r3, #8
 8000bd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be2:	2300      	movs	r3, #0
 8000be4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000be6:	f107 031c 	add.w	r3, r7, #28
 8000bea:	4619      	mov	r1, r3
 8000bec:	486c      	ldr	r0, [pc, #432]	; (8000da0 <MX_GPIO_Init+0x2a8>)
 8000bee:	f000 fe5f 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c02:	f107 031c 	add.w	r3, r7, #28
 8000c06:	4619      	mov	r1, r3
 8000c08:	4866      	ldr	r0, [pc, #408]	; (8000da4 <MX_GPIO_Init+0x2ac>)
 8000c0a:	f000 fe51 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000c0e:	2308      	movs	r3, #8
 8000c10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c12:	2302      	movs	r3, #2
 8000c14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c1e:	2305      	movs	r3, #5
 8000c20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000c22:	f107 031c 	add.w	r3, r7, #28
 8000c26:	4619      	mov	r1, r3
 8000c28:	485e      	ldr	r0, [pc, #376]	; (8000da4 <MX_GPIO_Init+0x2ac>)
 8000c2a:	f000 fe41 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c32:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c3c:	f107 031c 	add.w	r3, r7, #28
 8000c40:	4619      	mov	r1, r3
 8000c42:	485a      	ldr	r0, [pc, #360]	; (8000dac <MX_GPIO_Init+0x2b4>)
 8000c44:	f000 fe34 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000c48:	2310      	movs	r3, #16
 8000c4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c54:	2300      	movs	r3, #0
 8000c56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c58:	2306      	movs	r3, #6
 8000c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000c5c:	f107 031c 	add.w	r3, r7, #28
 8000c60:	4619      	mov	r1, r3
 8000c62:	4852      	ldr	r0, [pc, #328]	; (8000dac <MX_GPIO_Init+0x2b4>)
 8000c64:	f000 fe24 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c68:	23e0      	movs	r3, #224	; 0xe0
 8000c6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c74:	2300      	movs	r3, #0
 8000c76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c78:	2305      	movs	r3, #5
 8000c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7c:	f107 031c 	add.w	r3, r7, #28
 8000c80:	4619      	mov	r1, r3
 8000c82:	484a      	ldr	r0, [pc, #296]	; (8000dac <MX_GPIO_Init+0x2b4>)
 8000c84:	f000 fe14 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000c88:	2304      	movs	r3, #4
 8000c8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000c94:	f107 031c 	add.w	r3, r7, #28
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4845      	ldr	r0, [pc, #276]	; (8000db0 <MX_GPIO_Init+0x2b8>)
 8000c9c:	f000 fe08 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000ca0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ca4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cb2:	2305      	movs	r3, #5
 8000cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000cb6:	f107 031c 	add.w	r3, r7, #28
 8000cba:	4619      	mov	r1, r3
 8000cbc:	483c      	ldr	r0, [pc, #240]	; (8000db0 <MX_GPIO_Init+0x2b8>)
 8000cbe:	f000 fdf7 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000cc2:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000cc6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cd4:	f107 031c 	add.w	r3, r7, #28
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4833      	ldr	r0, [pc, #204]	; (8000da8 <MX_GPIO_Init+0x2b0>)
 8000cdc:	f000 fde8 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000ce0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000ce4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cf2:	2306      	movs	r3, #6
 8000cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cf6:	f107 031c 	add.w	r3, r7, #28
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4829      	ldr	r0, [pc, #164]	; (8000da4 <MX_GPIO_Init+0x2ac>)
 8000cfe:	f000 fdd7 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000d02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000d10:	f107 031c 	add.w	r3, r7, #28
 8000d14:	4619      	mov	r1, r3
 8000d16:	4825      	ldr	r0, [pc, #148]	; (8000dac <MX_GPIO_Init+0x2b4>)
 8000d18:	f000 fdca 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000d1c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000d20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d22:	2302      	movs	r3, #2
 8000d24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d2e:	230a      	movs	r3, #10
 8000d30:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d32:	f107 031c 	add.w	r3, r7, #28
 8000d36:	4619      	mov	r1, r3
 8000d38:	481c      	ldr	r0, [pc, #112]	; (8000dac <MX_GPIO_Init+0x2b4>)
 8000d3a:	f000 fdb9 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000d3e:	2320      	movs	r3, #32
 8000d40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d42:	2300      	movs	r3, #0
 8000d44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d4a:	f107 031c 	add.w	r3, r7, #28
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4815      	ldr	r0, [pc, #84]	; (8000da8 <MX_GPIO_Init+0x2b0>)
 8000d52:	f000 fdad 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000d56:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000d5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d5c:	2312      	movs	r3, #18
 8000d5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d64:	2300      	movs	r3, #0
 8000d66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d68:	2304      	movs	r3, #4
 8000d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6c:	f107 031c 	add.w	r3, r7, #28
 8000d70:	4619      	mov	r1, r3
 8000d72:	480f      	ldr	r0, [pc, #60]	; (8000db0 <MX_GPIO_Init+0x2b8>)
 8000d74:	f000 fd9c 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d7c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000d80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000d86:	f107 031c 	add.w	r3, r7, #28
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4804      	ldr	r0, [pc, #16]	; (8000da0 <MX_GPIO_Init+0x2a8>)
 8000d8e:	f000 fd8f 	bl	80018b0 <HAL_GPIO_Init>

}
 8000d92:	bf00      	nop
 8000d94:	3730      	adds	r7, #48	; 0x30
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40023800 	.word	0x40023800
 8000da0:	40021000 	.word	0x40021000
 8000da4:	40020800 	.word	0x40020800
 8000da8:	40020c00 	.word	0x40020c00
 8000dac:	40020000 	.word	0x40020000
 8000db0:	40020400 	.word	0x40020400

08000db4 <led_effect_callback>:

/* USER CODE BEGIN 4 */
void led_effect_callback(TimerHandle_t xTimer)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
	int id;
	id = (uint32_t) pvTimerGetTimerID(xTimer);
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f005 fb81 	bl	80064c4 <pvTimerGetTimerID>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	60fb      	str	r3, [r7, #12]

	switch(id)
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	3b01      	subs	r3, #1
 8000dca:	2b03      	cmp	r3, #3
 8000dcc:	d816      	bhi.n	8000dfc <led_effect_callback+0x48>
 8000dce:	a201      	add	r2, pc, #4	; (adr r2, 8000dd4 <led_effect_callback+0x20>)
 8000dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dd4:	08000de5 	.word	0x08000de5
 8000dd8:	08000deb 	.word	0x08000deb
 8000ddc:	08000df1 	.word	0x08000df1
 8000de0:	08000df7 	.word	0x08000df7
	{
		case 1:
			LED_effect1();
 8000de4:	f7ff fc00 	bl	80005e8 <LED_effect1>
			break;
 8000de8:	e008      	b.n	8000dfc <led_effect_callback+0x48>
		case 2:
			LED_effect2();
 8000dea:	f7ff fc4f 	bl	800068c <LED_effect2>
			break;
 8000dee:	e005      	b.n	8000dfc <led_effect_callback+0x48>
		case 3:
			LED_effect3();
 8000df0:	f7ff fc88 	bl	8000704 <LED_effect3>
			break;
 8000df4:	e002      	b.n	8000dfc <led_effect_callback+0x48>
		case 4:
			LED_effect4();
 8000df6:	f7ff fc9d 	bl	8000734 <LED_effect4>
	}
}
 8000dfa:	e7ff      	b.n	8000dfc <led_effect_callback+0x48>
 8000dfc:	bf00      	nop
 8000dfe:	3710      	adds	r7, #16
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b086      	sub	sp, #24
 8000e08:	af02      	add	r7, sp, #8
 8000e0a:	6078      	str	r0, [r7, #4]
	if(xQueueIsQueueFullFromISR(input_data_queue_handle) == pdFALSE) // check if the queue is full
 8000e0c:	4b1e      	ldr	r3, [pc, #120]	; (8000e88 <HAL_UART_RxCpltCallback+0x84>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4618      	mov	r0, r3
 8000e12:	f003 feb2 	bl	8004b7a <xQueueIsQueueFullFromISR>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d107      	bne.n	8000e2c <HAL_UART_RxCpltCallback+0x28>
	{
		// if Queue is not full -> enqueue the data
		xQueueSendFromISR(input_data_queue_handle, (void*)&user_data, NULL);
 8000e1c:	4b1a      	ldr	r3, [pc, #104]	; (8000e88 <HAL_UART_RxCpltCallback+0x84>)
 8000e1e:	6818      	ldr	r0, [r3, #0]
 8000e20:	2300      	movs	r3, #0
 8000e22:	2200      	movs	r2, #0
 8000e24:	4919      	ldr	r1, [pc, #100]	; (8000e8c <HAL_UART_RxCpltCallback+0x88>)
 8000e26:	f003 fb61 	bl	80044ec <xQueueGenericSendFromISR>
 8000e2a:	e013      	b.n	8000e54 <HAL_UART_RxCpltCallback+0x50>
	}
	else
	{
		// Queue is full
		if(user_data == '\n') // Check if the inserted data is ENTER (\n)
 8000e2c:	4b17      	ldr	r3, [pc, #92]	; (8000e8c <HAL_UART_RxCpltCallback+0x88>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	2b0a      	cmp	r3, #10
 8000e34:	d10e      	bne.n	8000e54 <HAL_UART_RxCpltCallback+0x50>
		{
			uint8_t dummy;
			// if the data is \n -> make sure the last byte of the queue is '\n'
			xQueueReceiveFromISR(input_data_queue_handle, (void*)&dummy, NULL);
 8000e36:	4b14      	ldr	r3, [pc, #80]	; (8000e88 <HAL_UART_RxCpltCallback+0x84>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f107 010f 	add.w	r1, r7, #15
 8000e3e:	2200      	movs	r2, #0
 8000e40:	4618      	mov	r0, r3
 8000e42:	f003 fcdd 	bl	8004800 <xQueueReceiveFromISR>
			xQueueSendFromISR(input_data_queue_handle, (void*)&user_data, NULL);
 8000e46:	4b10      	ldr	r3, [pc, #64]	; (8000e88 <HAL_UART_RxCpltCallback+0x84>)
 8000e48:	6818      	ldr	r0, [r3, #0]
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	490f      	ldr	r1, [pc, #60]	; (8000e8c <HAL_UART_RxCpltCallback+0x88>)
 8000e50:	f003 fb4c 	bl	80044ec <xQueueGenericSendFromISR>
		}
	}
	// Send notification to command handling task if user data is \n
	if(user_data == '\n')
 8000e54:	4b0d      	ldr	r3, [pc, #52]	; (8000e8c <HAL_UART_RxCpltCallback+0x88>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	2b0a      	cmp	r3, #10
 8000e5c:	d10a      	bne.n	8000e74 <HAL_UART_RxCpltCallback+0x70>
	{
		xTaskNotifyFromISR(command_handling_task_handle, 0, eNoAction, NULL);
 8000e5e:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <HAL_UART_RxCpltCallback+0x8c>)
 8000e60:	6818      	ldr	r0, [r3, #0]
 8000e62:	2300      	movs	r3, #0
 8000e64:	9301      	str	r3, [sp, #4]
 8000e66:	2300      	movs	r3, #0
 8000e68:	9300      	str	r3, [sp, #0]
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	2100      	movs	r1, #0
 8000e70:	f004 fe52 	bl	8005b18 <xTaskGenericNotifyFromISR>
	}

	// Enable UART data byte reception again in IT mode
	HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 8000e74:	2201      	movs	r2, #1
 8000e76:	4905      	ldr	r1, [pc, #20]	; (8000e8c <HAL_UART_RxCpltCallback+0x88>)
 8000e78:	4806      	ldr	r0, [pc, #24]	; (8000e94 <HAL_UART_RxCpltCallback+0x90>)
 8000e7a:	f002 f902 	bl	8003082 <HAL_UART_Receive_IT>
}
 8000e7e:	bf00      	nop
 8000e80:	3710      	adds	r7, #16
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	200000bc 	.word	0x200000bc
 8000e8c:	200000c4 	.word	0x200000c4
 8000e90:	200000b8 	.word	0x200000b8
 8000e94:	20000064 	.word	0x20000064

08000e98 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a04      	ldr	r2, [pc, #16]	; (8000eb8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d101      	bne.n	8000eae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000eaa:	f000 fb6d 	bl	8001588 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40001000 	.word	0x40001000

08000ebc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ec0:	b672      	cpsid	i
}
 8000ec2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ec4:	e7fe      	b.n	8000ec4 <Error_Handler+0x8>
	...

08000ec8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	607b      	str	r3, [r7, #4]
 8000ed2:	4b10      	ldr	r3, [pc, #64]	; (8000f14 <HAL_MspInit+0x4c>)
 8000ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed6:	4a0f      	ldr	r2, [pc, #60]	; (8000f14 <HAL_MspInit+0x4c>)
 8000ed8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000edc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ede:	4b0d      	ldr	r3, [pc, #52]	; (8000f14 <HAL_MspInit+0x4c>)
 8000ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ee6:	607b      	str	r3, [r7, #4]
 8000ee8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	603b      	str	r3, [r7, #0]
 8000eee:	4b09      	ldr	r3, [pc, #36]	; (8000f14 <HAL_MspInit+0x4c>)
 8000ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef2:	4a08      	ldr	r2, [pc, #32]	; (8000f14 <HAL_MspInit+0x4c>)
 8000ef4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef8:	6413      	str	r3, [r2, #64]	; 0x40
 8000efa:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <HAL_MspInit+0x4c>)
 8000efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f02:	603b      	str	r3, [r7, #0]
 8000f04:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000f06:	f005 fc2f 	bl	8006768 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40023800 	.word	0x40023800

08000f18 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f20:	f107 0308 	add.w	r3, r7, #8
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a0c      	ldr	r2, [pc, #48]	; (8000f64 <HAL_RTC_MspInit+0x4c>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d111      	bne.n	8000f5c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000f3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f40:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f42:	f107 0308 	add.w	r3, r7, #8
 8000f46:	4618      	mov	r0, r3
 8000f48:	f001 fb32 	bl	80025b0 <HAL_RCCEx_PeriphCLKConfig>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000f52:	f7ff ffb3 	bl	8000ebc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000f56:	4b04      	ldr	r3, [pc, #16]	; (8000f68 <HAL_RTC_MspInit+0x50>)
 8000f58:	2201      	movs	r2, #1
 8000f5a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000f5c:	bf00      	nop
 8000f5e:	3718      	adds	r7, #24
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40002800 	.word	0x40002800
 8000f68:	42470e3c 	.word	0x42470e3c

08000f6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08a      	sub	sp, #40	; 0x28
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f74:	f107 0314 	add.w	r3, r7, #20
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
 8000f82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a1d      	ldr	r2, [pc, #116]	; (8001000 <HAL_UART_MspInit+0x94>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d133      	bne.n	8000ff6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	613b      	str	r3, [r7, #16]
 8000f92:	4b1c      	ldr	r3, [pc, #112]	; (8001004 <HAL_UART_MspInit+0x98>)
 8000f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f96:	4a1b      	ldr	r2, [pc, #108]	; (8001004 <HAL_UART_MspInit+0x98>)
 8000f98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f9e:	4b19      	ldr	r3, [pc, #100]	; (8001004 <HAL_UART_MspInit+0x98>)
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa6:	613b      	str	r3, [r7, #16]
 8000fa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	4b15      	ldr	r3, [pc, #84]	; (8001004 <HAL_UART_MspInit+0x98>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a14      	ldr	r2, [pc, #80]	; (8001004 <HAL_UART_MspInit+0x98>)
 8000fb4:	f043 0301 	orr.w	r3, r3, #1
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fba:	4b12      	ldr	r3, [pc, #72]	; (8001004 <HAL_UART_MspInit+0x98>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000fc6:	230c      	movs	r3, #12
 8000fc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fd6:	2307      	movs	r3, #7
 8000fd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fda:	f107 0314 	add.w	r3, r7, #20
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4809      	ldr	r0, [pc, #36]	; (8001008 <HAL_UART_MspInit+0x9c>)
 8000fe2:	f000 fc65 	bl	80018b0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	2106      	movs	r1, #6
 8000fea:	2026      	movs	r0, #38	; 0x26
 8000fec:	f000 fba4 	bl	8001738 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ff0:	2026      	movs	r0, #38	; 0x26
 8000ff2:	f000 fbbd 	bl	8001770 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ff6:	bf00      	nop
 8000ff8:	3728      	adds	r7, #40	; 0x28
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40004400 	.word	0x40004400
 8001004:	40023800 	.word	0x40023800
 8001008:	40020000 	.word	0x40020000

0800100c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b08e      	sub	sp, #56	; 0x38
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001014:	2300      	movs	r3, #0
 8001016:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001018:	2300      	movs	r3, #0
 800101a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800101c:	2300      	movs	r3, #0
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	4b33      	ldr	r3, [pc, #204]	; (80010f0 <HAL_InitTick+0xe4>)
 8001022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001024:	4a32      	ldr	r2, [pc, #200]	; (80010f0 <HAL_InitTick+0xe4>)
 8001026:	f043 0310 	orr.w	r3, r3, #16
 800102a:	6413      	str	r3, [r2, #64]	; 0x40
 800102c:	4b30      	ldr	r3, [pc, #192]	; (80010f0 <HAL_InitTick+0xe4>)
 800102e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001030:	f003 0310 	and.w	r3, r3, #16
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001038:	f107 0210 	add.w	r2, r7, #16
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	4611      	mov	r1, r2
 8001042:	4618      	mov	r0, r3
 8001044:	f001 fa82 	bl	800254c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001048:	6a3b      	ldr	r3, [r7, #32]
 800104a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800104c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800104e:	2b00      	cmp	r3, #0
 8001050:	d103      	bne.n	800105a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001052:	f001 fa53 	bl	80024fc <HAL_RCC_GetPCLK1Freq>
 8001056:	6378      	str	r0, [r7, #52]	; 0x34
 8001058:	e004      	b.n	8001064 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800105a:	f001 fa4f 	bl	80024fc <HAL_RCC_GetPCLK1Freq>
 800105e:	4603      	mov	r3, r0
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001066:	4a23      	ldr	r2, [pc, #140]	; (80010f4 <HAL_InitTick+0xe8>)
 8001068:	fba2 2303 	umull	r2, r3, r2, r3
 800106c:	0c9b      	lsrs	r3, r3, #18
 800106e:	3b01      	subs	r3, #1
 8001070:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001072:	4b21      	ldr	r3, [pc, #132]	; (80010f8 <HAL_InitTick+0xec>)
 8001074:	4a21      	ldr	r2, [pc, #132]	; (80010fc <HAL_InitTick+0xf0>)
 8001076:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001078:	4b1f      	ldr	r3, [pc, #124]	; (80010f8 <HAL_InitTick+0xec>)
 800107a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800107e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001080:	4a1d      	ldr	r2, [pc, #116]	; (80010f8 <HAL_InitTick+0xec>)
 8001082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001084:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001086:	4b1c      	ldr	r3, [pc, #112]	; (80010f8 <HAL_InitTick+0xec>)
 8001088:	2200      	movs	r2, #0
 800108a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800108c:	4b1a      	ldr	r3, [pc, #104]	; (80010f8 <HAL_InitTick+0xec>)
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001092:	4b19      	ldr	r3, [pc, #100]	; (80010f8 <HAL_InitTick+0xec>)
 8001094:	2200      	movs	r2, #0
 8001096:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001098:	4817      	ldr	r0, [pc, #92]	; (80010f8 <HAL_InitTick+0xec>)
 800109a:	f001 fc65 	bl	8002968 <HAL_TIM_Base_Init>
 800109e:	4603      	mov	r3, r0
 80010a0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80010a4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d11b      	bne.n	80010e4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80010ac:	4812      	ldr	r0, [pc, #72]	; (80010f8 <HAL_InitTick+0xec>)
 80010ae:	f001 fcb5 	bl	8002a1c <HAL_TIM_Base_Start_IT>
 80010b2:	4603      	mov	r3, r0
 80010b4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80010b8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d111      	bne.n	80010e4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80010c0:	2036      	movs	r0, #54	; 0x36
 80010c2:	f000 fb55 	bl	8001770 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2b0f      	cmp	r3, #15
 80010ca:	d808      	bhi.n	80010de <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80010cc:	2200      	movs	r2, #0
 80010ce:	6879      	ldr	r1, [r7, #4]
 80010d0:	2036      	movs	r0, #54	; 0x36
 80010d2:	f000 fb31 	bl	8001738 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010d6:	4a0a      	ldr	r2, [pc, #40]	; (8001100 <HAL_InitTick+0xf4>)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6013      	str	r3, [r2, #0]
 80010dc:	e002      	b.n	80010e4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80010e4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3738      	adds	r7, #56	; 0x38
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40023800 	.word	0x40023800
 80010f4:	431bde83 	.word	0x431bde83
 80010f8:	200000d8 	.word	0x200000d8
 80010fc:	40001000 	.word	0x40001000
 8001100:	20000010 	.word	0x20000010

08001104 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001108:	e7fe      	b.n	8001108 <NMI_Handler+0x4>

0800110a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800110a:	b480      	push	{r7}
 800110c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800110e:	e7fe      	b.n	800110e <HardFault_Handler+0x4>

08001110 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001114:	e7fe      	b.n	8001114 <MemManage_Handler+0x4>

08001116 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001116:	b480      	push	{r7}
 8001118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800111a:	e7fe      	b.n	800111a <BusFault_Handler+0x4>

0800111c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001120:	e7fe      	b.n	8001120 <UsageFault_Handler+0x4>

08001122 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001122:	b480      	push	{r7}
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001126:	bf00      	nop
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001134:	4802      	ldr	r0, [pc, #8]	; (8001140 <USART2_IRQHandler+0x10>)
 8001136:	f001 ffd5 	bl	80030e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20000064 	.word	0x20000064

08001144 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001148:	4802      	ldr	r0, [pc, #8]	; (8001154 <TIM6_DAC_IRQHandler+0x10>)
 800114a:	f001 fcd7 	bl	8002afc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	200000d8 	.word	0x200000d8

08001158 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800115c:	4b06      	ldr	r3, [pc, #24]	; (8001178 <SystemInit+0x20>)
 800115e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001162:	4a05      	ldr	r2, [pc, #20]	; (8001178 <SystemInit+0x20>)
 8001164:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001168:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <menu_task>:
void process_command(command_t *cmd);

const char *msg_inv = "////Invalid option////\n";

void menu_task(void* parameters)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b088      	sub	sp, #32
 8001180:	af02      	add	r7, sp, #8
 8001182:	6078      	str	r0, [r7, #4]
	uint32_t cmd_addr;
	command_t *cmd;
	uint8_t option;
	const char* msg_menu = "===================\n"
 8001184:	4b2f      	ldr	r3, [pc, #188]	; (8001244 <menu_task+0xc8>)
 8001186:	60bb      	str	r3, [r7, #8]
													"Date and time      ---> 1 \n"
													"Exit               ---> 2 \n"
													"Enter your choice here:   \n";
	while(1)
	{
		xQueueSend(print_queue_handle, &msg_menu, portMAX_DELAY);
 8001188:	4b2f      	ldr	r3, [pc, #188]	; (8001248 <menu_task+0xcc>)
 800118a:	6818      	ldr	r0, [r3, #0]
 800118c:	f107 0108 	add.w	r1, r7, #8
 8001190:	2300      	movs	r3, #0
 8001192:	f04f 32ff 	mov.w	r2, #4294967295
 8001196:	f003 f8ab 	bl	80042f0 <xQueueGenericSend>
		// wait for menu commands
		xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
 800119a:	f107 030c 	add.w	r3, r7, #12
 800119e:	f04f 32ff 	mov.w	r2, #4294967295
 80011a2:	9200      	str	r2, [sp, #0]
 80011a4:	2200      	movs	r2, #0
 80011a6:	2100      	movs	r1, #0
 80011a8:	2000      	movs	r0, #0
 80011aa:	f004 fb55 	bl	8005858 <xTaskGenericNotifyWait>
		cmd = (command_t*)cmd_addr;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	617b      	str	r3, [r7, #20]
		if(cmd->len == 1)
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	68db      	ldr	r3, [r3, #12]
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d130      	bne.n	800121c <menu_task+0xa0>
		{
			option = cmd->payload[0] - 48; // convert ascii to number by subtracting to 48
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	3b30      	subs	r3, #48	; 0x30
 80011c0:	74fb      	strb	r3, [r7, #19]
			switch(option)
 80011c2:	7cfb      	ldrb	r3, [r7, #19]
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d032      	beq.n	800122e <menu_task+0xb2>
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	dc1e      	bgt.n	800120a <menu_task+0x8e>
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d002      	beq.n	80011d6 <menu_task+0x5a>
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d00d      	beq.n	80011f0 <menu_task+0x74>
 80011d4:	e019      	b.n	800120a <menu_task+0x8e>
			{
			case 0:
				curr_state = sLedEffect;
 80011d6:	4b1d      	ldr	r3, [pc, #116]	; (800124c <menu_task+0xd0>)
 80011d8:	2201      	movs	r2, #1
 80011da:	701a      	strb	r2, [r3, #0]
				xTaskNotify(led_task_handle, 0, eNoAction);
 80011dc:	4b1c      	ldr	r3, [pc, #112]	; (8001250 <menu_task+0xd4>)
 80011de:	6818      	ldr	r0, [r3, #0]
 80011e0:	2300      	movs	r3, #0
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	2300      	movs	r3, #0
 80011e6:	2200      	movs	r2, #0
 80011e8:	2100      	movs	r1, #0
 80011ea:	f004 fbb5 	bl	8005958 <xTaskGenericNotify>
				break;
 80011ee:	e01f      	b.n	8001230 <menu_task+0xb4>
			case 1:
				curr_state = sRtcMenu;
 80011f0:	4b16      	ldr	r3, [pc, #88]	; (800124c <menu_task+0xd0>)
 80011f2:	2202      	movs	r2, #2
 80011f4:	701a      	strb	r2, [r3, #0]
				xTaskNotify(rtc_task_handle, 0, eNoAction);
 80011f6:	4b17      	ldr	r3, [pc, #92]	; (8001254 <menu_task+0xd8>)
 80011f8:	6818      	ldr	r0, [r3, #0]
 80011fa:	2300      	movs	r3, #0
 80011fc:	9300      	str	r3, [sp, #0]
 80011fe:	2300      	movs	r3, #0
 8001200:	2200      	movs	r2, #0
 8001202:	2100      	movs	r1, #0
 8001204:	f004 fba8 	bl	8005958 <xTaskGenericNotify>
				break;
 8001208:	e012      	b.n	8001230 <menu_task+0xb4>
			case 2: // Exit option

				break;
			default:
				xQueueSend(print_queue_handle, &msg_inv, portMAX_DELAY);
 800120a:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <menu_task+0xcc>)
 800120c:	6818      	ldr	r0, [r3, #0]
 800120e:	2300      	movs	r3, #0
 8001210:	f04f 32ff 	mov.w	r2, #4294967295
 8001214:	4910      	ldr	r1, [pc, #64]	; (8001258 <menu_task+0xdc>)
 8001216:	f003 f86b 	bl	80042f0 <xQueueGenericSend>
				continue;
 800121a:	e012      	b.n	8001242 <menu_task+0xc6>
			}
		}
		else
		{
			// invalid entry
			xQueueSend(print_queue_handle, &msg_inv, portMAX_DELAY);
 800121c:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <menu_task+0xcc>)
 800121e:	6818      	ldr	r0, [r3, #0]
 8001220:	2300      	movs	r3, #0
 8001222:	f04f 32ff 	mov.w	r2, #4294967295
 8001226:	490c      	ldr	r1, [pc, #48]	; (8001258 <menu_task+0xdc>)
 8001228:	f003 f862 	bl	80042f0 <xQueueGenericSend>
 800122c:	e000      	b.n	8001230 <menu_task+0xb4>
				break;
 800122e:	bf00      	nop
		}
		// wait to run again when some other task notifies
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001230:	f04f 33ff 	mov.w	r3, #4294967295
 8001234:	9300      	str	r3, [sp, #0]
 8001236:	2300      	movs	r3, #0
 8001238:	2200      	movs	r2, #0
 800123a:	2100      	movs	r1, #0
 800123c:	2000      	movs	r0, #0
 800123e:	f004 fb0b 	bl	8005858 <xTaskGenericNotifyWait>
		xQueueSend(print_queue_handle, &msg_menu, portMAX_DELAY);
 8001242:	e7a1      	b.n	8001188 <menu_task+0xc>
 8001244:	08006f78 	.word	0x08006f78
 8001248:	200000c0 	.word	0x200000c0
 800124c:	200000c5 	.word	0x200000c5
 8001250:	200000ac 	.word	0x200000ac
 8001254:	200000b0 	.word	0x200000b0
 8001258:	2000000c 	.word	0x2000000c

0800125c <led_task>:
	}
}

void led_task(void* parameters)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b088      	sub	sp, #32
 8001260:	af02      	add	r7, sp, #8
 8001262:	6078      	str	r0, [r7, #4]
	uint32_t cmd_addr;
	command_t *cmd;
	const char* msg_led = "===========================\n"
 8001264:	4b3e      	ldr	r3, [pc, #248]	; (8001360 <led_task+0x104>)
 8001266:	60fb      	str	r3, [r7, #12]
												"(none, e1, e2, e3, e4) \n"
												"Enter your choice here:    \n";
	while(1)
	{
		// Wait for notification
		xTaskNotifyWait(0,0,NULL, portMAX_DELAY);
 8001268:	f04f 33ff 	mov.w	r3, #4294967295
 800126c:	9300      	str	r3, [sp, #0]
 800126e:	2300      	movs	r3, #0
 8001270:	2200      	movs	r2, #0
 8001272:	2100      	movs	r1, #0
 8001274:	2000      	movs	r0, #0
 8001276:	f004 faef 	bl	8005858 <xTaskGenericNotifyWait>
		// Print LED Menu
		xQueueSend(print_queue_handle, &msg_led, portMAX_DELAY);
 800127a:	4b3a      	ldr	r3, [pc, #232]	; (8001364 <led_task+0x108>)
 800127c:	6818      	ldr	r0, [r3, #0]
 800127e:	f107 010c 	add.w	r1, r7, #12
 8001282:	2300      	movs	r3, #0
 8001284:	f04f 32ff 	mov.w	r2, #4294967295
 8001288:	f003 f832 	bl	80042f0 <xQueueGenericSend>
		// Wait for LED command
		xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
 800128c:	f107 0310 	add.w	r3, r7, #16
 8001290:	f04f 32ff 	mov.w	r2, #4294967295
 8001294:	9200      	str	r2, [sp, #0]
 8001296:	2200      	movs	r2, #0
 8001298:	2100      	movs	r1, #0
 800129a:	2000      	movs	r0, #0
 800129c:	f004 fadc 	bl	8005858 <xTaskGenericNotifyWait>
		cmd = (command_t*)cmd_addr;
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	617b      	str	r3, [r7, #20]
		if(cmd->len <= 4)
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	2b04      	cmp	r3, #4
 80012aa:	d843      	bhi.n	8001334 <led_task+0xd8>
		{
			if(! strcmp((char*)cmd->payload, "none"))
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	492e      	ldr	r1, [pc, #184]	; (8001368 <led_task+0x10c>)
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7fe ff8d 	bl	80001d0 <strcmp>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d102      	bne.n	80012c2 <led_task+0x66>
				led_effect_stop();
 80012bc:	f7ff f91c 	bl	80004f8 <led_effect_stop>
 80012c0:	e040      	b.n	8001344 <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload, "e1"))
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	4929      	ldr	r1, [pc, #164]	; (800136c <led_task+0x110>)
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7fe ff82 	bl	80001d0 <strcmp>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d103      	bne.n	80012da <led_task+0x7e>
				led_effect(1);
 80012d2:	2001      	movs	r0, #1
 80012d4:	f7ff f930 	bl	8000538 <led_effect>
 80012d8:	e034      	b.n	8001344 <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload, "e2"))
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	4924      	ldr	r1, [pc, #144]	; (8001370 <led_task+0x114>)
 80012de:	4618      	mov	r0, r3
 80012e0:	f7fe ff76 	bl	80001d0 <strcmp>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d103      	bne.n	80012f2 <led_task+0x96>
				led_effect(2);
 80012ea:	2002      	movs	r0, #2
 80012ec:	f7ff f924 	bl	8000538 <led_effect>
 80012f0:	e028      	b.n	8001344 <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload, "e3"))
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	491f      	ldr	r1, [pc, #124]	; (8001374 <led_task+0x118>)
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7fe ff6a 	bl	80001d0 <strcmp>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d103      	bne.n	800130a <led_task+0xae>
				led_effect(3);
 8001302:	2003      	movs	r0, #3
 8001304:	f7ff f918 	bl	8000538 <led_effect>
 8001308:	e01c      	b.n	8001344 <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload, "e4"))
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	491a      	ldr	r1, [pc, #104]	; (8001378 <led_task+0x11c>)
 800130e:	4618      	mov	r0, r3
 8001310:	f7fe ff5e 	bl	80001d0 <strcmp>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d103      	bne.n	8001322 <led_task+0xc6>
				led_effect(4);
 800131a:	2004      	movs	r0, #4
 800131c:	f7ff f90c 	bl	8000538 <led_effect>
 8001320:	e010      	b.n	8001344 <led_task+0xe8>
			else
				// Print invalid message
				xQueueSend(print_queue_handle, &msg_inv, portMAX_DELAY);
 8001322:	4b10      	ldr	r3, [pc, #64]	; (8001364 <led_task+0x108>)
 8001324:	6818      	ldr	r0, [r3, #0]
 8001326:	2300      	movs	r3, #0
 8001328:	f04f 32ff 	mov.w	r2, #4294967295
 800132c:	4913      	ldr	r1, [pc, #76]	; (800137c <led_task+0x120>)
 800132e:	f002 ffdf 	bl	80042f0 <xQueueGenericSend>
 8001332:	e007      	b.n	8001344 <led_task+0xe8>
		}
		else
			//print invalid message
			xQueueSend(print_queue_handle, &msg_inv, portMAX_DELAY);
 8001334:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <led_task+0x108>)
 8001336:	6818      	ldr	r0, [r3, #0]
 8001338:	2300      	movs	r3, #0
 800133a:	f04f 32ff 	mov.w	r2, #4294967295
 800133e:	490f      	ldr	r1, [pc, #60]	; (800137c <led_task+0x120>)
 8001340:	f002 ffd6 	bl	80042f0 <xQueueGenericSend>

		curr_state = sMainMenu;
 8001344:	4b0e      	ldr	r3, [pc, #56]	; (8001380 <led_task+0x124>)
 8001346:	2200      	movs	r2, #0
 8001348:	701a      	strb	r2, [r3, #0]

		xTaskNotify(menu_task_handle,0,eNoAction);
 800134a:	4b0e      	ldr	r3, [pc, #56]	; (8001384 <led_task+0x128>)
 800134c:	6818      	ldr	r0, [r3, #0]
 800134e:	2300      	movs	r3, #0
 8001350:	9300      	str	r3, [sp, #0]
 8001352:	2300      	movs	r3, #0
 8001354:	2200      	movs	r2, #0
 8001356:	2100      	movs	r1, #0
 8001358:	f004 fafe 	bl	8005958 <xTaskGenericNotify>
		xTaskNotifyWait(0,0,NULL, portMAX_DELAY);
 800135c:	e784      	b.n	8001268 <led_task+0xc>
 800135e:	bf00      	nop
 8001360:	08007024 	.word	0x08007024
 8001364:	200000c0 	.word	0x200000c0
 8001368:	080070b0 	.word	0x080070b0
 800136c:	080070b8 	.word	0x080070b8
 8001370:	080070bc 	.word	0x080070bc
 8001374:	080070c0 	.word	0x080070c0
 8001378:	080070c4 	.word	0x080070c4
 800137c:	2000000c 	.word	0x2000000c
 8001380:	200000c5 	.word	0x200000c5
 8001384:	200000a8 	.word	0x200000a8

08001388 <rtc_task>:
	}
}

void rtc_task(void* parameters)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
	while(1)
 8001390:	e7fe      	b.n	8001390 <rtc_task+0x8>
	...

08001394 <print_task>:

	}
}

void print_task(void* parameters)
{
 8001394:	b590      	push	{r4, r7, lr}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
	uint32_t *msg;
	while(1)
	{
		xQueueReceive(print_queue_handle, &msg, portMAX_DELAY);
 800139c:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <print_task+0x38>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f107 010c 	add.w	r1, r7, #12
 80013a4:	f04f 32ff 	mov.w	r2, #4294967295
 80013a8:	4618      	mov	r0, r3
 80013aa:	f003 f949 	bl	8004640 <xQueueReceive>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen((char*)msg), HAL_MAX_DELAY);
 80013ae:	68fc      	ldr	r4, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7fe ff16 	bl	80001e4 <strlen>
 80013b8:	4603      	mov	r3, r0
 80013ba:	b29a      	uxth	r2, r3
 80013bc:	f04f 33ff 	mov.w	r3, #4294967295
 80013c0:	4621      	mov	r1, r4
 80013c2:	4803      	ldr	r0, [pc, #12]	; (80013d0 <print_task+0x3c>)
 80013c4:	f001 fdcb 	bl	8002f5e <HAL_UART_Transmit>
		xQueueReceive(print_queue_handle, &msg, portMAX_DELAY);
 80013c8:	e7e8      	b.n	800139c <print_task+0x8>
 80013ca:	bf00      	nop
 80013cc:	200000c0 	.word	0x200000c0
 80013d0:	20000064 	.word	0x20000064

080013d4 <command_handling_task>:
	}
}

void command_handling_task(void* parameters)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08a      	sub	sp, #40	; 0x28
 80013d8:	af02      	add	r7, sp, #8
 80013da:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	command_t cmd;
	while(1)
	{
		// Implement notify wait
		status = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80013dc:	f04f 33ff 	mov.w	r3, #4294967295
 80013e0:	9300      	str	r3, [sp, #0]
 80013e2:	2300      	movs	r3, #0
 80013e4:	2200      	movs	r2, #0
 80013e6:	2100      	movs	r1, #0
 80013e8:	2000      	movs	r0, #0
 80013ea:	f004 fa35 	bl	8005858 <xTaskGenericNotifyWait>
 80013ee:	61f8      	str	r0, [r7, #28]
		if(status == pdTRUE)
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d1f2      	bne.n	80013dc <command_handling_task+0x8>
		{
			// Process the user data (command) stored in input data queue
			process_command(&cmd);
 80013f6:	f107 030c 	add.w	r3, r7, #12
 80013fa:	4618      	mov	r0, r3
 80013fc:	f000 f802 	bl	8001404 <process_command>
		status = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001400:	e7ec      	b.n	80013dc <command_handling_task+0x8>
	...

08001404 <process_command>:
		}
	}
}

void process_command(command_t *cmd)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af02      	add	r7, sp, #8
 800140a:	6078      	str	r0, [r7, #4]
	extract_command(cmd);
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f000 f835 	bl	800147c <extract_command>

	switch(curr_state)
 8001412:	4b16      	ldr	r3, [pc, #88]	; (800146c <process_command+0x68>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	2b05      	cmp	r3, #5
 8001418:	dc24      	bgt.n	8001464 <process_command+0x60>
 800141a:	2b02      	cmp	r3, #2
 800141c:	da18      	bge.n	8001450 <process_command+0x4c>
 800141e:	2b00      	cmp	r3, #0
 8001420:	d002      	beq.n	8001428 <process_command+0x24>
 8001422:	2b01      	cmp	r3, #1
 8001424:	d00a      	beq.n	800143c <process_command+0x38>
		case sRtcReport:
			// Notify task with the command
			xTaskNotify(rtc_task_handle, (uint32_t)cmd, eSetValueWithOverwrite);
			break;
	}
}
 8001426:	e01d      	b.n	8001464 <process_command+0x60>
			xTaskNotify(menu_task_handle, (uint32_t)cmd, eSetValueWithOverwrite);
 8001428:	4b11      	ldr	r3, [pc, #68]	; (8001470 <process_command+0x6c>)
 800142a:	6818      	ldr	r0, [r3, #0]
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	2300      	movs	r3, #0
 8001430:	9300      	str	r3, [sp, #0]
 8001432:	2303      	movs	r3, #3
 8001434:	2100      	movs	r1, #0
 8001436:	f004 fa8f 	bl	8005958 <xTaskGenericNotify>
			break;
 800143a:	e013      	b.n	8001464 <process_command+0x60>
			xTaskNotify(led_task_handle, (uint32_t)cmd, eSetValueWithOverwrite);
 800143c:	4b0d      	ldr	r3, [pc, #52]	; (8001474 <process_command+0x70>)
 800143e:	6818      	ldr	r0, [r3, #0]
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	2300      	movs	r3, #0
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	2303      	movs	r3, #3
 8001448:	2100      	movs	r1, #0
 800144a:	f004 fa85 	bl	8005958 <xTaskGenericNotify>
			break;
 800144e:	e009      	b.n	8001464 <process_command+0x60>
			xTaskNotify(rtc_task_handle, (uint32_t)cmd, eSetValueWithOverwrite);
 8001450:	4b09      	ldr	r3, [pc, #36]	; (8001478 <process_command+0x74>)
 8001452:	6818      	ldr	r0, [r3, #0]
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	2300      	movs	r3, #0
 8001458:	9300      	str	r3, [sp, #0]
 800145a:	2303      	movs	r3, #3
 800145c:	2100      	movs	r1, #0
 800145e:	f004 fa7b 	bl	8005958 <xTaskGenericNotify>
			break;
 8001462:	bf00      	nop
}
 8001464:	bf00      	nop
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	200000c5 	.word	0x200000c5
 8001470:	200000a8 	.word	0x200000a8
 8001474:	200000ac 	.word	0x200000ac
 8001478:	200000b0 	.word	0x200000b0

0800147c <extract_command>:

int extract_command(command_t *cmd)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
	uint8_t item;
	UBaseType_t numberOfMessages;
	BaseType_t status;

	numberOfMessages = uxQueueMessagesWaiting(input_data_queue_handle);
 8001484:	4b19      	ldr	r3, [pc, #100]	; (80014ec <extract_command+0x70>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4618      	mov	r0, r3
 800148a:	f003 fa48 	bl	800491e <uxQueueMessagesWaiting>
 800148e:	6138      	str	r0, [r7, #16]
	if(!numberOfMessages)
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d102      	bne.n	800149c <extract_command+0x20>
		return -1;
 8001496:	f04f 33ff 	mov.w	r3, #4294967295
 800149a:	e022      	b.n	80014e2 <extract_command+0x66>
	uint8_t i = 0;
 800149c:	2300      	movs	r3, #0
 800149e:	75fb      	strb	r3, [r7, #23]

	do
	{
		status = xQueueReceive(input_data_queue_handle, &item, 0);
 80014a0:	4b12      	ldr	r3, [pc, #72]	; (80014ec <extract_command+0x70>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f107 010b 	add.w	r1, r7, #11
 80014a8:	2200      	movs	r2, #0
 80014aa:	4618      	mov	r0, r3
 80014ac:	f003 f8c8 	bl	8004640 <xQueueReceive>
 80014b0:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE)
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d106      	bne.n	80014c6 <extract_command+0x4a>
			cmd->payload[i++] = item;
 80014b8:	7dfb      	ldrb	r3, [r7, #23]
 80014ba:	1c5a      	adds	r2, r3, #1
 80014bc:	75fa      	strb	r2, [r7, #23]
 80014be:	461a      	mov	r2, r3
 80014c0:	7af9      	ldrb	r1, [r7, #11]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	5499      	strb	r1, [r3, r2]
	}while(item != '\n');
 80014c6:	7afb      	ldrb	r3, [r7, #11]
 80014c8:	2b0a      	cmp	r3, #10
 80014ca:	d1e9      	bne.n	80014a0 <extract_command+0x24>

	cmd->payload[i-1] = '\0';
 80014cc:	7dfb      	ldrb	r3, [r7, #23]
 80014ce:	3b01      	subs	r3, #1
 80014d0:	687a      	ldr	r2, [r7, #4]
 80014d2:	2100      	movs	r1, #0
 80014d4:	54d1      	strb	r1, [r2, r3]
	cmd->len = i - 1;
 80014d6:	7dfb      	ldrb	r3, [r7, #23]
 80014d8:	3b01      	subs	r3, #1
 80014da:	461a      	mov	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	60da      	str	r2, [r3, #12]

	return 0;
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3718      	adds	r7, #24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	200000bc 	.word	0x200000bc

080014f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80014f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001528 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014f4:	480d      	ldr	r0, [pc, #52]	; (800152c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014f6:	490e      	ldr	r1, [pc, #56]	; (8001530 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014f8:	4a0e      	ldr	r2, [pc, #56]	; (8001534 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014fc:	e002      	b.n	8001504 <LoopCopyDataInit>

080014fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001500:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001502:	3304      	adds	r3, #4

08001504 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001504:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001506:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001508:	d3f9      	bcc.n	80014fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800150a:	4a0b      	ldr	r2, [pc, #44]	; (8001538 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800150c:	4c0b      	ldr	r4, [pc, #44]	; (800153c <LoopFillZerobss+0x26>)
  movs r3, #0
 800150e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001510:	e001      	b.n	8001516 <LoopFillZerobss>

08001512 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001512:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001514:	3204      	adds	r2, #4

08001516 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001516:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001518:	d3fb      	bcc.n	8001512 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800151a:	f7ff fe1d 	bl	8001158 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800151e:	f005 fcc3 	bl	8006ea8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001522:	f7ff f91f 	bl	8000764 <main>
  bx  lr    
 8001526:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001528:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800152c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001530:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8001534:	08007108 	.word	0x08007108
  ldr r2, =_sbss
 8001538:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 800153c:	20012ecc 	.word	0x20012ecc

08001540 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001540:	e7fe      	b.n	8001540 <ADC_IRQHandler>
	...

08001544 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001548:	4b0e      	ldr	r3, [pc, #56]	; (8001584 <HAL_Init+0x40>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a0d      	ldr	r2, [pc, #52]	; (8001584 <HAL_Init+0x40>)
 800154e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001552:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001554:	4b0b      	ldr	r3, [pc, #44]	; (8001584 <HAL_Init+0x40>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a0a      	ldr	r2, [pc, #40]	; (8001584 <HAL_Init+0x40>)
 800155a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800155e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001560:	4b08      	ldr	r3, [pc, #32]	; (8001584 <HAL_Init+0x40>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a07      	ldr	r2, [pc, #28]	; (8001584 <HAL_Init+0x40>)
 8001566:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800156a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800156c:	2003      	movs	r0, #3
 800156e:	f000 f8d8 	bl	8001722 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001572:	2000      	movs	r0, #0
 8001574:	f7ff fd4a 	bl	800100c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001578:	f7ff fca6 	bl	8000ec8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40023c00 	.word	0x40023c00

08001588 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800158c:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <HAL_IncTick+0x20>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	461a      	mov	r2, r3
 8001592:	4b06      	ldr	r3, [pc, #24]	; (80015ac <HAL_IncTick+0x24>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4413      	add	r3, r2
 8001598:	4a04      	ldr	r2, [pc, #16]	; (80015ac <HAL_IncTick+0x24>)
 800159a:	6013      	str	r3, [r2, #0]
}
 800159c:	bf00      	nop
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	20000014 	.word	0x20000014
 80015ac:	20000120 	.word	0x20000120

080015b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  return uwTick;
 80015b4:	4b03      	ldr	r3, [pc, #12]	; (80015c4 <HAL_GetTick+0x14>)
 80015b6:	681b      	ldr	r3, [r3, #0]
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	20000120 	.word	0x20000120

080015c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f003 0307 	and.w	r3, r3, #7
 80015d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015d8:	4b0c      	ldr	r3, [pc, #48]	; (800160c <__NVIC_SetPriorityGrouping+0x44>)
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015de:	68ba      	ldr	r2, [r7, #8]
 80015e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015e4:	4013      	ands	r3, r2
 80015e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015fa:	4a04      	ldr	r2, [pc, #16]	; (800160c <__NVIC_SetPriorityGrouping+0x44>)
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	60d3      	str	r3, [r2, #12]
}
 8001600:	bf00      	nop
 8001602:	3714      	adds	r7, #20
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	e000ed00 	.word	0xe000ed00

08001610 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001614:	4b04      	ldr	r3, [pc, #16]	; (8001628 <__NVIC_GetPriorityGrouping+0x18>)
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	0a1b      	lsrs	r3, r3, #8
 800161a:	f003 0307 	and.w	r3, r3, #7
}
 800161e:	4618      	mov	r0, r3
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163a:	2b00      	cmp	r3, #0
 800163c:	db0b      	blt.n	8001656 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	f003 021f 	and.w	r2, r3, #31
 8001644:	4907      	ldr	r1, [pc, #28]	; (8001664 <__NVIC_EnableIRQ+0x38>)
 8001646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164a:	095b      	lsrs	r3, r3, #5
 800164c:	2001      	movs	r0, #1
 800164e:	fa00 f202 	lsl.w	r2, r0, r2
 8001652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001656:	bf00      	nop
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	e000e100 	.word	0xe000e100

08001668 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	6039      	str	r1, [r7, #0]
 8001672:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001678:	2b00      	cmp	r3, #0
 800167a:	db0a      	blt.n	8001692 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	b2da      	uxtb	r2, r3
 8001680:	490c      	ldr	r1, [pc, #48]	; (80016b4 <__NVIC_SetPriority+0x4c>)
 8001682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001686:	0112      	lsls	r2, r2, #4
 8001688:	b2d2      	uxtb	r2, r2
 800168a:	440b      	add	r3, r1
 800168c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001690:	e00a      	b.n	80016a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	b2da      	uxtb	r2, r3
 8001696:	4908      	ldr	r1, [pc, #32]	; (80016b8 <__NVIC_SetPriority+0x50>)
 8001698:	79fb      	ldrb	r3, [r7, #7]
 800169a:	f003 030f 	and.w	r3, r3, #15
 800169e:	3b04      	subs	r3, #4
 80016a0:	0112      	lsls	r2, r2, #4
 80016a2:	b2d2      	uxtb	r2, r2
 80016a4:	440b      	add	r3, r1
 80016a6:	761a      	strb	r2, [r3, #24]
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	e000e100 	.word	0xe000e100
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016bc:	b480      	push	{r7}
 80016be:	b089      	sub	sp, #36	; 0x24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	f1c3 0307 	rsb	r3, r3, #7
 80016d6:	2b04      	cmp	r3, #4
 80016d8:	bf28      	it	cs
 80016da:	2304      	movcs	r3, #4
 80016dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	3304      	adds	r3, #4
 80016e2:	2b06      	cmp	r3, #6
 80016e4:	d902      	bls.n	80016ec <NVIC_EncodePriority+0x30>
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	3b03      	subs	r3, #3
 80016ea:	e000      	b.n	80016ee <NVIC_EncodePriority+0x32>
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f0:	f04f 32ff 	mov.w	r2, #4294967295
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	43da      	mvns	r2, r3
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	401a      	ands	r2, r3
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001704:	f04f 31ff 	mov.w	r1, #4294967295
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	fa01 f303 	lsl.w	r3, r1, r3
 800170e:	43d9      	mvns	r1, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001714:	4313      	orrs	r3, r2
         );
}
 8001716:	4618      	mov	r0, r3
 8001718:	3724      	adds	r7, #36	; 0x24
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr

08001722 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b082      	sub	sp, #8
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f7ff ff4c 	bl	80015c8 <__NVIC_SetPriorityGrouping>
}
 8001730:	bf00      	nop
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	607a      	str	r2, [r7, #4]
 8001744:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001746:	2300      	movs	r3, #0
 8001748:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800174a:	f7ff ff61 	bl	8001610 <__NVIC_GetPriorityGrouping>
 800174e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	68b9      	ldr	r1, [r7, #8]
 8001754:	6978      	ldr	r0, [r7, #20]
 8001756:	f7ff ffb1 	bl	80016bc <NVIC_EncodePriority>
 800175a:	4602      	mov	r2, r0
 800175c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001760:	4611      	mov	r1, r2
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff ff80 	bl	8001668 <__NVIC_SetPriority>
}
 8001768:	bf00      	nop
 800176a:	3718      	adds	r7, #24
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800177a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff ff54 	bl	800162c <__NVIC_EnableIRQ>
}
 8001784:	bf00      	nop
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001798:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800179a:	f7ff ff09 	bl	80015b0 <HAL_GetTick>
 800179e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d008      	beq.n	80017be <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2280      	movs	r2, #128	; 0x80
 80017b0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e052      	b.n	8001864 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f022 0216 	bic.w	r2, r2, #22
 80017cc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	695a      	ldr	r2, [r3, #20]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017dc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d103      	bne.n	80017ee <HAL_DMA_Abort+0x62>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d007      	beq.n	80017fe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f022 0208 	bic.w	r2, r2, #8
 80017fc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f022 0201 	bic.w	r2, r2, #1
 800180c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800180e:	e013      	b.n	8001838 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001810:	f7ff fece 	bl	80015b0 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	2b05      	cmp	r3, #5
 800181c:	d90c      	bls.n	8001838 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2220      	movs	r2, #32
 8001822:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2203      	movs	r2, #3
 8001828:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e015      	b.n	8001864 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	2b00      	cmp	r3, #0
 8001844:	d1e4      	bne.n	8001810 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800184a:	223f      	movs	r2, #63	; 0x3f
 800184c:	409a      	lsls	r2, r3
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2201      	movs	r2, #1
 8001856:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001862:	2300      	movs	r3, #0
}
 8001864:	4618      	mov	r0, r3
 8001866:	3710      	adds	r7, #16
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}

0800186c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800187a:	b2db      	uxtb	r3, r3
 800187c:	2b02      	cmp	r3, #2
 800187e:	d004      	beq.n	800188a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2280      	movs	r2, #128	; 0x80
 8001884:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e00c      	b.n	80018a4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2205      	movs	r2, #5
 800188e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f022 0201 	bic.w	r2, r2, #1
 80018a0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80018a2:	2300      	movs	r3, #0
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b089      	sub	sp, #36	; 0x24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018ba:	2300      	movs	r3, #0
 80018bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018be:	2300      	movs	r3, #0
 80018c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018c2:	2300      	movs	r3, #0
 80018c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018c6:	2300      	movs	r3, #0
 80018c8:	61fb      	str	r3, [r7, #28]
 80018ca:	e16b      	b.n	8001ba4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018cc:	2201      	movs	r2, #1
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	697a      	ldr	r2, [r7, #20]
 80018dc:	4013      	ands	r3, r2
 80018de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	f040 815a 	bne.w	8001b9e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f003 0303 	and.w	r3, r3, #3
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d005      	beq.n	8001902 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d130      	bne.n	8001964 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	2203      	movs	r2, #3
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	43db      	mvns	r3, r3
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	4013      	ands	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	68da      	ldr	r2, [r3, #12]
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	4313      	orrs	r3, r2
 800192a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001938:	2201      	movs	r2, #1
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	43db      	mvns	r3, r3
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	4013      	ands	r3, r2
 8001946:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	091b      	lsrs	r3, r3, #4
 800194e:	f003 0201 	and.w	r2, r3, #1
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	4313      	orrs	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f003 0303 	and.w	r3, r3, #3
 800196c:	2b03      	cmp	r3, #3
 800196e:	d017      	beq.n	80019a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	2203      	movs	r2, #3
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	43db      	mvns	r3, r3
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	4013      	ands	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	689a      	ldr	r2, [r3, #8]
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	4313      	orrs	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f003 0303 	and.w	r3, r3, #3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d123      	bne.n	80019f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	08da      	lsrs	r2, r3, #3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	3208      	adds	r2, #8
 80019b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	f003 0307 	and.w	r3, r3, #7
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	220f      	movs	r2, #15
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	43db      	mvns	r3, r3
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	4013      	ands	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	691a      	ldr	r2, [r3, #16]
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	f003 0307 	and.w	r3, r3, #7
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	08da      	lsrs	r2, r3, #3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	3208      	adds	r2, #8
 80019ee:	69b9      	ldr	r1, [r7, #24]
 80019f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	2203      	movs	r2, #3
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	43db      	mvns	r3, r3
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f003 0203 	and.w	r2, r3, #3
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	f000 80b4 	beq.w	8001b9e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	4b60      	ldr	r3, [pc, #384]	; (8001bbc <HAL_GPIO_Init+0x30c>)
 8001a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3e:	4a5f      	ldr	r2, [pc, #380]	; (8001bbc <HAL_GPIO_Init+0x30c>)
 8001a40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a44:	6453      	str	r3, [r2, #68]	; 0x44
 8001a46:	4b5d      	ldr	r3, [pc, #372]	; (8001bbc <HAL_GPIO_Init+0x30c>)
 8001a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a52:	4a5b      	ldr	r2, [pc, #364]	; (8001bc0 <HAL_GPIO_Init+0x310>)
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	089b      	lsrs	r3, r3, #2
 8001a58:	3302      	adds	r3, #2
 8001a5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	f003 0303 	and.w	r3, r3, #3
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	220f      	movs	r2, #15
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	4013      	ands	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a52      	ldr	r2, [pc, #328]	; (8001bc4 <HAL_GPIO_Init+0x314>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d02b      	beq.n	8001ad6 <HAL_GPIO_Init+0x226>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a51      	ldr	r2, [pc, #324]	; (8001bc8 <HAL_GPIO_Init+0x318>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d025      	beq.n	8001ad2 <HAL_GPIO_Init+0x222>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a50      	ldr	r2, [pc, #320]	; (8001bcc <HAL_GPIO_Init+0x31c>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d01f      	beq.n	8001ace <HAL_GPIO_Init+0x21e>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a4f      	ldr	r2, [pc, #316]	; (8001bd0 <HAL_GPIO_Init+0x320>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d019      	beq.n	8001aca <HAL_GPIO_Init+0x21a>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a4e      	ldr	r2, [pc, #312]	; (8001bd4 <HAL_GPIO_Init+0x324>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d013      	beq.n	8001ac6 <HAL_GPIO_Init+0x216>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a4d      	ldr	r2, [pc, #308]	; (8001bd8 <HAL_GPIO_Init+0x328>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d00d      	beq.n	8001ac2 <HAL_GPIO_Init+0x212>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a4c      	ldr	r2, [pc, #304]	; (8001bdc <HAL_GPIO_Init+0x32c>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d007      	beq.n	8001abe <HAL_GPIO_Init+0x20e>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a4b      	ldr	r2, [pc, #300]	; (8001be0 <HAL_GPIO_Init+0x330>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d101      	bne.n	8001aba <HAL_GPIO_Init+0x20a>
 8001ab6:	2307      	movs	r3, #7
 8001ab8:	e00e      	b.n	8001ad8 <HAL_GPIO_Init+0x228>
 8001aba:	2308      	movs	r3, #8
 8001abc:	e00c      	b.n	8001ad8 <HAL_GPIO_Init+0x228>
 8001abe:	2306      	movs	r3, #6
 8001ac0:	e00a      	b.n	8001ad8 <HAL_GPIO_Init+0x228>
 8001ac2:	2305      	movs	r3, #5
 8001ac4:	e008      	b.n	8001ad8 <HAL_GPIO_Init+0x228>
 8001ac6:	2304      	movs	r3, #4
 8001ac8:	e006      	b.n	8001ad8 <HAL_GPIO_Init+0x228>
 8001aca:	2303      	movs	r3, #3
 8001acc:	e004      	b.n	8001ad8 <HAL_GPIO_Init+0x228>
 8001ace:	2302      	movs	r3, #2
 8001ad0:	e002      	b.n	8001ad8 <HAL_GPIO_Init+0x228>
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e000      	b.n	8001ad8 <HAL_GPIO_Init+0x228>
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	69fa      	ldr	r2, [r7, #28]
 8001ada:	f002 0203 	and.w	r2, r2, #3
 8001ade:	0092      	lsls	r2, r2, #2
 8001ae0:	4093      	lsls	r3, r2
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ae8:	4935      	ldr	r1, [pc, #212]	; (8001bc0 <HAL_GPIO_Init+0x310>)
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	089b      	lsrs	r3, r3, #2
 8001aee:	3302      	adds	r3, #2
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001af6:	4b3b      	ldr	r3, [pc, #236]	; (8001be4 <HAL_GPIO_Init+0x334>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	43db      	mvns	r3, r3
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	4013      	ands	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d003      	beq.n	8001b1a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b1a:	4a32      	ldr	r2, [pc, #200]	; (8001be4 <HAL_GPIO_Init+0x334>)
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b20:	4b30      	ldr	r3, [pc, #192]	; (8001be4 <HAL_GPIO_Init+0x334>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d003      	beq.n	8001b44 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b44:	4a27      	ldr	r2, [pc, #156]	; (8001be4 <HAL_GPIO_Init+0x334>)
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b4a:	4b26      	ldr	r3, [pc, #152]	; (8001be4 <HAL_GPIO_Init+0x334>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	43db      	mvns	r3, r3
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4013      	ands	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b6e:	4a1d      	ldr	r2, [pc, #116]	; (8001be4 <HAL_GPIO_Init+0x334>)
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b74:	4b1b      	ldr	r3, [pc, #108]	; (8001be4 <HAL_GPIO_Init+0x334>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4013      	ands	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d003      	beq.n	8001b98 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b98:	4a12      	ldr	r2, [pc, #72]	; (8001be4 <HAL_GPIO_Init+0x334>)
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	61fb      	str	r3, [r7, #28]
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	2b0f      	cmp	r3, #15
 8001ba8:	f67f ae90 	bls.w	80018cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bac:	bf00      	nop
 8001bae:	bf00      	nop
 8001bb0:	3724      	adds	r7, #36	; 0x24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	40013800 	.word	0x40013800
 8001bc4:	40020000 	.word	0x40020000
 8001bc8:	40020400 	.word	0x40020400
 8001bcc:	40020800 	.word	0x40020800
 8001bd0:	40020c00 	.word	0x40020c00
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	40021400 	.word	0x40021400
 8001bdc:	40021800 	.word	0x40021800
 8001be0:	40021c00 	.word	0x40021c00
 8001be4:	40013c00 	.word	0x40013c00

08001be8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	807b      	strh	r3, [r7, #2]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bf8:	787b      	ldrb	r3, [r7, #1]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bfe:	887a      	ldrh	r2, [r7, #2]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c04:	e003      	b.n	8001c0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c06:	887b      	ldrh	r3, [r7, #2]
 8001c08:	041a      	lsls	r2, r3, #16
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	619a      	str	r2, [r3, #24]
}
 8001c0e:	bf00      	nop
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
	...

08001c1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d101      	bne.n	8001c2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e267      	b.n	80020fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d075      	beq.n	8001d26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c3a:	4b88      	ldr	r3, [pc, #544]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f003 030c 	and.w	r3, r3, #12
 8001c42:	2b04      	cmp	r3, #4
 8001c44:	d00c      	beq.n	8001c60 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c46:	4b85      	ldr	r3, [pc, #532]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c4e:	2b08      	cmp	r3, #8
 8001c50:	d112      	bne.n	8001c78 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c52:	4b82      	ldr	r3, [pc, #520]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c5e:	d10b      	bne.n	8001c78 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c60:	4b7e      	ldr	r3, [pc, #504]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d05b      	beq.n	8001d24 <HAL_RCC_OscConfig+0x108>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d157      	bne.n	8001d24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e242      	b.n	80020fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c80:	d106      	bne.n	8001c90 <HAL_RCC_OscConfig+0x74>
 8001c82:	4b76      	ldr	r3, [pc, #472]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a75      	ldr	r2, [pc, #468]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c8c:	6013      	str	r3, [r2, #0]
 8001c8e:	e01d      	b.n	8001ccc <HAL_RCC_OscConfig+0xb0>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c98:	d10c      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x98>
 8001c9a:	4b70      	ldr	r3, [pc, #448]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a6f      	ldr	r2, [pc, #444]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001ca0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ca4:	6013      	str	r3, [r2, #0]
 8001ca6:	4b6d      	ldr	r3, [pc, #436]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a6c      	ldr	r2, [pc, #432]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001cac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cb0:	6013      	str	r3, [r2, #0]
 8001cb2:	e00b      	b.n	8001ccc <HAL_RCC_OscConfig+0xb0>
 8001cb4:	4b69      	ldr	r3, [pc, #420]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a68      	ldr	r2, [pc, #416]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001cba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cbe:	6013      	str	r3, [r2, #0]
 8001cc0:	4b66      	ldr	r3, [pc, #408]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a65      	ldr	r2, [pc, #404]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001cc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d013      	beq.n	8001cfc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd4:	f7ff fc6c 	bl	80015b0 <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cdc:	f7ff fc68 	bl	80015b0 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b64      	cmp	r3, #100	; 0x64
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e207      	b.n	80020fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cee:	4b5b      	ldr	r3, [pc, #364]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d0f0      	beq.n	8001cdc <HAL_RCC_OscConfig+0xc0>
 8001cfa:	e014      	b.n	8001d26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cfc:	f7ff fc58 	bl	80015b0 <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d02:	e008      	b.n	8001d16 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d04:	f7ff fc54 	bl	80015b0 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b64      	cmp	r3, #100	; 0x64
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e1f3      	b.n	80020fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d16:	4b51      	ldr	r3, [pc, #324]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1f0      	bne.n	8001d04 <HAL_RCC_OscConfig+0xe8>
 8001d22:	e000      	b.n	8001d26 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d063      	beq.n	8001dfa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d32:	4b4a      	ldr	r3, [pc, #296]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f003 030c 	and.w	r3, r3, #12
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d00b      	beq.n	8001d56 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d3e:	4b47      	ldr	r3, [pc, #284]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d46:	2b08      	cmp	r3, #8
 8001d48:	d11c      	bne.n	8001d84 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d4a:	4b44      	ldr	r3, [pc, #272]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d116      	bne.n	8001d84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d56:	4b41      	ldr	r3, [pc, #260]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d005      	beq.n	8001d6e <HAL_RCC_OscConfig+0x152>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d001      	beq.n	8001d6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e1c7      	b.n	80020fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d6e:	4b3b      	ldr	r3, [pc, #236]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	4937      	ldr	r1, [pc, #220]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d82:	e03a      	b.n	8001dfa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d020      	beq.n	8001dce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d8c:	4b34      	ldr	r3, [pc, #208]	; (8001e60 <HAL_RCC_OscConfig+0x244>)
 8001d8e:	2201      	movs	r2, #1
 8001d90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d92:	f7ff fc0d 	bl	80015b0 <HAL_GetTick>
 8001d96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d98:	e008      	b.n	8001dac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d9a:	f7ff fc09 	bl	80015b0 <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d901      	bls.n	8001dac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e1a8      	b.n	80020fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dac:	4b2b      	ldr	r3, [pc, #172]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0302 	and.w	r3, r3, #2
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d0f0      	beq.n	8001d9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db8:	4b28      	ldr	r3, [pc, #160]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	00db      	lsls	r3, r3, #3
 8001dc6:	4925      	ldr	r1, [pc, #148]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	600b      	str	r3, [r1, #0]
 8001dcc:	e015      	b.n	8001dfa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dce:	4b24      	ldr	r3, [pc, #144]	; (8001e60 <HAL_RCC_OscConfig+0x244>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd4:	f7ff fbec 	bl	80015b0 <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dda:	e008      	b.n	8001dee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ddc:	f7ff fbe8 	bl	80015b0 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e187      	b.n	80020fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dee:	4b1b      	ldr	r3, [pc, #108]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d1f0      	bne.n	8001ddc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0308 	and.w	r3, r3, #8
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d036      	beq.n	8001e74 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d016      	beq.n	8001e3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e0e:	4b15      	ldr	r3, [pc, #84]	; (8001e64 <HAL_RCC_OscConfig+0x248>)
 8001e10:	2201      	movs	r2, #1
 8001e12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e14:	f7ff fbcc 	bl	80015b0 <HAL_GetTick>
 8001e18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e1a:	e008      	b.n	8001e2e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e1c:	f7ff fbc8 	bl	80015b0 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e167      	b.n	80020fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e2e:	4b0b      	ldr	r3, [pc, #44]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001e30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d0f0      	beq.n	8001e1c <HAL_RCC_OscConfig+0x200>
 8001e3a:	e01b      	b.n	8001e74 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e3c:	4b09      	ldr	r3, [pc, #36]	; (8001e64 <HAL_RCC_OscConfig+0x248>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e42:	f7ff fbb5 	bl	80015b0 <HAL_GetTick>
 8001e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e48:	e00e      	b.n	8001e68 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e4a:	f7ff fbb1 	bl	80015b0 <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d907      	bls.n	8001e68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e150      	b.n	80020fe <HAL_RCC_OscConfig+0x4e2>
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	42470000 	.word	0x42470000
 8001e64:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e68:	4b88      	ldr	r3, [pc, #544]	; (800208c <HAL_RCC_OscConfig+0x470>)
 8001e6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e6c:	f003 0302 	and.w	r3, r3, #2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d1ea      	bne.n	8001e4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0304 	and.w	r3, r3, #4
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	f000 8097 	beq.w	8001fb0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e82:	2300      	movs	r3, #0
 8001e84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e86:	4b81      	ldr	r3, [pc, #516]	; (800208c <HAL_RCC_OscConfig+0x470>)
 8001e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d10f      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	60bb      	str	r3, [r7, #8]
 8001e96:	4b7d      	ldr	r3, [pc, #500]	; (800208c <HAL_RCC_OscConfig+0x470>)
 8001e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9a:	4a7c      	ldr	r2, [pc, #496]	; (800208c <HAL_RCC_OscConfig+0x470>)
 8001e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ea0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ea2:	4b7a      	ldr	r3, [pc, #488]	; (800208c <HAL_RCC_OscConfig+0x470>)
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eaa:	60bb      	str	r3, [r7, #8]
 8001eac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb2:	4b77      	ldr	r3, [pc, #476]	; (8002090 <HAL_RCC_OscConfig+0x474>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d118      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ebe:	4b74      	ldr	r3, [pc, #464]	; (8002090 <HAL_RCC_OscConfig+0x474>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a73      	ldr	r2, [pc, #460]	; (8002090 <HAL_RCC_OscConfig+0x474>)
 8001ec4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ec8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eca:	f7ff fb71 	bl	80015b0 <HAL_GetTick>
 8001ece:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed0:	e008      	b.n	8001ee4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ed2:	f7ff fb6d 	bl	80015b0 <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d901      	bls.n	8001ee4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e10c      	b.n	80020fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ee4:	4b6a      	ldr	r3, [pc, #424]	; (8002090 <HAL_RCC_OscConfig+0x474>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d0f0      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d106      	bne.n	8001f06 <HAL_RCC_OscConfig+0x2ea>
 8001ef8:	4b64      	ldr	r3, [pc, #400]	; (800208c <HAL_RCC_OscConfig+0x470>)
 8001efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001efc:	4a63      	ldr	r2, [pc, #396]	; (800208c <HAL_RCC_OscConfig+0x470>)
 8001efe:	f043 0301 	orr.w	r3, r3, #1
 8001f02:	6713      	str	r3, [r2, #112]	; 0x70
 8001f04:	e01c      	b.n	8001f40 <HAL_RCC_OscConfig+0x324>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	2b05      	cmp	r3, #5
 8001f0c:	d10c      	bne.n	8001f28 <HAL_RCC_OscConfig+0x30c>
 8001f0e:	4b5f      	ldr	r3, [pc, #380]	; (800208c <HAL_RCC_OscConfig+0x470>)
 8001f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f12:	4a5e      	ldr	r2, [pc, #376]	; (800208c <HAL_RCC_OscConfig+0x470>)
 8001f14:	f043 0304 	orr.w	r3, r3, #4
 8001f18:	6713      	str	r3, [r2, #112]	; 0x70
 8001f1a:	4b5c      	ldr	r3, [pc, #368]	; (800208c <HAL_RCC_OscConfig+0x470>)
 8001f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f1e:	4a5b      	ldr	r2, [pc, #364]	; (800208c <HAL_RCC_OscConfig+0x470>)
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	6713      	str	r3, [r2, #112]	; 0x70
 8001f26:	e00b      	b.n	8001f40 <HAL_RCC_OscConfig+0x324>
 8001f28:	4b58      	ldr	r3, [pc, #352]	; (800208c <HAL_RCC_OscConfig+0x470>)
 8001f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f2c:	4a57      	ldr	r2, [pc, #348]	; (800208c <HAL_RCC_OscConfig+0x470>)
 8001f2e:	f023 0301 	bic.w	r3, r3, #1
 8001f32:	6713      	str	r3, [r2, #112]	; 0x70
 8001f34:	4b55      	ldr	r3, [pc, #340]	; (800208c <HAL_RCC_OscConfig+0x470>)
 8001f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f38:	4a54      	ldr	r2, [pc, #336]	; (800208c <HAL_RCC_OscConfig+0x470>)
 8001f3a:	f023 0304 	bic.w	r3, r3, #4
 8001f3e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d015      	beq.n	8001f74 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f48:	f7ff fb32 	bl	80015b0 <HAL_GetTick>
 8001f4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f4e:	e00a      	b.n	8001f66 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f50:	f7ff fb2e 	bl	80015b0 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e0cb      	b.n	80020fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f66:	4b49      	ldr	r3, [pc, #292]	; (800208c <HAL_RCC_OscConfig+0x470>)
 8001f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d0ee      	beq.n	8001f50 <HAL_RCC_OscConfig+0x334>
 8001f72:	e014      	b.n	8001f9e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f74:	f7ff fb1c 	bl	80015b0 <HAL_GetTick>
 8001f78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f7a:	e00a      	b.n	8001f92 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f7c:	f7ff fb18 	bl	80015b0 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e0b5      	b.n	80020fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f92:	4b3e      	ldr	r3, [pc, #248]	; (800208c <HAL_RCC_OscConfig+0x470>)
 8001f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1ee      	bne.n	8001f7c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f9e:	7dfb      	ldrb	r3, [r7, #23]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d105      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fa4:	4b39      	ldr	r3, [pc, #228]	; (800208c <HAL_RCC_OscConfig+0x470>)
 8001fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa8:	4a38      	ldr	r2, [pc, #224]	; (800208c <HAL_RCC_OscConfig+0x470>)
 8001faa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	f000 80a1 	beq.w	80020fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fba:	4b34      	ldr	r3, [pc, #208]	; (800208c <HAL_RCC_OscConfig+0x470>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f003 030c 	and.w	r3, r3, #12
 8001fc2:	2b08      	cmp	r3, #8
 8001fc4:	d05c      	beq.n	8002080 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d141      	bne.n	8002052 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fce:	4b31      	ldr	r3, [pc, #196]	; (8002094 <HAL_RCC_OscConfig+0x478>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd4:	f7ff faec 	bl	80015b0 <HAL_GetTick>
 8001fd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fda:	e008      	b.n	8001fee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fdc:	f7ff fae8 	bl	80015b0 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e087      	b.n	80020fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fee:	4b27      	ldr	r3, [pc, #156]	; (800208c <HAL_RCC_OscConfig+0x470>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d1f0      	bne.n	8001fdc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	69da      	ldr	r2, [r3, #28]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a1b      	ldr	r3, [r3, #32]
 8002002:	431a      	orrs	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002008:	019b      	lsls	r3, r3, #6
 800200a:	431a      	orrs	r2, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002010:	085b      	lsrs	r3, r3, #1
 8002012:	3b01      	subs	r3, #1
 8002014:	041b      	lsls	r3, r3, #16
 8002016:	431a      	orrs	r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800201c:	061b      	lsls	r3, r3, #24
 800201e:	491b      	ldr	r1, [pc, #108]	; (800208c <HAL_RCC_OscConfig+0x470>)
 8002020:	4313      	orrs	r3, r2
 8002022:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002024:	4b1b      	ldr	r3, [pc, #108]	; (8002094 <HAL_RCC_OscConfig+0x478>)
 8002026:	2201      	movs	r2, #1
 8002028:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202a:	f7ff fac1 	bl	80015b0 <HAL_GetTick>
 800202e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002030:	e008      	b.n	8002044 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002032:	f7ff fabd 	bl	80015b0 <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	2b02      	cmp	r3, #2
 800203e:	d901      	bls.n	8002044 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e05c      	b.n	80020fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002044:	4b11      	ldr	r3, [pc, #68]	; (800208c <HAL_RCC_OscConfig+0x470>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d0f0      	beq.n	8002032 <HAL_RCC_OscConfig+0x416>
 8002050:	e054      	b.n	80020fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002052:	4b10      	ldr	r3, [pc, #64]	; (8002094 <HAL_RCC_OscConfig+0x478>)
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002058:	f7ff faaa 	bl	80015b0 <HAL_GetTick>
 800205c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800205e:	e008      	b.n	8002072 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002060:	f7ff faa6 	bl	80015b0 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b02      	cmp	r3, #2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e045      	b.n	80020fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002072:	4b06      	ldr	r3, [pc, #24]	; (800208c <HAL_RCC_OscConfig+0x470>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1f0      	bne.n	8002060 <HAL_RCC_OscConfig+0x444>
 800207e:	e03d      	b.n	80020fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	2b01      	cmp	r3, #1
 8002086:	d107      	bne.n	8002098 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e038      	b.n	80020fe <HAL_RCC_OscConfig+0x4e2>
 800208c:	40023800 	.word	0x40023800
 8002090:	40007000 	.word	0x40007000
 8002094:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002098:	4b1b      	ldr	r3, [pc, #108]	; (8002108 <HAL_RCC_OscConfig+0x4ec>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d028      	beq.n	80020f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d121      	bne.n	80020f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020be:	429a      	cmp	r2, r3
 80020c0:	d11a      	bne.n	80020f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020c8:	4013      	ands	r3, r2
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80020ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d111      	bne.n	80020f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020de:	085b      	lsrs	r3, r3, #1
 80020e0:	3b01      	subs	r3, #1
 80020e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d107      	bne.n	80020f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d001      	beq.n	80020fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e000      	b.n	80020fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3718      	adds	r7, #24
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40023800 	.word	0x40023800

0800210c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d101      	bne.n	8002120 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e0cc      	b.n	80022ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002120:	4b68      	ldr	r3, [pc, #416]	; (80022c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0307 	and.w	r3, r3, #7
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	429a      	cmp	r2, r3
 800212c:	d90c      	bls.n	8002148 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212e:	4b65      	ldr	r3, [pc, #404]	; (80022c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	b2d2      	uxtb	r2, r2
 8002134:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002136:	4b63      	ldr	r3, [pc, #396]	; (80022c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0307 	and.w	r3, r3, #7
 800213e:	683a      	ldr	r2, [r7, #0]
 8002140:	429a      	cmp	r2, r3
 8002142:	d001      	beq.n	8002148 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e0b8      	b.n	80022ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d020      	beq.n	8002196 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0304 	and.w	r3, r3, #4
 800215c:	2b00      	cmp	r3, #0
 800215e:	d005      	beq.n	800216c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002160:	4b59      	ldr	r3, [pc, #356]	; (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	4a58      	ldr	r2, [pc, #352]	; (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002166:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800216a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0308 	and.w	r3, r3, #8
 8002174:	2b00      	cmp	r3, #0
 8002176:	d005      	beq.n	8002184 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002178:	4b53      	ldr	r3, [pc, #332]	; (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	4a52      	ldr	r2, [pc, #328]	; (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 800217e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002182:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002184:	4b50      	ldr	r3, [pc, #320]	; (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	494d      	ldr	r1, [pc, #308]	; (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002192:	4313      	orrs	r3, r2
 8002194:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d044      	beq.n	800222c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d107      	bne.n	80021ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021aa:	4b47      	ldr	r3, [pc, #284]	; (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d119      	bne.n	80021ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e07f      	b.n	80022ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d003      	beq.n	80021ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021c6:	2b03      	cmp	r3, #3
 80021c8:	d107      	bne.n	80021da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ca:	4b3f      	ldr	r3, [pc, #252]	; (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d109      	bne.n	80021ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e06f      	b.n	80022ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021da:	4b3b      	ldr	r3, [pc, #236]	; (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e067      	b.n	80022ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021ea:	4b37      	ldr	r3, [pc, #220]	; (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f023 0203 	bic.w	r2, r3, #3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	4934      	ldr	r1, [pc, #208]	; (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021fc:	f7ff f9d8 	bl	80015b0 <HAL_GetTick>
 8002200:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002202:	e00a      	b.n	800221a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002204:	f7ff f9d4 	bl	80015b0 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002212:	4293      	cmp	r3, r2
 8002214:	d901      	bls.n	800221a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e04f      	b.n	80022ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800221a:	4b2b      	ldr	r3, [pc, #172]	; (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f003 020c 	and.w	r2, r3, #12
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	429a      	cmp	r2, r3
 800222a:	d1eb      	bne.n	8002204 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800222c:	4b25      	ldr	r3, [pc, #148]	; (80022c4 <HAL_RCC_ClockConfig+0x1b8>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0307 	and.w	r3, r3, #7
 8002234:	683a      	ldr	r2, [r7, #0]
 8002236:	429a      	cmp	r2, r3
 8002238:	d20c      	bcs.n	8002254 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800223a:	4b22      	ldr	r3, [pc, #136]	; (80022c4 <HAL_RCC_ClockConfig+0x1b8>)
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	b2d2      	uxtb	r2, r2
 8002240:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002242:	4b20      	ldr	r3, [pc, #128]	; (80022c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0307 	and.w	r3, r3, #7
 800224a:	683a      	ldr	r2, [r7, #0]
 800224c:	429a      	cmp	r2, r3
 800224e:	d001      	beq.n	8002254 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e032      	b.n	80022ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0304 	and.w	r3, r3, #4
 800225c:	2b00      	cmp	r3, #0
 800225e:	d008      	beq.n	8002272 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002260:	4b19      	ldr	r3, [pc, #100]	; (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	4916      	ldr	r1, [pc, #88]	; (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 800226e:	4313      	orrs	r3, r2
 8002270:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0308 	and.w	r3, r3, #8
 800227a:	2b00      	cmp	r3, #0
 800227c:	d009      	beq.n	8002292 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800227e:	4b12      	ldr	r3, [pc, #72]	; (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	490e      	ldr	r1, [pc, #56]	; (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 800228e:	4313      	orrs	r3, r2
 8002290:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002292:	f000 f821 	bl	80022d8 <HAL_RCC_GetSysClockFreq>
 8002296:	4602      	mov	r2, r0
 8002298:	4b0b      	ldr	r3, [pc, #44]	; (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	091b      	lsrs	r3, r3, #4
 800229e:	f003 030f 	and.w	r3, r3, #15
 80022a2:	490a      	ldr	r1, [pc, #40]	; (80022cc <HAL_RCC_ClockConfig+0x1c0>)
 80022a4:	5ccb      	ldrb	r3, [r1, r3]
 80022a6:	fa22 f303 	lsr.w	r3, r2, r3
 80022aa:	4a09      	ldr	r2, [pc, #36]	; (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 80022ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80022ae:	4b09      	ldr	r3, [pc, #36]	; (80022d4 <HAL_RCC_ClockConfig+0x1c8>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7fe feaa 	bl	800100c <HAL_InitTick>

  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	40023c00 	.word	0x40023c00
 80022c8:	40023800 	.word	0x40023800
 80022cc:	080070e0 	.word	0x080070e0
 80022d0:	20000008 	.word	0x20000008
 80022d4:	20000010 	.word	0x20000010

080022d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022dc:	b094      	sub	sp, #80	; 0x50
 80022de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80022e0:	2300      	movs	r3, #0
 80022e2:	647b      	str	r3, [r7, #68]	; 0x44
 80022e4:	2300      	movs	r3, #0
 80022e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022e8:	2300      	movs	r3, #0
 80022ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80022ec:	2300      	movs	r3, #0
 80022ee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022f0:	4b79      	ldr	r3, [pc, #484]	; (80024d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f003 030c 	and.w	r3, r3, #12
 80022f8:	2b08      	cmp	r3, #8
 80022fa:	d00d      	beq.n	8002318 <HAL_RCC_GetSysClockFreq+0x40>
 80022fc:	2b08      	cmp	r3, #8
 80022fe:	f200 80e1 	bhi.w	80024c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002302:	2b00      	cmp	r3, #0
 8002304:	d002      	beq.n	800230c <HAL_RCC_GetSysClockFreq+0x34>
 8002306:	2b04      	cmp	r3, #4
 8002308:	d003      	beq.n	8002312 <HAL_RCC_GetSysClockFreq+0x3a>
 800230a:	e0db      	b.n	80024c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800230c:	4b73      	ldr	r3, [pc, #460]	; (80024dc <HAL_RCC_GetSysClockFreq+0x204>)
 800230e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002310:	e0db      	b.n	80024ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002312:	4b73      	ldr	r3, [pc, #460]	; (80024e0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002314:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002316:	e0d8      	b.n	80024ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002318:	4b6f      	ldr	r3, [pc, #444]	; (80024d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002320:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002322:	4b6d      	ldr	r3, [pc, #436]	; (80024d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d063      	beq.n	80023f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800232e:	4b6a      	ldr	r3, [pc, #424]	; (80024d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	099b      	lsrs	r3, r3, #6
 8002334:	2200      	movs	r2, #0
 8002336:	63bb      	str	r3, [r7, #56]	; 0x38
 8002338:	63fa      	str	r2, [r7, #60]	; 0x3c
 800233a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800233c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002340:	633b      	str	r3, [r7, #48]	; 0x30
 8002342:	2300      	movs	r3, #0
 8002344:	637b      	str	r3, [r7, #52]	; 0x34
 8002346:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800234a:	4622      	mov	r2, r4
 800234c:	462b      	mov	r3, r5
 800234e:	f04f 0000 	mov.w	r0, #0
 8002352:	f04f 0100 	mov.w	r1, #0
 8002356:	0159      	lsls	r1, r3, #5
 8002358:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800235c:	0150      	lsls	r0, r2, #5
 800235e:	4602      	mov	r2, r0
 8002360:	460b      	mov	r3, r1
 8002362:	4621      	mov	r1, r4
 8002364:	1a51      	subs	r1, r2, r1
 8002366:	6139      	str	r1, [r7, #16]
 8002368:	4629      	mov	r1, r5
 800236a:	eb63 0301 	sbc.w	r3, r3, r1
 800236e:	617b      	str	r3, [r7, #20]
 8002370:	f04f 0200 	mov.w	r2, #0
 8002374:	f04f 0300 	mov.w	r3, #0
 8002378:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800237c:	4659      	mov	r1, fp
 800237e:	018b      	lsls	r3, r1, #6
 8002380:	4651      	mov	r1, sl
 8002382:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002386:	4651      	mov	r1, sl
 8002388:	018a      	lsls	r2, r1, #6
 800238a:	4651      	mov	r1, sl
 800238c:	ebb2 0801 	subs.w	r8, r2, r1
 8002390:	4659      	mov	r1, fp
 8002392:	eb63 0901 	sbc.w	r9, r3, r1
 8002396:	f04f 0200 	mov.w	r2, #0
 800239a:	f04f 0300 	mov.w	r3, #0
 800239e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80023aa:	4690      	mov	r8, r2
 80023ac:	4699      	mov	r9, r3
 80023ae:	4623      	mov	r3, r4
 80023b0:	eb18 0303 	adds.w	r3, r8, r3
 80023b4:	60bb      	str	r3, [r7, #8]
 80023b6:	462b      	mov	r3, r5
 80023b8:	eb49 0303 	adc.w	r3, r9, r3
 80023bc:	60fb      	str	r3, [r7, #12]
 80023be:	f04f 0200 	mov.w	r2, #0
 80023c2:	f04f 0300 	mov.w	r3, #0
 80023c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80023ca:	4629      	mov	r1, r5
 80023cc:	024b      	lsls	r3, r1, #9
 80023ce:	4621      	mov	r1, r4
 80023d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80023d4:	4621      	mov	r1, r4
 80023d6:	024a      	lsls	r2, r1, #9
 80023d8:	4610      	mov	r0, r2
 80023da:	4619      	mov	r1, r3
 80023dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023de:	2200      	movs	r2, #0
 80023e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80023e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80023e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80023e8:	f7fd ff04 	bl	80001f4 <__aeabi_uldivmod>
 80023ec:	4602      	mov	r2, r0
 80023ee:	460b      	mov	r3, r1
 80023f0:	4613      	mov	r3, r2
 80023f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023f4:	e058      	b.n	80024a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023f6:	4b38      	ldr	r3, [pc, #224]	; (80024d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	099b      	lsrs	r3, r3, #6
 80023fc:	2200      	movs	r2, #0
 80023fe:	4618      	mov	r0, r3
 8002400:	4611      	mov	r1, r2
 8002402:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002406:	623b      	str	r3, [r7, #32]
 8002408:	2300      	movs	r3, #0
 800240a:	627b      	str	r3, [r7, #36]	; 0x24
 800240c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002410:	4642      	mov	r2, r8
 8002412:	464b      	mov	r3, r9
 8002414:	f04f 0000 	mov.w	r0, #0
 8002418:	f04f 0100 	mov.w	r1, #0
 800241c:	0159      	lsls	r1, r3, #5
 800241e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002422:	0150      	lsls	r0, r2, #5
 8002424:	4602      	mov	r2, r0
 8002426:	460b      	mov	r3, r1
 8002428:	4641      	mov	r1, r8
 800242a:	ebb2 0a01 	subs.w	sl, r2, r1
 800242e:	4649      	mov	r1, r9
 8002430:	eb63 0b01 	sbc.w	fp, r3, r1
 8002434:	f04f 0200 	mov.w	r2, #0
 8002438:	f04f 0300 	mov.w	r3, #0
 800243c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002440:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002444:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002448:	ebb2 040a 	subs.w	r4, r2, sl
 800244c:	eb63 050b 	sbc.w	r5, r3, fp
 8002450:	f04f 0200 	mov.w	r2, #0
 8002454:	f04f 0300 	mov.w	r3, #0
 8002458:	00eb      	lsls	r3, r5, #3
 800245a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800245e:	00e2      	lsls	r2, r4, #3
 8002460:	4614      	mov	r4, r2
 8002462:	461d      	mov	r5, r3
 8002464:	4643      	mov	r3, r8
 8002466:	18e3      	adds	r3, r4, r3
 8002468:	603b      	str	r3, [r7, #0]
 800246a:	464b      	mov	r3, r9
 800246c:	eb45 0303 	adc.w	r3, r5, r3
 8002470:	607b      	str	r3, [r7, #4]
 8002472:	f04f 0200 	mov.w	r2, #0
 8002476:	f04f 0300 	mov.w	r3, #0
 800247a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800247e:	4629      	mov	r1, r5
 8002480:	028b      	lsls	r3, r1, #10
 8002482:	4621      	mov	r1, r4
 8002484:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002488:	4621      	mov	r1, r4
 800248a:	028a      	lsls	r2, r1, #10
 800248c:	4610      	mov	r0, r2
 800248e:	4619      	mov	r1, r3
 8002490:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002492:	2200      	movs	r2, #0
 8002494:	61bb      	str	r3, [r7, #24]
 8002496:	61fa      	str	r2, [r7, #28]
 8002498:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800249c:	f7fd feaa 	bl	80001f4 <__aeabi_uldivmod>
 80024a0:	4602      	mov	r2, r0
 80024a2:	460b      	mov	r3, r1
 80024a4:	4613      	mov	r3, r2
 80024a6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80024a8:	4b0b      	ldr	r3, [pc, #44]	; (80024d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	0c1b      	lsrs	r3, r3, #16
 80024ae:	f003 0303 	and.w	r3, r3, #3
 80024b2:	3301      	adds	r3, #1
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80024b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80024ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80024c2:	e002      	b.n	80024ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024c4:	4b05      	ldr	r3, [pc, #20]	; (80024dc <HAL_RCC_GetSysClockFreq+0x204>)
 80024c6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80024c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3750      	adds	r7, #80	; 0x50
 80024d0:	46bd      	mov	sp, r7
 80024d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024d6:	bf00      	nop
 80024d8:	40023800 	.word	0x40023800
 80024dc:	00f42400 	.word	0x00f42400
 80024e0:	007a1200 	.word	0x007a1200

080024e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024e8:	4b03      	ldr	r3, [pc, #12]	; (80024f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80024ea:	681b      	ldr	r3, [r3, #0]
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	20000008 	.word	0x20000008

080024fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002500:	f7ff fff0 	bl	80024e4 <HAL_RCC_GetHCLKFreq>
 8002504:	4602      	mov	r2, r0
 8002506:	4b05      	ldr	r3, [pc, #20]	; (800251c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	0a9b      	lsrs	r3, r3, #10
 800250c:	f003 0307 	and.w	r3, r3, #7
 8002510:	4903      	ldr	r1, [pc, #12]	; (8002520 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002512:	5ccb      	ldrb	r3, [r1, r3]
 8002514:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002518:	4618      	mov	r0, r3
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40023800 	.word	0x40023800
 8002520:	080070f0 	.word	0x080070f0

08002524 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002528:	f7ff ffdc 	bl	80024e4 <HAL_RCC_GetHCLKFreq>
 800252c:	4602      	mov	r2, r0
 800252e:	4b05      	ldr	r3, [pc, #20]	; (8002544 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	0b5b      	lsrs	r3, r3, #13
 8002534:	f003 0307 	and.w	r3, r3, #7
 8002538:	4903      	ldr	r1, [pc, #12]	; (8002548 <HAL_RCC_GetPCLK2Freq+0x24>)
 800253a:	5ccb      	ldrb	r3, [r1, r3]
 800253c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002540:	4618      	mov	r0, r3
 8002542:	bd80      	pop	{r7, pc}
 8002544:	40023800 	.word	0x40023800
 8002548:	080070f0 	.word	0x080070f0

0800254c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	220f      	movs	r2, #15
 800255a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800255c:	4b12      	ldr	r3, [pc, #72]	; (80025a8 <HAL_RCC_GetClockConfig+0x5c>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f003 0203 	and.w	r2, r3, #3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002568:	4b0f      	ldr	r3, [pc, #60]	; (80025a8 <HAL_RCC_GetClockConfig+0x5c>)
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002574:	4b0c      	ldr	r3, [pc, #48]	; (80025a8 <HAL_RCC_GetClockConfig+0x5c>)
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002580:	4b09      	ldr	r3, [pc, #36]	; (80025a8 <HAL_RCC_GetClockConfig+0x5c>)
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	08db      	lsrs	r3, r3, #3
 8002586:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800258e:	4b07      	ldr	r3, [pc, #28]	; (80025ac <HAL_RCC_GetClockConfig+0x60>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0207 	and.w	r2, r3, #7
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	601a      	str	r2, [r3, #0]
}
 800259a:	bf00      	nop
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	40023800 	.word	0x40023800
 80025ac:	40023c00 	.word	0x40023c00

080025b0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025b8:	2300      	movs	r3, #0
 80025ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80025bc:	2300      	movs	r3, #0
 80025be:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d105      	bne.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d035      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80025d8:	4b62      	ldr	r3, [pc, #392]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80025da:	2200      	movs	r2, #0
 80025dc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80025de:	f7fe ffe7 	bl	80015b0 <HAL_GetTick>
 80025e2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80025e4:	e008      	b.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80025e6:	f7fe ffe3 	bl	80015b0 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d901      	bls.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e0b0      	b.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80025f8:	4b5b      	ldr	r3, [pc, #364]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d1f0      	bne.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	019a      	lsls	r2, r3, #6
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	071b      	lsls	r3, r3, #28
 8002610:	4955      	ldr	r1, [pc, #340]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002612:	4313      	orrs	r3, r2
 8002614:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002618:	4b52      	ldr	r3, [pc, #328]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800261a:	2201      	movs	r2, #1
 800261c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800261e:	f7fe ffc7 	bl	80015b0 <HAL_GetTick>
 8002622:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002624:	e008      	b.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002626:	f7fe ffc3 	bl	80015b0 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d901      	bls.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e090      	b.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002638:	4b4b      	ldr	r3, [pc, #300]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d0f0      	beq.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0302 	and.w	r3, r3, #2
 800264c:	2b00      	cmp	r3, #0
 800264e:	f000 8083 	beq.w	8002758 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002652:	2300      	movs	r3, #0
 8002654:	60fb      	str	r3, [r7, #12]
 8002656:	4b44      	ldr	r3, [pc, #272]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265a:	4a43      	ldr	r2, [pc, #268]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800265c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002660:	6413      	str	r3, [r2, #64]	; 0x40
 8002662:	4b41      	ldr	r3, [pc, #260]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800266a:	60fb      	str	r3, [r7, #12]
 800266c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800266e:	4b3f      	ldr	r3, [pc, #252]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a3e      	ldr	r2, [pc, #248]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002678:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800267a:	f7fe ff99 	bl	80015b0 <HAL_GetTick>
 800267e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002680:	e008      	b.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002682:	f7fe ff95 	bl	80015b0 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d901      	bls.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e062      	b.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002694:	4b35      	ldr	r3, [pc, #212]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800269c:	2b00      	cmp	r3, #0
 800269e:	d0f0      	beq.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80026a0:	4b31      	ldr	r3, [pc, #196]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80026a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026a8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d02f      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026b8:	693a      	ldr	r2, [r7, #16]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d028      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80026be:	4b2a      	ldr	r3, [pc, #168]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80026c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026c6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80026c8:	4b29      	ldr	r3, [pc, #164]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80026ca:	2201      	movs	r2, #1
 80026cc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026ce:	4b28      	ldr	r3, [pc, #160]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80026d4:	4a24      	ldr	r2, [pc, #144]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80026da:	4b23      	ldr	r3, [pc, #140]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80026dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d114      	bne.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80026e6:	f7fe ff63 	bl	80015b0 <HAL_GetTick>
 80026ea:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ec:	e00a      	b.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026ee:	f7fe ff5f 	bl	80015b0 <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d901      	bls.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e02a      	b.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002704:	4b18      	ldr	r3, [pc, #96]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002708:	f003 0302 	and.w	r3, r3, #2
 800270c:	2b00      	cmp	r3, #0
 800270e:	d0ee      	beq.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002718:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800271c:	d10d      	bne.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800271e:	4b12      	ldr	r3, [pc, #72]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800272e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002732:	490d      	ldr	r1, [pc, #52]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002734:	4313      	orrs	r3, r2
 8002736:	608b      	str	r3, [r1, #8]
 8002738:	e005      	b.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800273a:	4b0b      	ldr	r3, [pc, #44]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	4a0a      	ldr	r2, [pc, #40]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002740:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002744:	6093      	str	r3, [r2, #8]
 8002746:	4b08      	ldr	r3, [pc, #32]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002748:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002752:	4905      	ldr	r1, [pc, #20]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002754:	4313      	orrs	r3, r2
 8002756:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3718      	adds	r7, #24
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	42470068 	.word	0x42470068
 8002768:	40023800 	.word	0x40023800
 800276c:	40007000 	.word	0x40007000
 8002770:	42470e40 	.word	0x42470e40

08002774 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e066      	b.n	8002858 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	7f5b      	ldrb	r3, [r3, #29]
 800278e:	b2db      	uxtb	r3, r3
 8002790:	2b00      	cmp	r3, #0
 8002792:	d105      	bne.n	80027a0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f7fe fbbc 	bl	8000f18 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2202      	movs	r2, #2
 80027a4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	22ca      	movs	r2, #202	; 0xca
 80027ac:	625a      	str	r2, [r3, #36]	; 0x24
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2253      	movs	r2, #83	; 0x53
 80027b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 f87a 	bl	80028b0 <RTC_EnterInitMode>
 80027bc:	4603      	mov	r3, r0
 80027be:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80027c0:	7bfb      	ldrb	r3, [r7, #15]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d12c      	bne.n	8002820 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	6812      	ldr	r2, [r2, #0]
 80027d0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80027d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027d8:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	6899      	ldr	r1, [r3, #8]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685a      	ldr	r2, [r3, #4]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	431a      	orrs	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	431a      	orrs	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	430a      	orrs	r2, r1
 80027f6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	68d2      	ldr	r2, [r2, #12]
 8002800:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	6919      	ldr	r1, [r3, #16]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	041a      	lsls	r2, r3, #16
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	430a      	orrs	r2, r1
 8002814:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 f881 	bl	800291e <RTC_ExitInitMode>
 800281c:	4603      	mov	r3, r0
 800281e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002820:	7bfb      	ldrb	r3, [r7, #15]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d113      	bne.n	800284e <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002834:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	699a      	ldr	r2, [r3, #24]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	430a      	orrs	r2, r1
 8002846:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	22ff      	movs	r2, #255	; 0xff
 8002854:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8002856:	7bfb      	ldrb	r3, [r7, #15]
}
 8002858:	4618      	mov	r0, r3
 800285a:	3710      	adds	r7, #16
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002868:	2300      	movs	r3, #0
 800286a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68da      	ldr	r2, [r3, #12]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800287a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800287c:	f7fe fe98 	bl	80015b0 <HAL_GetTick>
 8002880:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002882:	e009      	b.n	8002898 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002884:	f7fe fe94 	bl	80015b0 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002892:	d901      	bls.n	8002898 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e007      	b.n	80028a8 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	f003 0320 	and.w	r3, r3, #32
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d0ee      	beq.n	8002884 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3710      	adds	r7, #16
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028b8:	2300      	movs	r3, #0
 80028ba:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80028bc:	2300      	movs	r3, #0
 80028be:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d122      	bne.n	8002914 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68da      	ldr	r2, [r3, #12]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80028dc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80028de:	f7fe fe67 	bl	80015b0 <HAL_GetTick>
 80028e2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80028e4:	e00c      	b.n	8002900 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80028e6:	f7fe fe63 	bl	80015b0 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028f4:	d904      	bls.n	8002900 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2204      	movs	r2, #4
 80028fa:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800290a:	2b00      	cmp	r3, #0
 800290c:	d102      	bne.n	8002914 <RTC_EnterInitMode+0x64>
 800290e:	7bfb      	ldrb	r3, [r7, #15]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d1e8      	bne.n	80028e6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002914:	7bfb      	ldrb	r3, [r7, #15]
}
 8002916:	4618      	mov	r0, r3
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	b084      	sub	sp, #16
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002926:	2300      	movs	r3, #0
 8002928:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68da      	ldr	r2, [r3, #12]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002938:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f003 0320 	and.w	r3, r3, #32
 8002944:	2b00      	cmp	r3, #0
 8002946:	d10a      	bne.n	800295e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f7ff ff89 	bl	8002860 <HAL_RTC_WaitForSynchro>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d004      	beq.n	800295e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2204      	movs	r2, #4
 8002958:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800295e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002960:	4618      	mov	r0, r3
 8002962:	3710      	adds	r7, #16
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e041      	b.n	80029fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d106      	bne.n	8002994 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f000 f839 	bl	8002a06 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2202      	movs	r2, #2
 8002998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	3304      	adds	r3, #4
 80029a4:	4619      	mov	r1, r3
 80029a6:	4610      	mov	r0, r2
 80029a8:	f000 f9d8 	bl	8002d5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002a06:	b480      	push	{r7}
 8002a08:	b083      	sub	sp, #12
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002a0e:	bf00      	nop
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
	...

08002a1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d001      	beq.n	8002a34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e04e      	b.n	8002ad2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2202      	movs	r2, #2
 8002a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68da      	ldr	r2, [r3, #12]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f042 0201 	orr.w	r2, r2, #1
 8002a4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a23      	ldr	r2, [pc, #140]	; (8002ae0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d022      	beq.n	8002a9c <HAL_TIM_Base_Start_IT+0x80>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a5e:	d01d      	beq.n	8002a9c <HAL_TIM_Base_Start_IT+0x80>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a1f      	ldr	r2, [pc, #124]	; (8002ae4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d018      	beq.n	8002a9c <HAL_TIM_Base_Start_IT+0x80>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a1e      	ldr	r2, [pc, #120]	; (8002ae8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d013      	beq.n	8002a9c <HAL_TIM_Base_Start_IT+0x80>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a1c      	ldr	r2, [pc, #112]	; (8002aec <HAL_TIM_Base_Start_IT+0xd0>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d00e      	beq.n	8002a9c <HAL_TIM_Base_Start_IT+0x80>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a1b      	ldr	r2, [pc, #108]	; (8002af0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d009      	beq.n	8002a9c <HAL_TIM_Base_Start_IT+0x80>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a19      	ldr	r2, [pc, #100]	; (8002af4 <HAL_TIM_Base_Start_IT+0xd8>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d004      	beq.n	8002a9c <HAL_TIM_Base_Start_IT+0x80>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a18      	ldr	r2, [pc, #96]	; (8002af8 <HAL_TIM_Base_Start_IT+0xdc>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d111      	bne.n	8002ac0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f003 0307 	and.w	r3, r3, #7
 8002aa6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2b06      	cmp	r3, #6
 8002aac:	d010      	beq.n	8002ad0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f042 0201 	orr.w	r2, r2, #1
 8002abc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002abe:	e007      	b.n	8002ad0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f042 0201 	orr.w	r2, r2, #1
 8002ace:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3714      	adds	r7, #20
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	40010000 	.word	0x40010000
 8002ae4:	40000400 	.word	0x40000400
 8002ae8:	40000800 	.word	0x40000800
 8002aec:	40000c00 	.word	0x40000c00
 8002af0:	40010400 	.word	0x40010400
 8002af4:	40014000 	.word	0x40014000
 8002af8:	40001800 	.word	0x40001800

08002afc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d122      	bne.n	8002b58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	f003 0302 	and.w	r3, r3, #2
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d11b      	bne.n	8002b58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f06f 0202 	mvn.w	r2, #2
 8002b28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	f003 0303 	and.w	r3, r3, #3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d003      	beq.n	8002b46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 f8ee 	bl	8002d20 <HAL_TIM_IC_CaptureCallback>
 8002b44:	e005      	b.n	8002b52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 f8e0 	bl	8002d0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f000 f8f1 	bl	8002d34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	f003 0304 	and.w	r3, r3, #4
 8002b62:	2b04      	cmp	r3, #4
 8002b64:	d122      	bne.n	8002bac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	f003 0304 	and.w	r3, r3, #4
 8002b70:	2b04      	cmp	r3, #4
 8002b72:	d11b      	bne.n	8002bac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f06f 0204 	mvn.w	r2, #4
 8002b7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2202      	movs	r2, #2
 8002b82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d003      	beq.n	8002b9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 f8c4 	bl	8002d20 <HAL_TIM_IC_CaptureCallback>
 8002b98:	e005      	b.n	8002ba6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 f8b6 	bl	8002d0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f000 f8c7 	bl	8002d34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	f003 0308 	and.w	r3, r3, #8
 8002bb6:	2b08      	cmp	r3, #8
 8002bb8:	d122      	bne.n	8002c00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	f003 0308 	and.w	r3, r3, #8
 8002bc4:	2b08      	cmp	r3, #8
 8002bc6:	d11b      	bne.n	8002c00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f06f 0208 	mvn.w	r2, #8
 8002bd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2204      	movs	r2, #4
 8002bd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	69db      	ldr	r3, [r3, #28]
 8002bde:	f003 0303 	and.w	r3, r3, #3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d003      	beq.n	8002bee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 f89a 	bl	8002d20 <HAL_TIM_IC_CaptureCallback>
 8002bec:	e005      	b.n	8002bfa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 f88c 	bl	8002d0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f000 f89d 	bl	8002d34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	f003 0310 	and.w	r3, r3, #16
 8002c0a:	2b10      	cmp	r3, #16
 8002c0c:	d122      	bne.n	8002c54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	f003 0310 	and.w	r3, r3, #16
 8002c18:	2b10      	cmp	r3, #16
 8002c1a:	d11b      	bne.n	8002c54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f06f 0210 	mvn.w	r2, #16
 8002c24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2208      	movs	r2, #8
 8002c2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	69db      	ldr	r3, [r3, #28]
 8002c32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 f870 	bl	8002d20 <HAL_TIM_IC_CaptureCallback>
 8002c40:	e005      	b.n	8002c4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 f862 	bl	8002d0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f000 f873 	bl	8002d34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d10e      	bne.n	8002c80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	f003 0301 	and.w	r3, r3, #1
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d107      	bne.n	8002c80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f06f 0201 	mvn.w	r2, #1
 8002c78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f7fe f90c 	bl	8000e98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c8a:	2b80      	cmp	r3, #128	; 0x80
 8002c8c:	d10e      	bne.n	8002cac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c98:	2b80      	cmp	r3, #128	; 0x80
 8002c9a:	d107      	bne.n	8002cac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ca4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 f902 	bl	8002eb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb6:	2b40      	cmp	r3, #64	; 0x40
 8002cb8:	d10e      	bne.n	8002cd8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cc4:	2b40      	cmp	r3, #64	; 0x40
 8002cc6:	d107      	bne.n	8002cd8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002cd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 f838 	bl	8002d48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	f003 0320 	and.w	r3, r3, #32
 8002ce2:	2b20      	cmp	r3, #32
 8002ce4:	d10e      	bne.n	8002d04 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	f003 0320 	and.w	r3, r3, #32
 8002cf0:	2b20      	cmp	r3, #32
 8002cf2:	d107      	bne.n	8002d04 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f06f 0220 	mvn.w	r2, #32
 8002cfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 f8cc 	bl	8002e9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d04:	bf00      	nop
 8002d06:	3708      	adds	r7, #8
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d28:	bf00      	nop
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a40      	ldr	r2, [pc, #256]	; (8002e70 <TIM_Base_SetConfig+0x114>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d013      	beq.n	8002d9c <TIM_Base_SetConfig+0x40>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d7a:	d00f      	beq.n	8002d9c <TIM_Base_SetConfig+0x40>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a3d      	ldr	r2, [pc, #244]	; (8002e74 <TIM_Base_SetConfig+0x118>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d00b      	beq.n	8002d9c <TIM_Base_SetConfig+0x40>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4a3c      	ldr	r2, [pc, #240]	; (8002e78 <TIM_Base_SetConfig+0x11c>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d007      	beq.n	8002d9c <TIM_Base_SetConfig+0x40>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a3b      	ldr	r2, [pc, #236]	; (8002e7c <TIM_Base_SetConfig+0x120>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d003      	beq.n	8002d9c <TIM_Base_SetConfig+0x40>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4a3a      	ldr	r2, [pc, #232]	; (8002e80 <TIM_Base_SetConfig+0x124>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d108      	bne.n	8002dae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002da2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a2f      	ldr	r2, [pc, #188]	; (8002e70 <TIM_Base_SetConfig+0x114>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d02b      	beq.n	8002e0e <TIM_Base_SetConfig+0xb2>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dbc:	d027      	beq.n	8002e0e <TIM_Base_SetConfig+0xb2>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a2c      	ldr	r2, [pc, #176]	; (8002e74 <TIM_Base_SetConfig+0x118>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d023      	beq.n	8002e0e <TIM_Base_SetConfig+0xb2>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a2b      	ldr	r2, [pc, #172]	; (8002e78 <TIM_Base_SetConfig+0x11c>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d01f      	beq.n	8002e0e <TIM_Base_SetConfig+0xb2>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a2a      	ldr	r2, [pc, #168]	; (8002e7c <TIM_Base_SetConfig+0x120>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d01b      	beq.n	8002e0e <TIM_Base_SetConfig+0xb2>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a29      	ldr	r2, [pc, #164]	; (8002e80 <TIM_Base_SetConfig+0x124>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d017      	beq.n	8002e0e <TIM_Base_SetConfig+0xb2>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a28      	ldr	r2, [pc, #160]	; (8002e84 <TIM_Base_SetConfig+0x128>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d013      	beq.n	8002e0e <TIM_Base_SetConfig+0xb2>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a27      	ldr	r2, [pc, #156]	; (8002e88 <TIM_Base_SetConfig+0x12c>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d00f      	beq.n	8002e0e <TIM_Base_SetConfig+0xb2>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a26      	ldr	r2, [pc, #152]	; (8002e8c <TIM_Base_SetConfig+0x130>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d00b      	beq.n	8002e0e <TIM_Base_SetConfig+0xb2>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a25      	ldr	r2, [pc, #148]	; (8002e90 <TIM_Base_SetConfig+0x134>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d007      	beq.n	8002e0e <TIM_Base_SetConfig+0xb2>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a24      	ldr	r2, [pc, #144]	; (8002e94 <TIM_Base_SetConfig+0x138>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d003      	beq.n	8002e0e <TIM_Base_SetConfig+0xb2>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a23      	ldr	r2, [pc, #140]	; (8002e98 <TIM_Base_SetConfig+0x13c>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d108      	bne.n	8002e20 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	695b      	ldr	r3, [r3, #20]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	68fa      	ldr	r2, [r7, #12]
 8002e32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	689a      	ldr	r2, [r3, #8]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a0a      	ldr	r2, [pc, #40]	; (8002e70 <TIM_Base_SetConfig+0x114>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d003      	beq.n	8002e54 <TIM_Base_SetConfig+0xf8>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a0c      	ldr	r2, [pc, #48]	; (8002e80 <TIM_Base_SetConfig+0x124>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d103      	bne.n	8002e5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	691a      	ldr	r2, [r3, #16]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	615a      	str	r2, [r3, #20]
}
 8002e62:	bf00      	nop
 8002e64:	3714      	adds	r7, #20
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	40010000 	.word	0x40010000
 8002e74:	40000400 	.word	0x40000400
 8002e78:	40000800 	.word	0x40000800
 8002e7c:	40000c00 	.word	0x40000c00
 8002e80:	40010400 	.word	0x40010400
 8002e84:	40014000 	.word	0x40014000
 8002e88:	40014400 	.word	0x40014400
 8002e8c:	40014800 	.word	0x40014800
 8002e90:	40001800 	.word	0x40001800
 8002e94:	40001c00 	.word	0x40001c00
 8002e98:	40002000 	.word	0x40002000

08002e9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ea4:	bf00      	nop
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002eb8:	bf00      	nop
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d101      	bne.n	8002ed6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e03f      	b.n	8002f56 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d106      	bne.n	8002ef0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f7fe f83e 	bl	8000f6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2224      	movs	r2, #36	; 0x24
 8002ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68da      	ldr	r2, [r3, #12]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f000 fddf 	bl	8003acc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	691a      	ldr	r2, [r3, #16]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	695a      	ldr	r2, [r3, #20]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68da      	ldr	r2, [r3, #12]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2220      	movs	r2, #32
 8002f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2220      	movs	r2, #32
 8002f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b08a      	sub	sp, #40	; 0x28
 8002f62:	af02      	add	r7, sp, #8
 8002f64:	60f8      	str	r0, [r7, #12]
 8002f66:	60b9      	str	r1, [r7, #8]
 8002f68:	603b      	str	r3, [r7, #0]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b20      	cmp	r3, #32
 8002f7c:	d17c      	bne.n	8003078 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d002      	beq.n	8002f8a <HAL_UART_Transmit+0x2c>
 8002f84:	88fb      	ldrh	r3, [r7, #6]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e075      	b.n	800307a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d101      	bne.n	8002f9c <HAL_UART_Transmit+0x3e>
 8002f98:	2302      	movs	r3, #2
 8002f9a:	e06e      	b.n	800307a <HAL_UART_Transmit+0x11c>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2221      	movs	r2, #33	; 0x21
 8002fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fb2:	f7fe fafd 	bl	80015b0 <HAL_GetTick>
 8002fb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	88fa      	ldrh	r2, [r7, #6]
 8002fbc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	88fa      	ldrh	r2, [r7, #6]
 8002fc2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fcc:	d108      	bne.n	8002fe0 <HAL_UART_Transmit+0x82>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d104      	bne.n	8002fe0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	61bb      	str	r3, [r7, #24]
 8002fde:	e003      	b.n	8002fe8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002ff0:	e02a      	b.n	8003048 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	9300      	str	r3, [sp, #0]
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	2180      	movs	r1, #128	; 0x80
 8002ffc:	68f8      	ldr	r0, [r7, #12]
 8002ffe:	f000 fb1f 	bl	8003640 <UART_WaitOnFlagUntilTimeout>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e036      	b.n	800307a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10b      	bne.n	800302a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	881b      	ldrh	r3, [r3, #0]
 8003016:	461a      	mov	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003020:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	3302      	adds	r3, #2
 8003026:	61bb      	str	r3, [r7, #24]
 8003028:	e007      	b.n	800303a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	781a      	ldrb	r2, [r3, #0]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	3301      	adds	r3, #1
 8003038:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800303e:	b29b      	uxth	r3, r3
 8003040:	3b01      	subs	r3, #1
 8003042:	b29a      	uxth	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800304c:	b29b      	uxth	r3, r3
 800304e:	2b00      	cmp	r3, #0
 8003050:	d1cf      	bne.n	8002ff2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	9300      	str	r3, [sp, #0]
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	2200      	movs	r2, #0
 800305a:	2140      	movs	r1, #64	; 0x40
 800305c:	68f8      	ldr	r0, [r7, #12]
 800305e:	f000 faef 	bl	8003640 <UART_WaitOnFlagUntilTimeout>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d001      	beq.n	800306c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e006      	b.n	800307a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2220      	movs	r2, #32
 8003070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003074:	2300      	movs	r3, #0
 8003076:	e000      	b.n	800307a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003078:	2302      	movs	r3, #2
  }
}
 800307a:	4618      	mov	r0, r3
 800307c:	3720      	adds	r7, #32
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}

08003082 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003082:	b580      	push	{r7, lr}
 8003084:	b084      	sub	sp, #16
 8003086:	af00      	add	r7, sp, #0
 8003088:	60f8      	str	r0, [r7, #12]
 800308a:	60b9      	str	r1, [r7, #8]
 800308c:	4613      	mov	r3, r2
 800308e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003096:	b2db      	uxtb	r3, r3
 8003098:	2b20      	cmp	r3, #32
 800309a:	d11d      	bne.n	80030d8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d002      	beq.n	80030a8 <HAL_UART_Receive_IT+0x26>
 80030a2:	88fb      	ldrh	r3, [r7, #6]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d101      	bne.n	80030ac <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e016      	b.n	80030da <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d101      	bne.n	80030ba <HAL_UART_Receive_IT+0x38>
 80030b6:	2302      	movs	r3, #2
 80030b8:	e00f      	b.n	80030da <HAL_UART_Receive_IT+0x58>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2201      	movs	r2, #1
 80030be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80030c8:	88fb      	ldrh	r3, [r7, #6]
 80030ca:	461a      	mov	r2, r3
 80030cc:	68b9      	ldr	r1, [r7, #8]
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f000 fb24 	bl	800371c <UART_Start_Receive_IT>
 80030d4:	4603      	mov	r3, r0
 80030d6:	e000      	b.n	80030da <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80030d8:	2302      	movs	r3, #2
  }
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3710      	adds	r7, #16
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
	...

080030e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b0ba      	sub	sp, #232	; 0xe8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800310a:	2300      	movs	r3, #0
 800310c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003110:	2300      	movs	r3, #0
 8003112:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800311a:	f003 030f 	and.w	r3, r3, #15
 800311e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003122:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10f      	bne.n	800314a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800312a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800312e:	f003 0320 	and.w	r3, r3, #32
 8003132:	2b00      	cmp	r3, #0
 8003134:	d009      	beq.n	800314a <HAL_UART_IRQHandler+0x66>
 8003136:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800313a:	f003 0320 	and.w	r3, r3, #32
 800313e:	2b00      	cmp	r3, #0
 8003140:	d003      	beq.n	800314a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 fc07 	bl	8003956 <UART_Receive_IT>
      return;
 8003148:	e256      	b.n	80035f8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800314a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800314e:	2b00      	cmp	r3, #0
 8003150:	f000 80de 	beq.w	8003310 <HAL_UART_IRQHandler+0x22c>
 8003154:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003158:	f003 0301 	and.w	r3, r3, #1
 800315c:	2b00      	cmp	r3, #0
 800315e:	d106      	bne.n	800316e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003160:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003164:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003168:	2b00      	cmp	r3, #0
 800316a:	f000 80d1 	beq.w	8003310 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800316e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00b      	beq.n	8003192 <HAL_UART_IRQHandler+0xae>
 800317a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800317e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003182:	2b00      	cmp	r3, #0
 8003184:	d005      	beq.n	8003192 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318a:	f043 0201 	orr.w	r2, r3, #1
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003196:	f003 0304 	and.w	r3, r3, #4
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00b      	beq.n	80031b6 <HAL_UART_IRQHandler+0xd2>
 800319e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d005      	beq.n	80031b6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ae:	f043 0202 	orr.w	r2, r3, #2
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00b      	beq.n	80031da <HAL_UART_IRQHandler+0xf6>
 80031c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031c6:	f003 0301 	and.w	r3, r3, #1
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d005      	beq.n	80031da <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d2:	f043 0204 	orr.w	r2, r3, #4
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80031da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031de:	f003 0308 	and.w	r3, r3, #8
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d011      	beq.n	800320a <HAL_UART_IRQHandler+0x126>
 80031e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031ea:	f003 0320 	and.w	r3, r3, #32
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d105      	bne.n	80031fe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80031f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d005      	beq.n	800320a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003202:	f043 0208 	orr.w	r2, r3, #8
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320e:	2b00      	cmp	r3, #0
 8003210:	f000 81ed 	beq.w	80035ee <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003214:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003218:	f003 0320 	and.w	r3, r3, #32
 800321c:	2b00      	cmp	r3, #0
 800321e:	d008      	beq.n	8003232 <HAL_UART_IRQHandler+0x14e>
 8003220:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003224:	f003 0320 	and.w	r3, r3, #32
 8003228:	2b00      	cmp	r3, #0
 800322a:	d002      	beq.n	8003232 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f000 fb92 	bl	8003956 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	695b      	ldr	r3, [r3, #20]
 8003238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800323c:	2b40      	cmp	r3, #64	; 0x40
 800323e:	bf0c      	ite	eq
 8003240:	2301      	moveq	r3, #1
 8003242:	2300      	movne	r3, #0
 8003244:	b2db      	uxtb	r3, r3
 8003246:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	f003 0308 	and.w	r3, r3, #8
 8003252:	2b00      	cmp	r3, #0
 8003254:	d103      	bne.n	800325e <HAL_UART_IRQHandler+0x17a>
 8003256:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800325a:	2b00      	cmp	r3, #0
 800325c:	d04f      	beq.n	80032fe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 fa9a 	bl	8003798 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800326e:	2b40      	cmp	r3, #64	; 0x40
 8003270:	d141      	bne.n	80032f6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	3314      	adds	r3, #20
 8003278:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800327c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003280:	e853 3f00 	ldrex	r3, [r3]
 8003284:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003288:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800328c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003290:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	3314      	adds	r3, #20
 800329a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800329e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80032a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80032aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80032ae:	e841 2300 	strex	r3, r2, [r1]
 80032b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80032b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1d9      	bne.n	8003272 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d013      	beq.n	80032ee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ca:	4a7d      	ldr	r2, [pc, #500]	; (80034c0 <HAL_UART_IRQHandler+0x3dc>)
 80032cc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7fe faca 	bl	800186c <HAL_DMA_Abort_IT>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d016      	beq.n	800330c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032e8:	4610      	mov	r0, r2
 80032ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032ec:	e00e      	b.n	800330c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 f990 	bl	8003614 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032f4:	e00a      	b.n	800330c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 f98c 	bl	8003614 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032fc:	e006      	b.n	800330c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 f988 	bl	8003614 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800330a:	e170      	b.n	80035ee <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800330c:	bf00      	nop
    return;
 800330e:	e16e      	b.n	80035ee <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003314:	2b01      	cmp	r3, #1
 8003316:	f040 814a 	bne.w	80035ae <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800331a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800331e:	f003 0310 	and.w	r3, r3, #16
 8003322:	2b00      	cmp	r3, #0
 8003324:	f000 8143 	beq.w	80035ae <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003328:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800332c:	f003 0310 	and.w	r3, r3, #16
 8003330:	2b00      	cmp	r3, #0
 8003332:	f000 813c 	beq.w	80035ae <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003336:	2300      	movs	r3, #0
 8003338:	60bb      	str	r3, [r7, #8]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	60bb      	str	r3, [r7, #8]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	60bb      	str	r3, [r7, #8]
 800334a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003356:	2b40      	cmp	r3, #64	; 0x40
 8003358:	f040 80b4 	bne.w	80034c4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003368:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800336c:	2b00      	cmp	r3, #0
 800336e:	f000 8140 	beq.w	80035f2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003376:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800337a:	429a      	cmp	r2, r3
 800337c:	f080 8139 	bcs.w	80035f2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003386:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800338c:	69db      	ldr	r3, [r3, #28]
 800338e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003392:	f000 8088 	beq.w	80034a6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	330c      	adds	r3, #12
 800339c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80033a4:	e853 3f00 	ldrex	r3, [r3]
 80033a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80033ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	330c      	adds	r3, #12
 80033be:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80033c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80033c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80033ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80033d2:	e841 2300 	strex	r3, r2, [r1]
 80033d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80033da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1d9      	bne.n	8003396 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	3314      	adds	r3, #20
 80033e8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033ec:	e853 3f00 	ldrex	r3, [r3]
 80033f0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80033f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033f4:	f023 0301 	bic.w	r3, r3, #1
 80033f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	3314      	adds	r3, #20
 8003402:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003406:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800340a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800340c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800340e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003412:	e841 2300 	strex	r3, r2, [r1]
 8003416:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003418:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1e1      	bne.n	80033e2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	3314      	adds	r3, #20
 8003424:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003426:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003428:	e853 3f00 	ldrex	r3, [r3]
 800342c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800342e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003430:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003434:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	3314      	adds	r3, #20
 800343e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003442:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003444:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003446:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003448:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800344a:	e841 2300 	strex	r3, r2, [r1]
 800344e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003450:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1e3      	bne.n	800341e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2220      	movs	r2, #32
 800345a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	330c      	adds	r3, #12
 800346a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800346c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800346e:	e853 3f00 	ldrex	r3, [r3]
 8003472:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003474:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003476:	f023 0310 	bic.w	r3, r3, #16
 800347a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	330c      	adds	r3, #12
 8003484:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003488:	65ba      	str	r2, [r7, #88]	; 0x58
 800348a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800348c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800348e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003490:	e841 2300 	strex	r3, r2, [r1]
 8003494:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003496:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1e3      	bne.n	8003464 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7fe f973 	bl	800178c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	4619      	mov	r1, r3
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 f8b6 	bl	8003628 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80034bc:	e099      	b.n	80035f2 <HAL_UART_IRQHandler+0x50e>
 80034be:	bf00      	nop
 80034c0:	0800385f 	.word	0x0800385f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034d8:	b29b      	uxth	r3, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	f000 808b 	beq.w	80035f6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80034e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f000 8086 	beq.w	80035f6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	330c      	adds	r3, #12
 80034f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034f4:	e853 3f00 	ldrex	r3, [r3]
 80034f8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80034fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003500:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	330c      	adds	r3, #12
 800350a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800350e:	647a      	str	r2, [r7, #68]	; 0x44
 8003510:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003512:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003514:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003516:	e841 2300 	strex	r3, r2, [r1]
 800351a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800351c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1e3      	bne.n	80034ea <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	3314      	adds	r3, #20
 8003528:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800352a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352c:	e853 3f00 	ldrex	r3, [r3]
 8003530:	623b      	str	r3, [r7, #32]
   return(result);
 8003532:	6a3b      	ldr	r3, [r7, #32]
 8003534:	f023 0301 	bic.w	r3, r3, #1
 8003538:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	3314      	adds	r3, #20
 8003542:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003546:	633a      	str	r2, [r7, #48]	; 0x30
 8003548:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800354a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800354c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800354e:	e841 2300 	strex	r3, r2, [r1]
 8003552:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003556:	2b00      	cmp	r3, #0
 8003558:	d1e3      	bne.n	8003522 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2220      	movs	r2, #32
 800355e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	330c      	adds	r3, #12
 800356e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	e853 3f00 	ldrex	r3, [r3]
 8003576:	60fb      	str	r3, [r7, #12]
   return(result);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f023 0310 	bic.w	r3, r3, #16
 800357e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	330c      	adds	r3, #12
 8003588:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800358c:	61fa      	str	r2, [r7, #28]
 800358e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003590:	69b9      	ldr	r1, [r7, #24]
 8003592:	69fa      	ldr	r2, [r7, #28]
 8003594:	e841 2300 	strex	r3, r2, [r1]
 8003598:	617b      	str	r3, [r7, #20]
   return(result);
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d1e3      	bne.n	8003568 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80035a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80035a4:	4619      	mov	r1, r3
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 f83e 	bl	8003628 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80035ac:	e023      	b.n	80035f6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80035ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d009      	beq.n	80035ce <HAL_UART_IRQHandler+0x4ea>
 80035ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d003      	beq.n	80035ce <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 f95d 	bl	8003886 <UART_Transmit_IT>
    return;
 80035cc:	e014      	b.n	80035f8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80035ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00e      	beq.n	80035f8 <HAL_UART_IRQHandler+0x514>
 80035da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d008      	beq.n	80035f8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 f99d 	bl	8003926 <UART_EndTransmit_IT>
    return;
 80035ec:	e004      	b.n	80035f8 <HAL_UART_IRQHandler+0x514>
    return;
 80035ee:	bf00      	nop
 80035f0:	e002      	b.n	80035f8 <HAL_UART_IRQHandler+0x514>
      return;
 80035f2:	bf00      	nop
 80035f4:	e000      	b.n	80035f8 <HAL_UART_IRQHandler+0x514>
      return;
 80035f6:	bf00      	nop
  }
}
 80035f8:	37e8      	adds	r7, #232	; 0xe8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop

08003600 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	460b      	mov	r3, r1
 8003632:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003634:	bf00      	nop
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b090      	sub	sp, #64	; 0x40
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	603b      	str	r3, [r7, #0]
 800364c:	4613      	mov	r3, r2
 800364e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003650:	e050      	b.n	80036f4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003652:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003658:	d04c      	beq.n	80036f4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800365a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800365c:	2b00      	cmp	r3, #0
 800365e:	d007      	beq.n	8003670 <UART_WaitOnFlagUntilTimeout+0x30>
 8003660:	f7fd ffa6 	bl	80015b0 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800366c:	429a      	cmp	r2, r3
 800366e:	d241      	bcs.n	80036f4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	330c      	adds	r3, #12
 8003676:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800367a:	e853 3f00 	ldrex	r3, [r3]
 800367e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003682:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003686:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	330c      	adds	r3, #12
 800368e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003690:	637a      	str	r2, [r7, #52]	; 0x34
 8003692:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003694:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003696:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003698:	e841 2300 	strex	r3, r2, [r1]
 800369c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800369e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d1e5      	bne.n	8003670 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	3314      	adds	r3, #20
 80036aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	e853 3f00 	ldrex	r3, [r3]
 80036b2:	613b      	str	r3, [r7, #16]
   return(result);
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	f023 0301 	bic.w	r3, r3, #1
 80036ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	3314      	adds	r3, #20
 80036c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036c4:	623a      	str	r2, [r7, #32]
 80036c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c8:	69f9      	ldr	r1, [r7, #28]
 80036ca:	6a3a      	ldr	r2, [r7, #32]
 80036cc:	e841 2300 	strex	r3, r2, [r1]
 80036d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d1e5      	bne.n	80036a4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2220      	movs	r2, #32
 80036dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2220      	movs	r2, #32
 80036e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e00f      	b.n	8003714 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	4013      	ands	r3, r2
 80036fe:	68ba      	ldr	r2, [r7, #8]
 8003700:	429a      	cmp	r2, r3
 8003702:	bf0c      	ite	eq
 8003704:	2301      	moveq	r3, #1
 8003706:	2300      	movne	r3, #0
 8003708:	b2db      	uxtb	r3, r3
 800370a:	461a      	mov	r2, r3
 800370c:	79fb      	ldrb	r3, [r7, #7]
 800370e:	429a      	cmp	r2, r3
 8003710:	d09f      	beq.n	8003652 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003712:	2300      	movs	r3, #0
}
 8003714:	4618      	mov	r0, r3
 8003716:	3740      	adds	r7, #64	; 0x40
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800371c:	b480      	push	{r7}
 800371e:	b085      	sub	sp, #20
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	4613      	mov	r3, r2
 8003728:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	68ba      	ldr	r2, [r7, #8]
 800372e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	88fa      	ldrh	r2, [r7, #6]
 8003734:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	88fa      	ldrh	r2, [r7, #6]
 800373a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2222      	movs	r2, #34	; 0x22
 8003746:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d007      	beq.n	800376a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68da      	ldr	r2, [r3, #12]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003768:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	695a      	ldr	r2, [r3, #20]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f042 0201 	orr.w	r2, r2, #1
 8003778:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68da      	ldr	r2, [r3, #12]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f042 0220 	orr.w	r2, r2, #32
 8003788:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	3714      	adds	r7, #20
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003798:	b480      	push	{r7}
 800379a:	b095      	sub	sp, #84	; 0x54
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	330c      	adds	r3, #12
 80037a6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037aa:	e853 3f00 	ldrex	r3, [r3]
 80037ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80037b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80037b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	330c      	adds	r3, #12
 80037be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80037c0:	643a      	str	r2, [r7, #64]	; 0x40
 80037c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80037c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80037c8:	e841 2300 	strex	r3, r2, [r1]
 80037cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80037ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1e5      	bne.n	80037a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	3314      	adds	r3, #20
 80037da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037dc:	6a3b      	ldr	r3, [r7, #32]
 80037de:	e853 3f00 	ldrex	r3, [r3]
 80037e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	f023 0301 	bic.w	r3, r3, #1
 80037ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	3314      	adds	r3, #20
 80037f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037fc:	e841 2300 	strex	r3, r2, [r1]
 8003800:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003804:	2b00      	cmp	r3, #0
 8003806:	d1e5      	bne.n	80037d4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380c:	2b01      	cmp	r3, #1
 800380e:	d119      	bne.n	8003844 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	330c      	adds	r3, #12
 8003816:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	e853 3f00 	ldrex	r3, [r3]
 800381e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	f023 0310 	bic.w	r3, r3, #16
 8003826:	647b      	str	r3, [r7, #68]	; 0x44
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	330c      	adds	r3, #12
 800382e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003830:	61ba      	str	r2, [r7, #24]
 8003832:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003834:	6979      	ldr	r1, [r7, #20]
 8003836:	69ba      	ldr	r2, [r7, #24]
 8003838:	e841 2300 	strex	r3, r2, [r1]
 800383c:	613b      	str	r3, [r7, #16]
   return(result);
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d1e5      	bne.n	8003810 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2220      	movs	r2, #32
 8003848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003852:	bf00      	nop
 8003854:	3754      	adds	r7, #84	; 0x54
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr

0800385e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800385e:	b580      	push	{r7, lr}
 8003860:	b084      	sub	sp, #16
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800386a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2200      	movs	r2, #0
 8003870:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f7ff fecb 	bl	8003614 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800387e:	bf00      	nop
 8003880:	3710      	adds	r7, #16
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}

08003886 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003886:	b480      	push	{r7}
 8003888:	b085      	sub	sp, #20
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003894:	b2db      	uxtb	r3, r3
 8003896:	2b21      	cmp	r3, #33	; 0x21
 8003898:	d13e      	bne.n	8003918 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038a2:	d114      	bne.n	80038ce <UART_Transmit_IT+0x48>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	691b      	ldr	r3, [r3, #16]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d110      	bne.n	80038ce <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a1b      	ldr	r3, [r3, #32]
 80038b0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	881b      	ldrh	r3, [r3, #0]
 80038b6:	461a      	mov	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038c0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	1c9a      	adds	r2, r3, #2
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	621a      	str	r2, [r3, #32]
 80038cc:	e008      	b.n	80038e0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a1b      	ldr	r3, [r3, #32]
 80038d2:	1c59      	adds	r1, r3, #1
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	6211      	str	r1, [r2, #32]
 80038d8:	781a      	ldrb	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	3b01      	subs	r3, #1
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	4619      	mov	r1, r3
 80038ee:	84d1      	strh	r1, [r2, #38]	; 0x26
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d10f      	bne.n	8003914 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68da      	ldr	r2, [r3, #12]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003902:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68da      	ldr	r2, [r3, #12]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003912:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003914:	2300      	movs	r3, #0
 8003916:	e000      	b.n	800391a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003918:	2302      	movs	r3, #2
  }
}
 800391a:	4618      	mov	r0, r3
 800391c:	3714      	adds	r7, #20
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr

08003926 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003926:	b580      	push	{r7, lr}
 8003928:	b082      	sub	sp, #8
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68da      	ldr	r2, [r3, #12]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800393c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2220      	movs	r2, #32
 8003942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f7ff fe5a 	bl	8003600 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3708      	adds	r7, #8
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003956:	b580      	push	{r7, lr}
 8003958:	b08c      	sub	sp, #48	; 0x30
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b22      	cmp	r3, #34	; 0x22
 8003968:	f040 80ab 	bne.w	8003ac2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003974:	d117      	bne.n	80039a6 <UART_Receive_IT+0x50>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d113      	bne.n	80039a6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800397e:	2300      	movs	r3, #0
 8003980:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003986:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	b29b      	uxth	r3, r3
 8003990:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003994:	b29a      	uxth	r2, r3
 8003996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003998:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399e:	1c9a      	adds	r2, r3, #2
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	629a      	str	r2, [r3, #40]	; 0x28
 80039a4:	e026      	b.n	80039f4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80039ac:	2300      	movs	r3, #0
 80039ae:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039b8:	d007      	beq.n	80039ca <UART_Receive_IT+0x74>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d10a      	bne.n	80039d8 <UART_Receive_IT+0x82>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d106      	bne.n	80039d8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	b2da      	uxtb	r2, r3
 80039d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d4:	701a      	strb	r2, [r3, #0]
 80039d6:	e008      	b.n	80039ea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039e4:	b2da      	uxtb	r2, r3
 80039e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039e8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ee:	1c5a      	adds	r2, r3, #1
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	3b01      	subs	r3, #1
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	4619      	mov	r1, r3
 8003a02:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d15a      	bne.n	8003abe <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	68da      	ldr	r2, [r3, #12]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f022 0220 	bic.w	r2, r2, #32
 8003a16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68da      	ldr	r2, [r3, #12]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	695a      	ldr	r2, [r3, #20]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f022 0201 	bic.w	r2, r2, #1
 8003a36:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2220      	movs	r2, #32
 8003a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d135      	bne.n	8003ab4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	330c      	adds	r3, #12
 8003a54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	e853 3f00 	ldrex	r3, [r3]
 8003a5c:	613b      	str	r3, [r7, #16]
   return(result);
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	f023 0310 	bic.w	r3, r3, #16
 8003a64:	627b      	str	r3, [r7, #36]	; 0x24
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	330c      	adds	r3, #12
 8003a6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a6e:	623a      	str	r2, [r7, #32]
 8003a70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a72:	69f9      	ldr	r1, [r7, #28]
 8003a74:	6a3a      	ldr	r2, [r7, #32]
 8003a76:	e841 2300 	strex	r3, r2, [r1]
 8003a7a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d1e5      	bne.n	8003a4e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0310 	and.w	r3, r3, #16
 8003a8c:	2b10      	cmp	r3, #16
 8003a8e:	d10a      	bne.n	8003aa6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a90:	2300      	movs	r3, #0
 8003a92:	60fb      	str	r3, [r7, #12]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	60fb      	str	r3, [r7, #12]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	60fb      	str	r3, [r7, #12]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003aaa:	4619      	mov	r1, r3
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f7ff fdbb 	bl	8003628 <HAL_UARTEx_RxEventCallback>
 8003ab2:	e002      	b.n	8003aba <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f7fd f9a5 	bl	8000e04 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003aba:	2300      	movs	r3, #0
 8003abc:	e002      	b.n	8003ac4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	e000      	b.n	8003ac4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003ac2:	2302      	movs	r3, #2
  }
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3730      	adds	r7, #48	; 0x30
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003acc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ad0:	b0c0      	sub	sp, #256	; 0x100
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	691b      	ldr	r3, [r3, #16]
 8003ae0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ae8:	68d9      	ldr	r1, [r3, #12]
 8003aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	ea40 0301 	orr.w	r3, r0, r1
 8003af4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003afa:	689a      	ldr	r2, [r3, #8]
 8003afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	431a      	orrs	r2, r3
 8003b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	431a      	orrs	r2, r3
 8003b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b10:	69db      	ldr	r3, [r3, #28]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003b24:	f021 010c 	bic.w	r1, r1, #12
 8003b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003b32:	430b      	orrs	r3, r1
 8003b34:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b46:	6999      	ldr	r1, [r3, #24]
 8003b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	ea40 0301 	orr.w	r3, r0, r1
 8003b52:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	4b8f      	ldr	r3, [pc, #572]	; (8003d98 <UART_SetConfig+0x2cc>)
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d005      	beq.n	8003b6c <UART_SetConfig+0xa0>
 8003b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	4b8d      	ldr	r3, [pc, #564]	; (8003d9c <UART_SetConfig+0x2d0>)
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d104      	bne.n	8003b76 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b6c:	f7fe fcda 	bl	8002524 <HAL_RCC_GetPCLK2Freq>
 8003b70:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003b74:	e003      	b.n	8003b7e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b76:	f7fe fcc1 	bl	80024fc <HAL_RCC_GetPCLK1Freq>
 8003b7a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b82:	69db      	ldr	r3, [r3, #28]
 8003b84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b88:	f040 810c 	bne.w	8003da4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b90:	2200      	movs	r2, #0
 8003b92:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003b96:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003b9a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003b9e:	4622      	mov	r2, r4
 8003ba0:	462b      	mov	r3, r5
 8003ba2:	1891      	adds	r1, r2, r2
 8003ba4:	65b9      	str	r1, [r7, #88]	; 0x58
 8003ba6:	415b      	adcs	r3, r3
 8003ba8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003baa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003bae:	4621      	mov	r1, r4
 8003bb0:	eb12 0801 	adds.w	r8, r2, r1
 8003bb4:	4629      	mov	r1, r5
 8003bb6:	eb43 0901 	adc.w	r9, r3, r1
 8003bba:	f04f 0200 	mov.w	r2, #0
 8003bbe:	f04f 0300 	mov.w	r3, #0
 8003bc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bce:	4690      	mov	r8, r2
 8003bd0:	4699      	mov	r9, r3
 8003bd2:	4623      	mov	r3, r4
 8003bd4:	eb18 0303 	adds.w	r3, r8, r3
 8003bd8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003bdc:	462b      	mov	r3, r5
 8003bde:	eb49 0303 	adc.w	r3, r9, r3
 8003be2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003bf2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003bf6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	18db      	adds	r3, r3, r3
 8003bfe:	653b      	str	r3, [r7, #80]	; 0x50
 8003c00:	4613      	mov	r3, r2
 8003c02:	eb42 0303 	adc.w	r3, r2, r3
 8003c06:	657b      	str	r3, [r7, #84]	; 0x54
 8003c08:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003c0c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003c10:	f7fc faf0 	bl	80001f4 <__aeabi_uldivmod>
 8003c14:	4602      	mov	r2, r0
 8003c16:	460b      	mov	r3, r1
 8003c18:	4b61      	ldr	r3, [pc, #388]	; (8003da0 <UART_SetConfig+0x2d4>)
 8003c1a:	fba3 2302 	umull	r2, r3, r3, r2
 8003c1e:	095b      	lsrs	r3, r3, #5
 8003c20:	011c      	lsls	r4, r3, #4
 8003c22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c26:	2200      	movs	r2, #0
 8003c28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c2c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003c30:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003c34:	4642      	mov	r2, r8
 8003c36:	464b      	mov	r3, r9
 8003c38:	1891      	adds	r1, r2, r2
 8003c3a:	64b9      	str	r1, [r7, #72]	; 0x48
 8003c3c:	415b      	adcs	r3, r3
 8003c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c40:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003c44:	4641      	mov	r1, r8
 8003c46:	eb12 0a01 	adds.w	sl, r2, r1
 8003c4a:	4649      	mov	r1, r9
 8003c4c:	eb43 0b01 	adc.w	fp, r3, r1
 8003c50:	f04f 0200 	mov.w	r2, #0
 8003c54:	f04f 0300 	mov.w	r3, #0
 8003c58:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c5c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c64:	4692      	mov	sl, r2
 8003c66:	469b      	mov	fp, r3
 8003c68:	4643      	mov	r3, r8
 8003c6a:	eb1a 0303 	adds.w	r3, sl, r3
 8003c6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c72:	464b      	mov	r3, r9
 8003c74:	eb4b 0303 	adc.w	r3, fp, r3
 8003c78:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c88:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003c8c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003c90:	460b      	mov	r3, r1
 8003c92:	18db      	adds	r3, r3, r3
 8003c94:	643b      	str	r3, [r7, #64]	; 0x40
 8003c96:	4613      	mov	r3, r2
 8003c98:	eb42 0303 	adc.w	r3, r2, r3
 8003c9c:	647b      	str	r3, [r7, #68]	; 0x44
 8003c9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003ca2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003ca6:	f7fc faa5 	bl	80001f4 <__aeabi_uldivmod>
 8003caa:	4602      	mov	r2, r0
 8003cac:	460b      	mov	r3, r1
 8003cae:	4611      	mov	r1, r2
 8003cb0:	4b3b      	ldr	r3, [pc, #236]	; (8003da0 <UART_SetConfig+0x2d4>)
 8003cb2:	fba3 2301 	umull	r2, r3, r3, r1
 8003cb6:	095b      	lsrs	r3, r3, #5
 8003cb8:	2264      	movs	r2, #100	; 0x64
 8003cba:	fb02 f303 	mul.w	r3, r2, r3
 8003cbe:	1acb      	subs	r3, r1, r3
 8003cc0:	00db      	lsls	r3, r3, #3
 8003cc2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003cc6:	4b36      	ldr	r3, [pc, #216]	; (8003da0 <UART_SetConfig+0x2d4>)
 8003cc8:	fba3 2302 	umull	r2, r3, r3, r2
 8003ccc:	095b      	lsrs	r3, r3, #5
 8003cce:	005b      	lsls	r3, r3, #1
 8003cd0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003cd4:	441c      	add	r4, r3
 8003cd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ce0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003ce4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003ce8:	4642      	mov	r2, r8
 8003cea:	464b      	mov	r3, r9
 8003cec:	1891      	adds	r1, r2, r2
 8003cee:	63b9      	str	r1, [r7, #56]	; 0x38
 8003cf0:	415b      	adcs	r3, r3
 8003cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cf4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003cf8:	4641      	mov	r1, r8
 8003cfa:	1851      	adds	r1, r2, r1
 8003cfc:	6339      	str	r1, [r7, #48]	; 0x30
 8003cfe:	4649      	mov	r1, r9
 8003d00:	414b      	adcs	r3, r1
 8003d02:	637b      	str	r3, [r7, #52]	; 0x34
 8003d04:	f04f 0200 	mov.w	r2, #0
 8003d08:	f04f 0300 	mov.w	r3, #0
 8003d0c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003d10:	4659      	mov	r1, fp
 8003d12:	00cb      	lsls	r3, r1, #3
 8003d14:	4651      	mov	r1, sl
 8003d16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d1a:	4651      	mov	r1, sl
 8003d1c:	00ca      	lsls	r2, r1, #3
 8003d1e:	4610      	mov	r0, r2
 8003d20:	4619      	mov	r1, r3
 8003d22:	4603      	mov	r3, r0
 8003d24:	4642      	mov	r2, r8
 8003d26:	189b      	adds	r3, r3, r2
 8003d28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d2c:	464b      	mov	r3, r9
 8003d2e:	460a      	mov	r2, r1
 8003d30:	eb42 0303 	adc.w	r3, r2, r3
 8003d34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003d44:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003d48:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	18db      	adds	r3, r3, r3
 8003d50:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d52:	4613      	mov	r3, r2
 8003d54:	eb42 0303 	adc.w	r3, r2, r3
 8003d58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d5e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003d62:	f7fc fa47 	bl	80001f4 <__aeabi_uldivmod>
 8003d66:	4602      	mov	r2, r0
 8003d68:	460b      	mov	r3, r1
 8003d6a:	4b0d      	ldr	r3, [pc, #52]	; (8003da0 <UART_SetConfig+0x2d4>)
 8003d6c:	fba3 1302 	umull	r1, r3, r3, r2
 8003d70:	095b      	lsrs	r3, r3, #5
 8003d72:	2164      	movs	r1, #100	; 0x64
 8003d74:	fb01 f303 	mul.w	r3, r1, r3
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	00db      	lsls	r3, r3, #3
 8003d7c:	3332      	adds	r3, #50	; 0x32
 8003d7e:	4a08      	ldr	r2, [pc, #32]	; (8003da0 <UART_SetConfig+0x2d4>)
 8003d80:	fba2 2303 	umull	r2, r3, r2, r3
 8003d84:	095b      	lsrs	r3, r3, #5
 8003d86:	f003 0207 	and.w	r2, r3, #7
 8003d8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4422      	add	r2, r4
 8003d92:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d94:	e105      	b.n	8003fa2 <UART_SetConfig+0x4d6>
 8003d96:	bf00      	nop
 8003d98:	40011000 	.word	0x40011000
 8003d9c:	40011400 	.word	0x40011400
 8003da0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003da4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003da8:	2200      	movs	r2, #0
 8003daa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003dae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003db2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003db6:	4642      	mov	r2, r8
 8003db8:	464b      	mov	r3, r9
 8003dba:	1891      	adds	r1, r2, r2
 8003dbc:	6239      	str	r1, [r7, #32]
 8003dbe:	415b      	adcs	r3, r3
 8003dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8003dc2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003dc6:	4641      	mov	r1, r8
 8003dc8:	1854      	adds	r4, r2, r1
 8003dca:	4649      	mov	r1, r9
 8003dcc:	eb43 0501 	adc.w	r5, r3, r1
 8003dd0:	f04f 0200 	mov.w	r2, #0
 8003dd4:	f04f 0300 	mov.w	r3, #0
 8003dd8:	00eb      	lsls	r3, r5, #3
 8003dda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dde:	00e2      	lsls	r2, r4, #3
 8003de0:	4614      	mov	r4, r2
 8003de2:	461d      	mov	r5, r3
 8003de4:	4643      	mov	r3, r8
 8003de6:	18e3      	adds	r3, r4, r3
 8003de8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003dec:	464b      	mov	r3, r9
 8003dee:	eb45 0303 	adc.w	r3, r5, r3
 8003df2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003e02:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003e06:	f04f 0200 	mov.w	r2, #0
 8003e0a:	f04f 0300 	mov.w	r3, #0
 8003e0e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003e12:	4629      	mov	r1, r5
 8003e14:	008b      	lsls	r3, r1, #2
 8003e16:	4621      	mov	r1, r4
 8003e18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e1c:	4621      	mov	r1, r4
 8003e1e:	008a      	lsls	r2, r1, #2
 8003e20:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003e24:	f7fc f9e6 	bl	80001f4 <__aeabi_uldivmod>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	460b      	mov	r3, r1
 8003e2c:	4b60      	ldr	r3, [pc, #384]	; (8003fb0 <UART_SetConfig+0x4e4>)
 8003e2e:	fba3 2302 	umull	r2, r3, r3, r2
 8003e32:	095b      	lsrs	r3, r3, #5
 8003e34:	011c      	lsls	r4, r3, #4
 8003e36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003e40:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003e44:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003e48:	4642      	mov	r2, r8
 8003e4a:	464b      	mov	r3, r9
 8003e4c:	1891      	adds	r1, r2, r2
 8003e4e:	61b9      	str	r1, [r7, #24]
 8003e50:	415b      	adcs	r3, r3
 8003e52:	61fb      	str	r3, [r7, #28]
 8003e54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e58:	4641      	mov	r1, r8
 8003e5a:	1851      	adds	r1, r2, r1
 8003e5c:	6139      	str	r1, [r7, #16]
 8003e5e:	4649      	mov	r1, r9
 8003e60:	414b      	adcs	r3, r1
 8003e62:	617b      	str	r3, [r7, #20]
 8003e64:	f04f 0200 	mov.w	r2, #0
 8003e68:	f04f 0300 	mov.w	r3, #0
 8003e6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e70:	4659      	mov	r1, fp
 8003e72:	00cb      	lsls	r3, r1, #3
 8003e74:	4651      	mov	r1, sl
 8003e76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e7a:	4651      	mov	r1, sl
 8003e7c:	00ca      	lsls	r2, r1, #3
 8003e7e:	4610      	mov	r0, r2
 8003e80:	4619      	mov	r1, r3
 8003e82:	4603      	mov	r3, r0
 8003e84:	4642      	mov	r2, r8
 8003e86:	189b      	adds	r3, r3, r2
 8003e88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003e8c:	464b      	mov	r3, r9
 8003e8e:	460a      	mov	r2, r1
 8003e90:	eb42 0303 	adc.w	r3, r2, r3
 8003e94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ea2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003ea4:	f04f 0200 	mov.w	r2, #0
 8003ea8:	f04f 0300 	mov.w	r3, #0
 8003eac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003eb0:	4649      	mov	r1, r9
 8003eb2:	008b      	lsls	r3, r1, #2
 8003eb4:	4641      	mov	r1, r8
 8003eb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003eba:	4641      	mov	r1, r8
 8003ebc:	008a      	lsls	r2, r1, #2
 8003ebe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003ec2:	f7fc f997 	bl	80001f4 <__aeabi_uldivmod>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	460b      	mov	r3, r1
 8003eca:	4b39      	ldr	r3, [pc, #228]	; (8003fb0 <UART_SetConfig+0x4e4>)
 8003ecc:	fba3 1302 	umull	r1, r3, r3, r2
 8003ed0:	095b      	lsrs	r3, r3, #5
 8003ed2:	2164      	movs	r1, #100	; 0x64
 8003ed4:	fb01 f303 	mul.w	r3, r1, r3
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	011b      	lsls	r3, r3, #4
 8003edc:	3332      	adds	r3, #50	; 0x32
 8003ede:	4a34      	ldr	r2, [pc, #208]	; (8003fb0 <UART_SetConfig+0x4e4>)
 8003ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee4:	095b      	lsrs	r3, r3, #5
 8003ee6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003eea:	441c      	add	r4, r3
 8003eec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	673b      	str	r3, [r7, #112]	; 0x70
 8003ef4:	677a      	str	r2, [r7, #116]	; 0x74
 8003ef6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003efa:	4642      	mov	r2, r8
 8003efc:	464b      	mov	r3, r9
 8003efe:	1891      	adds	r1, r2, r2
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	415b      	adcs	r3, r3
 8003f04:	60fb      	str	r3, [r7, #12]
 8003f06:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f0a:	4641      	mov	r1, r8
 8003f0c:	1851      	adds	r1, r2, r1
 8003f0e:	6039      	str	r1, [r7, #0]
 8003f10:	4649      	mov	r1, r9
 8003f12:	414b      	adcs	r3, r1
 8003f14:	607b      	str	r3, [r7, #4]
 8003f16:	f04f 0200 	mov.w	r2, #0
 8003f1a:	f04f 0300 	mov.w	r3, #0
 8003f1e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f22:	4659      	mov	r1, fp
 8003f24:	00cb      	lsls	r3, r1, #3
 8003f26:	4651      	mov	r1, sl
 8003f28:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f2c:	4651      	mov	r1, sl
 8003f2e:	00ca      	lsls	r2, r1, #3
 8003f30:	4610      	mov	r0, r2
 8003f32:	4619      	mov	r1, r3
 8003f34:	4603      	mov	r3, r0
 8003f36:	4642      	mov	r2, r8
 8003f38:	189b      	adds	r3, r3, r2
 8003f3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f3c:	464b      	mov	r3, r9
 8003f3e:	460a      	mov	r2, r1
 8003f40:	eb42 0303 	adc.w	r3, r2, r3
 8003f44:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	663b      	str	r3, [r7, #96]	; 0x60
 8003f50:	667a      	str	r2, [r7, #100]	; 0x64
 8003f52:	f04f 0200 	mov.w	r2, #0
 8003f56:	f04f 0300 	mov.w	r3, #0
 8003f5a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003f5e:	4649      	mov	r1, r9
 8003f60:	008b      	lsls	r3, r1, #2
 8003f62:	4641      	mov	r1, r8
 8003f64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f68:	4641      	mov	r1, r8
 8003f6a:	008a      	lsls	r2, r1, #2
 8003f6c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003f70:	f7fc f940 	bl	80001f4 <__aeabi_uldivmod>
 8003f74:	4602      	mov	r2, r0
 8003f76:	460b      	mov	r3, r1
 8003f78:	4b0d      	ldr	r3, [pc, #52]	; (8003fb0 <UART_SetConfig+0x4e4>)
 8003f7a:	fba3 1302 	umull	r1, r3, r3, r2
 8003f7e:	095b      	lsrs	r3, r3, #5
 8003f80:	2164      	movs	r1, #100	; 0x64
 8003f82:	fb01 f303 	mul.w	r3, r1, r3
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	011b      	lsls	r3, r3, #4
 8003f8a:	3332      	adds	r3, #50	; 0x32
 8003f8c:	4a08      	ldr	r2, [pc, #32]	; (8003fb0 <UART_SetConfig+0x4e4>)
 8003f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f92:	095b      	lsrs	r3, r3, #5
 8003f94:	f003 020f 	and.w	r2, r3, #15
 8003f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4422      	add	r2, r4
 8003fa0:	609a      	str	r2, [r3, #8]
}
 8003fa2:	bf00      	nop
 8003fa4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fae:	bf00      	nop
 8003fb0:	51eb851f 	.word	0x51eb851f

08003fb4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f103 0208 	add.w	r2, r3, #8
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8003fcc:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f103 0208 	add.w	r2, r3, #8
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f103 0208 	add.w	r2, r3, #8
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003fe8:	bf00      	nop
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004002:	bf00      	nop
 8004004:	370c      	adds	r7, #12
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr

0800400e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800400e:	b480      	push	{r7}
 8004010:	b085      	sub	sp, #20
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
 8004016:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	689a      	ldr	r2, [r3, #8]
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	683a      	ldr	r2, [r7, #0]
 8004032:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	683a      	ldr	r2, [r7, #0]
 8004038:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	1c5a      	adds	r2, r3, #1
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	601a      	str	r2, [r3, #0]
}
 800404a:	bf00      	nop
 800404c:	3714      	adds	r7, #20
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr

08004056 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8004056:	b480      	push	{r7}
 8004058:	b085      	sub	sp, #20
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
 800405e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800406c:	d103      	bne.n	8004076 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	60fb      	str	r3, [r7, #12]
 8004074:	e00c      	b.n	8004090 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	3308      	adds	r3, #8
 800407a:	60fb      	str	r3, [r7, #12]
 800407c:	e002      	b.n	8004084 <vListInsert+0x2e>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	60fb      	str	r3, [r7, #12]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68ba      	ldr	r2, [r7, #8]
 800408c:	429a      	cmp	r2, r3
 800408e:	d2f6      	bcs.n	800407e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	685a      	ldr	r2, [r3, #4]
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	683a      	ldr	r2, [r7, #0]
 800409e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	683a      	ldr	r2, [r7, #0]
 80040aa:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	1c5a      	adds	r2, r3, #1
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	601a      	str	r2, [r3, #0]
}
 80040bc:	bf00      	nop
 80040be:	3714      	adds	r7, #20
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80040c8:	b480      	push	{r7}
 80040ca:	b085      	sub	sp, #20
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	6892      	ldr	r2, [r2, #8]
 80040de:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	6852      	ldr	r2, [r2, #4]
 80040e8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d103      	bne.n	80040fc <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	689a      	ldr	r2, [r3, #8]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	1e5a      	subs	r2, r3, #1
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
}
 8004110:	4618      	mov	r0, r3
 8004112:	3714      	adds	r7, #20
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d10a      	bne.n	8004146 <xQueueGenericReset+0x2a>
        __asm volatile
 8004130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004134:	f383 8811 	msr	BASEPRI, r3
 8004138:	f3bf 8f6f 	isb	sy
 800413c:	f3bf 8f4f 	dsb	sy
 8004140:	60bb      	str	r3, [r7, #8]
    }
 8004142:	bf00      	nop
 8004144:	e7fe      	b.n	8004144 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8004146:	f002 fb8d 	bl	8006864 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004152:	68f9      	ldr	r1, [r7, #12]
 8004154:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004156:	fb01 f303 	mul.w	r3, r1, r3
 800415a:	441a      	add	r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2200      	movs	r2, #0
 8004164:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004176:	3b01      	subs	r3, #1
 8004178:	68f9      	ldr	r1, [r7, #12]
 800417a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800417c:	fb01 f303 	mul.w	r3, r1, r3
 8004180:	441a      	add	r2, r3
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	22ff      	movs	r2, #255	; 0xff
 800418a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	22ff      	movs	r2, #255	; 0xff
 8004192:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d114      	bne.n	80041c6 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d01a      	beq.n	80041da <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	3310      	adds	r3, #16
 80041a8:	4618      	mov	r0, r3
 80041aa:	f001 f921 	bl	80053f0 <xTaskRemoveFromEventList>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d012      	beq.n	80041da <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80041b4:	4b0c      	ldr	r3, [pc, #48]	; (80041e8 <xQueueGenericReset+0xcc>)
 80041b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041ba:	601a      	str	r2, [r3, #0]
 80041bc:	f3bf 8f4f 	dsb	sy
 80041c0:	f3bf 8f6f 	isb	sy
 80041c4:	e009      	b.n	80041da <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	3310      	adds	r3, #16
 80041ca:	4618      	mov	r0, r3
 80041cc:	f7ff fef2 	bl	8003fb4 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	3324      	adds	r3, #36	; 0x24
 80041d4:	4618      	mov	r0, r3
 80041d6:	f7ff feed 	bl	8003fb4 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80041da:	f002 fb73 	bl	80068c4 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80041de:	2301      	movs	r3, #1
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3710      	adds	r7, #16
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	e000ed04 	.word	0xe000ed04

080041ec <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b08c      	sub	sp, #48	; 0x30
 80041f0:	af02      	add	r7, sp, #8
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	4613      	mov	r3, r2
 80041f8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d10a      	bne.n	8004216 <xQueueGenericCreate+0x2a>
        __asm volatile
 8004200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004204:	f383 8811 	msr	BASEPRI, r3
 8004208:	f3bf 8f6f 	isb	sy
 800420c:	f3bf 8f4f 	dsb	sy
 8004210:	61bb      	str	r3, [r7, #24]
    }
 8004212:	bf00      	nop
 8004214:	e7fe      	b.n	8004214 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	68ba      	ldr	r2, [r7, #8]
 800421a:	fb02 f303 	mul.w	r3, r2, r3
 800421e:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d006      	beq.n	8004234 <xQueueGenericCreate+0x48>
 8004226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	fbb2 f3f3 	udiv	r3, r2, r3
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	429a      	cmp	r2, r3
 8004232:	d101      	bne.n	8004238 <xQueueGenericCreate+0x4c>
 8004234:	2301      	movs	r3, #1
 8004236:	e000      	b.n	800423a <xQueueGenericCreate+0x4e>
 8004238:	2300      	movs	r3, #0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d10a      	bne.n	8004254 <xQueueGenericCreate+0x68>
        __asm volatile
 800423e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004242:	f383 8811 	msr	BASEPRI, r3
 8004246:	f3bf 8f6f 	isb	sy
 800424a:	f3bf 8f4f 	dsb	sy
 800424e:	617b      	str	r3, [r7, #20]
    }
 8004250:	bf00      	nop
 8004252:	e7fe      	b.n	8004252 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8004254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004256:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800425a:	d90a      	bls.n	8004272 <xQueueGenericCreate+0x86>
        __asm volatile
 800425c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004260:	f383 8811 	msr	BASEPRI, r3
 8004264:	f3bf 8f6f 	isb	sy
 8004268:	f3bf 8f4f 	dsb	sy
 800426c:	613b      	str	r3, [r7, #16]
    }
 800426e:	bf00      	nop
 8004270:	e7fe      	b.n	8004270 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004274:	3350      	adds	r3, #80	; 0x50
 8004276:	4618      	mov	r0, r3
 8004278:	f002 fc18 	bl	8006aac <pvPortMalloc>
 800427c:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 800427e:	6a3b      	ldr	r3, [r7, #32]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d00d      	beq.n	80042a0 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004284:	6a3b      	ldr	r3, [r7, #32]
 8004286:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	3350      	adds	r3, #80	; 0x50
 800428c:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800428e:	79fa      	ldrb	r2, [r7, #7]
 8004290:	6a3b      	ldr	r3, [r7, #32]
 8004292:	9300      	str	r3, [sp, #0]
 8004294:	4613      	mov	r3, r2
 8004296:	69fa      	ldr	r2, [r7, #28]
 8004298:	68b9      	ldr	r1, [r7, #8]
 800429a:	68f8      	ldr	r0, [r7, #12]
 800429c:	f000 f805 	bl	80042aa <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80042a0:	6a3b      	ldr	r3, [r7, #32]
    }
 80042a2:	4618      	mov	r0, r3
 80042a4:	3728      	adds	r7, #40	; 0x28
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}

080042aa <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80042aa:	b580      	push	{r7, lr}
 80042ac:	b084      	sub	sp, #16
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	60f8      	str	r0, [r7, #12]
 80042b2:	60b9      	str	r1, [r7, #8]
 80042b4:	607a      	str	r2, [r7, #4]
 80042b6:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d103      	bne.n	80042c6 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	69ba      	ldr	r2, [r7, #24]
 80042c2:	601a      	str	r2, [r3, #0]
 80042c4:	e002      	b.n	80042cc <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	68fa      	ldr	r2, [r7, #12]
 80042d0:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	68ba      	ldr	r2, [r7, #8]
 80042d6:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80042d8:	2101      	movs	r1, #1
 80042da:	69b8      	ldr	r0, [r7, #24]
 80042dc:	f7ff ff1e 	bl	800411c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	78fa      	ldrb	r2, [r7, #3]
 80042e4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80042e8:	bf00      	nop
 80042ea:	3710      	adds	r7, #16
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b08e      	sub	sp, #56	; 0x38
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]
 80042fc:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80042fe:	2300      	movs	r3, #0
 8004300:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8004306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004308:	2b00      	cmp	r3, #0
 800430a:	d10a      	bne.n	8004322 <xQueueGenericSend+0x32>
        __asm volatile
 800430c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004310:	f383 8811 	msr	BASEPRI, r3
 8004314:	f3bf 8f6f 	isb	sy
 8004318:	f3bf 8f4f 	dsb	sy
 800431c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800431e:	bf00      	nop
 8004320:	e7fe      	b.n	8004320 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d103      	bne.n	8004330 <xQueueGenericSend+0x40>
 8004328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800432a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432c:	2b00      	cmp	r3, #0
 800432e:	d101      	bne.n	8004334 <xQueueGenericSend+0x44>
 8004330:	2301      	movs	r3, #1
 8004332:	e000      	b.n	8004336 <xQueueGenericSend+0x46>
 8004334:	2300      	movs	r3, #0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d10a      	bne.n	8004350 <xQueueGenericSend+0x60>
        __asm volatile
 800433a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800433e:	f383 8811 	msr	BASEPRI, r3
 8004342:	f3bf 8f6f 	isb	sy
 8004346:	f3bf 8f4f 	dsb	sy
 800434a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800434c:	bf00      	nop
 800434e:	e7fe      	b.n	800434e <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	2b02      	cmp	r3, #2
 8004354:	d103      	bne.n	800435e <xQueueGenericSend+0x6e>
 8004356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800435a:	2b01      	cmp	r3, #1
 800435c:	d101      	bne.n	8004362 <xQueueGenericSend+0x72>
 800435e:	2301      	movs	r3, #1
 8004360:	e000      	b.n	8004364 <xQueueGenericSend+0x74>
 8004362:	2300      	movs	r3, #0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d10a      	bne.n	800437e <xQueueGenericSend+0x8e>
        __asm volatile
 8004368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800436c:	f383 8811 	msr	BASEPRI, r3
 8004370:	f3bf 8f6f 	isb	sy
 8004374:	f3bf 8f4f 	dsb	sy
 8004378:	623b      	str	r3, [r7, #32]
    }
 800437a:	bf00      	nop
 800437c:	e7fe      	b.n	800437c <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800437e:	f001 f9d3 	bl	8005728 <xTaskGetSchedulerState>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d102      	bne.n	800438e <xQueueGenericSend+0x9e>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d101      	bne.n	8004392 <xQueueGenericSend+0xa2>
 800438e:	2301      	movs	r3, #1
 8004390:	e000      	b.n	8004394 <xQueueGenericSend+0xa4>
 8004392:	2300      	movs	r3, #0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d10a      	bne.n	80043ae <xQueueGenericSend+0xbe>
        __asm volatile
 8004398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800439c:	f383 8811 	msr	BASEPRI, r3
 80043a0:	f3bf 8f6f 	isb	sy
 80043a4:	f3bf 8f4f 	dsb	sy
 80043a8:	61fb      	str	r3, [r7, #28]
    }
 80043aa:	bf00      	nop
 80043ac:	e7fe      	b.n	80043ac <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80043ae:	f002 fa59 	bl	8006864 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80043b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d302      	bcc.n	80043c4 <xQueueGenericSend+0xd4>
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d129      	bne.n	8004418 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80043c4:	683a      	ldr	r2, [r7, #0]
 80043c6:	68b9      	ldr	r1, [r7, #8]
 80043c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043ca:	f000 fac6 	bl	800495a <prvCopyDataToQueue>
 80043ce:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80043d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d010      	beq.n	80043fa <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80043d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043da:	3324      	adds	r3, #36	; 0x24
 80043dc:	4618      	mov	r0, r3
 80043de:	f001 f807 	bl	80053f0 <xTaskRemoveFromEventList>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d013      	beq.n	8004410 <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80043e8:	4b3f      	ldr	r3, [pc, #252]	; (80044e8 <xQueueGenericSend+0x1f8>)
 80043ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043ee:	601a      	str	r2, [r3, #0]
 80043f0:	f3bf 8f4f 	dsb	sy
 80043f4:	f3bf 8f6f 	isb	sy
 80043f8:	e00a      	b.n	8004410 <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80043fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d007      	beq.n	8004410 <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8004400:	4b39      	ldr	r3, [pc, #228]	; (80044e8 <xQueueGenericSend+0x1f8>)
 8004402:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004406:	601a      	str	r2, [r3, #0]
 8004408:	f3bf 8f4f 	dsb	sy
 800440c:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8004410:	f002 fa58 	bl	80068c4 <vPortExitCritical>
                return pdPASS;
 8004414:	2301      	movs	r3, #1
 8004416:	e063      	b.n	80044e0 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d103      	bne.n	8004426 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800441e:	f002 fa51 	bl	80068c4 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8004422:	2300      	movs	r3, #0
 8004424:	e05c      	b.n	80044e0 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004428:	2b00      	cmp	r3, #0
 800442a:	d106      	bne.n	800443a <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800442c:	f107 0314 	add.w	r3, r7, #20
 8004430:	4618      	mov	r0, r3
 8004432:	f001 f83f 	bl	80054b4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004436:	2301      	movs	r3, #1
 8004438:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800443a:	f002 fa43 	bl	80068c4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800443e:	f000 fdb9 	bl	8004fb4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004442:	f002 fa0f 	bl	8006864 <vPortEnterCritical>
 8004446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004448:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800444c:	b25b      	sxtb	r3, r3
 800444e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004452:	d103      	bne.n	800445c <xQueueGenericSend+0x16c>
 8004454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004456:	2200      	movs	r2, #0
 8004458:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800445c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800445e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004462:	b25b      	sxtb	r3, r3
 8004464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004468:	d103      	bne.n	8004472 <xQueueGenericSend+0x182>
 800446a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446c:	2200      	movs	r2, #0
 800446e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004472:	f002 fa27 	bl	80068c4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004476:	1d3a      	adds	r2, r7, #4
 8004478:	f107 0314 	add.w	r3, r7, #20
 800447c:	4611      	mov	r1, r2
 800447e:	4618      	mov	r0, r3
 8004480:	f001 f82e 	bl	80054e0 <xTaskCheckForTimeOut>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d124      	bne.n	80044d4 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800448a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800448c:	f000 fb5d 	bl	8004b4a <prvIsQueueFull>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d018      	beq.n	80044c8 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004498:	3310      	adds	r3, #16
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	4611      	mov	r1, r2
 800449e:	4618      	mov	r0, r3
 80044a0:	f000 ff56 	bl	8005350 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80044a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044a6:	f000 fae8 	bl	8004a7a <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80044aa:	f000 fd91 	bl	8004fd0 <xTaskResumeAll>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	f47f af7c 	bne.w	80043ae <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 80044b6:	4b0c      	ldr	r3, [pc, #48]	; (80044e8 <xQueueGenericSend+0x1f8>)
 80044b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044bc:	601a      	str	r2, [r3, #0]
 80044be:	f3bf 8f4f 	dsb	sy
 80044c2:	f3bf 8f6f 	isb	sy
 80044c6:	e772      	b.n	80043ae <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80044c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044ca:	f000 fad6 	bl	8004a7a <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80044ce:	f000 fd7f 	bl	8004fd0 <xTaskResumeAll>
 80044d2:	e76c      	b.n	80043ae <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80044d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044d6:	f000 fad0 	bl	8004a7a <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80044da:	f000 fd79 	bl	8004fd0 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 80044de:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3738      	adds	r7, #56	; 0x38
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	e000ed04 	.word	0xe000ed04

080044ec <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b090      	sub	sp, #64	; 0x40
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]
 80044f8:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80044fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004500:	2b00      	cmp	r3, #0
 8004502:	d10a      	bne.n	800451a <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8004504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004508:	f383 8811 	msr	BASEPRI, r3
 800450c:	f3bf 8f6f 	isb	sy
 8004510:	f3bf 8f4f 	dsb	sy
 8004514:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8004516:	bf00      	nop
 8004518:	e7fe      	b.n	8004518 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d103      	bne.n	8004528 <xQueueGenericSendFromISR+0x3c>
 8004520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004524:	2b00      	cmp	r3, #0
 8004526:	d101      	bne.n	800452c <xQueueGenericSendFromISR+0x40>
 8004528:	2301      	movs	r3, #1
 800452a:	e000      	b.n	800452e <xQueueGenericSendFromISR+0x42>
 800452c:	2300      	movs	r3, #0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10a      	bne.n	8004548 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8004532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004536:	f383 8811 	msr	BASEPRI, r3
 800453a:	f3bf 8f6f 	isb	sy
 800453e:	f3bf 8f4f 	dsb	sy
 8004542:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8004544:	bf00      	nop
 8004546:	e7fe      	b.n	8004546 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	2b02      	cmp	r3, #2
 800454c:	d103      	bne.n	8004556 <xQueueGenericSendFromISR+0x6a>
 800454e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004552:	2b01      	cmp	r3, #1
 8004554:	d101      	bne.n	800455a <xQueueGenericSendFromISR+0x6e>
 8004556:	2301      	movs	r3, #1
 8004558:	e000      	b.n	800455c <xQueueGenericSendFromISR+0x70>
 800455a:	2300      	movs	r3, #0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d10a      	bne.n	8004576 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8004560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004564:	f383 8811 	msr	BASEPRI, r3
 8004568:	f3bf 8f6f 	isb	sy
 800456c:	f3bf 8f4f 	dsb	sy
 8004570:	623b      	str	r3, [r7, #32]
    }
 8004572:	bf00      	nop
 8004574:	e7fe      	b.n	8004574 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004576:	f002 fa59 	bl	8006a2c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 800457a:	f3ef 8211 	mrs	r2, BASEPRI
 800457e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004582:	f383 8811 	msr	BASEPRI, r3
 8004586:	f3bf 8f6f 	isb	sy
 800458a:	f3bf 8f4f 	dsb	sy
 800458e:	61fa      	str	r2, [r7, #28]
 8004590:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8004592:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004594:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004598:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800459a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800459c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800459e:	429a      	cmp	r2, r3
 80045a0:	d302      	bcc.n	80045a8 <xQueueGenericSendFromISR+0xbc>
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d13e      	bne.n	8004626 <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80045a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80045b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b6:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80045b8:	683a      	ldr	r2, [r7, #0]
 80045ba:	68b9      	ldr	r1, [r7, #8]
 80045bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80045be:	f000 f9cc 	bl	800495a <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80045c2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80045c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ca:	d112      	bne.n	80045f2 <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80045cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d025      	beq.n	8004620 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80045d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045d6:	3324      	adds	r3, #36	; 0x24
 80045d8:	4618      	mov	r0, r3
 80045da:	f000 ff09 	bl	80053f0 <xTaskRemoveFromEventList>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d01d      	beq.n	8004620 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d01a      	beq.n	8004620 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2201      	movs	r2, #1
 80045ee:	601a      	str	r2, [r3, #0]
 80045f0:	e016      	b.n	8004620 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80045f2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80045f6:	2b7f      	cmp	r3, #127	; 0x7f
 80045f8:	d10a      	bne.n	8004610 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 80045fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045fe:	f383 8811 	msr	BASEPRI, r3
 8004602:	f3bf 8f6f 	isb	sy
 8004606:	f3bf 8f4f 	dsb	sy
 800460a:	617b      	str	r3, [r7, #20]
    }
 800460c:	bf00      	nop
 800460e:	e7fe      	b.n	800460e <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004610:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004614:	3301      	adds	r3, #1
 8004616:	b2db      	uxtb	r3, r3
 8004618:	b25a      	sxtb	r2, r3
 800461a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800461c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8004620:	2301      	movs	r3, #1
 8004622:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8004624:	e001      	b.n	800462a <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8004626:	2300      	movs	r3, #0
 8004628:	63fb      	str	r3, [r7, #60]	; 0x3c
 800462a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800462c:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004634:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8004636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004638:	4618      	mov	r0, r3
 800463a:	3740      	adds	r7, #64	; 0x40
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b08c      	sub	sp, #48	; 0x30
 8004644:	af00      	add	r7, sp, #0
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800464c:	2300      	movs	r3, #0
 800464e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8004654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004656:	2b00      	cmp	r3, #0
 8004658:	d10a      	bne.n	8004670 <xQueueReceive+0x30>
        __asm volatile
 800465a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800465e:	f383 8811 	msr	BASEPRI, r3
 8004662:	f3bf 8f6f 	isb	sy
 8004666:	f3bf 8f4f 	dsb	sy
 800466a:	623b      	str	r3, [r7, #32]
    }
 800466c:	bf00      	nop
 800466e:	e7fe      	b.n	800466e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d103      	bne.n	800467e <xQueueReceive+0x3e>
 8004676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467a:	2b00      	cmp	r3, #0
 800467c:	d101      	bne.n	8004682 <xQueueReceive+0x42>
 800467e:	2301      	movs	r3, #1
 8004680:	e000      	b.n	8004684 <xQueueReceive+0x44>
 8004682:	2300      	movs	r3, #0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d10a      	bne.n	800469e <xQueueReceive+0x5e>
        __asm volatile
 8004688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800468c:	f383 8811 	msr	BASEPRI, r3
 8004690:	f3bf 8f6f 	isb	sy
 8004694:	f3bf 8f4f 	dsb	sy
 8004698:	61fb      	str	r3, [r7, #28]
    }
 800469a:	bf00      	nop
 800469c:	e7fe      	b.n	800469c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800469e:	f001 f843 	bl	8005728 <xTaskGetSchedulerState>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d102      	bne.n	80046ae <xQueueReceive+0x6e>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d101      	bne.n	80046b2 <xQueueReceive+0x72>
 80046ae:	2301      	movs	r3, #1
 80046b0:	e000      	b.n	80046b4 <xQueueReceive+0x74>
 80046b2:	2300      	movs	r3, #0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d10a      	bne.n	80046ce <xQueueReceive+0x8e>
        __asm volatile
 80046b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046bc:	f383 8811 	msr	BASEPRI, r3
 80046c0:	f3bf 8f6f 	isb	sy
 80046c4:	f3bf 8f4f 	dsb	sy
 80046c8:	61bb      	str	r3, [r7, #24]
    }
 80046ca:	bf00      	nop
 80046cc:	e7fe      	b.n	80046cc <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80046ce:	f002 f8c9 	bl	8006864 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80046d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d6:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80046d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d01f      	beq.n	800471e <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80046de:	68b9      	ldr	r1, [r7, #8]
 80046e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046e2:	f000 f9a4 	bl	8004a2e <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80046e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e8:	1e5a      	subs	r2, r3, #1
 80046ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ec:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00f      	beq.n	8004716 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f8:	3310      	adds	r3, #16
 80046fa:	4618      	mov	r0, r3
 80046fc:	f000 fe78 	bl	80053f0 <xTaskRemoveFromEventList>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d007      	beq.n	8004716 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004706:	4b3d      	ldr	r3, [pc, #244]	; (80047fc <xQueueReceive+0x1bc>)
 8004708:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800470c:	601a      	str	r2, [r3, #0]
 800470e:	f3bf 8f4f 	dsb	sy
 8004712:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8004716:	f002 f8d5 	bl	80068c4 <vPortExitCritical>
                return pdPASS;
 800471a:	2301      	movs	r3, #1
 800471c:	e069      	b.n	80047f2 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d103      	bne.n	800472c <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004724:	f002 f8ce 	bl	80068c4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8004728:	2300      	movs	r3, #0
 800472a:	e062      	b.n	80047f2 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 800472c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800472e:	2b00      	cmp	r3, #0
 8004730:	d106      	bne.n	8004740 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004732:	f107 0310 	add.w	r3, r7, #16
 8004736:	4618      	mov	r0, r3
 8004738:	f000 febc 	bl	80054b4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800473c:	2301      	movs	r3, #1
 800473e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004740:	f002 f8c0 	bl	80068c4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004744:	f000 fc36 	bl	8004fb4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004748:	f002 f88c 	bl	8006864 <vPortEnterCritical>
 800474c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800474e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004752:	b25b      	sxtb	r3, r3
 8004754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004758:	d103      	bne.n	8004762 <xQueueReceive+0x122>
 800475a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800475c:	2200      	movs	r2, #0
 800475e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004764:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004768:	b25b      	sxtb	r3, r3
 800476a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800476e:	d103      	bne.n	8004778 <xQueueReceive+0x138>
 8004770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004772:	2200      	movs	r2, #0
 8004774:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004778:	f002 f8a4 	bl	80068c4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800477c:	1d3a      	adds	r2, r7, #4
 800477e:	f107 0310 	add.w	r3, r7, #16
 8004782:	4611      	mov	r1, r2
 8004784:	4618      	mov	r0, r3
 8004786:	f000 feab 	bl	80054e0 <xTaskCheckForTimeOut>
 800478a:	4603      	mov	r3, r0
 800478c:	2b00      	cmp	r3, #0
 800478e:	d123      	bne.n	80047d8 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004790:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004792:	f000 f9c4 	bl	8004b1e <prvIsQueueEmpty>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d017      	beq.n	80047cc <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800479c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800479e:	3324      	adds	r3, #36	; 0x24
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	4611      	mov	r1, r2
 80047a4:	4618      	mov	r0, r3
 80047a6:	f000 fdd3 	bl	8005350 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80047aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047ac:	f000 f965 	bl	8004a7a <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80047b0:	f000 fc0e 	bl	8004fd0 <xTaskResumeAll>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d189      	bne.n	80046ce <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80047ba:	4b10      	ldr	r3, [pc, #64]	; (80047fc <xQueueReceive+0x1bc>)
 80047bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047c0:	601a      	str	r2, [r3, #0]
 80047c2:	f3bf 8f4f 	dsb	sy
 80047c6:	f3bf 8f6f 	isb	sy
 80047ca:	e780      	b.n	80046ce <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80047cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047ce:	f000 f954 	bl	8004a7a <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80047d2:	f000 fbfd 	bl	8004fd0 <xTaskResumeAll>
 80047d6:	e77a      	b.n	80046ce <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80047d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047da:	f000 f94e 	bl	8004a7a <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80047de:	f000 fbf7 	bl	8004fd0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80047e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047e4:	f000 f99b 	bl	8004b1e <prvIsQueueEmpty>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	f43f af6f 	beq.w	80046ce <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80047f0:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3730      	adds	r7, #48	; 0x30
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	e000ed04 	.word	0xe000ed04

08004800 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b090      	sub	sp, #64	; 0x40
 8004804:	af00      	add	r7, sp, #0
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8004810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004812:	2b00      	cmp	r3, #0
 8004814:	d10a      	bne.n	800482c <xQueueReceiveFromISR+0x2c>
        __asm volatile
 8004816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800481a:	f383 8811 	msr	BASEPRI, r3
 800481e:	f3bf 8f6f 	isb	sy
 8004822:	f3bf 8f4f 	dsb	sy
 8004826:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8004828:	bf00      	nop
 800482a:	e7fe      	b.n	800482a <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d103      	bne.n	800483a <xQueueReceiveFromISR+0x3a>
 8004832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004836:	2b00      	cmp	r3, #0
 8004838:	d101      	bne.n	800483e <xQueueReceiveFromISR+0x3e>
 800483a:	2301      	movs	r3, #1
 800483c:	e000      	b.n	8004840 <xQueueReceiveFromISR+0x40>
 800483e:	2300      	movs	r3, #0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d10a      	bne.n	800485a <xQueueReceiveFromISR+0x5a>
        __asm volatile
 8004844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004848:	f383 8811 	msr	BASEPRI, r3
 800484c:	f3bf 8f6f 	isb	sy
 8004850:	f3bf 8f4f 	dsb	sy
 8004854:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8004856:	bf00      	nop
 8004858:	e7fe      	b.n	8004858 <xQueueReceiveFromISR+0x58>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800485a:	f002 f8e7 	bl	8006a2c <vPortValidateInterruptPriority>
        __asm volatile
 800485e:	f3ef 8211 	mrs	r2, BASEPRI
 8004862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004866:	f383 8811 	msr	BASEPRI, r3
 800486a:	f3bf 8f6f 	isb	sy
 800486e:	f3bf 8f4f 	dsb	sy
 8004872:	623a      	str	r2, [r7, #32]
 8004874:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 8004876:	6a3b      	ldr	r3, [r7, #32]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004878:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800487a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800487c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800487e:	633b      	str	r3, [r7, #48]	; 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004882:	2b00      	cmp	r3, #0
 8004884:	d03e      	beq.n	8004904 <xQueueReceiveFromISR+0x104>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 8004886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004888:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800488c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004890:	68b9      	ldr	r1, [r7, #8]
 8004892:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004894:	f000 f8cb 	bl	8004a2e <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800489a:	1e5a      	subs	r2, r3, #1
 800489c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800489e:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 80048a0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80048a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048a8:	d112      	bne.n	80048d0 <xQueueReceiveFromISR+0xd0>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d025      	beq.n	80048fe <xQueueReceiveFromISR+0xfe>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b4:	3310      	adds	r3, #16
 80048b6:	4618      	mov	r0, r3
 80048b8:	f000 fd9a 	bl	80053f0 <xTaskRemoveFromEventList>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d01d      	beq.n	80048fe <xQueueReceiveFromISR+0xfe>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d01a      	beq.n	80048fe <xQueueReceiveFromISR+0xfe>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	601a      	str	r2, [r3, #0]
 80048ce:	e016      	b.n	80048fe <xQueueReceiveFromISR+0xfe>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                configASSERT( cRxLock != queueINT8_MAX );
 80048d0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80048d4:	2b7f      	cmp	r3, #127	; 0x7f
 80048d6:	d10a      	bne.n	80048ee <xQueueReceiveFromISR+0xee>
        __asm volatile
 80048d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048dc:	f383 8811 	msr	BASEPRI, r3
 80048e0:	f3bf 8f6f 	isb	sy
 80048e4:	f3bf 8f4f 	dsb	sy
 80048e8:	61bb      	str	r3, [r7, #24]
    }
 80048ea:	bf00      	nop
 80048ec:	e7fe      	b.n	80048ec <xQueueReceiveFromISR+0xec>

                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80048ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80048f2:	3301      	adds	r3, #1
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	b25a      	sxtb	r2, r3
 80048f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 80048fe:	2301      	movs	r3, #1
 8004900:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004902:	e001      	b.n	8004908 <xQueueReceiveFromISR+0x108>
        }
        else
        {
            xReturn = pdFAIL;
 8004904:	2300      	movs	r3, #0
 8004906:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800490a:	617b      	str	r3, [r7, #20]
        __asm volatile
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	f383 8811 	msr	BASEPRI, r3
    }
 8004912:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8004914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004916:	4618      	mov	r0, r3
 8004918:	3740      	adds	r7, #64	; 0x40
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}

0800491e <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800491e:	b580      	push	{r7, lr}
 8004920:	b084      	sub	sp, #16
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d10a      	bne.n	8004942 <uxQueueMessagesWaiting+0x24>
        __asm volatile
 800492c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004930:	f383 8811 	msr	BASEPRI, r3
 8004934:	f3bf 8f6f 	isb	sy
 8004938:	f3bf 8f4f 	dsb	sy
 800493c:	60bb      	str	r3, [r7, #8]
    }
 800493e:	bf00      	nop
 8004940:	e7fe      	b.n	8004940 <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 8004942:	f001 ff8f 	bl	8006864 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800494a:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 800494c:	f001 ffba 	bl	80068c4 <vPortExitCritical>

    return uxReturn;
 8004950:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8004952:	4618      	mov	r0, r3
 8004954:	3710      	adds	r7, #16
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}

0800495a <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800495a:	b580      	push	{r7, lr}
 800495c:	b086      	sub	sp, #24
 800495e:	af00      	add	r7, sp, #0
 8004960:	60f8      	str	r0, [r7, #12]
 8004962:	60b9      	str	r1, [r7, #8]
 8004964:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8004966:	2300      	movs	r3, #0
 8004968:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800496e:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004974:	2b00      	cmp	r3, #0
 8004976:	d10d      	bne.n	8004994 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d14d      	bne.n	8004a1c <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	4618      	mov	r0, r3
 8004986:	f000 feed 	bl	8005764 <xTaskPriorityDisinherit>
 800498a:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2200      	movs	r2, #0
 8004990:	609a      	str	r2, [r3, #8]
 8004992:	e043      	b.n	8004a1c <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d119      	bne.n	80049ce <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6858      	ldr	r0, [r3, #4]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a2:	461a      	mov	r2, r3
 80049a4:	68b9      	ldr	r1, [r7, #8]
 80049a6:	f002 faa3 	bl	8006ef0 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	685a      	ldr	r2, [r3, #4]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b2:	441a      	add	r2, r3
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	685a      	ldr	r2, [r3, #4]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d32b      	bcc.n	8004a1c <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	605a      	str	r2, [r3, #4]
 80049cc:	e026      	b.n	8004a1c <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	68d8      	ldr	r0, [r3, #12]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d6:	461a      	mov	r2, r3
 80049d8:	68b9      	ldr	r1, [r7, #8]
 80049da:	f002 fa89 	bl	8006ef0 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	68da      	ldr	r2, [r3, #12]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e6:	425b      	negs	r3, r3
 80049e8:	441a      	add	r2, r3
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	68da      	ldr	r2, [r3, #12]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d207      	bcs.n	8004a0a <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	689a      	ldr	r2, [r3, #8]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a02:	425b      	negs	r3, r3
 8004a04:	441a      	add	r2, r3
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	d105      	bne.n	8004a1c <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d002      	beq.n	8004a1c <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	1c5a      	adds	r2, r3, #1
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8004a24:	697b      	ldr	r3, [r7, #20]
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3718      	adds	r7, #24
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}

08004a2e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8004a2e:	b580      	push	{r7, lr}
 8004a30:	b082      	sub	sp, #8
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
 8004a36:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d018      	beq.n	8004a72 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	68da      	ldr	r2, [r3, #12]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a48:	441a      	add	r2, r3
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	68da      	ldr	r2, [r3, #12]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d303      	bcc.n	8004a62 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	68d9      	ldr	r1, [r3, #12]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	6838      	ldr	r0, [r7, #0]
 8004a6e:	f002 fa3f 	bl	8006ef0 <memcpy>
    }
}
 8004a72:	bf00      	nop
 8004a74:	3708      	adds	r7, #8
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}

08004a7a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004a7a:	b580      	push	{r7, lr}
 8004a7c:	b084      	sub	sp, #16
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8004a82:	f001 feef 	bl	8006864 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a8c:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004a8e:	e011      	b.n	8004ab4 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d012      	beq.n	8004abe <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	3324      	adds	r3, #36	; 0x24
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f000 fca7 	bl	80053f0 <xTaskRemoveFromEventList>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d001      	beq.n	8004aac <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8004aa8:	f000 fd80 	bl	80055ac <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8004aac:	7bfb      	ldrb	r3, [r7, #15]
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ab4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	dce9      	bgt.n	8004a90 <prvUnlockQueue+0x16>
 8004abc:	e000      	b.n	8004ac0 <prvUnlockQueue+0x46>
                        break;
 8004abe:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	22ff      	movs	r2, #255	; 0xff
 8004ac4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8004ac8:	f001 fefc 	bl	80068c4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8004acc:	f001 feca 	bl	8006864 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ad6:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004ad8:	e011      	b.n	8004afe <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d012      	beq.n	8004b08 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	3310      	adds	r3, #16
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f000 fc82 	bl	80053f0 <xTaskRemoveFromEventList>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d001      	beq.n	8004af6 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8004af2:	f000 fd5b 	bl	80055ac <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8004af6:	7bbb      	ldrb	r3, [r7, #14]
 8004af8:	3b01      	subs	r3, #1
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004afe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	dce9      	bgt.n	8004ada <prvUnlockQueue+0x60>
 8004b06:	e000      	b.n	8004b0a <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8004b08:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	22ff      	movs	r2, #255	; 0xff
 8004b0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8004b12:	f001 fed7 	bl	80068c4 <vPortExitCritical>
}
 8004b16:	bf00      	nop
 8004b18:	3710      	adds	r7, #16
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8004b1e:	b580      	push	{r7, lr}
 8004b20:	b084      	sub	sp, #16
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004b26:	f001 fe9d 	bl	8006864 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d102      	bne.n	8004b38 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8004b32:	2301      	movs	r3, #1
 8004b34:	60fb      	str	r3, [r7, #12]
 8004b36:	e001      	b.n	8004b3c <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8004b3c:	f001 fec2 	bl	80068c4 <vPortExitCritical>

    return xReturn;
 8004b40:	68fb      	ldr	r3, [r7, #12]
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3710      	adds	r7, #16
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}

08004b4a <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8004b4a:	b580      	push	{r7, lr}
 8004b4c:	b084      	sub	sp, #16
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004b52:	f001 fe87 	bl	8006864 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d102      	bne.n	8004b68 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8004b62:	2301      	movs	r3, #1
 8004b64:	60fb      	str	r3, [r7, #12]
 8004b66:	e001      	b.n	8004b6c <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8004b6c:	f001 feaa 	bl	80068c4 <vPortExitCritical>

    return xReturn;
 8004b70:	68fb      	ldr	r3, [r7, #12]
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3710      	adds	r7, #16
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}

08004b7a <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 8004b7a:	b480      	push	{r7}
 8004b7c:	b087      	sub	sp, #28
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d10a      	bne.n	8004ba2 <xQueueIsQueueFullFromISR+0x28>
        __asm volatile
 8004b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b90:	f383 8811 	msr	BASEPRI, r3
 8004b94:	f3bf 8f6f 	isb	sy
 8004b98:	f3bf 8f4f 	dsb	sy
 8004b9c:	60fb      	str	r3, [r7, #12]
    }
 8004b9e:	bf00      	nop
 8004ba0:	e7fe      	b.n	8004ba0 <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d102      	bne.n	8004bb4 <xQueueIsQueueFullFromISR+0x3a>
    {
        xReturn = pdTRUE;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	617b      	str	r3, [r7, #20]
 8004bb2:	e001      	b.n	8004bb8 <xQueueIsQueueFullFromISR+0x3e>
    }
    else
    {
        xReturn = pdFALSE;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8004bb8:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8004bba:	4618      	mov	r0, r3
 8004bbc:	371c      	adds	r7, #28
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr
	...

08004bc8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8004bc8:	b480      	push	{r7}
 8004bca:	b085      	sub	sp, #20
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	60fb      	str	r3, [r7, #12]
 8004bd6:	e014      	b.n	8004c02 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004bd8:	4a0f      	ldr	r2, [pc, #60]	; (8004c18 <vQueueAddToRegistry+0x50>)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d10b      	bne.n	8004bfc <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004be4:	490c      	ldr	r1, [pc, #48]	; (8004c18 <vQueueAddToRegistry+0x50>)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	683a      	ldr	r2, [r7, #0]
 8004bea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8004bee:	4a0a      	ldr	r2, [pc, #40]	; (8004c18 <vQueueAddToRegistry+0x50>)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	00db      	lsls	r3, r3, #3
 8004bf4:	4413      	add	r3, r2
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8004bfa:	e006      	b.n	8004c0a <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	3301      	adds	r3, #1
 8004c00:	60fb      	str	r3, [r7, #12]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2b07      	cmp	r3, #7
 8004c06:	d9e7      	bls.n	8004bd8 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8004c08:	bf00      	nop
 8004c0a:	bf00      	nop
 8004c0c:	3714      	adds	r7, #20
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	20000124 	.word	0x20000124

08004c1c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b086      	sub	sp, #24
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8004c2c:	f001 fe1a 	bl	8006864 <vPortEnterCritical>
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c36:	b25b      	sxtb	r3, r3
 8004c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c3c:	d103      	bne.n	8004c46 <vQueueWaitForMessageRestricted+0x2a>
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c4c:	b25b      	sxtb	r3, r3
 8004c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c52:	d103      	bne.n	8004c5c <vQueueWaitForMessageRestricted+0x40>
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c5c:	f001 fe32 	bl	80068c4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d106      	bne.n	8004c76 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	3324      	adds	r3, #36	; 0x24
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	68b9      	ldr	r1, [r7, #8]
 8004c70:	4618      	mov	r0, r3
 8004c72:	f000 fb91 	bl	8005398 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8004c76:	6978      	ldr	r0, [r7, #20]
 8004c78:	f7ff feff 	bl	8004a7a <prvUnlockQueue>
    }
 8004c7c:	bf00      	nop
 8004c7e:	3718      	adds	r7, #24
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b08c      	sub	sp, #48	; 0x30
 8004c88:	af04      	add	r7, sp, #16
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	603b      	str	r3, [r7, #0]
 8004c90:	4613      	mov	r3, r2
 8004c92:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004c94:	88fb      	ldrh	r3, [r7, #6]
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f001 ff07 	bl	8006aac <pvPortMalloc>
 8004c9e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d00e      	beq.n	8004cc4 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004ca6:	2058      	movs	r0, #88	; 0x58
 8004ca8:	f001 ff00 	bl	8006aac <pvPortMalloc>
 8004cac:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d003      	beq.n	8004cbc <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	697a      	ldr	r2, [r7, #20]
 8004cb8:	631a      	str	r2, [r3, #48]	; 0x30
 8004cba:	e005      	b.n	8004cc8 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8004cbc:	6978      	ldr	r0, [r7, #20]
 8004cbe:	f001 ffd5 	bl	8006c6c <vPortFree>
 8004cc2:	e001      	b.n	8004cc8 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d013      	beq.n	8004cf6 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004cce:	88fa      	ldrh	r2, [r7, #6]
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	9303      	str	r3, [sp, #12]
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	9302      	str	r3, [sp, #8]
 8004cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cda:	9301      	str	r3, [sp, #4]
 8004cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cde:	9300      	str	r3, [sp, #0]
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	68b9      	ldr	r1, [r7, #8]
 8004ce4:	68f8      	ldr	r0, [r7, #12]
 8004ce6:	f000 f80e 	bl	8004d06 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8004cea:	69f8      	ldr	r0, [r7, #28]
 8004cec:	f000 f8a2 	bl	8004e34 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	61bb      	str	r3, [r7, #24]
 8004cf4:	e002      	b.n	8004cfc <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8004cfa:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8004cfc:	69bb      	ldr	r3, [r7, #24]
    }
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3720      	adds	r7, #32
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8004d06:	b580      	push	{r7, lr}
 8004d08:	b088      	sub	sp, #32
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	60f8      	str	r0, [r7, #12]
 8004d0e:	60b9      	str	r1, [r7, #8]
 8004d10:	607a      	str	r2, [r7, #4]
 8004d12:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d16:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	21a5      	movs	r1, #165	; 0xa5
 8004d20:	f002 f8f4 	bl	8006f0c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004d2e:	3b01      	subs	r3, #1
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	4413      	add	r3, r2
 8004d34:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	f023 0307 	bic.w	r3, r3, #7
 8004d3c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	f003 0307 	and.w	r3, r3, #7
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d00a      	beq.n	8004d5e <prvInitialiseNewTask+0x58>
        __asm volatile
 8004d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d4c:	f383 8811 	msr	BASEPRI, r3
 8004d50:	f3bf 8f6f 	isb	sy
 8004d54:	f3bf 8f4f 	dsb	sy
 8004d58:	617b      	str	r3, [r7, #20]
    }
 8004d5a:	bf00      	nop
 8004d5c:	e7fe      	b.n	8004d5c <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d01f      	beq.n	8004da4 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d64:	2300      	movs	r3, #0
 8004d66:	61fb      	str	r3, [r7, #28]
 8004d68:	e012      	b.n	8004d90 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004d6a:	68ba      	ldr	r2, [r7, #8]
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	4413      	add	r3, r2
 8004d70:	7819      	ldrb	r1, [r3, #0]
 8004d72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	4413      	add	r3, r2
 8004d78:	3334      	adds	r3, #52	; 0x34
 8004d7a:	460a      	mov	r2, r1
 8004d7c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8004d7e:	68ba      	ldr	r2, [r7, #8]
 8004d80:	69fb      	ldr	r3, [r7, #28]
 8004d82:	4413      	add	r3, r2
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d006      	beq.n	8004d98 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	3301      	adds	r3, #1
 8004d8e:	61fb      	str	r3, [r7, #28]
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	2b09      	cmp	r3, #9
 8004d94:	d9e9      	bls.n	8004d6a <prvInitialiseNewTask+0x64>
 8004d96:	e000      	b.n	8004d9a <prvInitialiseNewTask+0x94>
            {
                break;
 8004d98:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004da2:	e003      	b.n	8004dac <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dae:	2b04      	cmp	r3, #4
 8004db0:	d901      	bls.n	8004db6 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004db2:	2304      	movs	r3, #4
 8004db4:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8004db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dba:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8004dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dc0:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8004dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dca:	3304      	adds	r3, #4
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f7ff f911 	bl	8003ff4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd4:	3318      	adds	r3, #24
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7ff f90c 	bl	8003ff4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004de0:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de4:	f1c3 0205 	rsb	r2, r3, #5
 8004de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dea:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004df0:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8004df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df4:	3350      	adds	r3, #80	; 0x50
 8004df6:	2204      	movs	r2, #4
 8004df8:	2100      	movs	r1, #0
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f002 f886 	bl	8006f0c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8004e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e02:	3354      	adds	r3, #84	; 0x54
 8004e04:	2201      	movs	r2, #1
 8004e06:	2100      	movs	r1, #0
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f002 f87f 	bl	8006f0c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004e0e:	683a      	ldr	r2, [r7, #0]
 8004e10:	68f9      	ldr	r1, [r7, #12]
 8004e12:	69b8      	ldr	r0, [r7, #24]
 8004e14:	f001 fb76 	bl	8006504 <pxPortInitialiseStack>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e1c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8004e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d002      	beq.n	8004e2a <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e28:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004e2a:	bf00      	nop
 8004e2c:	3720      	adds	r7, #32
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
	...

08004e34 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8004e3c:	f001 fd12 	bl	8006864 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8004e40:	4b2c      	ldr	r3, [pc, #176]	; (8004ef4 <prvAddNewTaskToReadyList+0xc0>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	3301      	adds	r3, #1
 8004e46:	4a2b      	ldr	r2, [pc, #172]	; (8004ef4 <prvAddNewTaskToReadyList+0xc0>)
 8004e48:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8004e4a:	4b2b      	ldr	r3, [pc, #172]	; (8004ef8 <prvAddNewTaskToReadyList+0xc4>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d109      	bne.n	8004e66 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8004e52:	4a29      	ldr	r2, [pc, #164]	; (8004ef8 <prvAddNewTaskToReadyList+0xc4>)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004e58:	4b26      	ldr	r3, [pc, #152]	; (8004ef4 <prvAddNewTaskToReadyList+0xc0>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d110      	bne.n	8004e82 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8004e60:	f000 fbc8 	bl	80055f4 <prvInitialiseTaskLists>
 8004e64:	e00d      	b.n	8004e82 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8004e66:	4b25      	ldr	r3, [pc, #148]	; (8004efc <prvAddNewTaskToReadyList+0xc8>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d109      	bne.n	8004e82 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004e6e:	4b22      	ldr	r3, [pc, #136]	; (8004ef8 <prvAddNewTaskToReadyList+0xc4>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d802      	bhi.n	8004e82 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8004e7c:	4a1e      	ldr	r2, [pc, #120]	; (8004ef8 <prvAddNewTaskToReadyList+0xc4>)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8004e82:	4b1f      	ldr	r3, [pc, #124]	; (8004f00 <prvAddNewTaskToReadyList+0xcc>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	3301      	adds	r3, #1
 8004e88:	4a1d      	ldr	r2, [pc, #116]	; (8004f00 <prvAddNewTaskToReadyList+0xcc>)
 8004e8a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004e8c:	4b1c      	ldr	r3, [pc, #112]	; (8004f00 <prvAddNewTaskToReadyList+0xcc>)
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e98:	2201      	movs	r2, #1
 8004e9a:	409a      	lsls	r2, r3
 8004e9c:	4b19      	ldr	r3, [pc, #100]	; (8004f04 <prvAddNewTaskToReadyList+0xd0>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	4a18      	ldr	r2, [pc, #96]	; (8004f04 <prvAddNewTaskToReadyList+0xd0>)
 8004ea4:	6013      	str	r3, [r2, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eaa:	4613      	mov	r3, r2
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	4413      	add	r3, r2
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	4a15      	ldr	r2, [pc, #84]	; (8004f08 <prvAddNewTaskToReadyList+0xd4>)
 8004eb4:	441a      	add	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	3304      	adds	r3, #4
 8004eba:	4619      	mov	r1, r3
 8004ebc:	4610      	mov	r0, r2
 8004ebe:	f7ff f8a6 	bl	800400e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8004ec2:	f001 fcff 	bl	80068c4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8004ec6:	4b0d      	ldr	r3, [pc, #52]	; (8004efc <prvAddNewTaskToReadyList+0xc8>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d00e      	beq.n	8004eec <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004ece:	4b0a      	ldr	r3, [pc, #40]	; (8004ef8 <prvAddNewTaskToReadyList+0xc4>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d207      	bcs.n	8004eec <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8004edc:	4b0b      	ldr	r3, [pc, #44]	; (8004f0c <prvAddNewTaskToReadyList+0xd8>)
 8004ede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ee2:	601a      	str	r2, [r3, #0]
 8004ee4:	f3bf 8f4f 	dsb	sy
 8004ee8:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004eec:	bf00      	nop
 8004eee:	3708      	adds	r7, #8
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	2000023c 	.word	0x2000023c
 8004ef8:	20000164 	.word	0x20000164
 8004efc:	20000248 	.word	0x20000248
 8004f00:	20000258 	.word	0x20000258
 8004f04:	20000244 	.word	0x20000244
 8004f08:	20000168 	.word	0x20000168
 8004f0c:	e000ed04 	.word	0xe000ed04

08004f10 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b086      	sub	sp, #24
 8004f14:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8004f16:	4b20      	ldr	r3, [pc, #128]	; (8004f98 <vTaskStartScheduler+0x88>)
 8004f18:	9301      	str	r3, [sp, #4]
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	9300      	str	r3, [sp, #0]
 8004f1e:	2300      	movs	r3, #0
 8004f20:	2282      	movs	r2, #130	; 0x82
 8004f22:	491e      	ldr	r1, [pc, #120]	; (8004f9c <vTaskStartScheduler+0x8c>)
 8004f24:	481e      	ldr	r0, [pc, #120]	; (8004fa0 <vTaskStartScheduler+0x90>)
 8004f26:	f7ff fead 	bl	8004c84 <xTaskCreate>
 8004f2a:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d102      	bne.n	8004f38 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8004f32:	f000 ff59 	bl	8005de8 <xTimerCreateTimerTask>
 8004f36:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d116      	bne.n	8004f6c <vTaskStartScheduler+0x5c>
        __asm volatile
 8004f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f42:	f383 8811 	msr	BASEPRI, r3
 8004f46:	f3bf 8f6f 	isb	sy
 8004f4a:	f3bf 8f4f 	dsb	sy
 8004f4e:	60bb      	str	r3, [r7, #8]
    }
 8004f50:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8004f52:	4b14      	ldr	r3, [pc, #80]	; (8004fa4 <vTaskStartScheduler+0x94>)
 8004f54:	f04f 32ff 	mov.w	r2, #4294967295
 8004f58:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8004f5a:	4b13      	ldr	r3, [pc, #76]	; (8004fa8 <vTaskStartScheduler+0x98>)
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004f60:	4b12      	ldr	r3, [pc, #72]	; (8004fac <vTaskStartScheduler+0x9c>)
 8004f62:	2200      	movs	r2, #0
 8004f64:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8004f66:	f001 fb5d 	bl	8006624 <xPortStartScheduler>
 8004f6a:	e00e      	b.n	8004f8a <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f72:	d10a      	bne.n	8004f8a <vTaskStartScheduler+0x7a>
        __asm volatile
 8004f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f78:	f383 8811 	msr	BASEPRI, r3
 8004f7c:	f3bf 8f6f 	isb	sy
 8004f80:	f3bf 8f4f 	dsb	sy
 8004f84:	607b      	str	r3, [r7, #4]
    }
 8004f86:	bf00      	nop
 8004f88:	e7fe      	b.n	8004f88 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8004f8a:	4b09      	ldr	r3, [pc, #36]	; (8004fb0 <vTaskStartScheduler+0xa0>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
}
 8004f8e:	bf00      	nop
 8004f90:	3710      	adds	r7, #16
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	20000260 	.word	0x20000260
 8004f9c:	080070c8 	.word	0x080070c8
 8004fa0:	080055c5 	.word	0x080055c5
 8004fa4:	2000025c 	.word	0x2000025c
 8004fa8:	20000248 	.word	0x20000248
 8004fac:	20000240 	.word	0x20000240
 8004fb0:	20000018 	.word	0x20000018

08004fb4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8004fb8:	4b04      	ldr	r3, [pc, #16]	; (8004fcc <vTaskSuspendAll+0x18>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	4a03      	ldr	r2, [pc, #12]	; (8004fcc <vTaskSuspendAll+0x18>)
 8004fc0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8004fc2:	bf00      	nop
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr
 8004fcc:	20000264 	.word	0x20000264

08004fd0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8004fde:	4b41      	ldr	r3, [pc, #260]	; (80050e4 <xTaskResumeAll+0x114>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d10a      	bne.n	8004ffc <xTaskResumeAll+0x2c>
        __asm volatile
 8004fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fea:	f383 8811 	msr	BASEPRI, r3
 8004fee:	f3bf 8f6f 	isb	sy
 8004ff2:	f3bf 8f4f 	dsb	sy
 8004ff6:	603b      	str	r3, [r7, #0]
    }
 8004ff8:	bf00      	nop
 8004ffa:	e7fe      	b.n	8004ffa <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8004ffc:	f001 fc32 	bl	8006864 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8005000:	4b38      	ldr	r3, [pc, #224]	; (80050e4 <xTaskResumeAll+0x114>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	3b01      	subs	r3, #1
 8005006:	4a37      	ldr	r2, [pc, #220]	; (80050e4 <xTaskResumeAll+0x114>)
 8005008:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800500a:	4b36      	ldr	r3, [pc, #216]	; (80050e4 <xTaskResumeAll+0x114>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d161      	bne.n	80050d6 <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005012:	4b35      	ldr	r3, [pc, #212]	; (80050e8 <xTaskResumeAll+0x118>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d05d      	beq.n	80050d6 <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800501a:	e02e      	b.n	800507a <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800501c:	4b33      	ldr	r3, [pc, #204]	; (80050ec <xTaskResumeAll+0x11c>)
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	3318      	adds	r3, #24
 8005028:	4618      	mov	r0, r3
 800502a:	f7ff f84d 	bl	80040c8 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	3304      	adds	r3, #4
 8005032:	4618      	mov	r0, r3
 8005034:	f7ff f848 	bl	80040c8 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800503c:	2201      	movs	r2, #1
 800503e:	409a      	lsls	r2, r3
 8005040:	4b2b      	ldr	r3, [pc, #172]	; (80050f0 <xTaskResumeAll+0x120>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4313      	orrs	r3, r2
 8005046:	4a2a      	ldr	r2, [pc, #168]	; (80050f0 <xTaskResumeAll+0x120>)
 8005048:	6013      	str	r3, [r2, #0]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800504e:	4613      	mov	r3, r2
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	4413      	add	r3, r2
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	4a27      	ldr	r2, [pc, #156]	; (80050f4 <xTaskResumeAll+0x124>)
 8005058:	441a      	add	r2, r3
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	3304      	adds	r3, #4
 800505e:	4619      	mov	r1, r3
 8005060:	4610      	mov	r0, r2
 8005062:	f7fe ffd4 	bl	800400e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800506a:	4b23      	ldr	r3, [pc, #140]	; (80050f8 <xTaskResumeAll+0x128>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005070:	429a      	cmp	r2, r3
 8005072:	d302      	bcc.n	800507a <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8005074:	4b21      	ldr	r3, [pc, #132]	; (80050fc <xTaskResumeAll+0x12c>)
 8005076:	2201      	movs	r2, #1
 8005078:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800507a:	4b1c      	ldr	r3, [pc, #112]	; (80050ec <xTaskResumeAll+0x11c>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1cc      	bne.n	800501c <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d001      	beq.n	800508c <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8005088:	f000 fb32 	bl	80056f0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800508c:	4b1c      	ldr	r3, [pc, #112]	; (8005100 <xTaskResumeAll+0x130>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d010      	beq.n	80050ba <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8005098:	f000 f846 	bl	8005128 <xTaskIncrementTick>
 800509c:	4603      	mov	r3, r0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d002      	beq.n	80050a8 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 80050a2:	4b16      	ldr	r3, [pc, #88]	; (80050fc <xTaskResumeAll+0x12c>)
 80050a4:	2201      	movs	r2, #1
 80050a6:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	3b01      	subs	r3, #1
 80050ac:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d1f1      	bne.n	8005098 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 80050b4:	4b12      	ldr	r3, [pc, #72]	; (8005100 <xTaskResumeAll+0x130>)
 80050b6:	2200      	movs	r2, #0
 80050b8:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80050ba:	4b10      	ldr	r3, [pc, #64]	; (80050fc <xTaskResumeAll+0x12c>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d009      	beq.n	80050d6 <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80050c2:	2301      	movs	r3, #1
 80050c4:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80050c6:	4b0f      	ldr	r3, [pc, #60]	; (8005104 <xTaskResumeAll+0x134>)
 80050c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050cc:	601a      	str	r2, [r3, #0]
 80050ce:	f3bf 8f4f 	dsb	sy
 80050d2:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80050d6:	f001 fbf5 	bl	80068c4 <vPortExitCritical>

    return xAlreadyYielded;
 80050da:	68bb      	ldr	r3, [r7, #8]
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3710      	adds	r7, #16
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	20000264 	.word	0x20000264
 80050e8:	2000023c 	.word	0x2000023c
 80050ec:	200001fc 	.word	0x200001fc
 80050f0:	20000244 	.word	0x20000244
 80050f4:	20000168 	.word	0x20000168
 80050f8:	20000164 	.word	0x20000164
 80050fc:	20000250 	.word	0x20000250
 8005100:	2000024c 	.word	0x2000024c
 8005104:	e000ed04 	.word	0xe000ed04

08005108 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800510e:	4b05      	ldr	r3, [pc, #20]	; (8005124 <xTaskGetTickCount+0x1c>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8005114:	687b      	ldr	r3, [r7, #4]
}
 8005116:	4618      	mov	r0, r3
 8005118:	370c      	adds	r7, #12
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	20000240 	.word	0x20000240

08005128 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b086      	sub	sp, #24
 800512c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800512e:	2300      	movs	r3, #0
 8005130:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005132:	4b4e      	ldr	r3, [pc, #312]	; (800526c <xTaskIncrementTick+0x144>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2b00      	cmp	r3, #0
 8005138:	f040 808e 	bne.w	8005258 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800513c:	4b4c      	ldr	r3, [pc, #304]	; (8005270 <xTaskIncrementTick+0x148>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	3301      	adds	r3, #1
 8005142:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8005144:	4a4a      	ldr	r2, [pc, #296]	; (8005270 <xTaskIncrementTick+0x148>)
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d120      	bne.n	8005192 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8005150:	4b48      	ldr	r3, [pc, #288]	; (8005274 <xTaskIncrementTick+0x14c>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00a      	beq.n	8005170 <xTaskIncrementTick+0x48>
        __asm volatile
 800515a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800515e:	f383 8811 	msr	BASEPRI, r3
 8005162:	f3bf 8f6f 	isb	sy
 8005166:	f3bf 8f4f 	dsb	sy
 800516a:	603b      	str	r3, [r7, #0]
    }
 800516c:	bf00      	nop
 800516e:	e7fe      	b.n	800516e <xTaskIncrementTick+0x46>
 8005170:	4b40      	ldr	r3, [pc, #256]	; (8005274 <xTaskIncrementTick+0x14c>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	60fb      	str	r3, [r7, #12]
 8005176:	4b40      	ldr	r3, [pc, #256]	; (8005278 <xTaskIncrementTick+0x150>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a3e      	ldr	r2, [pc, #248]	; (8005274 <xTaskIncrementTick+0x14c>)
 800517c:	6013      	str	r3, [r2, #0]
 800517e:	4a3e      	ldr	r2, [pc, #248]	; (8005278 <xTaskIncrementTick+0x150>)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6013      	str	r3, [r2, #0]
 8005184:	4b3d      	ldr	r3, [pc, #244]	; (800527c <xTaskIncrementTick+0x154>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	3301      	adds	r3, #1
 800518a:	4a3c      	ldr	r2, [pc, #240]	; (800527c <xTaskIncrementTick+0x154>)
 800518c:	6013      	str	r3, [r2, #0]
 800518e:	f000 faaf 	bl	80056f0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8005192:	4b3b      	ldr	r3, [pc, #236]	; (8005280 <xTaskIncrementTick+0x158>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	693a      	ldr	r2, [r7, #16]
 8005198:	429a      	cmp	r2, r3
 800519a:	d348      	bcc.n	800522e <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800519c:	4b35      	ldr	r3, [pc, #212]	; (8005274 <xTaskIncrementTick+0x14c>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d104      	bne.n	80051b0 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051a6:	4b36      	ldr	r3, [pc, #216]	; (8005280 <xTaskIncrementTick+0x158>)
 80051a8:	f04f 32ff 	mov.w	r2, #4294967295
 80051ac:	601a      	str	r2, [r3, #0]
                    break;
 80051ae:	e03e      	b.n	800522e <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051b0:	4b30      	ldr	r3, [pc, #192]	; (8005274 <xTaskIncrementTick+0x14c>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80051c0:	693a      	ldr	r2, [r7, #16]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d203      	bcs.n	80051d0 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80051c8:	4a2d      	ldr	r2, [pc, #180]	; (8005280 <xTaskIncrementTick+0x158>)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80051ce:	e02e      	b.n	800522e <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	3304      	adds	r3, #4
 80051d4:	4618      	mov	r0, r3
 80051d6:	f7fe ff77 	bl	80040c8 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d004      	beq.n	80051ec <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	3318      	adds	r3, #24
 80051e6:	4618      	mov	r0, r3
 80051e8:	f7fe ff6e 	bl	80040c8 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f0:	2201      	movs	r2, #1
 80051f2:	409a      	lsls	r2, r3
 80051f4:	4b23      	ldr	r3, [pc, #140]	; (8005284 <xTaskIncrementTick+0x15c>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	4a22      	ldr	r2, [pc, #136]	; (8005284 <xTaskIncrementTick+0x15c>)
 80051fc:	6013      	str	r3, [r2, #0]
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005202:	4613      	mov	r3, r2
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	4413      	add	r3, r2
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	4a1f      	ldr	r2, [pc, #124]	; (8005288 <xTaskIncrementTick+0x160>)
 800520c:	441a      	add	r2, r3
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	3304      	adds	r3, #4
 8005212:	4619      	mov	r1, r3
 8005214:	4610      	mov	r0, r2
 8005216:	f7fe fefa 	bl	800400e <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800521e:	4b1b      	ldr	r3, [pc, #108]	; (800528c <xTaskIncrementTick+0x164>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005224:	429a      	cmp	r2, r3
 8005226:	d3b9      	bcc.n	800519c <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8005228:	2301      	movs	r3, #1
 800522a:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800522c:	e7b6      	b.n	800519c <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800522e:	4b17      	ldr	r3, [pc, #92]	; (800528c <xTaskIncrementTick+0x164>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005234:	4914      	ldr	r1, [pc, #80]	; (8005288 <xTaskIncrementTick+0x160>)
 8005236:	4613      	mov	r3, r2
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	4413      	add	r3, r2
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	440b      	add	r3, r1
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	2b01      	cmp	r3, #1
 8005244:	d901      	bls.n	800524a <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 8005246:	2301      	movs	r3, #1
 8005248:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800524a:	4b11      	ldr	r3, [pc, #68]	; (8005290 <xTaskIncrementTick+0x168>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d007      	beq.n	8005262 <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 8005252:	2301      	movs	r3, #1
 8005254:	617b      	str	r3, [r7, #20]
 8005256:	e004      	b.n	8005262 <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8005258:	4b0e      	ldr	r3, [pc, #56]	; (8005294 <xTaskIncrementTick+0x16c>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	3301      	adds	r3, #1
 800525e:	4a0d      	ldr	r2, [pc, #52]	; (8005294 <xTaskIncrementTick+0x16c>)
 8005260:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8005262:	697b      	ldr	r3, [r7, #20]
}
 8005264:	4618      	mov	r0, r3
 8005266:	3718      	adds	r7, #24
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}
 800526c:	20000264 	.word	0x20000264
 8005270:	20000240 	.word	0x20000240
 8005274:	200001f4 	.word	0x200001f4
 8005278:	200001f8 	.word	0x200001f8
 800527c:	20000254 	.word	0x20000254
 8005280:	2000025c 	.word	0x2000025c
 8005284:	20000244 	.word	0x20000244
 8005288:	20000168 	.word	0x20000168
 800528c:	20000164 	.word	0x20000164
 8005290:	20000250 	.word	0x20000250
 8005294:	2000024c 	.word	0x2000024c

08005298 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005298:	b480      	push	{r7}
 800529a:	b087      	sub	sp, #28
 800529c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800529e:	4b27      	ldr	r3, [pc, #156]	; (800533c <vTaskSwitchContext+0xa4>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d003      	beq.n	80052ae <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80052a6:	4b26      	ldr	r3, [pc, #152]	; (8005340 <vTaskSwitchContext+0xa8>)
 80052a8:	2201      	movs	r2, #1
 80052aa:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80052ac:	e03f      	b.n	800532e <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 80052ae:	4b24      	ldr	r3, [pc, #144]	; (8005340 <vTaskSwitchContext+0xa8>)
 80052b0:	2200      	movs	r2, #0
 80052b2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052b4:	4b23      	ldr	r3, [pc, #140]	; (8005344 <vTaskSwitchContext+0xac>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	fab3 f383 	clz	r3, r3
 80052c0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80052c2:	7afb      	ldrb	r3, [r7, #11]
 80052c4:	f1c3 031f 	rsb	r3, r3, #31
 80052c8:	617b      	str	r3, [r7, #20]
 80052ca:	491f      	ldr	r1, [pc, #124]	; (8005348 <vTaskSwitchContext+0xb0>)
 80052cc:	697a      	ldr	r2, [r7, #20]
 80052ce:	4613      	mov	r3, r2
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	4413      	add	r3, r2
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	440b      	add	r3, r1
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d10a      	bne.n	80052f4 <vTaskSwitchContext+0x5c>
        __asm volatile
 80052de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e2:	f383 8811 	msr	BASEPRI, r3
 80052e6:	f3bf 8f6f 	isb	sy
 80052ea:	f3bf 8f4f 	dsb	sy
 80052ee:	607b      	str	r3, [r7, #4]
    }
 80052f0:	bf00      	nop
 80052f2:	e7fe      	b.n	80052f2 <vTaskSwitchContext+0x5a>
 80052f4:	697a      	ldr	r2, [r7, #20]
 80052f6:	4613      	mov	r3, r2
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	4413      	add	r3, r2
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	4a12      	ldr	r2, [pc, #72]	; (8005348 <vTaskSwitchContext+0xb0>)
 8005300:	4413      	add	r3, r2
 8005302:	613b      	str	r3, [r7, #16]
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	685a      	ldr	r2, [r3, #4]
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	605a      	str	r2, [r3, #4]
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	685a      	ldr	r2, [r3, #4]
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	3308      	adds	r3, #8
 8005316:	429a      	cmp	r2, r3
 8005318:	d104      	bne.n	8005324 <vTaskSwitchContext+0x8c>
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	685a      	ldr	r2, [r3, #4]
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	605a      	str	r2, [r3, #4]
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	4a08      	ldr	r2, [pc, #32]	; (800534c <vTaskSwitchContext+0xb4>)
 800532c:	6013      	str	r3, [r2, #0]
}
 800532e:	bf00      	nop
 8005330:	371c      	adds	r7, #28
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr
 800533a:	bf00      	nop
 800533c:	20000264 	.word	0x20000264
 8005340:	20000250 	.word	0x20000250
 8005344:	20000244 	.word	0x20000244
 8005348:	20000168 	.word	0x20000168
 800534c:	20000164 	.word	0x20000164

08005350 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d10a      	bne.n	8005376 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8005360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005364:	f383 8811 	msr	BASEPRI, r3
 8005368:	f3bf 8f6f 	isb	sy
 800536c:	f3bf 8f4f 	dsb	sy
 8005370:	60fb      	str	r3, [r7, #12]
    }
 8005372:	bf00      	nop
 8005374:	e7fe      	b.n	8005374 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005376:	4b07      	ldr	r3, [pc, #28]	; (8005394 <vTaskPlaceOnEventList+0x44>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	3318      	adds	r3, #24
 800537c:	4619      	mov	r1, r3
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f7fe fe69 	bl	8004056 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005384:	2101      	movs	r1, #1
 8005386:	6838      	ldr	r0, [r7, #0]
 8005388:	f000 fcc8 	bl	8005d1c <prvAddCurrentTaskToDelayedList>
}
 800538c:	bf00      	nop
 800538e:	3710      	adds	r7, #16
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}
 8005394:	20000164 	.word	0x20000164

08005398 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8005398:	b580      	push	{r7, lr}
 800539a:	b086      	sub	sp, #24
 800539c:	af00      	add	r7, sp, #0
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	60b9      	str	r1, [r7, #8]
 80053a2:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d10a      	bne.n	80053c0 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80053aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ae:	f383 8811 	msr	BASEPRI, r3
 80053b2:	f3bf 8f6f 	isb	sy
 80053b6:	f3bf 8f4f 	dsb	sy
 80053ba:	617b      	str	r3, [r7, #20]
    }
 80053bc:	bf00      	nop
 80053be:	e7fe      	b.n	80053be <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80053c0:	4b0a      	ldr	r3, [pc, #40]	; (80053ec <vTaskPlaceOnEventListRestricted+0x54>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	3318      	adds	r3, #24
 80053c6:	4619      	mov	r1, r3
 80053c8:	68f8      	ldr	r0, [r7, #12]
 80053ca:	f7fe fe20 	bl	800400e <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d002      	beq.n	80053da <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 80053d4:	f04f 33ff 	mov.w	r3, #4294967295
 80053d8:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80053da:	6879      	ldr	r1, [r7, #4]
 80053dc:	68b8      	ldr	r0, [r7, #8]
 80053de:	f000 fc9d 	bl	8005d1c <prvAddCurrentTaskToDelayedList>
    }
 80053e2:	bf00      	nop
 80053e4:	3718      	adds	r7, #24
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop
 80053ec:	20000164 	.word	0x20000164

080053f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b086      	sub	sp, #24
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d10a      	bne.n	800541c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8005406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800540a:	f383 8811 	msr	BASEPRI, r3
 800540e:	f3bf 8f6f 	isb	sy
 8005412:	f3bf 8f4f 	dsb	sy
 8005416:	60fb      	str	r3, [r7, #12]
    }
 8005418:	bf00      	nop
 800541a:	e7fe      	b.n	800541a <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	3318      	adds	r3, #24
 8005420:	4618      	mov	r0, r3
 8005422:	f7fe fe51 	bl	80040c8 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005426:	4b1d      	ldr	r3, [pc, #116]	; (800549c <xTaskRemoveFromEventList+0xac>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d11c      	bne.n	8005468 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	3304      	adds	r3, #4
 8005432:	4618      	mov	r0, r3
 8005434:	f7fe fe48 	bl	80040c8 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800543c:	2201      	movs	r2, #1
 800543e:	409a      	lsls	r2, r3
 8005440:	4b17      	ldr	r3, [pc, #92]	; (80054a0 <xTaskRemoveFromEventList+0xb0>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4313      	orrs	r3, r2
 8005446:	4a16      	ldr	r2, [pc, #88]	; (80054a0 <xTaskRemoveFromEventList+0xb0>)
 8005448:	6013      	str	r3, [r2, #0]
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800544e:	4613      	mov	r3, r2
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	4413      	add	r3, r2
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	4a13      	ldr	r2, [pc, #76]	; (80054a4 <xTaskRemoveFromEventList+0xb4>)
 8005458:	441a      	add	r2, r3
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	3304      	adds	r3, #4
 800545e:	4619      	mov	r1, r3
 8005460:	4610      	mov	r0, r2
 8005462:	f7fe fdd4 	bl	800400e <vListInsertEnd>
 8005466:	e005      	b.n	8005474 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	3318      	adds	r3, #24
 800546c:	4619      	mov	r1, r3
 800546e:	480e      	ldr	r0, [pc, #56]	; (80054a8 <xTaskRemoveFromEventList+0xb8>)
 8005470:	f7fe fdcd 	bl	800400e <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005478:	4b0c      	ldr	r3, [pc, #48]	; (80054ac <xTaskRemoveFromEventList+0xbc>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800547e:	429a      	cmp	r2, r3
 8005480:	d905      	bls.n	800548e <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8005482:	2301      	movs	r3, #1
 8005484:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8005486:	4b0a      	ldr	r3, [pc, #40]	; (80054b0 <xTaskRemoveFromEventList+0xc0>)
 8005488:	2201      	movs	r2, #1
 800548a:	601a      	str	r2, [r3, #0]
 800548c:	e001      	b.n	8005492 <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 800548e:	2300      	movs	r3, #0
 8005490:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8005492:	697b      	ldr	r3, [r7, #20]
}
 8005494:	4618      	mov	r0, r3
 8005496:	3718      	adds	r7, #24
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}
 800549c:	20000264 	.word	0x20000264
 80054a0:	20000244 	.word	0x20000244
 80054a4:	20000168 	.word	0x20000168
 80054a8:	200001fc 	.word	0x200001fc
 80054ac:	20000164 	.word	0x20000164
 80054b0:	20000250 	.word	0x20000250

080054b4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80054bc:	4b06      	ldr	r3, [pc, #24]	; (80054d8 <vTaskInternalSetTimeOutState+0x24>)
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80054c4:	4b05      	ldr	r3, [pc, #20]	; (80054dc <vTaskInternalSetTimeOutState+0x28>)
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	605a      	str	r2, [r3, #4]
}
 80054cc:	bf00      	nop
 80054ce:	370c      	adds	r7, #12
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr
 80054d8:	20000254 	.word	0x20000254
 80054dc:	20000240 	.word	0x20000240

080054e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b088      	sub	sp, #32
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d10a      	bne.n	8005506 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80054f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f4:	f383 8811 	msr	BASEPRI, r3
 80054f8:	f3bf 8f6f 	isb	sy
 80054fc:	f3bf 8f4f 	dsb	sy
 8005500:	613b      	str	r3, [r7, #16]
    }
 8005502:	bf00      	nop
 8005504:	e7fe      	b.n	8005504 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d10a      	bne.n	8005522 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800550c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005510:	f383 8811 	msr	BASEPRI, r3
 8005514:	f3bf 8f6f 	isb	sy
 8005518:	f3bf 8f4f 	dsb	sy
 800551c:	60fb      	str	r3, [r7, #12]
    }
 800551e:	bf00      	nop
 8005520:	e7fe      	b.n	8005520 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8005522:	f001 f99f 	bl	8006864 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8005526:	4b1f      	ldr	r3, [pc, #124]	; (80055a4 <xTaskCheckForTimeOut+0xc4>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	69ba      	ldr	r2, [r7, #24]
 8005532:	1ad3      	subs	r3, r2, r3
 8005534:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800553e:	d102      	bne.n	8005546 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8005540:	2300      	movs	r3, #0
 8005542:	61fb      	str	r3, [r7, #28]
 8005544:	e026      	b.n	8005594 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	4b17      	ldr	r3, [pc, #92]	; (80055a8 <xTaskCheckForTimeOut+0xc8>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	429a      	cmp	r2, r3
 8005550:	d00a      	beq.n	8005568 <xTaskCheckForTimeOut+0x88>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	69ba      	ldr	r2, [r7, #24]
 8005558:	429a      	cmp	r2, r3
 800555a:	d305      	bcc.n	8005568 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800555c:	2301      	movs	r3, #1
 800555e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	2200      	movs	r2, #0
 8005564:	601a      	str	r2, [r3, #0]
 8005566:	e015      	b.n	8005594 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	697a      	ldr	r2, [r7, #20]
 800556e:	429a      	cmp	r2, r3
 8005570:	d20b      	bcs.n	800558a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	1ad2      	subs	r2, r2, r3
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f7ff ff98 	bl	80054b4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8005584:	2300      	movs	r3, #0
 8005586:	61fb      	str	r3, [r7, #28]
 8005588:	e004      	b.n	8005594 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	2200      	movs	r2, #0
 800558e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8005590:	2301      	movs	r3, #1
 8005592:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8005594:	f001 f996 	bl	80068c4 <vPortExitCritical>

    return xReturn;
 8005598:	69fb      	ldr	r3, [r7, #28]
}
 800559a:	4618      	mov	r0, r3
 800559c:	3720      	adds	r7, #32
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	20000240 	.word	0x20000240
 80055a8:	20000254 	.word	0x20000254

080055ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80055ac:	b480      	push	{r7}
 80055ae:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80055b0:	4b03      	ldr	r3, [pc, #12]	; (80055c0 <vTaskMissedYield+0x14>)
 80055b2:	2201      	movs	r2, #1
 80055b4:	601a      	str	r2, [r3, #0]
}
 80055b6:	bf00      	nop
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr
 80055c0:	20000250 	.word	0x20000250

080055c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b082      	sub	sp, #8
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80055cc:	f000 f852 	bl	8005674 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80055d0:	4b06      	ldr	r3, [pc, #24]	; (80055ec <prvIdleTask+0x28>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d9f9      	bls.n	80055cc <prvIdleTask+0x8>
                {
                    taskYIELD();
 80055d8:	4b05      	ldr	r3, [pc, #20]	; (80055f0 <prvIdleTask+0x2c>)
 80055da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055de:	601a      	str	r2, [r3, #0]
 80055e0:	f3bf 8f4f 	dsb	sy
 80055e4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80055e8:	e7f0      	b.n	80055cc <prvIdleTask+0x8>
 80055ea:	bf00      	nop
 80055ec:	20000168 	.word	0x20000168
 80055f0:	e000ed04 	.word	0xe000ed04

080055f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b082      	sub	sp, #8
 80055f8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80055fa:	2300      	movs	r3, #0
 80055fc:	607b      	str	r3, [r7, #4]
 80055fe:	e00c      	b.n	800561a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	4613      	mov	r3, r2
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	4413      	add	r3, r2
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	4a12      	ldr	r2, [pc, #72]	; (8005654 <prvInitialiseTaskLists+0x60>)
 800560c:	4413      	add	r3, r2
 800560e:	4618      	mov	r0, r3
 8005610:	f7fe fcd0 	bl	8003fb4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	3301      	adds	r3, #1
 8005618:	607b      	str	r3, [r7, #4]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2b04      	cmp	r3, #4
 800561e:	d9ef      	bls.n	8005600 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8005620:	480d      	ldr	r0, [pc, #52]	; (8005658 <prvInitialiseTaskLists+0x64>)
 8005622:	f7fe fcc7 	bl	8003fb4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8005626:	480d      	ldr	r0, [pc, #52]	; (800565c <prvInitialiseTaskLists+0x68>)
 8005628:	f7fe fcc4 	bl	8003fb4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800562c:	480c      	ldr	r0, [pc, #48]	; (8005660 <prvInitialiseTaskLists+0x6c>)
 800562e:	f7fe fcc1 	bl	8003fb4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8005632:	480c      	ldr	r0, [pc, #48]	; (8005664 <prvInitialiseTaskLists+0x70>)
 8005634:	f7fe fcbe 	bl	8003fb4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8005638:	480b      	ldr	r0, [pc, #44]	; (8005668 <prvInitialiseTaskLists+0x74>)
 800563a:	f7fe fcbb 	bl	8003fb4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800563e:	4b0b      	ldr	r3, [pc, #44]	; (800566c <prvInitialiseTaskLists+0x78>)
 8005640:	4a05      	ldr	r2, [pc, #20]	; (8005658 <prvInitialiseTaskLists+0x64>)
 8005642:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005644:	4b0a      	ldr	r3, [pc, #40]	; (8005670 <prvInitialiseTaskLists+0x7c>)
 8005646:	4a05      	ldr	r2, [pc, #20]	; (800565c <prvInitialiseTaskLists+0x68>)
 8005648:	601a      	str	r2, [r3, #0]
}
 800564a:	bf00      	nop
 800564c:	3708      	adds	r7, #8
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	20000168 	.word	0x20000168
 8005658:	200001cc 	.word	0x200001cc
 800565c:	200001e0 	.word	0x200001e0
 8005660:	200001fc 	.word	0x200001fc
 8005664:	20000210 	.word	0x20000210
 8005668:	20000228 	.word	0x20000228
 800566c:	200001f4 	.word	0x200001f4
 8005670:	200001f8 	.word	0x200001f8

08005674 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b082      	sub	sp, #8
 8005678:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800567a:	e019      	b.n	80056b0 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800567c:	f001 f8f2 	bl	8006864 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005680:	4b10      	ldr	r3, [pc, #64]	; (80056c4 <prvCheckTasksWaitingTermination+0x50>)
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	3304      	adds	r3, #4
 800568c:	4618      	mov	r0, r3
 800568e:	f7fe fd1b 	bl	80040c8 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8005692:	4b0d      	ldr	r3, [pc, #52]	; (80056c8 <prvCheckTasksWaitingTermination+0x54>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	3b01      	subs	r3, #1
 8005698:	4a0b      	ldr	r2, [pc, #44]	; (80056c8 <prvCheckTasksWaitingTermination+0x54>)
 800569a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800569c:	4b0b      	ldr	r3, [pc, #44]	; (80056cc <prvCheckTasksWaitingTermination+0x58>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	3b01      	subs	r3, #1
 80056a2:	4a0a      	ldr	r2, [pc, #40]	; (80056cc <prvCheckTasksWaitingTermination+0x58>)
 80056a4:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80056a6:	f001 f90d 	bl	80068c4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 f810 	bl	80056d0 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80056b0:	4b06      	ldr	r3, [pc, #24]	; (80056cc <prvCheckTasksWaitingTermination+0x58>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d1e1      	bne.n	800567c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80056b8:	bf00      	nop
 80056ba:	bf00      	nop
 80056bc:	3708      	adds	r7, #8
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	20000210 	.word	0x20000210
 80056c8:	2000023c 	.word	0x2000023c
 80056cc:	20000224 	.word	0x20000224

080056d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b082      	sub	sp, #8
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056dc:	4618      	mov	r0, r3
 80056de:	f001 fac5 	bl	8006c6c <vPortFree>
                vPortFree( pxTCB );
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f001 fac2 	bl	8006c6c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80056e8:	bf00      	nop
 80056ea:	3708      	adds	r7, #8
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80056f0:	b480      	push	{r7}
 80056f2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056f4:	4b0a      	ldr	r3, [pc, #40]	; (8005720 <prvResetNextTaskUnblockTime+0x30>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d104      	bne.n	8005708 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80056fe:	4b09      	ldr	r3, [pc, #36]	; (8005724 <prvResetNextTaskUnblockTime+0x34>)
 8005700:	f04f 32ff 	mov.w	r2, #4294967295
 8005704:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8005706:	e005      	b.n	8005714 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005708:	4b05      	ldr	r3, [pc, #20]	; (8005720 <prvResetNextTaskUnblockTime+0x30>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a04      	ldr	r2, [pc, #16]	; (8005724 <prvResetNextTaskUnblockTime+0x34>)
 8005712:	6013      	str	r3, [r2, #0]
}
 8005714:	bf00      	nop
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr
 800571e:	bf00      	nop
 8005720:	200001f4 	.word	0x200001f4
 8005724:	2000025c 	.word	0x2000025c

08005728 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800572e:	4b0b      	ldr	r3, [pc, #44]	; (800575c <xTaskGetSchedulerState+0x34>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d102      	bne.n	800573c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8005736:	2301      	movs	r3, #1
 8005738:	607b      	str	r3, [r7, #4]
 800573a:	e008      	b.n	800574e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800573c:	4b08      	ldr	r3, [pc, #32]	; (8005760 <xTaskGetSchedulerState+0x38>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d102      	bne.n	800574a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8005744:	2302      	movs	r3, #2
 8005746:	607b      	str	r3, [r7, #4]
 8005748:	e001      	b.n	800574e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800574a:	2300      	movs	r3, #0
 800574c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800574e:	687b      	ldr	r3, [r7, #4]
    }
 8005750:	4618      	mov	r0, r3
 8005752:	370c      	adds	r7, #12
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr
 800575c:	20000248 	.word	0x20000248
 8005760:	20000264 	.word	0x20000264

08005764 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8005764:	b580      	push	{r7, lr}
 8005766:	b086      	sub	sp, #24
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8005770:	2300      	movs	r3, #0
 8005772:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d063      	beq.n	8005842 <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800577a:	4b34      	ldr	r3, [pc, #208]	; (800584c <xTaskPriorityDisinherit+0xe8>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	693a      	ldr	r2, [r7, #16]
 8005780:	429a      	cmp	r2, r3
 8005782:	d00a      	beq.n	800579a <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8005784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005788:	f383 8811 	msr	BASEPRI, r3
 800578c:	f3bf 8f6f 	isb	sy
 8005790:	f3bf 8f4f 	dsb	sy
 8005794:	60fb      	str	r3, [r7, #12]
    }
 8005796:	bf00      	nop
 8005798:	e7fe      	b.n	8005798 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d10a      	bne.n	80057b8 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 80057a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a6:	f383 8811 	msr	BASEPRI, r3
 80057aa:	f3bf 8f6f 	isb	sy
 80057ae:	f3bf 8f4f 	dsb	sy
 80057b2:	60bb      	str	r3, [r7, #8]
    }
 80057b4:	bf00      	nop
 80057b6:	e7fe      	b.n	80057b6 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057bc:	1e5a      	subs	r2, r3, #1
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d039      	beq.n	8005842 <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d135      	bne.n	8005842 <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	3304      	adds	r3, #4
 80057da:	4618      	mov	r0, r3
 80057dc:	f7fe fc74 	bl	80040c8 <uxListRemove>
 80057e0:	4603      	mov	r3, r0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d10a      	bne.n	80057fc <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ea:	2201      	movs	r2, #1
 80057ec:	fa02 f303 	lsl.w	r3, r2, r3
 80057f0:	43da      	mvns	r2, r3
 80057f2:	4b17      	ldr	r3, [pc, #92]	; (8005850 <xTaskPriorityDisinherit+0xec>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4013      	ands	r3, r2
 80057f8:	4a15      	ldr	r2, [pc, #84]	; (8005850 <xTaskPriorityDisinherit+0xec>)
 80057fa:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005808:	f1c3 0205 	rsb	r2, r3, #5
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005814:	2201      	movs	r2, #1
 8005816:	409a      	lsls	r2, r3
 8005818:	4b0d      	ldr	r3, [pc, #52]	; (8005850 <xTaskPriorityDisinherit+0xec>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4313      	orrs	r3, r2
 800581e:	4a0c      	ldr	r2, [pc, #48]	; (8005850 <xTaskPriorityDisinherit+0xec>)
 8005820:	6013      	str	r3, [r2, #0]
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005826:	4613      	mov	r3, r2
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	4413      	add	r3, r2
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	4a09      	ldr	r2, [pc, #36]	; (8005854 <xTaskPriorityDisinherit+0xf0>)
 8005830:	441a      	add	r2, r3
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	3304      	adds	r3, #4
 8005836:	4619      	mov	r1, r3
 8005838:	4610      	mov	r0, r2
 800583a:	f7fe fbe8 	bl	800400e <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800583e:	2301      	movs	r3, #1
 8005840:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8005842:	697b      	ldr	r3, [r7, #20]
    }
 8005844:	4618      	mov	r0, r3
 8005846:	3718      	adds	r7, #24
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}
 800584c:	20000164 	.word	0x20000164
 8005850:	20000244 	.word	0x20000244
 8005854:	20000168 	.word	0x20000168

08005858 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8005858:	b580      	push	{r7, lr}
 800585a:	b086      	sub	sp, #24
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	607a      	str	r2, [r7, #4]
 8005864:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d00a      	beq.n	8005882 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 800586c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005870:	f383 8811 	msr	BASEPRI, r3
 8005874:	f3bf 8f6f 	isb	sy
 8005878:	f3bf 8f4f 	dsb	sy
 800587c:	613b      	str	r3, [r7, #16]
    }
 800587e:	bf00      	nop
 8005880:	e7fe      	b.n	8005880 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8005882:	f000 ffef 	bl	8006864 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8005886:	4b32      	ldr	r3, [pc, #200]	; (8005950 <xTaskGenericNotifyWait+0xf8>)
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	4413      	add	r3, r2
 800588e:	3354      	adds	r3, #84	; 0x54
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	b2db      	uxtb	r3, r3
 8005894:	2b02      	cmp	r3, #2
 8005896:	d022      	beq.n	80058de <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8005898:	4b2d      	ldr	r3, [pc, #180]	; (8005950 <xTaskGenericNotifyWait+0xf8>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	3214      	adds	r2, #20
 80058a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80058a4:	68ba      	ldr	r2, [r7, #8]
 80058a6:	43d2      	mvns	r2, r2
 80058a8:	4011      	ands	r1, r2
 80058aa:	68fa      	ldr	r2, [r7, #12]
 80058ac:	3214      	adds	r2, #20
 80058ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 80058b2:	4b27      	ldr	r3, [pc, #156]	; (8005950 <xTaskGenericNotifyWait+0xf8>)
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	4413      	add	r3, r2
 80058ba:	3354      	adds	r3, #84	; 0x54
 80058bc:	2201      	movs	r2, #1
 80058be:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 80058c0:	6a3b      	ldr	r3, [r7, #32]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d00b      	beq.n	80058de <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80058c6:	2101      	movs	r1, #1
 80058c8:	6a38      	ldr	r0, [r7, #32]
 80058ca:	f000 fa27 	bl	8005d1c <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 80058ce:	4b21      	ldr	r3, [pc, #132]	; (8005954 <xTaskGenericNotifyWait+0xfc>)
 80058d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058d4:	601a      	str	r2, [r3, #0]
 80058d6:	f3bf 8f4f 	dsb	sy
 80058da:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80058de:	f000 fff1 	bl	80068c4 <vPortExitCritical>

        taskENTER_CRITICAL();
 80058e2:	f000 ffbf 	bl	8006864 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d007      	beq.n	80058fc <xTaskGenericNotifyWait+0xa4>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 80058ec:	4b18      	ldr	r3, [pc, #96]	; (8005950 <xTaskGenericNotifyWait+0xf8>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	3214      	adds	r2, #20
 80058f4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80058fc:	4b14      	ldr	r3, [pc, #80]	; (8005950 <xTaskGenericNotifyWait+0xf8>)
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	4413      	add	r3, r2
 8005904:	3354      	adds	r3, #84	; 0x54
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	b2db      	uxtb	r3, r3
 800590a:	2b02      	cmp	r3, #2
 800590c:	d002      	beq.n	8005914 <xTaskGenericNotifyWait+0xbc>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 800590e:	2300      	movs	r3, #0
 8005910:	617b      	str	r3, [r7, #20]
 8005912:	e00e      	b.n	8005932 <xTaskGenericNotifyWait+0xda>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8005914:	4b0e      	ldr	r3, [pc, #56]	; (8005950 <xTaskGenericNotifyWait+0xf8>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	68fa      	ldr	r2, [r7, #12]
 800591a:	3214      	adds	r2, #20
 800591c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	43d2      	mvns	r2, r2
 8005924:	4011      	ands	r1, r2
 8005926:	68fa      	ldr	r2, [r7, #12]
 8005928:	3214      	adds	r2, #20
 800592a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 800592e:	2301      	movs	r3, #1
 8005930:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8005932:	4b07      	ldr	r3, [pc, #28]	; (8005950 <xTaskGenericNotifyWait+0xf8>)
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	4413      	add	r3, r2
 800593a:	3354      	adds	r3, #84	; 0x54
 800593c:	2200      	movs	r2, #0
 800593e:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8005940:	f000 ffc0 	bl	80068c4 <vPortExitCritical>

        return xReturn;
 8005944:	697b      	ldr	r3, [r7, #20]
    }
 8005946:	4618      	mov	r0, r3
 8005948:	3718      	adds	r7, #24
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
 800594e:	bf00      	nop
 8005950:	20000164 	.word	0x20000164
 8005954:	e000ed04 	.word	0xe000ed04

08005958 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8005958:	b580      	push	{r7, lr}
 800595a:	b08c      	sub	sp, #48	; 0x30
 800595c:	af00      	add	r7, sp, #0
 800595e:	60f8      	str	r0, [r7, #12]
 8005960:	60b9      	str	r1, [r7, #8]
 8005962:	607a      	str	r2, [r7, #4]
 8005964:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8005966:	2301      	movs	r3, #1
 8005968:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d00a      	beq.n	8005986 <xTaskGenericNotify+0x2e>
        __asm volatile
 8005970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005974:	f383 8811 	msr	BASEPRI, r3
 8005978:	f3bf 8f6f 	isb	sy
 800597c:	f3bf 8f4f 	dsb	sy
 8005980:	623b      	str	r3, [r7, #32]
    }
 8005982:	bf00      	nop
 8005984:	e7fe      	b.n	8005984 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d10a      	bne.n	80059a2 <xTaskGenericNotify+0x4a>
        __asm volatile
 800598c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005990:	f383 8811 	msr	BASEPRI, r3
 8005994:	f3bf 8f6f 	isb	sy
 8005998:	f3bf 8f4f 	dsb	sy
 800599c:	61fb      	str	r3, [r7, #28]
    }
 800599e:	bf00      	nop
 80059a0:	e7fe      	b.n	80059a0 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 80059a6:	f000 ff5d 	bl	8006864 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 80059aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d006      	beq.n	80059be <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80059b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b2:	68ba      	ldr	r2, [r7, #8]
 80059b4:	3214      	adds	r2, #20
 80059b6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80059ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059bc:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80059be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	4413      	add	r3, r2
 80059c4:	3354      	adds	r3, #84	; 0x54
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80059cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	4413      	add	r3, r2
 80059d2:	3354      	adds	r3, #84	; 0x54
 80059d4:	2202      	movs	r2, #2
 80059d6:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80059d8:	78fb      	ldrb	r3, [r7, #3]
 80059da:	2b04      	cmp	r3, #4
 80059dc:	d83b      	bhi.n	8005a56 <xTaskGenericNotify+0xfe>
 80059de:	a201      	add	r2, pc, #4	; (adr r2, 80059e4 <xTaskGenericNotify+0x8c>)
 80059e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e4:	08005a75 	.word	0x08005a75
 80059e8:	080059f9 	.word	0x080059f9
 80059ec:	08005a15 	.word	0x08005a15
 80059f0:	08005a2d 	.word	0x08005a2d
 80059f4:	08005a3b 	.word	0x08005a3b
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80059f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059fa:	68ba      	ldr	r2, [r7, #8]
 80059fc:	3214      	adds	r2, #20
 80059fe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	ea42 0103 	orr.w	r1, r2, r3
 8005a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a0a:	68ba      	ldr	r2, [r7, #8]
 8005a0c:	3214      	adds	r2, #20
 8005a0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005a12:	e032      	b.n	8005a7a <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8005a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a16:	68ba      	ldr	r2, [r7, #8]
 8005a18:	3214      	adds	r2, #20
 8005a1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a1e:	1c59      	adds	r1, r3, #1
 8005a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a22:	68ba      	ldr	r2, [r7, #8]
 8005a24:	3214      	adds	r2, #20
 8005a26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005a2a:	e026      	b.n	8005a7a <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8005a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2e:	68ba      	ldr	r2, [r7, #8]
 8005a30:	3214      	adds	r2, #20
 8005a32:	6879      	ldr	r1, [r7, #4]
 8005a34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005a38:	e01f      	b.n	8005a7a <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005a3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a3e:	2b02      	cmp	r3, #2
 8005a40:	d006      	beq.n	8005a50 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8005a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a44:	68ba      	ldr	r2, [r7, #8]
 8005a46:	3214      	adds	r2, #20
 8005a48:	6879      	ldr	r1, [r7, #4]
 8005a4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8005a4e:	e014      	b.n	8005a7a <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8005a50:	2300      	movs	r3, #0
 8005a52:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 8005a54:	e011      	b.n	8005a7a <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8005a56:	4b2b      	ldr	r3, [pc, #172]	; (8005b04 <xTaskGenericNotify+0x1ac>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d00c      	beq.n	8005a78 <xTaskGenericNotify+0x120>
        __asm volatile
 8005a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a62:	f383 8811 	msr	BASEPRI, r3
 8005a66:	f3bf 8f6f 	isb	sy
 8005a6a:	f3bf 8f4f 	dsb	sy
 8005a6e:	61bb      	str	r3, [r7, #24]
    }
 8005a70:	bf00      	nop
 8005a72:	e7fe      	b.n	8005a72 <xTaskGenericNotify+0x11a>
                    break;
 8005a74:	bf00      	nop
 8005a76:	e000      	b.n	8005a7a <xTaskGenericNotify+0x122>

                    break;
 8005a78:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005a7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d139      	bne.n	8005af6 <xTaskGenericNotify+0x19e>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a84:	3304      	adds	r3, #4
 8005a86:	4618      	mov	r0, r3
 8005a88:	f7fe fb1e 	bl	80040c8 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 8005a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a90:	2201      	movs	r2, #1
 8005a92:	409a      	lsls	r2, r3
 8005a94:	4b1c      	ldr	r3, [pc, #112]	; (8005b08 <xTaskGenericNotify+0x1b0>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	4a1b      	ldr	r2, [pc, #108]	; (8005b08 <xTaskGenericNotify+0x1b0>)
 8005a9c:	6013      	str	r3, [r2, #0]
 8005a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aa2:	4613      	mov	r3, r2
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	4413      	add	r3, r2
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	4a18      	ldr	r2, [pc, #96]	; (8005b0c <xTaskGenericNotify+0x1b4>)
 8005aac:	441a      	add	r2, r3
 8005aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab0:	3304      	adds	r3, #4
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	4610      	mov	r0, r2
 8005ab6:	f7fe faaa 	bl	800400e <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d00a      	beq.n	8005ad8 <xTaskGenericNotify+0x180>
        __asm volatile
 8005ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac6:	f383 8811 	msr	BASEPRI, r3
 8005aca:	f3bf 8f6f 	isb	sy
 8005ace:	f3bf 8f4f 	dsb	sy
 8005ad2:	617b      	str	r3, [r7, #20]
    }
 8005ad4:	bf00      	nop
 8005ad6:	e7fe      	b.n	8005ad6 <xTaskGenericNotify+0x17e>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005adc:	4b0c      	ldr	r3, [pc, #48]	; (8005b10 <xTaskGenericNotify+0x1b8>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d907      	bls.n	8005af6 <xTaskGenericNotify+0x19e>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8005ae6:	4b0b      	ldr	r3, [pc, #44]	; (8005b14 <xTaskGenericNotify+0x1bc>)
 8005ae8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005aec:	601a      	str	r2, [r3, #0]
 8005aee:	f3bf 8f4f 	dsb	sy
 8005af2:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005af6:	f000 fee5 	bl	80068c4 <vPortExitCritical>

        return xReturn;
 8005afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8005afc:	4618      	mov	r0, r3
 8005afe:	3730      	adds	r7, #48	; 0x30
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	20000240 	.word	0x20000240
 8005b08:	20000244 	.word	0x20000244
 8005b0c:	20000168 	.word	0x20000168
 8005b10:	20000164 	.word	0x20000164
 8005b14:	e000ed04 	.word	0xe000ed04

08005b18 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b090      	sub	sp, #64	; 0x40
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	607a      	str	r2, [r7, #4]
 8005b24:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8005b26:	2301      	movs	r3, #1
 8005b28:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d10a      	bne.n	8005b46 <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 8005b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b34:	f383 8811 	msr	BASEPRI, r3
 8005b38:	f3bf 8f6f 	isb	sy
 8005b3c:	f3bf 8f4f 	dsb	sy
 8005b40:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 8005b42:	bf00      	nop
 8005b44:	e7fe      	b.n	8005b44 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d00a      	beq.n	8005b62 <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8005b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b50:	f383 8811 	msr	BASEPRI, r3
 8005b54:	f3bf 8f6f 	isb	sy
 8005b58:	f3bf 8f4f 	dsb	sy
 8005b5c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8005b5e:	bf00      	nop
 8005b60:	e7fe      	b.n	8005b60 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005b62:	f000 ff63 	bl	8006a2c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	63bb      	str	r3, [r7, #56]	; 0x38
        __asm volatile
 8005b6a:	f3ef 8211 	mrs	r2, BASEPRI
 8005b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b72:	f383 8811 	msr	BASEPRI, r3
 8005b76:	f3bf 8f6f 	isb	sy
 8005b7a:	f3bf 8f4f 	dsb	sy
 8005b7e:	627a      	str	r2, [r7, #36]	; 0x24
 8005b80:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 8005b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005b84:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 8005b86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d006      	beq.n	8005b9a <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8005b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b8e:	68ba      	ldr	r2, [r7, #8]
 8005b90:	3214      	adds	r2, #20
 8005b92:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005b96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b98:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8005b9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	4413      	add	r3, r2
 8005ba0:	3354      	adds	r3, #84	; 0x54
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8005ba8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	4413      	add	r3, r2
 8005bae:	3354      	adds	r3, #84	; 0x54
 8005bb0:	2202      	movs	r2, #2
 8005bb2:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8005bb4:	78fb      	ldrb	r3, [r7, #3]
 8005bb6:	2b04      	cmp	r3, #4
 8005bb8:	d83b      	bhi.n	8005c32 <xTaskGenericNotifyFromISR+0x11a>
 8005bba:	a201      	add	r2, pc, #4	; (adr r2, 8005bc0 <xTaskGenericNotifyFromISR+0xa8>)
 8005bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc0:	08005c51 	.word	0x08005c51
 8005bc4:	08005bd5 	.word	0x08005bd5
 8005bc8:	08005bf1 	.word	0x08005bf1
 8005bcc:	08005c09 	.word	0x08005c09
 8005bd0:	08005c17 	.word	0x08005c17
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8005bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bd6:	68ba      	ldr	r2, [r7, #8]
 8005bd8:	3214      	adds	r2, #20
 8005bda:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	ea42 0103 	orr.w	r1, r2, r3
 8005be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005be6:	68ba      	ldr	r2, [r7, #8]
 8005be8:	3214      	adds	r2, #20
 8005bea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005bee:	e032      	b.n	8005c56 <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8005bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bf2:	68ba      	ldr	r2, [r7, #8]
 8005bf4:	3214      	adds	r2, #20
 8005bf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bfa:	1c59      	adds	r1, r3, #1
 8005bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bfe:	68ba      	ldr	r2, [r7, #8]
 8005c00:	3214      	adds	r2, #20
 8005c02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005c06:	e026      	b.n	8005c56 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8005c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c0a:	68ba      	ldr	r2, [r7, #8]
 8005c0c:	3214      	adds	r2, #20
 8005c0e:	6879      	ldr	r1, [r7, #4]
 8005c10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005c14:	e01f      	b.n	8005c56 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005c16:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005c1a:	2b02      	cmp	r3, #2
 8005c1c:	d006      	beq.n	8005c2c <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8005c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c20:	68ba      	ldr	r2, [r7, #8]
 8005c22:	3214      	adds	r2, #20
 8005c24:	6879      	ldr	r1, [r7, #4]
 8005c26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8005c2a:	e014      	b.n	8005c56 <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 8005c30:	e011      	b.n	8005c56 <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8005c32:	4b33      	ldr	r3, [pc, #204]	; (8005d00 <xTaskGenericNotifyFromISR+0x1e8>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d00c      	beq.n	8005c54 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 8005c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c3e:	f383 8811 	msr	BASEPRI, r3
 8005c42:	f3bf 8f6f 	isb	sy
 8005c46:	f3bf 8f4f 	dsb	sy
 8005c4a:	61fb      	str	r3, [r7, #28]
    }
 8005c4c:	bf00      	nop
 8005c4e:	e7fe      	b.n	8005c4e <xTaskGenericNotifyFromISR+0x136>
                    break;
 8005c50:	bf00      	nop
 8005c52:	e000      	b.n	8005c56 <xTaskGenericNotifyFromISR+0x13e>
                    break;
 8005c54:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005c56:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d145      	bne.n	8005cea <xTaskGenericNotifyFromISR+0x1d2>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d00a      	beq.n	8005c7c <xTaskGenericNotifyFromISR+0x164>
        __asm volatile
 8005c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c6a:	f383 8811 	msr	BASEPRI, r3
 8005c6e:	f3bf 8f6f 	isb	sy
 8005c72:	f3bf 8f4f 	dsb	sy
 8005c76:	61bb      	str	r3, [r7, #24]
    }
 8005c78:	bf00      	nop
 8005c7a:	e7fe      	b.n	8005c7a <xTaskGenericNotifyFromISR+0x162>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c7c:	4b21      	ldr	r3, [pc, #132]	; (8005d04 <xTaskGenericNotifyFromISR+0x1ec>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d11c      	bne.n	8005cbe <xTaskGenericNotifyFromISR+0x1a6>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c86:	3304      	adds	r3, #4
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f7fe fa1d 	bl	80040c8 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8005c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c92:	2201      	movs	r2, #1
 8005c94:	409a      	lsls	r2, r3
 8005c96:	4b1c      	ldr	r3, [pc, #112]	; (8005d08 <xTaskGenericNotifyFromISR+0x1f0>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	4a1a      	ldr	r2, [pc, #104]	; (8005d08 <xTaskGenericNotifyFromISR+0x1f0>)
 8005c9e:	6013      	str	r3, [r2, #0]
 8005ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ca4:	4613      	mov	r3, r2
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	4413      	add	r3, r2
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	4a17      	ldr	r2, [pc, #92]	; (8005d0c <xTaskGenericNotifyFromISR+0x1f4>)
 8005cae:	441a      	add	r2, r3
 8005cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb2:	3304      	adds	r3, #4
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	4610      	mov	r0, r2
 8005cb8:	f7fe f9a9 	bl	800400e <vListInsertEnd>
 8005cbc:	e005      	b.n	8005cca <xTaskGenericNotifyFromISR+0x1b2>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8005cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc0:	3318      	adds	r3, #24
 8005cc2:	4619      	mov	r1, r3
 8005cc4:	4812      	ldr	r0, [pc, #72]	; (8005d10 <xTaskGenericNotifyFromISR+0x1f8>)
 8005cc6:	f7fe f9a2 	bl	800400e <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cce:	4b11      	ldr	r3, [pc, #68]	; (8005d14 <xTaskGenericNotifyFromISR+0x1fc>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d908      	bls.n	8005cea <xTaskGenericNotifyFromISR+0x1d2>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8005cd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d002      	beq.n	8005ce4 <xTaskGenericNotifyFromISR+0x1cc>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8005cde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8005ce4:	4b0c      	ldr	r3, [pc, #48]	; (8005d18 <xTaskGenericNotifyFromISR+0x200>)
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	601a      	str	r2, [r3, #0]
 8005cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cec:	617b      	str	r3, [r7, #20]
        __asm volatile
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	f383 8811 	msr	BASEPRI, r3
    }
 8005cf4:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8005cf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3740      	adds	r7, #64	; 0x40
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}
 8005d00:	20000240 	.word	0x20000240
 8005d04:	20000264 	.word	0x20000264
 8005d08:	20000244 	.word	0x20000244
 8005d0c:	20000168 	.word	0x20000168
 8005d10:	200001fc 	.word	0x200001fc
 8005d14:	20000164 	.word	0x20000164
 8005d18:	20000250 	.word	0x20000250

08005d1c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8005d26:	4b29      	ldr	r3, [pc, #164]	; (8005dcc <prvAddCurrentTaskToDelayedList+0xb0>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d2c:	4b28      	ldr	r3, [pc, #160]	; (8005dd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	3304      	adds	r3, #4
 8005d32:	4618      	mov	r0, r3
 8005d34:	f7fe f9c8 	bl	80040c8 <uxListRemove>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d10b      	bne.n	8005d56 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005d3e:	4b24      	ldr	r3, [pc, #144]	; (8005dd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d44:	2201      	movs	r2, #1
 8005d46:	fa02 f303 	lsl.w	r3, r2, r3
 8005d4a:	43da      	mvns	r2, r3
 8005d4c:	4b21      	ldr	r3, [pc, #132]	; (8005dd4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4013      	ands	r3, r2
 8005d52:	4a20      	ldr	r2, [pc, #128]	; (8005dd4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005d54:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d5c:	d10a      	bne.n	8005d74 <prvAddCurrentTaskToDelayedList+0x58>
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d007      	beq.n	8005d74 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d64:	4b1a      	ldr	r3, [pc, #104]	; (8005dd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	3304      	adds	r3, #4
 8005d6a:	4619      	mov	r1, r3
 8005d6c:	481a      	ldr	r0, [pc, #104]	; (8005dd8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005d6e:	f7fe f94e 	bl	800400e <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8005d72:	e026      	b.n	8005dc2 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8005d74:	68fa      	ldr	r2, [r7, #12]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4413      	add	r3, r2
 8005d7a:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005d7c:	4b14      	ldr	r3, [pc, #80]	; (8005dd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	68ba      	ldr	r2, [r7, #8]
 8005d82:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8005d84:	68ba      	ldr	r2, [r7, #8]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d209      	bcs.n	8005da0 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d8c:	4b13      	ldr	r3, [pc, #76]	; (8005ddc <prvAddCurrentTaskToDelayedList+0xc0>)
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	4b0f      	ldr	r3, [pc, #60]	; (8005dd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	3304      	adds	r3, #4
 8005d96:	4619      	mov	r1, r3
 8005d98:	4610      	mov	r0, r2
 8005d9a:	f7fe f95c 	bl	8004056 <vListInsert>
}
 8005d9e:	e010      	b.n	8005dc2 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005da0:	4b0f      	ldr	r3, [pc, #60]	; (8005de0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	4b0a      	ldr	r3, [pc, #40]	; (8005dd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	3304      	adds	r3, #4
 8005daa:	4619      	mov	r1, r3
 8005dac:	4610      	mov	r0, r2
 8005dae:	f7fe f952 	bl	8004056 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8005db2:	4b0c      	ldr	r3, [pc, #48]	; (8005de4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	68ba      	ldr	r2, [r7, #8]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d202      	bcs.n	8005dc2 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8005dbc:	4a09      	ldr	r2, [pc, #36]	; (8005de4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	6013      	str	r3, [r2, #0]
}
 8005dc2:	bf00      	nop
 8005dc4:	3710      	adds	r7, #16
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	20000240 	.word	0x20000240
 8005dd0:	20000164 	.word	0x20000164
 8005dd4:	20000244 	.word	0x20000244
 8005dd8:	20000228 	.word	0x20000228
 8005ddc:	200001f8 	.word	0x200001f8
 8005de0:	200001f4 	.word	0x200001f4
 8005de4:	2000025c 	.word	0x2000025c

08005de8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b084      	sub	sp, #16
 8005dec:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8005dee:	2300      	movs	r3, #0
 8005df0:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8005df2:	f000 fb31 	bl	8006458 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8005df6:	4b11      	ldr	r3, [pc, #68]	; (8005e3c <xTimerCreateTimerTask+0x54>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d00b      	beq.n	8005e16 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8005dfe:	4b10      	ldr	r3, [pc, #64]	; (8005e40 <xTimerCreateTimerTask+0x58>)
 8005e00:	9301      	str	r3, [sp, #4]
 8005e02:	2302      	movs	r3, #2
 8005e04:	9300      	str	r3, [sp, #0]
 8005e06:	2300      	movs	r3, #0
 8005e08:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005e0c:	490d      	ldr	r1, [pc, #52]	; (8005e44 <xTimerCreateTimerTask+0x5c>)
 8005e0e:	480e      	ldr	r0, [pc, #56]	; (8005e48 <xTimerCreateTimerTask+0x60>)
 8005e10:	f7fe ff38 	bl	8004c84 <xTaskCreate>
 8005e14:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d10a      	bne.n	8005e32 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8005e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e20:	f383 8811 	msr	BASEPRI, r3
 8005e24:	f3bf 8f6f 	isb	sy
 8005e28:	f3bf 8f4f 	dsb	sy
 8005e2c:	603b      	str	r3, [r7, #0]
    }
 8005e2e:	bf00      	nop
 8005e30:	e7fe      	b.n	8005e30 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8005e32:	687b      	ldr	r3, [r7, #4]
    }
 8005e34:	4618      	mov	r0, r3
 8005e36:	3708      	adds	r7, #8
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}
 8005e3c:	20000298 	.word	0x20000298
 8005e40:	2000029c 	.word	0x2000029c
 8005e44:	080070d0 	.word	0x080070d0
 8005e48:	08006039 	.word	0x08006039

08005e4c <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b088      	sub	sp, #32
 8005e50:	af02      	add	r7, sp, #8
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	607a      	str	r2, [r7, #4]
 8005e58:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8005e5a:	202c      	movs	r0, #44	; 0x2c
 8005e5c:	f000 fe26 	bl	8006aac <pvPortMalloc>
 8005e60:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d00d      	beq.n	8005e84 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	9301      	str	r3, [sp, #4]
 8005e74:	6a3b      	ldr	r3, [r7, #32]
 8005e76:	9300      	str	r3, [sp, #0]
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	68b9      	ldr	r1, [r7, #8]
 8005e7e:	68f8      	ldr	r0, [r7, #12]
 8005e80:	f000 f805 	bl	8005e8e <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8005e84:	697b      	ldr	r3, [r7, #20]
        }
 8005e86:	4618      	mov	r0, r3
 8005e88:	3718      	adds	r7, #24
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}

08005e8e <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 8005e8e:	b580      	push	{r7, lr}
 8005e90:	b086      	sub	sp, #24
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	60f8      	str	r0, [r7, #12]
 8005e96:	60b9      	str	r1, [r7, #8]
 8005e98:	607a      	str	r2, [r7, #4]
 8005e9a:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d10a      	bne.n	8005eb8 <prvInitialiseNewTimer+0x2a>
        __asm volatile
 8005ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea6:	f383 8811 	msr	BASEPRI, r3
 8005eaa:	f3bf 8f6f 	isb	sy
 8005eae:	f3bf 8f4f 	dsb	sy
 8005eb2:	617b      	str	r3, [r7, #20]
    }
 8005eb4:	bf00      	nop
 8005eb6:	e7fe      	b.n	8005eb6 <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 8005eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d01e      	beq.n	8005efc <prvInitialiseNewTimer+0x6e>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 8005ebe:	f000 facb 	bl	8006458 <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 8005ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8005ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eca:	68ba      	ldr	r2, [r7, #8]
 8005ecc:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 8005ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed0:	683a      	ldr	r2, [r7, #0]
 8005ed2:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8005ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed6:	6a3a      	ldr	r2, [r7, #32]
 8005ed8:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8005eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005edc:	3304      	adds	r3, #4
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f7fe f888 	bl	8003ff4 <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d008      	beq.n	8005efc <prvInitialiseNewTimer+0x6e>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8005eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ef0:	f043 0304 	orr.w	r3, r3, #4
 8005ef4:	b2da      	uxtb	r2, r3
 8005ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 8005efc:	bf00      	nop
 8005efe:	3718      	adds	r7, #24
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b08a      	sub	sp, #40	; 0x28
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	607a      	str	r2, [r7, #4]
 8005f10:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8005f12:	2300      	movs	r3, #0
 8005f14:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d10a      	bne.n	8005f32 <xTimerGenericCommand+0x2e>
        __asm volatile
 8005f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f20:	f383 8811 	msr	BASEPRI, r3
 8005f24:	f3bf 8f6f 	isb	sy
 8005f28:	f3bf 8f4f 	dsb	sy
 8005f2c:	623b      	str	r3, [r7, #32]
    }
 8005f2e:	bf00      	nop
 8005f30:	e7fe      	b.n	8005f30 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8005f32:	4b1a      	ldr	r3, [pc, #104]	; (8005f9c <xTimerGenericCommand+0x98>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d02a      	beq.n	8005f90 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	2b05      	cmp	r3, #5
 8005f4a:	dc18      	bgt.n	8005f7e <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005f4c:	f7ff fbec 	bl	8005728 <xTaskGetSchedulerState>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b02      	cmp	r3, #2
 8005f54:	d109      	bne.n	8005f6a <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005f56:	4b11      	ldr	r3, [pc, #68]	; (8005f9c <xTimerGenericCommand+0x98>)
 8005f58:	6818      	ldr	r0, [r3, #0]
 8005f5a:	f107 0114 	add.w	r1, r7, #20
 8005f5e:	2300      	movs	r3, #0
 8005f60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f62:	f7fe f9c5 	bl	80042f0 <xQueueGenericSend>
 8005f66:	6278      	str	r0, [r7, #36]	; 0x24
 8005f68:	e012      	b.n	8005f90 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005f6a:	4b0c      	ldr	r3, [pc, #48]	; (8005f9c <xTimerGenericCommand+0x98>)
 8005f6c:	6818      	ldr	r0, [r3, #0]
 8005f6e:	f107 0114 	add.w	r1, r7, #20
 8005f72:	2300      	movs	r3, #0
 8005f74:	2200      	movs	r2, #0
 8005f76:	f7fe f9bb 	bl	80042f0 <xQueueGenericSend>
 8005f7a:	6278      	str	r0, [r7, #36]	; 0x24
 8005f7c:	e008      	b.n	8005f90 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005f7e:	4b07      	ldr	r3, [pc, #28]	; (8005f9c <xTimerGenericCommand+0x98>)
 8005f80:	6818      	ldr	r0, [r3, #0]
 8005f82:	f107 0114 	add.w	r1, r7, #20
 8005f86:	2300      	movs	r3, #0
 8005f88:	683a      	ldr	r2, [r7, #0]
 8005f8a:	f7fe faaf 	bl	80044ec <xQueueGenericSendFromISR>
 8005f8e:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8005f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8005f92:	4618      	mov	r0, r3
 8005f94:	3728      	adds	r7, #40	; 0x28
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	20000298 	.word	0x20000298

08005fa0 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b088      	sub	sp, #32
 8005fa4:	af02      	add	r7, sp, #8
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005faa:	4b22      	ldr	r3, [pc, #136]	; (8006034 <prvProcessExpiredTimer+0x94>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	3304      	adds	r3, #4
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f7fe f885 	bl	80040c8 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005fc4:	f003 0304 	and.w	r3, r3, #4
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d022      	beq.n	8006012 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	699a      	ldr	r2, [r3, #24]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	18d1      	adds	r1, r2, r3
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	683a      	ldr	r2, [r7, #0]
 8005fd8:	6978      	ldr	r0, [r7, #20]
 8005fda:	f000 f8d1 	bl	8006180 <prvInsertTimerInActiveList>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d01f      	beq.n	8006024 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	9300      	str	r3, [sp, #0]
 8005fe8:	2300      	movs	r3, #0
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	2100      	movs	r1, #0
 8005fee:	6978      	ldr	r0, [r7, #20]
 8005ff0:	f7ff ff88 	bl	8005f04 <xTimerGenericCommand>
 8005ff4:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d113      	bne.n	8006024 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8005ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006000:	f383 8811 	msr	BASEPRI, r3
 8006004:	f3bf 8f6f 	isb	sy
 8006008:	f3bf 8f4f 	dsb	sy
 800600c:	60fb      	str	r3, [r7, #12]
    }
 800600e:	bf00      	nop
 8006010:	e7fe      	b.n	8006010 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006018:	f023 0301 	bic.w	r3, r3, #1
 800601c:	b2da      	uxtb	r2, r3
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	6a1b      	ldr	r3, [r3, #32]
 8006028:	6978      	ldr	r0, [r7, #20]
 800602a:	4798      	blx	r3
    }
 800602c:	bf00      	nop
 800602e:	3718      	adds	r7, #24
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}
 8006034:	20000290 	.word	0x20000290

08006038 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006040:	f107 0308 	add.w	r3, r7, #8
 8006044:	4618      	mov	r0, r3
 8006046:	f000 f857 	bl	80060f8 <prvGetNextExpireTime>
 800604a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	4619      	mov	r1, r3
 8006050:	68f8      	ldr	r0, [r7, #12]
 8006052:	f000 f803 	bl	800605c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8006056:	f000 f8d5 	bl	8006204 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800605a:	e7f1      	b.n	8006040 <prvTimerTask+0x8>

0800605c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8006066:	f7fe ffa5 	bl	8004fb4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800606a:	f107 0308 	add.w	r3, r7, #8
 800606e:	4618      	mov	r0, r3
 8006070:	f000 f866 	bl	8006140 <prvSampleTimeNow>
 8006074:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d130      	bne.n	80060de <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d10a      	bne.n	8006098 <prvProcessTimerOrBlockTask+0x3c>
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	429a      	cmp	r2, r3
 8006088:	d806      	bhi.n	8006098 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800608a:	f7fe ffa1 	bl	8004fd0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800608e:	68f9      	ldr	r1, [r7, #12]
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f7ff ff85 	bl	8005fa0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8006096:	e024      	b.n	80060e2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d008      	beq.n	80060b0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800609e:	4b13      	ldr	r3, [pc, #76]	; (80060ec <prvProcessTimerOrBlockTask+0x90>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d101      	bne.n	80060ac <prvProcessTimerOrBlockTask+0x50>
 80060a8:	2301      	movs	r3, #1
 80060aa:	e000      	b.n	80060ae <prvProcessTimerOrBlockTask+0x52>
 80060ac:	2300      	movs	r3, #0
 80060ae:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80060b0:	4b0f      	ldr	r3, [pc, #60]	; (80060f0 <prvProcessTimerOrBlockTask+0x94>)
 80060b2:	6818      	ldr	r0, [r3, #0]
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	1ad3      	subs	r3, r2, r3
 80060ba:	683a      	ldr	r2, [r7, #0]
 80060bc:	4619      	mov	r1, r3
 80060be:	f7fe fdad 	bl	8004c1c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80060c2:	f7fe ff85 	bl	8004fd0 <xTaskResumeAll>
 80060c6:	4603      	mov	r3, r0
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d10a      	bne.n	80060e2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80060cc:	4b09      	ldr	r3, [pc, #36]	; (80060f4 <prvProcessTimerOrBlockTask+0x98>)
 80060ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060d2:	601a      	str	r2, [r3, #0]
 80060d4:	f3bf 8f4f 	dsb	sy
 80060d8:	f3bf 8f6f 	isb	sy
    }
 80060dc:	e001      	b.n	80060e2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80060de:	f7fe ff77 	bl	8004fd0 <xTaskResumeAll>
    }
 80060e2:	bf00      	nop
 80060e4:	3710      	adds	r7, #16
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop
 80060ec:	20000294 	.word	0x20000294
 80060f0:	20000298 	.word	0x20000298
 80060f4:	e000ed04 	.word	0xe000ed04

080060f8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80060f8:	b480      	push	{r7}
 80060fa:	b085      	sub	sp, #20
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006100:	4b0e      	ldr	r3, [pc, #56]	; (800613c <prvGetNextExpireTime+0x44>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d101      	bne.n	800610e <prvGetNextExpireTime+0x16>
 800610a:	2201      	movs	r2, #1
 800610c:	e000      	b.n	8006110 <prvGetNextExpireTime+0x18>
 800610e:	2200      	movs	r2, #0
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d105      	bne.n	8006128 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800611c:	4b07      	ldr	r3, [pc, #28]	; (800613c <prvGetNextExpireTime+0x44>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	68db      	ldr	r3, [r3, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	60fb      	str	r3, [r7, #12]
 8006126:	e001      	b.n	800612c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8006128:	2300      	movs	r3, #0
 800612a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800612c:	68fb      	ldr	r3, [r7, #12]
    }
 800612e:	4618      	mov	r0, r3
 8006130:	3714      	adds	r7, #20
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr
 800613a:	bf00      	nop
 800613c:	20000290 	.word	0x20000290

08006140 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8006140:	b580      	push	{r7, lr}
 8006142:	b084      	sub	sp, #16
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8006148:	f7fe ffde 	bl	8005108 <xTaskGetTickCount>
 800614c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800614e:	4b0b      	ldr	r3, [pc, #44]	; (800617c <prvSampleTimeNow+0x3c>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	68fa      	ldr	r2, [r7, #12]
 8006154:	429a      	cmp	r2, r3
 8006156:	d205      	bcs.n	8006164 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8006158:	f000 f91a 	bl	8006390 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	601a      	str	r2, [r3, #0]
 8006162:	e002      	b.n	800616a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2200      	movs	r2, #0
 8006168:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800616a:	4a04      	ldr	r2, [pc, #16]	; (800617c <prvSampleTimeNow+0x3c>)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8006170:	68fb      	ldr	r3, [r7, #12]
    }
 8006172:	4618      	mov	r0, r3
 8006174:	3710      	adds	r7, #16
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
 800617a:	bf00      	nop
 800617c:	200002a0 	.word	0x200002a0

08006180 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8006180:	b580      	push	{r7, lr}
 8006182:	b086      	sub	sp, #24
 8006184:	af00      	add	r7, sp, #0
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	607a      	str	r2, [r7, #4]
 800618c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800618e:	2300      	movs	r3, #0
 8006190:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	68ba      	ldr	r2, [r7, #8]
 8006196:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	68fa      	ldr	r2, [r7, #12]
 800619c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800619e:	68ba      	ldr	r2, [r7, #8]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d812      	bhi.n	80061cc <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	1ad2      	subs	r2, r2, r3
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	699b      	ldr	r3, [r3, #24]
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d302      	bcc.n	80061ba <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80061b4:	2301      	movs	r3, #1
 80061b6:	617b      	str	r3, [r7, #20]
 80061b8:	e01b      	b.n	80061f2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80061ba:	4b10      	ldr	r3, [pc, #64]	; (80061fc <prvInsertTimerInActiveList+0x7c>)
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	3304      	adds	r3, #4
 80061c2:	4619      	mov	r1, r3
 80061c4:	4610      	mov	r0, r2
 80061c6:	f7fd ff46 	bl	8004056 <vListInsert>
 80061ca:	e012      	b.n	80061f2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d206      	bcs.n	80061e2 <prvInsertTimerInActiveList+0x62>
 80061d4:	68ba      	ldr	r2, [r7, #8]
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	429a      	cmp	r2, r3
 80061da:	d302      	bcc.n	80061e2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80061dc:	2301      	movs	r3, #1
 80061de:	617b      	str	r3, [r7, #20]
 80061e0:	e007      	b.n	80061f2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80061e2:	4b07      	ldr	r3, [pc, #28]	; (8006200 <prvInsertTimerInActiveList+0x80>)
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	3304      	adds	r3, #4
 80061ea:	4619      	mov	r1, r3
 80061ec:	4610      	mov	r0, r2
 80061ee:	f7fd ff32 	bl	8004056 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80061f2:	697b      	ldr	r3, [r7, #20]
    }
 80061f4:	4618      	mov	r0, r3
 80061f6:	3718      	adds	r7, #24
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}
 80061fc:	20000294 	.word	0x20000294
 8006200:	20000290 	.word	0x20000290

08006204 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8006204:	b580      	push	{r7, lr}
 8006206:	b08c      	sub	sp, #48	; 0x30
 8006208:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800620a:	e0ae      	b.n	800636a <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	2b00      	cmp	r3, #0
 8006210:	f2c0 80aa 	blt.w	8006368 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621a:	695b      	ldr	r3, [r3, #20]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d004      	beq.n	800622a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006222:	3304      	adds	r3, #4
 8006224:	4618      	mov	r0, r3
 8006226:	f7fd ff4f 	bl	80040c8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800622a:	1d3b      	adds	r3, r7, #4
 800622c:	4618      	mov	r0, r3
 800622e:	f7ff ff87 	bl	8006140 <prvSampleTimeNow>
 8006232:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	2b09      	cmp	r3, #9
 8006238:	f200 8097 	bhi.w	800636a <prvProcessReceivedCommands+0x166>
 800623c:	a201      	add	r2, pc, #4	; (adr r2, 8006244 <prvProcessReceivedCommands+0x40>)
 800623e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006242:	bf00      	nop
 8006244:	0800626d 	.word	0x0800626d
 8006248:	0800626d 	.word	0x0800626d
 800624c:	0800626d 	.word	0x0800626d
 8006250:	080062e1 	.word	0x080062e1
 8006254:	080062f5 	.word	0x080062f5
 8006258:	0800633f 	.word	0x0800633f
 800625c:	0800626d 	.word	0x0800626d
 8006260:	0800626d 	.word	0x0800626d
 8006264:	080062e1 	.word	0x080062e1
 8006268:	080062f5 	.word	0x080062f5
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800626c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006272:	f043 0301 	orr.w	r3, r3, #1
 8006276:	b2da      	uxtb	r2, r3
 8006278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800627e:	68fa      	ldr	r2, [r7, #12]
 8006280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006282:	699b      	ldr	r3, [r3, #24]
 8006284:	18d1      	adds	r1, r2, r3
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	6a3a      	ldr	r2, [r7, #32]
 800628a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800628c:	f7ff ff78 	bl	8006180 <prvInsertTimerInActiveList>
 8006290:	4603      	mov	r3, r0
 8006292:	2b00      	cmp	r3, #0
 8006294:	d069      	beq.n	800636a <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006298:	6a1b      	ldr	r3, [r3, #32]
 800629a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800629c:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800629e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062a4:	f003 0304 	and.w	r3, r3, #4
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d05e      	beq.n	800636a <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80062ac:	68fa      	ldr	r2, [r7, #12]
 80062ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b0:	699b      	ldr	r3, [r3, #24]
 80062b2:	441a      	add	r2, r3
 80062b4:	2300      	movs	r3, #0
 80062b6:	9300      	str	r3, [sp, #0]
 80062b8:	2300      	movs	r3, #0
 80062ba:	2100      	movs	r1, #0
 80062bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80062be:	f7ff fe21 	bl	8005f04 <xTimerGenericCommand>
 80062c2:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 80062c4:	69fb      	ldr	r3, [r7, #28]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d14f      	bne.n	800636a <prvProcessReceivedCommands+0x166>
        __asm volatile
 80062ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ce:	f383 8811 	msr	BASEPRI, r3
 80062d2:	f3bf 8f6f 	isb	sy
 80062d6:	f3bf 8f4f 	dsb	sy
 80062da:	61bb      	str	r3, [r7, #24]
    }
 80062dc:	bf00      	nop
 80062de:	e7fe      	b.n	80062de <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80062e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062e6:	f023 0301 	bic.w	r3, r3, #1
 80062ea:	b2da      	uxtb	r2, r3
 80062ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80062f2:	e03a      	b.n	800636a <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80062f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062fa:	f043 0301 	orr.w	r3, r3, #1
 80062fe:	b2da      	uxtb	r2, r3
 8006300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006302:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006306:	68fa      	ldr	r2, [r7, #12]
 8006308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800630c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630e:	699b      	ldr	r3, [r3, #24]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d10a      	bne.n	800632a <prvProcessReceivedCommands+0x126>
        __asm volatile
 8006314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006318:	f383 8811 	msr	BASEPRI, r3
 800631c:	f3bf 8f6f 	isb	sy
 8006320:	f3bf 8f4f 	dsb	sy
 8006324:	617b      	str	r3, [r7, #20]
    }
 8006326:	bf00      	nop
 8006328:	e7fe      	b.n	8006328 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800632a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632c:	699a      	ldr	r2, [r3, #24]
 800632e:	6a3b      	ldr	r3, [r7, #32]
 8006330:	18d1      	adds	r1, r2, r3
 8006332:	6a3b      	ldr	r3, [r7, #32]
 8006334:	6a3a      	ldr	r2, [r7, #32]
 8006336:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006338:	f7ff ff22 	bl	8006180 <prvInsertTimerInActiveList>
                        break;
 800633c:	e015      	b.n	800636a <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800633e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006340:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006344:	f003 0302 	and.w	r3, r3, #2
 8006348:	2b00      	cmp	r3, #0
 800634a:	d103      	bne.n	8006354 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 800634c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800634e:	f000 fc8d 	bl	8006c6c <vPortFree>
 8006352:	e00a      	b.n	800636a <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006356:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800635a:	f023 0301 	bic.w	r3, r3, #1
 800635e:	b2da      	uxtb	r2, r3
 8006360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006362:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8006366:	e000      	b.n	800636a <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8006368:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800636a:	4b08      	ldr	r3, [pc, #32]	; (800638c <prvProcessReceivedCommands+0x188>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f107 0108 	add.w	r1, r7, #8
 8006372:	2200      	movs	r2, #0
 8006374:	4618      	mov	r0, r3
 8006376:	f7fe f963 	bl	8004640 <xQueueReceive>
 800637a:	4603      	mov	r3, r0
 800637c:	2b00      	cmp	r3, #0
 800637e:	f47f af45 	bne.w	800620c <prvProcessReceivedCommands+0x8>
        }
    }
 8006382:	bf00      	nop
 8006384:	bf00      	nop
 8006386:	3728      	adds	r7, #40	; 0x28
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}
 800638c:	20000298 	.word	0x20000298

08006390 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8006390:	b580      	push	{r7, lr}
 8006392:	b088      	sub	sp, #32
 8006394:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006396:	e048      	b.n	800642a <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006398:	4b2d      	ldr	r3, [pc, #180]	; (8006450 <prvSwitchTimerLists+0xc0>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063a2:	4b2b      	ldr	r3, [pc, #172]	; (8006450 <prvSwitchTimerLists+0xc0>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	3304      	adds	r3, #4
 80063b0:	4618      	mov	r0, r3
 80063b2:	f7fd fe89 	bl	80040c8 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	6a1b      	ldr	r3, [r3, #32]
 80063ba:	68f8      	ldr	r0, [r7, #12]
 80063bc:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063c4:	f003 0304 	and.w	r3, r3, #4
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d02e      	beq.n	800642a <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	699b      	ldr	r3, [r3, #24]
 80063d0:	693a      	ldr	r2, [r7, #16]
 80063d2:	4413      	add	r3, r2
 80063d4:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 80063d6:	68ba      	ldr	r2, [r7, #8]
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	429a      	cmp	r2, r3
 80063dc:	d90e      	bls.n	80063fc <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	68ba      	ldr	r2, [r7, #8]
 80063e2:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	68fa      	ldr	r2, [r7, #12]
 80063e8:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80063ea:	4b19      	ldr	r3, [pc, #100]	; (8006450 <prvSwitchTimerLists+0xc0>)
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	3304      	adds	r3, #4
 80063f2:	4619      	mov	r1, r3
 80063f4:	4610      	mov	r0, r2
 80063f6:	f7fd fe2e 	bl	8004056 <vListInsert>
 80063fa:	e016      	b.n	800642a <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80063fc:	2300      	movs	r3, #0
 80063fe:	9300      	str	r3, [sp, #0]
 8006400:	2300      	movs	r3, #0
 8006402:	693a      	ldr	r2, [r7, #16]
 8006404:	2100      	movs	r1, #0
 8006406:	68f8      	ldr	r0, [r7, #12]
 8006408:	f7ff fd7c 	bl	8005f04 <xTimerGenericCommand>
 800640c:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d10a      	bne.n	800642a <prvSwitchTimerLists+0x9a>
        __asm volatile
 8006414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006418:	f383 8811 	msr	BASEPRI, r3
 800641c:	f3bf 8f6f 	isb	sy
 8006420:	f3bf 8f4f 	dsb	sy
 8006424:	603b      	str	r3, [r7, #0]
    }
 8006426:	bf00      	nop
 8006428:	e7fe      	b.n	8006428 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800642a:	4b09      	ldr	r3, [pc, #36]	; (8006450 <prvSwitchTimerLists+0xc0>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d1b1      	bne.n	8006398 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8006434:	4b06      	ldr	r3, [pc, #24]	; (8006450 <prvSwitchTimerLists+0xc0>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800643a:	4b06      	ldr	r3, [pc, #24]	; (8006454 <prvSwitchTimerLists+0xc4>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a04      	ldr	r2, [pc, #16]	; (8006450 <prvSwitchTimerLists+0xc0>)
 8006440:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8006442:	4a04      	ldr	r2, [pc, #16]	; (8006454 <prvSwitchTimerLists+0xc4>)
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	6013      	str	r3, [r2, #0]
    }
 8006448:	bf00      	nop
 800644a:	3718      	adds	r7, #24
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}
 8006450:	20000290 	.word	0x20000290
 8006454:	20000294 	.word	0x20000294

08006458 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8006458:	b580      	push	{r7, lr}
 800645a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800645c:	f000 fa02 	bl	8006864 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8006460:	4b12      	ldr	r3, [pc, #72]	; (80064ac <prvCheckForValidListAndQueue+0x54>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d11d      	bne.n	80064a4 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8006468:	4811      	ldr	r0, [pc, #68]	; (80064b0 <prvCheckForValidListAndQueue+0x58>)
 800646a:	f7fd fda3 	bl	8003fb4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800646e:	4811      	ldr	r0, [pc, #68]	; (80064b4 <prvCheckForValidListAndQueue+0x5c>)
 8006470:	f7fd fda0 	bl	8003fb4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8006474:	4b10      	ldr	r3, [pc, #64]	; (80064b8 <prvCheckForValidListAndQueue+0x60>)
 8006476:	4a0e      	ldr	r2, [pc, #56]	; (80064b0 <prvCheckForValidListAndQueue+0x58>)
 8006478:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800647a:	4b10      	ldr	r3, [pc, #64]	; (80064bc <prvCheckForValidListAndQueue+0x64>)
 800647c:	4a0d      	ldr	r2, [pc, #52]	; (80064b4 <prvCheckForValidListAndQueue+0x5c>)
 800647e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8006480:	2200      	movs	r2, #0
 8006482:	210c      	movs	r1, #12
 8006484:	200a      	movs	r0, #10
 8006486:	f7fd feb1 	bl	80041ec <xQueueGenericCreate>
 800648a:	4603      	mov	r3, r0
 800648c:	4a07      	ldr	r2, [pc, #28]	; (80064ac <prvCheckForValidListAndQueue+0x54>)
 800648e:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8006490:	4b06      	ldr	r3, [pc, #24]	; (80064ac <prvCheckForValidListAndQueue+0x54>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d005      	beq.n	80064a4 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006498:	4b04      	ldr	r3, [pc, #16]	; (80064ac <prvCheckForValidListAndQueue+0x54>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4908      	ldr	r1, [pc, #32]	; (80064c0 <prvCheckForValidListAndQueue+0x68>)
 800649e:	4618      	mov	r0, r3
 80064a0:	f7fe fb92 	bl	8004bc8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80064a4:	f000 fa0e 	bl	80068c4 <vPortExitCritical>
    }
 80064a8:	bf00      	nop
 80064aa:	bd80      	pop	{r7, pc}
 80064ac:	20000298 	.word	0x20000298
 80064b0:	20000268 	.word	0x20000268
 80064b4:	2000027c 	.word	0x2000027c
 80064b8:	20000290 	.word	0x20000290
 80064bc:	20000294 	.word	0x20000294
 80064c0:	080070d8 	.word	0x080070d8

080064c4 <pvTimerGetTimerID>:
        return xReturn;
    } /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b086      	sub	sp, #24
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	617b      	str	r3, [r7, #20]
        void * pvReturn;

        configASSERT( xTimer );
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d10a      	bne.n	80064ec <pvTimerGetTimerID+0x28>
        __asm volatile
 80064d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064da:	f383 8811 	msr	BASEPRI, r3
 80064de:	f3bf 8f6f 	isb	sy
 80064e2:	f3bf 8f4f 	dsb	sy
 80064e6:	60fb      	str	r3, [r7, #12]
    }
 80064e8:	bf00      	nop
 80064ea:	e7fe      	b.n	80064ea <pvTimerGetTimerID+0x26>

        taskENTER_CRITICAL();
 80064ec:	f000 f9ba 	bl	8006864 <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	69db      	ldr	r3, [r3, #28]
 80064f4:	613b      	str	r3, [r7, #16]
        }
        taskEXIT_CRITICAL();
 80064f6:	f000 f9e5 	bl	80068c4 <vPortExitCritical>

        return pvReturn;
 80064fa:	693b      	ldr	r3, [r7, #16]
    }
 80064fc:	4618      	mov	r0, r3
 80064fe:	3718      	adds	r7, #24
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}

08006504 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8006504:	b480      	push	{r7}
 8006506:	b085      	sub	sp, #20
 8006508:	af00      	add	r7, sp, #0
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	3b04      	subs	r3, #4
 8006514:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800651c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	3b04      	subs	r3, #4
 8006522:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	f023 0201 	bic.w	r2, r3, #1
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	3b04      	subs	r3, #4
 8006532:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8006534:	4a0c      	ldr	r2, [pc, #48]	; (8006568 <pxPortInitialiseStack+0x64>)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	3b14      	subs	r3, #20
 800653e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8006540:	687a      	ldr	r2, [r7, #4]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	3b04      	subs	r3, #4
 800654a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f06f 0202 	mvn.w	r2, #2
 8006552:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	3b20      	subs	r3, #32
 8006558:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800655a:	68fb      	ldr	r3, [r7, #12]
}
 800655c:	4618      	mov	r0, r3
 800655e:	3714      	adds	r7, #20
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr
 8006568:	0800656d 	.word	0x0800656d

0800656c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800656c:	b480      	push	{r7}
 800656e:	b085      	sub	sp, #20
 8006570:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8006572:	2300      	movs	r3, #0
 8006574:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8006576:	4b12      	ldr	r3, [pc, #72]	; (80065c0 <prvTaskExitError+0x54>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800657e:	d00a      	beq.n	8006596 <prvTaskExitError+0x2a>
        __asm volatile
 8006580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006584:	f383 8811 	msr	BASEPRI, r3
 8006588:	f3bf 8f6f 	isb	sy
 800658c:	f3bf 8f4f 	dsb	sy
 8006590:	60fb      	str	r3, [r7, #12]
    }
 8006592:	bf00      	nop
 8006594:	e7fe      	b.n	8006594 <prvTaskExitError+0x28>
        __asm volatile
 8006596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800659a:	f383 8811 	msr	BASEPRI, r3
 800659e:	f3bf 8f6f 	isb	sy
 80065a2:	f3bf 8f4f 	dsb	sy
 80065a6:	60bb      	str	r3, [r7, #8]
    }
 80065a8:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80065aa:	bf00      	nop
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d0fc      	beq.n	80065ac <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80065b2:	bf00      	nop
 80065b4:	bf00      	nop
 80065b6:	3714      	adds	r7, #20
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr
 80065c0:	2000001c 	.word	0x2000001c
	...

080065d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80065d0:	4b07      	ldr	r3, [pc, #28]	; (80065f0 <pxCurrentTCBConst2>)
 80065d2:	6819      	ldr	r1, [r3, #0]
 80065d4:	6808      	ldr	r0, [r1, #0]
 80065d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065da:	f380 8809 	msr	PSP, r0
 80065de:	f3bf 8f6f 	isb	sy
 80065e2:	f04f 0000 	mov.w	r0, #0
 80065e6:	f380 8811 	msr	BASEPRI, r0
 80065ea:	4770      	bx	lr
 80065ec:	f3af 8000 	nop.w

080065f0 <pxCurrentTCBConst2>:
 80065f0:	20000164 	.word	0x20000164
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80065f4:	bf00      	nop
 80065f6:	bf00      	nop

080065f8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80065f8:	4808      	ldr	r0, [pc, #32]	; (800661c <prvPortStartFirstTask+0x24>)
 80065fa:	6800      	ldr	r0, [r0, #0]
 80065fc:	6800      	ldr	r0, [r0, #0]
 80065fe:	f380 8808 	msr	MSP, r0
 8006602:	f04f 0000 	mov.w	r0, #0
 8006606:	f380 8814 	msr	CONTROL, r0
 800660a:	b662      	cpsie	i
 800660c:	b661      	cpsie	f
 800660e:	f3bf 8f4f 	dsb	sy
 8006612:	f3bf 8f6f 	isb	sy
 8006616:	df00      	svc	0
 8006618:	bf00      	nop
 800661a:	0000      	.short	0x0000
 800661c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8006620:	bf00      	nop
 8006622:	bf00      	nop

08006624 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b086      	sub	sp, #24
 8006628:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800662a:	4b46      	ldr	r3, [pc, #280]	; (8006744 <xPortStartScheduler+0x120>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a46      	ldr	r2, [pc, #280]	; (8006748 <xPortStartScheduler+0x124>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d10a      	bne.n	800664a <xPortStartScheduler+0x26>
        __asm volatile
 8006634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006638:	f383 8811 	msr	BASEPRI, r3
 800663c:	f3bf 8f6f 	isb	sy
 8006640:	f3bf 8f4f 	dsb	sy
 8006644:	613b      	str	r3, [r7, #16]
    }
 8006646:	bf00      	nop
 8006648:	e7fe      	b.n	8006648 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800664a:	4b3e      	ldr	r3, [pc, #248]	; (8006744 <xPortStartScheduler+0x120>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a3f      	ldr	r2, [pc, #252]	; (800674c <xPortStartScheduler+0x128>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d10a      	bne.n	800666a <xPortStartScheduler+0x46>
        __asm volatile
 8006654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006658:	f383 8811 	msr	BASEPRI, r3
 800665c:	f3bf 8f6f 	isb	sy
 8006660:	f3bf 8f4f 	dsb	sy
 8006664:	60fb      	str	r3, [r7, #12]
    }
 8006666:	bf00      	nop
 8006668:	e7fe      	b.n	8006668 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800666a:	4b39      	ldr	r3, [pc, #228]	; (8006750 <xPortStartScheduler+0x12c>)
 800666c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	b2db      	uxtb	r3, r3
 8006674:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	22ff      	movs	r2, #255	; 0xff
 800667a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	b2db      	uxtb	r3, r3
 8006682:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006684:	78fb      	ldrb	r3, [r7, #3]
 8006686:	b2db      	uxtb	r3, r3
 8006688:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800668c:	b2da      	uxtb	r2, r3
 800668e:	4b31      	ldr	r3, [pc, #196]	; (8006754 <xPortStartScheduler+0x130>)
 8006690:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006692:	4b31      	ldr	r3, [pc, #196]	; (8006758 <xPortStartScheduler+0x134>)
 8006694:	2207      	movs	r2, #7
 8006696:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006698:	e009      	b.n	80066ae <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800669a:	4b2f      	ldr	r3, [pc, #188]	; (8006758 <xPortStartScheduler+0x134>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	3b01      	subs	r3, #1
 80066a0:	4a2d      	ldr	r2, [pc, #180]	; (8006758 <xPortStartScheduler+0x134>)
 80066a2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80066a4:	78fb      	ldrb	r3, [r7, #3]
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	005b      	lsls	r3, r3, #1
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80066ae:	78fb      	ldrb	r3, [r7, #3]
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066b6:	2b80      	cmp	r3, #128	; 0x80
 80066b8:	d0ef      	beq.n	800669a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80066ba:	4b27      	ldr	r3, [pc, #156]	; (8006758 <xPortStartScheduler+0x134>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f1c3 0307 	rsb	r3, r3, #7
 80066c2:	2b04      	cmp	r3, #4
 80066c4:	d00a      	beq.n	80066dc <xPortStartScheduler+0xb8>
        __asm volatile
 80066c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ca:	f383 8811 	msr	BASEPRI, r3
 80066ce:	f3bf 8f6f 	isb	sy
 80066d2:	f3bf 8f4f 	dsb	sy
 80066d6:	60bb      	str	r3, [r7, #8]
    }
 80066d8:	bf00      	nop
 80066da:	e7fe      	b.n	80066da <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80066dc:	4b1e      	ldr	r3, [pc, #120]	; (8006758 <xPortStartScheduler+0x134>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	021b      	lsls	r3, r3, #8
 80066e2:	4a1d      	ldr	r2, [pc, #116]	; (8006758 <xPortStartScheduler+0x134>)
 80066e4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80066e6:	4b1c      	ldr	r3, [pc, #112]	; (8006758 <xPortStartScheduler+0x134>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80066ee:	4a1a      	ldr	r2, [pc, #104]	; (8006758 <xPortStartScheduler+0x134>)
 80066f0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	b2da      	uxtb	r2, r3
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80066fa:	4b18      	ldr	r3, [pc, #96]	; (800675c <xPortStartScheduler+0x138>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a17      	ldr	r2, [pc, #92]	; (800675c <xPortStartScheduler+0x138>)
 8006700:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006704:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8006706:	4b15      	ldr	r3, [pc, #84]	; (800675c <xPortStartScheduler+0x138>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a14      	ldr	r2, [pc, #80]	; (800675c <xPortStartScheduler+0x138>)
 800670c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006710:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8006712:	f000 f95b 	bl	80069cc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8006716:	4b12      	ldr	r3, [pc, #72]	; (8006760 <xPortStartScheduler+0x13c>)
 8006718:	2200      	movs	r2, #0
 800671a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800671c:	f000 f97a 	bl	8006a14 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006720:	4b10      	ldr	r3, [pc, #64]	; (8006764 <xPortStartScheduler+0x140>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a0f      	ldr	r2, [pc, #60]	; (8006764 <xPortStartScheduler+0x140>)
 8006726:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800672a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800672c:	f7ff ff64 	bl	80065f8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8006730:	f7fe fdb2 	bl	8005298 <vTaskSwitchContext>
    prvTaskExitError();
 8006734:	f7ff ff1a 	bl	800656c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8006738:	2300      	movs	r3, #0
}
 800673a:	4618      	mov	r0, r3
 800673c:	3718      	adds	r7, #24
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop
 8006744:	e000ed00 	.word	0xe000ed00
 8006748:	410fc271 	.word	0x410fc271
 800674c:	410fc270 	.word	0x410fc270
 8006750:	e000e400 	.word	0xe000e400
 8006754:	200002a4 	.word	0x200002a4
 8006758:	200002a8 	.word	0x200002a8
 800675c:	e000ed20 	.word	0xe000ed20
 8006760:	2000001c 	.word	0x2000001c
 8006764:	e000ef34 	.word	0xe000ef34

08006768 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8006768:	b480      	push	{r7}
 800676a:	b087      	sub	sp, #28
 800676c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800676e:	4b37      	ldr	r3, [pc, #220]	; (800684c <vInitPrioGroupValue+0xe4>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a37      	ldr	r2, [pc, #220]	; (8006850 <vInitPrioGroupValue+0xe8>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d10a      	bne.n	800678e <vInitPrioGroupValue+0x26>
        __asm volatile
 8006778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800677c:	f383 8811 	msr	BASEPRI, r3
 8006780:	f3bf 8f6f 	isb	sy
 8006784:	f3bf 8f4f 	dsb	sy
 8006788:	613b      	str	r3, [r7, #16]
    }
 800678a:	bf00      	nop
 800678c:	e7fe      	b.n	800678c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800678e:	4b2f      	ldr	r3, [pc, #188]	; (800684c <vInitPrioGroupValue+0xe4>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a30      	ldr	r2, [pc, #192]	; (8006854 <vInitPrioGroupValue+0xec>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d10a      	bne.n	80067ae <vInitPrioGroupValue+0x46>
        __asm volatile
 8006798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800679c:	f383 8811 	msr	BASEPRI, r3
 80067a0:	f3bf 8f6f 	isb	sy
 80067a4:	f3bf 8f4f 	dsb	sy
 80067a8:	60fb      	str	r3, [r7, #12]
    }
 80067aa:	bf00      	nop
 80067ac:	e7fe      	b.n	80067ac <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80067ae:	4b2a      	ldr	r3, [pc, #168]	; (8006858 <vInitPrioGroupValue+0xf0>)
 80067b0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	b2db      	uxtb	r3, r3
 80067b8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	22ff      	movs	r2, #255	; 0xff
 80067be:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80067c8:	78fb      	ldrb	r3, [r7, #3]
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80067d0:	b2da      	uxtb	r2, r3
 80067d2:	4b22      	ldr	r3, [pc, #136]	; (800685c <vInitPrioGroupValue+0xf4>)
 80067d4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80067d6:	4b22      	ldr	r3, [pc, #136]	; (8006860 <vInitPrioGroupValue+0xf8>)
 80067d8:	2207      	movs	r2, #7
 80067da:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80067dc:	e009      	b.n	80067f2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80067de:	4b20      	ldr	r3, [pc, #128]	; (8006860 <vInitPrioGroupValue+0xf8>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	3b01      	subs	r3, #1
 80067e4:	4a1e      	ldr	r2, [pc, #120]	; (8006860 <vInitPrioGroupValue+0xf8>)
 80067e6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80067e8:	78fb      	ldrb	r3, [r7, #3]
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	005b      	lsls	r3, r3, #1
 80067ee:	b2db      	uxtb	r3, r3
 80067f0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80067f2:	78fb      	ldrb	r3, [r7, #3]
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067fa:	2b80      	cmp	r3, #128	; 0x80
 80067fc:	d0ef      	beq.n	80067de <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80067fe:	4b18      	ldr	r3, [pc, #96]	; (8006860 <vInitPrioGroupValue+0xf8>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f1c3 0307 	rsb	r3, r3, #7
 8006806:	2b04      	cmp	r3, #4
 8006808:	d00a      	beq.n	8006820 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800680a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800680e:	f383 8811 	msr	BASEPRI, r3
 8006812:	f3bf 8f6f 	isb	sy
 8006816:	f3bf 8f4f 	dsb	sy
 800681a:	60bb      	str	r3, [r7, #8]
    }
 800681c:	bf00      	nop
 800681e:	e7fe      	b.n	800681e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006820:	4b0f      	ldr	r3, [pc, #60]	; (8006860 <vInitPrioGroupValue+0xf8>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	021b      	lsls	r3, r3, #8
 8006826:	4a0e      	ldr	r2, [pc, #56]	; (8006860 <vInitPrioGroupValue+0xf8>)
 8006828:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800682a:	4b0d      	ldr	r3, [pc, #52]	; (8006860 <vInitPrioGroupValue+0xf8>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006832:	4a0b      	ldr	r2, [pc, #44]	; (8006860 <vInitPrioGroupValue+0xf8>)
 8006834:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	b2da      	uxtb	r2, r3
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800683e:	bf00      	nop
 8006840:	371c      	adds	r7, #28
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr
 800684a:	bf00      	nop
 800684c:	e000ed00 	.word	0xe000ed00
 8006850:	410fc271 	.word	0x410fc271
 8006854:	410fc270 	.word	0x410fc270
 8006858:	e000e400 	.word	0xe000e400
 800685c:	200002a4 	.word	0x200002a4
 8006860:	200002a8 	.word	0x200002a8

08006864 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006864:	b480      	push	{r7}
 8006866:	b083      	sub	sp, #12
 8006868:	af00      	add	r7, sp, #0
        __asm volatile
 800686a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800686e:	f383 8811 	msr	BASEPRI, r3
 8006872:	f3bf 8f6f 	isb	sy
 8006876:	f3bf 8f4f 	dsb	sy
 800687a:	607b      	str	r3, [r7, #4]
    }
 800687c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800687e:	4b0f      	ldr	r3, [pc, #60]	; (80068bc <vPortEnterCritical+0x58>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	3301      	adds	r3, #1
 8006884:	4a0d      	ldr	r2, [pc, #52]	; (80068bc <vPortEnterCritical+0x58>)
 8006886:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8006888:	4b0c      	ldr	r3, [pc, #48]	; (80068bc <vPortEnterCritical+0x58>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	2b01      	cmp	r3, #1
 800688e:	d10f      	bne.n	80068b0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006890:	4b0b      	ldr	r3, [pc, #44]	; (80068c0 <vPortEnterCritical+0x5c>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	b2db      	uxtb	r3, r3
 8006896:	2b00      	cmp	r3, #0
 8006898:	d00a      	beq.n	80068b0 <vPortEnterCritical+0x4c>
        __asm volatile
 800689a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800689e:	f383 8811 	msr	BASEPRI, r3
 80068a2:	f3bf 8f6f 	isb	sy
 80068a6:	f3bf 8f4f 	dsb	sy
 80068aa:	603b      	str	r3, [r7, #0]
    }
 80068ac:	bf00      	nop
 80068ae:	e7fe      	b.n	80068ae <vPortEnterCritical+0x4a>
    }
}
 80068b0:	bf00      	nop
 80068b2:	370c      	adds	r7, #12
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr
 80068bc:	2000001c 	.word	0x2000001c
 80068c0:	e000ed04 	.word	0xe000ed04

080068c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80068c4:	b480      	push	{r7}
 80068c6:	b083      	sub	sp, #12
 80068c8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80068ca:	4b12      	ldr	r3, [pc, #72]	; (8006914 <vPortExitCritical+0x50>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d10a      	bne.n	80068e8 <vPortExitCritical+0x24>
        __asm volatile
 80068d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d6:	f383 8811 	msr	BASEPRI, r3
 80068da:	f3bf 8f6f 	isb	sy
 80068de:	f3bf 8f4f 	dsb	sy
 80068e2:	607b      	str	r3, [r7, #4]
    }
 80068e4:	bf00      	nop
 80068e6:	e7fe      	b.n	80068e6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80068e8:	4b0a      	ldr	r3, [pc, #40]	; (8006914 <vPortExitCritical+0x50>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	3b01      	subs	r3, #1
 80068ee:	4a09      	ldr	r2, [pc, #36]	; (8006914 <vPortExitCritical+0x50>)
 80068f0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80068f2:	4b08      	ldr	r3, [pc, #32]	; (8006914 <vPortExitCritical+0x50>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d105      	bne.n	8006906 <vPortExitCritical+0x42>
 80068fa:	2300      	movs	r3, #0
 80068fc:	603b      	str	r3, [r7, #0]
        __asm volatile
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	f383 8811 	msr	BASEPRI, r3
    }
 8006904:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8006906:	bf00      	nop
 8006908:	370c      	adds	r7, #12
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr
 8006912:	bf00      	nop
 8006914:	2000001c 	.word	0x2000001c
	...

08006920 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8006920:	f3ef 8009 	mrs	r0, PSP
 8006924:	f3bf 8f6f 	isb	sy
 8006928:	4b15      	ldr	r3, [pc, #84]	; (8006980 <pxCurrentTCBConst>)
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	f01e 0f10 	tst.w	lr, #16
 8006930:	bf08      	it	eq
 8006932:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006936:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800693a:	6010      	str	r0, [r2, #0]
 800693c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006940:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006944:	f380 8811 	msr	BASEPRI, r0
 8006948:	f3bf 8f4f 	dsb	sy
 800694c:	f3bf 8f6f 	isb	sy
 8006950:	f7fe fca2 	bl	8005298 <vTaskSwitchContext>
 8006954:	f04f 0000 	mov.w	r0, #0
 8006958:	f380 8811 	msr	BASEPRI, r0
 800695c:	bc09      	pop	{r0, r3}
 800695e:	6819      	ldr	r1, [r3, #0]
 8006960:	6808      	ldr	r0, [r1, #0]
 8006962:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006966:	f01e 0f10 	tst.w	lr, #16
 800696a:	bf08      	it	eq
 800696c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006970:	f380 8809 	msr	PSP, r0
 8006974:	f3bf 8f6f 	isb	sy
 8006978:	4770      	bx	lr
 800697a:	bf00      	nop
 800697c:	f3af 8000 	nop.w

08006980 <pxCurrentTCBConst>:
 8006980:	20000164 	.word	0x20000164
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8006984:	bf00      	nop
 8006986:	bf00      	nop

08006988 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b082      	sub	sp, #8
 800698c:	af00      	add	r7, sp, #0
        __asm volatile
 800698e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006992:	f383 8811 	msr	BASEPRI, r3
 8006996:	f3bf 8f6f 	isb	sy
 800699a:	f3bf 8f4f 	dsb	sy
 800699e:	607b      	str	r3, [r7, #4]
    }
 80069a0:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80069a2:	f7fe fbc1 	bl	8005128 <xTaskIncrementTick>
 80069a6:	4603      	mov	r3, r0
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d003      	beq.n	80069b4 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80069ac:	4b06      	ldr	r3, [pc, #24]	; (80069c8 <SysTick_Handler+0x40>)
 80069ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069b2:	601a      	str	r2, [r3, #0]
 80069b4:	2300      	movs	r3, #0
 80069b6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	f383 8811 	msr	BASEPRI, r3
    }
 80069be:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 80069c0:	bf00      	nop
 80069c2:	3708      	adds	r7, #8
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	e000ed04 	.word	0xe000ed04

080069cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80069cc:	b480      	push	{r7}
 80069ce:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80069d0:	4b0b      	ldr	r3, [pc, #44]	; (8006a00 <vPortSetupTimerInterrupt+0x34>)
 80069d2:	2200      	movs	r2, #0
 80069d4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80069d6:	4b0b      	ldr	r3, [pc, #44]	; (8006a04 <vPortSetupTimerInterrupt+0x38>)
 80069d8:	2200      	movs	r2, #0
 80069da:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80069dc:	4b0a      	ldr	r3, [pc, #40]	; (8006a08 <vPortSetupTimerInterrupt+0x3c>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a0a      	ldr	r2, [pc, #40]	; (8006a0c <vPortSetupTimerInterrupt+0x40>)
 80069e2:	fba2 2303 	umull	r2, r3, r2, r3
 80069e6:	099b      	lsrs	r3, r3, #6
 80069e8:	4a09      	ldr	r2, [pc, #36]	; (8006a10 <vPortSetupTimerInterrupt+0x44>)
 80069ea:	3b01      	subs	r3, #1
 80069ec:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80069ee:	4b04      	ldr	r3, [pc, #16]	; (8006a00 <vPortSetupTimerInterrupt+0x34>)
 80069f0:	2207      	movs	r2, #7
 80069f2:	601a      	str	r2, [r3, #0]
}
 80069f4:	bf00      	nop
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr
 80069fe:	bf00      	nop
 8006a00:	e000e010 	.word	0xe000e010
 8006a04:	e000e018 	.word	0xe000e018
 8006a08:	20000008 	.word	0x20000008
 8006a0c:	10624dd3 	.word	0x10624dd3
 8006a10:	e000e014 	.word	0xe000e014

08006a14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8006a14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006a24 <vPortEnableVFP+0x10>
 8006a18:	6801      	ldr	r1, [r0, #0]
 8006a1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006a1e:	6001      	str	r1, [r0, #0]
 8006a20:	4770      	bx	lr
 8006a22:	0000      	.short	0x0000
 8006a24:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8006a28:	bf00      	nop
 8006a2a:	bf00      	nop

08006a2c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8006a2c:	b480      	push	{r7}
 8006a2e:	b085      	sub	sp, #20
 8006a30:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8006a32:	f3ef 8305 	mrs	r3, IPSR
 8006a36:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2b0f      	cmp	r3, #15
 8006a3c:	d914      	bls.n	8006a68 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006a3e:	4a17      	ldr	r2, [pc, #92]	; (8006a9c <vPortValidateInterruptPriority+0x70>)
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	4413      	add	r3, r2
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006a48:	4b15      	ldr	r3, [pc, #84]	; (8006aa0 <vPortValidateInterruptPriority+0x74>)
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	7afa      	ldrb	r2, [r7, #11]
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	d20a      	bcs.n	8006a68 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8006a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a56:	f383 8811 	msr	BASEPRI, r3
 8006a5a:	f3bf 8f6f 	isb	sy
 8006a5e:	f3bf 8f4f 	dsb	sy
 8006a62:	607b      	str	r3, [r7, #4]
    }
 8006a64:	bf00      	nop
 8006a66:	e7fe      	b.n	8006a66 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006a68:	4b0e      	ldr	r3, [pc, #56]	; (8006aa4 <vPortValidateInterruptPriority+0x78>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006a70:	4b0d      	ldr	r3, [pc, #52]	; (8006aa8 <vPortValidateInterruptPriority+0x7c>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d90a      	bls.n	8006a8e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8006a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a7c:	f383 8811 	msr	BASEPRI, r3
 8006a80:	f3bf 8f6f 	isb	sy
 8006a84:	f3bf 8f4f 	dsb	sy
 8006a88:	603b      	str	r3, [r7, #0]
    }
 8006a8a:	bf00      	nop
 8006a8c:	e7fe      	b.n	8006a8c <vPortValidateInterruptPriority+0x60>
    }
 8006a8e:	bf00      	nop
 8006a90:	3714      	adds	r7, #20
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr
 8006a9a:	bf00      	nop
 8006a9c:	e000e3f0 	.word	0xe000e3f0
 8006aa0:	200002a4 	.word	0x200002a4
 8006aa4:	e000ed0c 	.word	0xe000ed0c
 8006aa8:	200002a8 	.word	0x200002a8

08006aac <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b08a      	sub	sp, #40	; 0x28
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8006ab8:	f7fe fa7c 	bl	8004fb4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8006abc:	4b65      	ldr	r3, [pc, #404]	; (8006c54 <pvPortMalloc+0x1a8>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d101      	bne.n	8006ac8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8006ac4:	f000 f934 	bl	8006d30 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006ac8:	4b63      	ldr	r3, [pc, #396]	; (8006c58 <pvPortMalloc+0x1ac>)
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	4013      	ands	r3, r2
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	f040 80a7 	bne.w	8006c24 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d02d      	beq.n	8006b38 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8006adc:	2208      	movs	r2, #8
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d227      	bcs.n	8006b38 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8006ae8:	2208      	movs	r2, #8
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	4413      	add	r3, r2
 8006aee:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f003 0307 	and.w	r3, r3, #7
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d021      	beq.n	8006b3e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f023 0307 	bic.w	r3, r3, #7
 8006b00:	3308      	adds	r3, #8
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d214      	bcs.n	8006b32 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f023 0307 	bic.w	r3, r3, #7
 8006b0e:	3308      	adds	r3, #8
 8006b10:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f003 0307 	and.w	r3, r3, #7
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d010      	beq.n	8006b3e <pvPortMalloc+0x92>
        __asm volatile
 8006b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b20:	f383 8811 	msr	BASEPRI, r3
 8006b24:	f3bf 8f6f 	isb	sy
 8006b28:	f3bf 8f4f 	dsb	sy
 8006b2c:	617b      	str	r3, [r7, #20]
    }
 8006b2e:	bf00      	nop
 8006b30:	e7fe      	b.n	8006b30 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8006b32:	2300      	movs	r3, #0
 8006b34:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006b36:	e002      	b.n	8006b3e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	607b      	str	r3, [r7, #4]
 8006b3c:	e000      	b.n	8006b40 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006b3e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d06e      	beq.n	8006c24 <pvPortMalloc+0x178>
 8006b46:	4b45      	ldr	r3, [pc, #276]	; (8006c5c <pvPortMalloc+0x1b0>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d869      	bhi.n	8006c24 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8006b50:	4b43      	ldr	r3, [pc, #268]	; (8006c60 <pvPortMalloc+0x1b4>)
 8006b52:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8006b54:	4b42      	ldr	r3, [pc, #264]	; (8006c60 <pvPortMalloc+0x1b4>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b5a:	e004      	b.n	8006b66 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8006b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8006b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d903      	bls.n	8006b78 <pvPortMalloc+0xcc>
 8006b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d1f1      	bne.n	8006b5c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8006b78:	4b36      	ldr	r3, [pc, #216]	; (8006c54 <pvPortMalloc+0x1a8>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d050      	beq.n	8006c24 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006b82:	6a3b      	ldr	r3, [r7, #32]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	2208      	movs	r2, #8
 8006b88:	4413      	add	r3, r2
 8006b8a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	6a3b      	ldr	r3, [r7, #32]
 8006b92:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b96:	685a      	ldr	r2, [r3, #4]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	1ad2      	subs	r2, r2, r3
 8006b9c:	2308      	movs	r3, #8
 8006b9e:	005b      	lsls	r3, r3, #1
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d91f      	bls.n	8006be4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006ba4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4413      	add	r3, r2
 8006baa:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006bac:	69bb      	ldr	r3, [r7, #24]
 8006bae:	f003 0307 	and.w	r3, r3, #7
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d00a      	beq.n	8006bcc <pvPortMalloc+0x120>
        __asm volatile
 8006bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bba:	f383 8811 	msr	BASEPRI, r3
 8006bbe:	f3bf 8f6f 	isb	sy
 8006bc2:	f3bf 8f4f 	dsb	sy
 8006bc6:	613b      	str	r3, [r7, #16]
    }
 8006bc8:	bf00      	nop
 8006bca:	e7fe      	b.n	8006bca <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bce:	685a      	ldr	r2, [r3, #4]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	1ad2      	subs	r2, r2, r3
 8006bd4:	69bb      	ldr	r3, [r7, #24]
 8006bd6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8006bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bda:	687a      	ldr	r2, [r7, #4]
 8006bdc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006bde:	69b8      	ldr	r0, [r7, #24]
 8006be0:	f000 f908 	bl	8006df4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006be4:	4b1d      	ldr	r3, [pc, #116]	; (8006c5c <pvPortMalloc+0x1b0>)
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	1ad3      	subs	r3, r2, r3
 8006bee:	4a1b      	ldr	r2, [pc, #108]	; (8006c5c <pvPortMalloc+0x1b0>)
 8006bf0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006bf2:	4b1a      	ldr	r3, [pc, #104]	; (8006c5c <pvPortMalloc+0x1b0>)
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	4b1b      	ldr	r3, [pc, #108]	; (8006c64 <pvPortMalloc+0x1b8>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d203      	bcs.n	8006c06 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006bfe:	4b17      	ldr	r3, [pc, #92]	; (8006c5c <pvPortMalloc+0x1b0>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a18      	ldr	r2, [pc, #96]	; (8006c64 <pvPortMalloc+0x1b8>)
 8006c04:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c08:	685a      	ldr	r2, [r3, #4]
 8006c0a:	4b13      	ldr	r3, [pc, #76]	; (8006c58 <pvPortMalloc+0x1ac>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	431a      	orrs	r2, r3
 8006c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c12:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8006c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c16:	2200      	movs	r2, #0
 8006c18:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8006c1a:	4b13      	ldr	r3, [pc, #76]	; (8006c68 <pvPortMalloc+0x1bc>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	3301      	adds	r3, #1
 8006c20:	4a11      	ldr	r2, [pc, #68]	; (8006c68 <pvPortMalloc+0x1bc>)
 8006c22:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8006c24:	f7fe f9d4 	bl	8004fd0 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c28:	69fb      	ldr	r3, [r7, #28]
 8006c2a:	f003 0307 	and.w	r3, r3, #7
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d00a      	beq.n	8006c48 <pvPortMalloc+0x19c>
        __asm volatile
 8006c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c36:	f383 8811 	msr	BASEPRI, r3
 8006c3a:	f3bf 8f6f 	isb	sy
 8006c3e:	f3bf 8f4f 	dsb	sy
 8006c42:	60fb      	str	r3, [r7, #12]
    }
 8006c44:	bf00      	nop
 8006c46:	e7fe      	b.n	8006c46 <pvPortMalloc+0x19a>
    return pvReturn;
 8006c48:	69fb      	ldr	r3, [r7, #28]
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3728      	adds	r7, #40	; 0x28
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	bf00      	nop
 8006c54:	20012eb4 	.word	0x20012eb4
 8006c58:	20012ec8 	.word	0x20012ec8
 8006c5c:	20012eb8 	.word	0x20012eb8
 8006c60:	20012eac 	.word	0x20012eac
 8006c64:	20012ebc 	.word	0x20012ebc
 8006c68:	20012ec0 	.word	0x20012ec0

08006c6c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b086      	sub	sp, #24
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d04d      	beq.n	8006d1a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8006c7e:	2308      	movs	r3, #8
 8006c80:	425b      	negs	r3, r3
 8006c82:	697a      	ldr	r2, [r7, #20]
 8006c84:	4413      	add	r3, r2
 8006c86:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	685a      	ldr	r2, [r3, #4]
 8006c90:	4b24      	ldr	r3, [pc, #144]	; (8006d24 <vPortFree+0xb8>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4013      	ands	r3, r2
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d10a      	bne.n	8006cb0 <vPortFree+0x44>
        __asm volatile
 8006c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c9e:	f383 8811 	msr	BASEPRI, r3
 8006ca2:	f3bf 8f6f 	isb	sy
 8006ca6:	f3bf 8f4f 	dsb	sy
 8006caa:	60fb      	str	r3, [r7, #12]
    }
 8006cac:	bf00      	nop
 8006cae:	e7fe      	b.n	8006cae <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d00a      	beq.n	8006cce <vPortFree+0x62>
        __asm volatile
 8006cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cbc:	f383 8811 	msr	BASEPRI, r3
 8006cc0:	f3bf 8f6f 	isb	sy
 8006cc4:	f3bf 8f4f 	dsb	sy
 8006cc8:	60bb      	str	r3, [r7, #8]
    }
 8006cca:	bf00      	nop
 8006ccc:	e7fe      	b.n	8006ccc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	685a      	ldr	r2, [r3, #4]
 8006cd2:	4b14      	ldr	r3, [pc, #80]	; (8006d24 <vPortFree+0xb8>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4013      	ands	r3, r2
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d01e      	beq.n	8006d1a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d11a      	bne.n	8006d1a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	685a      	ldr	r2, [r3, #4]
 8006ce8:	4b0e      	ldr	r3, [pc, #56]	; (8006d24 <vPortFree+0xb8>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	43db      	mvns	r3, r3
 8006cee:	401a      	ands	r2, r3
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8006cf4:	f7fe f95e 	bl	8004fb4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	685a      	ldr	r2, [r3, #4]
 8006cfc:	4b0a      	ldr	r3, [pc, #40]	; (8006d28 <vPortFree+0xbc>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4413      	add	r3, r2
 8006d02:	4a09      	ldr	r2, [pc, #36]	; (8006d28 <vPortFree+0xbc>)
 8006d04:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006d06:	6938      	ldr	r0, [r7, #16]
 8006d08:	f000 f874 	bl	8006df4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8006d0c:	4b07      	ldr	r3, [pc, #28]	; (8006d2c <vPortFree+0xc0>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	3301      	adds	r3, #1
 8006d12:	4a06      	ldr	r2, [pc, #24]	; (8006d2c <vPortFree+0xc0>)
 8006d14:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8006d16:	f7fe f95b 	bl	8004fd0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8006d1a:	bf00      	nop
 8006d1c:	3718      	adds	r7, #24
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
 8006d22:	bf00      	nop
 8006d24:	20012ec8 	.word	0x20012ec8
 8006d28:	20012eb8 	.word	0x20012eb8
 8006d2c:	20012ec4 	.word	0x20012ec4

08006d30 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8006d30:	b480      	push	{r7}
 8006d32:	b085      	sub	sp, #20
 8006d34:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006d36:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8006d3a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8006d3c:	4b27      	ldr	r3, [pc, #156]	; (8006ddc <prvHeapInit+0xac>)
 8006d3e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f003 0307 	and.w	r3, r3, #7
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d00c      	beq.n	8006d64 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	3307      	adds	r3, #7
 8006d4e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f023 0307 	bic.w	r3, r3, #7
 8006d56:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006d58:	68ba      	ldr	r2, [r7, #8]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	1ad3      	subs	r3, r2, r3
 8006d5e:	4a1f      	ldr	r2, [pc, #124]	; (8006ddc <prvHeapInit+0xac>)
 8006d60:	4413      	add	r3, r2
 8006d62:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006d68:	4a1d      	ldr	r2, [pc, #116]	; (8006de0 <prvHeapInit+0xb0>)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8006d6e:	4b1c      	ldr	r3, [pc, #112]	; (8006de0 <prvHeapInit+0xb0>)
 8006d70:	2200      	movs	r2, #0
 8006d72:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	68ba      	ldr	r2, [r7, #8]
 8006d78:	4413      	add	r3, r2
 8006d7a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8006d7c:	2208      	movs	r2, #8
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	1a9b      	subs	r3, r3, r2
 8006d82:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f023 0307 	bic.w	r3, r3, #7
 8006d8a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	4a15      	ldr	r2, [pc, #84]	; (8006de4 <prvHeapInit+0xb4>)
 8006d90:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8006d92:	4b14      	ldr	r3, [pc, #80]	; (8006de4 <prvHeapInit+0xb4>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	2200      	movs	r2, #0
 8006d98:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8006d9a:	4b12      	ldr	r3, [pc, #72]	; (8006de4 <prvHeapInit+0xb4>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	68fa      	ldr	r2, [r7, #12]
 8006daa:	1ad2      	subs	r2, r2, r3
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006db0:	4b0c      	ldr	r3, [pc, #48]	; (8006de4 <prvHeapInit+0xb4>)
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	4a0a      	ldr	r2, [pc, #40]	; (8006de8 <prvHeapInit+0xb8>)
 8006dbe:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	4a09      	ldr	r2, [pc, #36]	; (8006dec <prvHeapInit+0xbc>)
 8006dc6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006dc8:	4b09      	ldr	r3, [pc, #36]	; (8006df0 <prvHeapInit+0xc0>)
 8006dca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006dce:	601a      	str	r2, [r3, #0]
}
 8006dd0:	bf00      	nop
 8006dd2:	3714      	adds	r7, #20
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr
 8006ddc:	200002ac 	.word	0x200002ac
 8006de0:	20012eac 	.word	0x20012eac
 8006de4:	20012eb4 	.word	0x20012eb4
 8006de8:	20012ebc 	.word	0x20012ebc
 8006dec:	20012eb8 	.word	0x20012eb8
 8006df0:	20012ec8 	.word	0x20012ec8

08006df4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8006df4:	b480      	push	{r7}
 8006df6:	b085      	sub	sp, #20
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006dfc:	4b28      	ldr	r3, [pc, #160]	; (8006ea0 <prvInsertBlockIntoFreeList+0xac>)
 8006dfe:	60fb      	str	r3, [r7, #12]
 8006e00:	e002      	b.n	8006e08 <prvInsertBlockIntoFreeList+0x14>
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	60fb      	str	r3, [r7, #12]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d8f7      	bhi.n	8006e02 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	68ba      	ldr	r2, [r7, #8]
 8006e1c:	4413      	add	r3, r2
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d108      	bne.n	8006e36 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	685a      	ldr	r2, [r3, #4]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	441a      	add	r2, r3
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	68ba      	ldr	r2, [r7, #8]
 8006e40:	441a      	add	r2, r3
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d118      	bne.n	8006e7c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	4b15      	ldr	r3, [pc, #84]	; (8006ea4 <prvInsertBlockIntoFreeList+0xb0>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d00d      	beq.n	8006e72 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	685a      	ldr	r2, [r3, #4]
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	441a      	add	r2, r3
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	601a      	str	r2, [r3, #0]
 8006e70:	e008      	b.n	8006e84 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006e72:	4b0c      	ldr	r3, [pc, #48]	; (8006ea4 <prvInsertBlockIntoFreeList+0xb0>)
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	601a      	str	r2, [r3, #0]
 8006e7a:	e003      	b.n	8006e84 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8006e84:	68fa      	ldr	r2, [r7, #12]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d002      	beq.n	8006e92 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006e92:	bf00      	nop
 8006e94:	3714      	adds	r7, #20
 8006e96:	46bd      	mov	sp, r7
 8006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9c:	4770      	bx	lr
 8006e9e:	bf00      	nop
 8006ea0:	20012eac 	.word	0x20012eac
 8006ea4:	20012eb4 	.word	0x20012eb4

08006ea8 <__libc_init_array>:
 8006ea8:	b570      	push	{r4, r5, r6, lr}
 8006eaa:	4d0d      	ldr	r5, [pc, #52]	; (8006ee0 <__libc_init_array+0x38>)
 8006eac:	4c0d      	ldr	r4, [pc, #52]	; (8006ee4 <__libc_init_array+0x3c>)
 8006eae:	1b64      	subs	r4, r4, r5
 8006eb0:	10a4      	asrs	r4, r4, #2
 8006eb2:	2600      	movs	r6, #0
 8006eb4:	42a6      	cmp	r6, r4
 8006eb6:	d109      	bne.n	8006ecc <__libc_init_array+0x24>
 8006eb8:	4d0b      	ldr	r5, [pc, #44]	; (8006ee8 <__libc_init_array+0x40>)
 8006eba:	4c0c      	ldr	r4, [pc, #48]	; (8006eec <__libc_init_array+0x44>)
 8006ebc:	f000 f82e 	bl	8006f1c <_init>
 8006ec0:	1b64      	subs	r4, r4, r5
 8006ec2:	10a4      	asrs	r4, r4, #2
 8006ec4:	2600      	movs	r6, #0
 8006ec6:	42a6      	cmp	r6, r4
 8006ec8:	d105      	bne.n	8006ed6 <__libc_init_array+0x2e>
 8006eca:	bd70      	pop	{r4, r5, r6, pc}
 8006ecc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ed0:	4798      	blx	r3
 8006ed2:	3601      	adds	r6, #1
 8006ed4:	e7ee      	b.n	8006eb4 <__libc_init_array+0xc>
 8006ed6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006eda:	4798      	blx	r3
 8006edc:	3601      	adds	r6, #1
 8006ede:	e7f2      	b.n	8006ec6 <__libc_init_array+0x1e>
 8006ee0:	08007100 	.word	0x08007100
 8006ee4:	08007100 	.word	0x08007100
 8006ee8:	08007100 	.word	0x08007100
 8006eec:	08007104 	.word	0x08007104

08006ef0 <memcpy>:
 8006ef0:	440a      	add	r2, r1
 8006ef2:	4291      	cmp	r1, r2
 8006ef4:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ef8:	d100      	bne.n	8006efc <memcpy+0xc>
 8006efa:	4770      	bx	lr
 8006efc:	b510      	push	{r4, lr}
 8006efe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f06:	4291      	cmp	r1, r2
 8006f08:	d1f9      	bne.n	8006efe <memcpy+0xe>
 8006f0a:	bd10      	pop	{r4, pc}

08006f0c <memset>:
 8006f0c:	4402      	add	r2, r0
 8006f0e:	4603      	mov	r3, r0
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d100      	bne.n	8006f16 <memset+0xa>
 8006f14:	4770      	bx	lr
 8006f16:	f803 1b01 	strb.w	r1, [r3], #1
 8006f1a:	e7f9      	b.n	8006f10 <memset+0x4>

08006f1c <_init>:
 8006f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f1e:	bf00      	nop
 8006f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f22:	bc08      	pop	{r3}
 8006f24:	469e      	mov	lr, r3
 8006f26:	4770      	bx	lr

08006f28 <_fini>:
 8006f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f2a:	bf00      	nop
 8006f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f2e:	bc08      	pop	{r3}
 8006f30:	469e      	mov	lr, r3
 8006f32:	4770      	bx	lr
