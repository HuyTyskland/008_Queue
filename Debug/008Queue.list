
008Queue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006554  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080066e4  080066e4  000166e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006734  08006734  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08006734  08006734  00016734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800673c  0800673c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800673c  0800673c  0001673c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006740  08006740  00016740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08006744  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00012e94  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20012ea8  20012ea8  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001583e  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003166  00000000  00000000  00035882  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012e0  00000000  00000000  000389e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011a8  00000000  00000000  00039cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003979  00000000  00000000  0003ae70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001656a  00000000  00000000  0003e7e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da32a  00000000  00000000  00054d53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012f07d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004eb0  00000000  00000000  0012f0d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080066cc 	.word	0x080066cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	080066cc 	.word	0x080066cc

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b08a      	sub	sp, #40	; 0x28
 80004d8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004da:	f000 fd8b 	bl	8000ff4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004de:	f000 f8e7 	bl	80006b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e2:	f000 f9a1 	bl	8000828 <MX_GPIO_Init>
  MX_RTC_Init();
 80004e6:	f000 f94f 	bl	8000788 <MX_RTC_Init>
  MX_USART2_UART_Init();
 80004ea:	f000 f973 	bl	80007d4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  DWT_CTRL |= (1 << 0);
 80004ee:	4b5c      	ldr	r3, [pc, #368]	; (8000660 <main+0x18c>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4a5b      	ldr	r2, [pc, #364]	; (8000660 <main+0x18c>)
 80004f4:	f043 0301 	orr.w	r3, r3, #1
 80004f8:	6013      	str	r3, [r2, #0]

  status = xTaskCreate(menu_task, "MENU", 250, NULL, 2, &menu_task_handle);
 80004fa:	4b5a      	ldr	r3, [pc, #360]	; (8000664 <main+0x190>)
 80004fc:	9301      	str	r3, [sp, #4]
 80004fe:	2302      	movs	r3, #2
 8000500:	9300      	str	r3, [sp, #0]
 8000502:	2300      	movs	r3, #0
 8000504:	22fa      	movs	r2, #250	; 0xfa
 8000506:	4958      	ldr	r1, [pc, #352]	; (8000668 <main+0x194>)
 8000508:	4858      	ldr	r0, [pc, #352]	; (800066c <main+0x198>)
 800050a:	f004 f813 	bl	8004534 <xTaskCreate>
 800050e:	61f8      	str	r0, [r7, #28]
	configASSERT(status == pdPASS);
 8000510:	69fb      	ldr	r3, [r7, #28]
 8000512:	2b01      	cmp	r3, #1
 8000514:	d00a      	beq.n	800052c <main+0x58>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800051a:	f383 8811 	msr	BASEPRI, r3
 800051e:	f3bf 8f6f 	isb	sy
 8000522:	f3bf 8f4f 	dsb	sy
 8000526:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000528:	bf00      	nop
 800052a:	e7fe      	b.n	800052a <main+0x56>

	status = xTaskCreate(led_task, "LED", 250, NULL, 2, &led_task_handle);
 800052c:	4b50      	ldr	r3, [pc, #320]	; (8000670 <main+0x19c>)
 800052e:	9301      	str	r3, [sp, #4]
 8000530:	2302      	movs	r3, #2
 8000532:	9300      	str	r3, [sp, #0]
 8000534:	2300      	movs	r3, #0
 8000536:	22fa      	movs	r2, #250	; 0xfa
 8000538:	494e      	ldr	r1, [pc, #312]	; (8000674 <main+0x1a0>)
 800053a:	484f      	ldr	r0, [pc, #316]	; (8000678 <main+0x1a4>)
 800053c:	f003 fffa 	bl	8004534 <xTaskCreate>
 8000540:	61f8      	str	r0, [r7, #28]
	configASSERT(status == pdPASS);
 8000542:	69fb      	ldr	r3, [r7, #28]
 8000544:	2b01      	cmp	r3, #1
 8000546:	d00a      	beq.n	800055e <main+0x8a>
        __asm volatile
 8000548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800054c:	f383 8811 	msr	BASEPRI, r3
 8000550:	f3bf 8f6f 	isb	sy
 8000554:	f3bf 8f4f 	dsb	sy
 8000558:	617b      	str	r3, [r7, #20]
    }
 800055a:	bf00      	nop
 800055c:	e7fe      	b.n	800055c <main+0x88>

	status = xTaskCreate(rtc_task, "RTC", 250, NULL, 2, &rtc_task_handle);
 800055e:	4b47      	ldr	r3, [pc, #284]	; (800067c <main+0x1a8>)
 8000560:	9301      	str	r3, [sp, #4]
 8000562:	2302      	movs	r3, #2
 8000564:	9300      	str	r3, [sp, #0]
 8000566:	2300      	movs	r3, #0
 8000568:	22fa      	movs	r2, #250	; 0xfa
 800056a:	4945      	ldr	r1, [pc, #276]	; (8000680 <main+0x1ac>)
 800056c:	4845      	ldr	r0, [pc, #276]	; (8000684 <main+0x1b0>)
 800056e:	f003 ffe1 	bl	8004534 <xTaskCreate>
 8000572:	61f8      	str	r0, [r7, #28]
	configASSERT(status == pdPASS);
 8000574:	69fb      	ldr	r3, [r7, #28]
 8000576:	2b01      	cmp	r3, #1
 8000578:	d00a      	beq.n	8000590 <main+0xbc>
        __asm volatile
 800057a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800057e:	f383 8811 	msr	BASEPRI, r3
 8000582:	f3bf 8f6f 	isb	sy
 8000586:	f3bf 8f4f 	dsb	sy
 800058a:	613b      	str	r3, [r7, #16]
    }
 800058c:	bf00      	nop
 800058e:	e7fe      	b.n	800058e <main+0xba>

	status = xTaskCreate(print_task, "PRINT", 250, NULL, 2, &print_task_handle);
 8000590:	4b3d      	ldr	r3, [pc, #244]	; (8000688 <main+0x1b4>)
 8000592:	9301      	str	r3, [sp, #4]
 8000594:	2302      	movs	r3, #2
 8000596:	9300      	str	r3, [sp, #0]
 8000598:	2300      	movs	r3, #0
 800059a:	22fa      	movs	r2, #250	; 0xfa
 800059c:	493b      	ldr	r1, [pc, #236]	; (800068c <main+0x1b8>)
 800059e:	483c      	ldr	r0, [pc, #240]	; (8000690 <main+0x1bc>)
 80005a0:	f003 ffc8 	bl	8004534 <xTaskCreate>
 80005a4:	61f8      	str	r0, [r7, #28]
	configASSERT(status == pdPASS);
 80005a6:	69fb      	ldr	r3, [r7, #28]
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d00a      	beq.n	80005c2 <main+0xee>
        __asm volatile
 80005ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005b0:	f383 8811 	msr	BASEPRI, r3
 80005b4:	f3bf 8f6f 	isb	sy
 80005b8:	f3bf 8f4f 	dsb	sy
 80005bc:	60fb      	str	r3, [r7, #12]
    }
 80005be:	bf00      	nop
 80005c0:	e7fe      	b.n	80005c0 <main+0xec>

	status = xTaskCreate(command_handling_task, "COMMAND", 250, NULL, 2, &command_handling_task_handle);
 80005c2:	4b34      	ldr	r3, [pc, #208]	; (8000694 <main+0x1c0>)
 80005c4:	9301      	str	r3, [sp, #4]
 80005c6:	2302      	movs	r3, #2
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	2300      	movs	r3, #0
 80005cc:	22fa      	movs	r2, #250	; 0xfa
 80005ce:	4932      	ldr	r1, [pc, #200]	; (8000698 <main+0x1c4>)
 80005d0:	4832      	ldr	r0, [pc, #200]	; (800069c <main+0x1c8>)
 80005d2:	f003 ffaf 	bl	8004534 <xTaskCreate>
 80005d6:	61f8      	str	r0, [r7, #28]
	configASSERT(status == pdPASS);
 80005d8:	69fb      	ldr	r3, [r7, #28]
 80005da:	2b01      	cmp	r3, #1
 80005dc:	d00a      	beq.n	80005f4 <main+0x120>
        __asm volatile
 80005de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005e2:	f383 8811 	msr	BASEPRI, r3
 80005e6:	f3bf 8f6f 	isb	sy
 80005ea:	f3bf 8f4f 	dsb	sy
 80005ee:	60bb      	str	r3, [r7, #8]
    }
 80005f0:	bf00      	nop
 80005f2:	e7fe      	b.n	80005f2 <main+0x11e>

	input_data_queue_handle = xQueueCreate(10, sizeof(char));
 80005f4:	2200      	movs	r2, #0
 80005f6:	2101      	movs	r1, #1
 80005f8:	200a      	movs	r0, #10
 80005fa:	f003 fa4f 	bl	8003a9c <xQueueGenericCreate>
 80005fe:	4603      	mov	r3, r0
 8000600:	4a27      	ldr	r2, [pc, #156]	; (80006a0 <main+0x1cc>)
 8000602:	6013      	str	r3, [r2, #0]
	configASSERT(input_data_queue_handle != NULL);
 8000604:	4b26      	ldr	r3, [pc, #152]	; (80006a0 <main+0x1cc>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d10a      	bne.n	8000622 <main+0x14e>
        __asm volatile
 800060c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000610:	f383 8811 	msr	BASEPRI, r3
 8000614:	f3bf 8f6f 	isb	sy
 8000618:	f3bf 8f4f 	dsb	sy
 800061c:	607b      	str	r3, [r7, #4]
    }
 800061e:	bf00      	nop
 8000620:	e7fe      	b.n	8000620 <main+0x14c>
	print_queue_handle = xQueueCreate(10, sizeof(size_t));
 8000622:	2200      	movs	r2, #0
 8000624:	2104      	movs	r1, #4
 8000626:	200a      	movs	r0, #10
 8000628:	f003 fa38 	bl	8003a9c <xQueueGenericCreate>
 800062c:	4603      	mov	r3, r0
 800062e:	4a1d      	ldr	r2, [pc, #116]	; (80006a4 <main+0x1d0>)
 8000630:	6013      	str	r3, [r2, #0]
	configASSERT(print_queue_handle != NULL);
 8000632:	4b1c      	ldr	r3, [pc, #112]	; (80006a4 <main+0x1d0>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d10a      	bne.n	8000650 <main+0x17c>
        __asm volatile
 800063a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800063e:	f383 8811 	msr	BASEPRI, r3
 8000642:	f3bf 8f6f 	isb	sy
 8000646:	f3bf 8f4f 	dsb	sy
 800064a:	603b      	str	r3, [r7, #0]
    }
 800064c:	bf00      	nop
 800064e:	e7fe      	b.n	800064e <main+0x17a>

	// UART Handle
	HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 8000650:	2201      	movs	r2, #1
 8000652:	4915      	ldr	r1, [pc, #84]	; (80006a8 <main+0x1d4>)
 8000654:	4815      	ldr	r0, [pc, #84]	; (80006ac <main+0x1d8>)
 8000656:	f002 f9da 	bl	8002a0e <HAL_UART_Receive_IT>

  vTaskStartScheduler();
 800065a:	f004 f8b1 	bl	80047c0 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800065e:	e7fe      	b.n	800065e <main+0x18a>
 8000660:	e0001000 	.word	0xe0001000
 8000664:	20000094 	.word	0x20000094
 8000668:	080066e4 	.word	0x080066e4
 800066c:	08000e5d 	.word	0x08000e5d
 8000670:	20000098 	.word	0x20000098
 8000674:	080066ec 	.word	0x080066ec
 8000678:	08000e67 	.word	0x08000e67
 800067c:	2000009c 	.word	0x2000009c
 8000680:	080066f0 	.word	0x080066f0
 8000684:	08000e71 	.word	0x08000e71
 8000688:	200000a0 	.word	0x200000a0
 800068c:	080066f4 	.word	0x080066f4
 8000690:	08000e7b 	.word	0x08000e7b
 8000694:	200000a4 	.word	0x200000a4
 8000698:	080066fc 	.word	0x080066fc
 800069c:	08000e85 	.word	0x08000e85
 80006a0:	200000a8 	.word	0x200000a8
 80006a4:	200000ac 	.word	0x200000ac
 80006a8:	200000b0 	.word	0x200000b0
 80006ac:	20000050 	.word	0x20000050

080006b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b094      	sub	sp, #80	; 0x50
 80006b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b6:	f107 0320 	add.w	r3, r7, #32
 80006ba:	2230      	movs	r2, #48	; 0x30
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f005 fffc 	bl	80066bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c4:	f107 030c 	add.w	r3, r7, #12
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
 80006d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d4:	2300      	movs	r3, #0
 80006d6:	60bb      	str	r3, [r7, #8]
 80006d8:	4b29      	ldr	r3, [pc, #164]	; (8000780 <SystemClock_Config+0xd0>)
 80006da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006dc:	4a28      	ldr	r2, [pc, #160]	; (8000780 <SystemClock_Config+0xd0>)
 80006de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e2:	6413      	str	r3, [r2, #64]	; 0x40
 80006e4:	4b26      	ldr	r3, [pc, #152]	; (8000780 <SystemClock_Config+0xd0>)
 80006e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ec:	60bb      	str	r3, [r7, #8]
 80006ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f0:	2300      	movs	r3, #0
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	4b23      	ldr	r3, [pc, #140]	; (8000784 <SystemClock_Config+0xd4>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a22      	ldr	r2, [pc, #136]	; (8000784 <SystemClock_Config+0xd4>)
 80006fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006fe:	6013      	str	r3, [r2, #0]
 8000700:	4b20      	ldr	r3, [pc, #128]	; (8000784 <SystemClock_Config+0xd4>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800070c:	230a      	movs	r3, #10
 800070e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000710:	2301      	movs	r3, #1
 8000712:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000714:	2310      	movs	r3, #16
 8000716:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000718:	2301      	movs	r3, #1
 800071a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071c:	2302      	movs	r3, #2
 800071e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000720:	2300      	movs	r3, #0
 8000722:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000724:	2308      	movs	r3, #8
 8000726:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000728:	23a8      	movs	r3, #168	; 0xa8
 800072a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800072c:	2302      	movs	r3, #2
 800072e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000730:	2307      	movs	r3, #7
 8000732:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000734:	f107 0320 	add.w	r3, r7, #32
 8000738:	4618      	mov	r0, r3
 800073a:	f000 ffc7 	bl	80016cc <HAL_RCC_OscConfig>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000744:	f000 fa2a 	bl	8000b9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000748:	230f      	movs	r3, #15
 800074a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074c:	2302      	movs	r3, #2
 800074e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000754:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000758:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800075a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800075e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000760:	f107 030c 	add.w	r3, r7, #12
 8000764:	2105      	movs	r1, #5
 8000766:	4618      	mov	r0, r3
 8000768:	f001 fa28 	bl	8001bbc <HAL_RCC_ClockConfig>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000772:	f000 fa13 	bl	8000b9c <Error_Handler>
  }
}
 8000776:	bf00      	nop
 8000778:	3750      	adds	r7, #80	; 0x50
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40023800 	.word	0x40023800
 8000784:	40007000 	.word	0x40007000

08000788 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800078c:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <MX_RTC_Init+0x44>)
 800078e:	4a10      	ldr	r2, [pc, #64]	; (80007d0 <MX_RTC_Init+0x48>)
 8000790:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <MX_RTC_Init+0x44>)
 8000794:	2240      	movs	r2, #64	; 0x40
 8000796:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000798:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <MX_RTC_Init+0x44>)
 800079a:	227f      	movs	r2, #127	; 0x7f
 800079c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800079e:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <MX_RTC_Init+0x44>)
 80007a0:	22ff      	movs	r2, #255	; 0xff
 80007a2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80007a4:	4b09      	ldr	r3, [pc, #36]	; (80007cc <MX_RTC_Init+0x44>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80007aa:	4b08      	ldr	r3, [pc, #32]	; (80007cc <MX_RTC_Init+0x44>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <MX_RTC_Init+0x44>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80007b6:	4805      	ldr	r0, [pc, #20]	; (80007cc <MX_RTC_Init+0x44>)
 80007b8:	f001 fd34 	bl	8002224 <HAL_RTC_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80007c2:	f000 f9eb 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	20000030 	.word	0x20000030
 80007d0:	40002800 	.word	0x40002800

080007d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007d8:	4b11      	ldr	r3, [pc, #68]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 80007da:	4a12      	ldr	r2, [pc, #72]	; (8000824 <MX_USART2_UART_Init+0x50>)
 80007dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007de:	4b10      	ldr	r3, [pc, #64]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 80007e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007e6:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007ec:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007f2:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007f8:	4b09      	ldr	r3, [pc, #36]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 80007fa:	220c      	movs	r2, #12
 80007fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fe:	4b08      	ldr	r3, [pc, #32]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 8000800:	2200      	movs	r2, #0
 8000802:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000804:	4b06      	ldr	r3, [pc, #24]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 8000806:	2200      	movs	r2, #0
 8000808:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800080a:	4805      	ldr	r0, [pc, #20]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 800080c:	f002 f8b2 	bl	8002974 <HAL_UART_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000816:	f000 f9c1 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000050 	.word	0x20000050
 8000824:	40004400 	.word	0x40004400

08000828 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b08c      	sub	sp, #48	; 0x30
 800082c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082e:	f107 031c 	add.w	r3, r7, #28
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]
 8000838:	609a      	str	r2, [r3, #8]
 800083a:	60da      	str	r2, [r3, #12]
 800083c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	61bb      	str	r3, [r7, #24]
 8000842:	4ba2      	ldr	r3, [pc, #648]	; (8000acc <MX_GPIO_Init+0x2a4>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4aa1      	ldr	r2, [pc, #644]	; (8000acc <MX_GPIO_Init+0x2a4>)
 8000848:	f043 0310 	orr.w	r3, r3, #16
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b9f      	ldr	r3, [pc, #636]	; (8000acc <MX_GPIO_Init+0x2a4>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0310 	and.w	r3, r3, #16
 8000856:	61bb      	str	r3, [r7, #24]
 8000858:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	617b      	str	r3, [r7, #20]
 800085e:	4b9b      	ldr	r3, [pc, #620]	; (8000acc <MX_GPIO_Init+0x2a4>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a9a      	ldr	r2, [pc, #616]	; (8000acc <MX_GPIO_Init+0x2a4>)
 8000864:	f043 0304 	orr.w	r3, r3, #4
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b98      	ldr	r3, [pc, #608]	; (8000acc <MX_GPIO_Init+0x2a4>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0304 	and.w	r3, r3, #4
 8000872:	617b      	str	r3, [r7, #20]
 8000874:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	613b      	str	r3, [r7, #16]
 800087a:	4b94      	ldr	r3, [pc, #592]	; (8000acc <MX_GPIO_Init+0x2a4>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a93      	ldr	r2, [pc, #588]	; (8000acc <MX_GPIO_Init+0x2a4>)
 8000880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b91      	ldr	r3, [pc, #580]	; (8000acc <MX_GPIO_Init+0x2a4>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800088e:	613b      	str	r3, [r7, #16]
 8000890:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	60fb      	str	r3, [r7, #12]
 8000896:	4b8d      	ldr	r3, [pc, #564]	; (8000acc <MX_GPIO_Init+0x2a4>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a8c      	ldr	r2, [pc, #560]	; (8000acc <MX_GPIO_Init+0x2a4>)
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b8a      	ldr	r3, [pc, #552]	; (8000acc <MX_GPIO_Init+0x2a4>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	60bb      	str	r3, [r7, #8]
 80008b2:	4b86      	ldr	r3, [pc, #536]	; (8000acc <MX_GPIO_Init+0x2a4>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a85      	ldr	r2, [pc, #532]	; (8000acc <MX_GPIO_Init+0x2a4>)
 80008b8:	f043 0302 	orr.w	r3, r3, #2
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b83      	ldr	r3, [pc, #524]	; (8000acc <MX_GPIO_Init+0x2a4>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0302 	and.w	r3, r3, #2
 80008c6:	60bb      	str	r3, [r7, #8]
 80008c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	607b      	str	r3, [r7, #4]
 80008ce:	4b7f      	ldr	r3, [pc, #508]	; (8000acc <MX_GPIO_Init+0x2a4>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a7e      	ldr	r2, [pc, #504]	; (8000acc <MX_GPIO_Init+0x2a4>)
 80008d4:	f043 0308 	orr.w	r3, r3, #8
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b7c      	ldr	r3, [pc, #496]	; (8000acc <MX_GPIO_Init+0x2a4>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0308 	and.w	r3, r3, #8
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008e6:	2200      	movs	r2, #0
 80008e8:	2108      	movs	r1, #8
 80008ea:	4879      	ldr	r0, [pc, #484]	; (8000ad0 <MX_GPIO_Init+0x2a8>)
 80008ec:	f000 fed4 	bl	8001698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008f0:	2201      	movs	r2, #1
 80008f2:	2101      	movs	r1, #1
 80008f4:	4877      	ldr	r0, [pc, #476]	; (8000ad4 <MX_GPIO_Init+0x2ac>)
 80008f6:	f000 fecf 	bl	8001698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008fa:	2200      	movs	r2, #0
 80008fc:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000900:	4875      	ldr	r0, [pc, #468]	; (8000ad8 <MX_GPIO_Init+0x2b0>)
 8000902:	f000 fec9 	bl	8001698 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000906:	2308      	movs	r3, #8
 8000908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090a:	2301      	movs	r3, #1
 800090c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000912:	2300      	movs	r3, #0
 8000914:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	486c      	ldr	r0, [pc, #432]	; (8000ad0 <MX_GPIO_Init+0x2a8>)
 800091e:	f000 fd1f 	bl	8001360 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000922:	2301      	movs	r3, #1
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000926:	2301      	movs	r3, #1
 8000928:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	2300      	movs	r3, #0
 8000930:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000932:	f107 031c 	add.w	r3, r7, #28
 8000936:	4619      	mov	r1, r3
 8000938:	4866      	ldr	r0, [pc, #408]	; (8000ad4 <MX_GPIO_Init+0x2ac>)
 800093a:	f000 fd11 	bl	8001360 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800093e:	2308      	movs	r3, #8
 8000940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000942:	2302      	movs	r3, #2
 8000944:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	2300      	movs	r3, #0
 800094c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800094e:	2305      	movs	r3, #5
 8000950:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4619      	mov	r1, r3
 8000958:	485e      	ldr	r0, [pc, #376]	; (8000ad4 <MX_GPIO_Init+0x2ac>)
 800095a:	f000 fd01 	bl	8001360 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800095e:	2301      	movs	r3, #1
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000962:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000966:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800096c:	f107 031c 	add.w	r3, r7, #28
 8000970:	4619      	mov	r1, r3
 8000972:	485a      	ldr	r0, [pc, #360]	; (8000adc <MX_GPIO_Init+0x2b4>)
 8000974:	f000 fcf4 	bl	8001360 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000978:	2310      	movs	r3, #16
 800097a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097c:	2302      	movs	r3, #2
 800097e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000984:	2300      	movs	r3, #0
 8000986:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000988:	2306      	movs	r3, #6
 800098a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800098c:	f107 031c 	add.w	r3, r7, #28
 8000990:	4619      	mov	r1, r3
 8000992:	4852      	ldr	r0, [pc, #328]	; (8000adc <MX_GPIO_Init+0x2b4>)
 8000994:	f000 fce4 	bl	8001360 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000998:	23e0      	movs	r3, #224	; 0xe0
 800099a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099c:	2302      	movs	r3, #2
 800099e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a4:	2300      	movs	r3, #0
 80009a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009a8:	2305      	movs	r3, #5
 80009aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ac:	f107 031c 	add.w	r3, r7, #28
 80009b0:	4619      	mov	r1, r3
 80009b2:	484a      	ldr	r0, [pc, #296]	; (8000adc <MX_GPIO_Init+0x2b4>)
 80009b4:	f000 fcd4 	bl	8001360 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80009b8:	2304      	movs	r3, #4
 80009ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009bc:	2300      	movs	r3, #0
 80009be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80009c4:	f107 031c 	add.w	r3, r7, #28
 80009c8:	4619      	mov	r1, r3
 80009ca:	4845      	ldr	r0, [pc, #276]	; (8000ae0 <MX_GPIO_Init+0x2b8>)
 80009cc:	f000 fcc8 	bl	8001360 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80009d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d6:	2302      	movs	r3, #2
 80009d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009de:	2300      	movs	r3, #0
 80009e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009e2:	2305      	movs	r3, #5
 80009e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009e6:	f107 031c 	add.w	r3, r7, #28
 80009ea:	4619      	mov	r1, r3
 80009ec:	483c      	ldr	r0, [pc, #240]	; (8000ae0 <MX_GPIO_Init+0x2b8>)
 80009ee:	f000 fcb7 	bl	8001360 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009f2:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009f6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f8:	2301      	movs	r3, #1
 80009fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a00:	2300      	movs	r3, #0
 8000a02:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a04:	f107 031c 	add.w	r3, r7, #28
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4833      	ldr	r0, [pc, #204]	; (8000ad8 <MX_GPIO_Init+0x2b0>)
 8000a0c:	f000 fca8 	bl	8001360 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000a10:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000a14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a16:	2302      	movs	r3, #2
 8000a18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a22:	2306      	movs	r3, #6
 8000a24:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a26:	f107 031c 	add.w	r3, r7, #28
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4829      	ldr	r0, [pc, #164]	; (8000ad4 <MX_GPIO_Init+0x2ac>)
 8000a2e:	f000 fc97 	bl	8001360 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000a32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000a40:	f107 031c 	add.w	r3, r7, #28
 8000a44:	4619      	mov	r1, r3
 8000a46:	4825      	ldr	r0, [pc, #148]	; (8000adc <MX_GPIO_Init+0x2b4>)
 8000a48:	f000 fc8a 	bl	8001360 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000a4c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000a50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a52:	2302      	movs	r3, #2
 8000a54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a5e:	230a      	movs	r3, #10
 8000a60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a62:	f107 031c 	add.w	r3, r7, #28
 8000a66:	4619      	mov	r1, r3
 8000a68:	481c      	ldr	r0, [pc, #112]	; (8000adc <MX_GPIO_Init+0x2b4>)
 8000a6a:	f000 fc79 	bl	8001360 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a6e:	2320      	movs	r3, #32
 8000a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a72:	2300      	movs	r3, #0
 8000a74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a7a:	f107 031c 	add.w	r3, r7, #28
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4815      	ldr	r0, [pc, #84]	; (8000ad8 <MX_GPIO_Init+0x2b0>)
 8000a82:	f000 fc6d 	bl	8001360 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a86:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a8c:	2312      	movs	r3, #18
 8000a8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a94:	2300      	movs	r3, #0
 8000a96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a98:	2304      	movs	r3, #4
 8000a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9c:	f107 031c 	add.w	r3, r7, #28
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	480f      	ldr	r0, [pc, #60]	; (8000ae0 <MX_GPIO_Init+0x2b8>)
 8000aa4:	f000 fc5c 	bl	8001360 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000aac:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000ab0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000ab6:	f107 031c 	add.w	r3, r7, #28
 8000aba:	4619      	mov	r1, r3
 8000abc:	4804      	ldr	r0, [pc, #16]	; (8000ad0 <MX_GPIO_Init+0x2a8>)
 8000abe:	f000 fc4f 	bl	8001360 <HAL_GPIO_Init>

}
 8000ac2:	bf00      	nop
 8000ac4:	3730      	adds	r7, #48	; 0x30
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	40021000 	.word	0x40021000
 8000ad4:	40020800 	.word	0x40020800
 8000ad8:	40020c00 	.word	0x40020c00
 8000adc:	40020000 	.word	0x40020000
 8000ae0:	40020400 	.word	0x40020400

08000ae4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b086      	sub	sp, #24
 8000ae8:	af02      	add	r7, sp, #8
 8000aea:	6078      	str	r0, [r7, #4]
	if(xQueueIsQueueFullFromISR(input_data_queue_handle) == pdFALSE) // check if the queue is full
 8000aec:	4b1e      	ldr	r3, [pc, #120]	; (8000b68 <HAL_UART_RxCpltCallback+0x84>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4618      	mov	r0, r3
 8000af2:	f003 fc9a 	bl	800442a <xQueueIsQueueFullFromISR>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d107      	bne.n	8000b0c <HAL_UART_RxCpltCallback+0x28>
	{
		// if Queue is not full -> enqueue the data
		xQueueSendFromISR(input_data_queue_handle, (void*)&user_data, NULL);
 8000afc:	4b1a      	ldr	r3, [pc, #104]	; (8000b68 <HAL_UART_RxCpltCallback+0x84>)
 8000afe:	6818      	ldr	r0, [r3, #0]
 8000b00:	2300      	movs	r3, #0
 8000b02:	2200      	movs	r2, #0
 8000b04:	4919      	ldr	r1, [pc, #100]	; (8000b6c <HAL_UART_RxCpltCallback+0x88>)
 8000b06:	f003 f949 	bl	8003d9c <xQueueGenericSendFromISR>
 8000b0a:	e013      	b.n	8000b34 <HAL_UART_RxCpltCallback+0x50>
	}
	else
	{
		// Queue is full
		if(user_data == '\n') // Check if the inserted data is ENTER (\n)
 8000b0c:	4b17      	ldr	r3, [pc, #92]	; (8000b6c <HAL_UART_RxCpltCallback+0x88>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	2b0a      	cmp	r3, #10
 8000b14:	d10e      	bne.n	8000b34 <HAL_UART_RxCpltCallback+0x50>
		{
			uint8_t dummy;
			// if the data is \n -> make sure the last byte of the queue is '\n'
			xQueueReceiveFromISR(input_data_queue_handle, (void*)&dummy, NULL);
 8000b16:	4b14      	ldr	r3, [pc, #80]	; (8000b68 <HAL_UART_RxCpltCallback+0x84>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f107 010f 	add.w	r1, r7, #15
 8000b1e:	2200      	movs	r2, #0
 8000b20:	4618      	mov	r0, r3
 8000b22:	f003 fac5 	bl	80040b0 <xQueueReceiveFromISR>
			xQueueSendFromISR(input_data_queue_handle, (void*)&user_data, NULL);
 8000b26:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <HAL_UART_RxCpltCallback+0x84>)
 8000b28:	6818      	ldr	r0, [r3, #0]
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	490f      	ldr	r1, [pc, #60]	; (8000b6c <HAL_UART_RxCpltCallback+0x88>)
 8000b30:	f003 f934 	bl	8003d9c <xQueueGenericSendFromISR>
		}
	}
	// Send notification to command handling task if user data is \n
	if(user_data == '\n')
 8000b34:	4b0d      	ldr	r3, [pc, #52]	; (8000b6c <HAL_UART_RxCpltCallback+0x88>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	2b0a      	cmp	r3, #10
 8000b3c:	d10a      	bne.n	8000b54 <HAL_UART_RxCpltCallback+0x70>
	{
		xTaskNotifyFromISR(command_handling_task_handle, 0, eNoAction, NULL);
 8000b3e:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <HAL_UART_RxCpltCallback+0x8c>)
 8000b40:	6818      	ldr	r0, [r3, #0]
 8000b42:	2300      	movs	r3, #0
 8000b44:	9301      	str	r3, [sp, #4]
 8000b46:	2300      	movs	r3, #0
 8000b48:	9300      	str	r3, [sp, #0]
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2100      	movs	r1, #0
 8000b50:	f004 fc3a 	bl	80053c8 <xTaskGenericNotifyFromISR>
	}

	// Enable UART data byte reception again in IT mode
	HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 8000b54:	2201      	movs	r2, #1
 8000b56:	4905      	ldr	r1, [pc, #20]	; (8000b6c <HAL_UART_RxCpltCallback+0x88>)
 8000b58:	4806      	ldr	r0, [pc, #24]	; (8000b74 <HAL_UART_RxCpltCallback+0x90>)
 8000b5a:	f001 ff58 	bl	8002a0e <HAL_UART_Receive_IT>
}
 8000b5e:	bf00      	nop
 8000b60:	3710      	adds	r7, #16
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	200000a8 	.word	0x200000a8
 8000b6c:	200000b0 	.word	0x200000b0
 8000b70:	200000a4 	.word	0x200000a4
 8000b74:	20000050 	.word	0x20000050

08000b78 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a04      	ldr	r2, [pc, #16]	; (8000b98 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d101      	bne.n	8000b8e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b8a:	f000 fa55 	bl	8001038 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40001000 	.word	0x40001000

08000b9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba0:	b672      	cpsid	i
}
 8000ba2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <Error_Handler+0x8>
	...

08000ba8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	607b      	str	r3, [r7, #4]
 8000bb2:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb6:	4a0f      	ldr	r2, [pc, #60]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000bbe:	4b0d      	ldr	r3, [pc, #52]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bc6:	607b      	str	r3, [r7, #4]
 8000bc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	603b      	str	r3, [r7, #0]
 8000bce:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd2:	4a08      	ldr	r2, [pc, #32]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bda:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be2:	603b      	str	r3, [r7, #0]
 8000be4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000be6:	f005 f997 	bl	8005f18 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40023800 	.word	0x40023800

08000bf8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c00:	f107 0308 	add.w	r3, r7, #8
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a0c      	ldr	r2, [pc, #48]	; (8000c44 <HAL_RTC_MspInit+0x4c>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d111      	bne.n	8000c3c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000c1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c20:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c22:	f107 0308 	add.w	r3, r7, #8
 8000c26:	4618      	mov	r0, r3
 8000c28:	f001 fa1a 	bl	8002060 <HAL_RCCEx_PeriphCLKConfig>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000c32:	f7ff ffb3 	bl	8000b9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c36:	4b04      	ldr	r3, [pc, #16]	; (8000c48 <HAL_RTC_MspInit+0x50>)
 8000c38:	2201      	movs	r2, #1
 8000c3a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000c3c:	bf00      	nop
 8000c3e:	3718      	adds	r7, #24
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40002800 	.word	0x40002800
 8000c48:	42470e3c 	.word	0x42470e3c

08000c4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08a      	sub	sp, #40	; 0x28
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a1d      	ldr	r2, [pc, #116]	; (8000ce0 <HAL_UART_MspInit+0x94>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d133      	bne.n	8000cd6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	613b      	str	r3, [r7, #16]
 8000c72:	4b1c      	ldr	r3, [pc, #112]	; (8000ce4 <HAL_UART_MspInit+0x98>)
 8000c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c76:	4a1b      	ldr	r2, [pc, #108]	; (8000ce4 <HAL_UART_MspInit+0x98>)
 8000c78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c7e:	4b19      	ldr	r3, [pc, #100]	; (8000ce4 <HAL_UART_MspInit+0x98>)
 8000c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c86:	613b      	str	r3, [r7, #16]
 8000c88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <HAL_UART_MspInit+0x98>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	4a14      	ldr	r2, [pc, #80]	; (8000ce4 <HAL_UART_MspInit+0x98>)
 8000c94:	f043 0301 	orr.w	r3, r3, #1
 8000c98:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9a:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <HAL_UART_MspInit+0x98>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ca6:	230c      	movs	r3, #12
 8000ca8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000caa:	2302      	movs	r3, #2
 8000cac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cb6:	2307      	movs	r3, #7
 8000cb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cba:	f107 0314 	add.w	r3, r7, #20
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4809      	ldr	r0, [pc, #36]	; (8000ce8 <HAL_UART_MspInit+0x9c>)
 8000cc2:	f000 fb4d 	bl	8001360 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2106      	movs	r1, #6
 8000cca:	2026      	movs	r0, #38	; 0x26
 8000ccc:	f000 fa8c 	bl	80011e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000cd0:	2026      	movs	r0, #38	; 0x26
 8000cd2:	f000 faa5 	bl	8001220 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cd6:	bf00      	nop
 8000cd8:	3728      	adds	r7, #40	; 0x28
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40004400 	.word	0x40004400
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	40020000 	.word	0x40020000

08000cec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b08e      	sub	sp, #56	; 0x38
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	4b33      	ldr	r3, [pc, #204]	; (8000dd0 <HAL_InitTick+0xe4>)
 8000d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d04:	4a32      	ldr	r2, [pc, #200]	; (8000dd0 <HAL_InitTick+0xe4>)
 8000d06:	f043 0310 	orr.w	r3, r3, #16
 8000d0a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d0c:	4b30      	ldr	r3, [pc, #192]	; (8000dd0 <HAL_InitTick+0xe4>)
 8000d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d10:	f003 0310 	and.w	r3, r3, #16
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d18:	f107 0210 	add.w	r2, r7, #16
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	4611      	mov	r1, r2
 8000d22:	4618      	mov	r0, r3
 8000d24:	f001 f96a 	bl	8001ffc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d28:	6a3b      	ldr	r3, [r7, #32]
 8000d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d103      	bne.n	8000d3a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d32:	f001 f93b 	bl	8001fac <HAL_RCC_GetPCLK1Freq>
 8000d36:	6378      	str	r0, [r7, #52]	; 0x34
 8000d38:	e004      	b.n	8000d44 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d3a:	f001 f937 	bl	8001fac <HAL_RCC_GetPCLK1Freq>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d46:	4a23      	ldr	r2, [pc, #140]	; (8000dd4 <HAL_InitTick+0xe8>)
 8000d48:	fba2 2303 	umull	r2, r3, r2, r3
 8000d4c:	0c9b      	lsrs	r3, r3, #18
 8000d4e:	3b01      	subs	r3, #1
 8000d50:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d52:	4b21      	ldr	r3, [pc, #132]	; (8000dd8 <HAL_InitTick+0xec>)
 8000d54:	4a21      	ldr	r2, [pc, #132]	; (8000ddc <HAL_InitTick+0xf0>)
 8000d56:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d58:	4b1f      	ldr	r3, [pc, #124]	; (8000dd8 <HAL_InitTick+0xec>)
 8000d5a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d5e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d60:	4a1d      	ldr	r2, [pc, #116]	; (8000dd8 <HAL_InitTick+0xec>)
 8000d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d64:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d66:	4b1c      	ldr	r3, [pc, #112]	; (8000dd8 <HAL_InitTick+0xec>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d6c:	4b1a      	ldr	r3, [pc, #104]	; (8000dd8 <HAL_InitTick+0xec>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d72:	4b19      	ldr	r3, [pc, #100]	; (8000dd8 <HAL_InitTick+0xec>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000d78:	4817      	ldr	r0, [pc, #92]	; (8000dd8 <HAL_InitTick+0xec>)
 8000d7a:	f001 fb4d 	bl	8002418 <HAL_TIM_Base_Init>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000d84:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d11b      	bne.n	8000dc4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000d8c:	4812      	ldr	r0, [pc, #72]	; (8000dd8 <HAL_InitTick+0xec>)
 8000d8e:	f001 fb9d 	bl	80024cc <HAL_TIM_Base_Start_IT>
 8000d92:	4603      	mov	r3, r0
 8000d94:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000d98:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d111      	bne.n	8000dc4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000da0:	2036      	movs	r0, #54	; 0x36
 8000da2:	f000 fa3d 	bl	8001220 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2b0f      	cmp	r3, #15
 8000daa:	d808      	bhi.n	8000dbe <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000dac:	2200      	movs	r2, #0
 8000dae:	6879      	ldr	r1, [r7, #4]
 8000db0:	2036      	movs	r0, #54	; 0x36
 8000db2:	f000 fa19 	bl	80011e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000db6:	4a0a      	ldr	r2, [pc, #40]	; (8000de0 <HAL_InitTick+0xf4>)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6013      	str	r3, [r2, #0]
 8000dbc:	e002      	b.n	8000dc4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000dc4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3738      	adds	r7, #56	; 0x38
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	40023800 	.word	0x40023800
 8000dd4:	431bde83 	.word	0x431bde83
 8000dd8:	200000b4 	.word	0x200000b4
 8000ddc:	40001000 	.word	0x40001000
 8000de0:	20000004 	.word	0x20000004

08000de4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <NMI_Handler+0x4>

08000dea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dee:	e7fe      	b.n	8000dee <HardFault_Handler+0x4>

08000df0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <MemManage_Handler+0x4>

08000df6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dfa:	e7fe      	b.n	8000dfa <BusFault_Handler+0x4>

08000dfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <UsageFault_Handler+0x4>

08000e02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e14:	4802      	ldr	r0, [pc, #8]	; (8000e20 <USART2_IRQHandler+0x10>)
 8000e16:	f001 fe2b 	bl	8002a70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20000050 	.word	0x20000050

08000e24 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e28:	4802      	ldr	r0, [pc, #8]	; (8000e34 <TIM6_DAC_IRQHandler+0x10>)
 8000e2a:	f001 fbbf 	bl	80025ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	200000b4 	.word	0x200000b4

08000e38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e3c:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <SystemInit+0x20>)
 8000e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e42:	4a05      	ldr	r2, [pc, #20]	; (8000e58 <SystemInit+0x20>)
 8000e44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <menu_task>:

int extract_command(command_t *cmd);
void process_command(command_t *cmd);

void menu_task(void* parameters)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
	while(1)
 8000e64:	e7fe      	b.n	8000e64 <menu_task+0x8>

08000e66 <led_task>:

	}
}

void led_task(void* parameters)
{
 8000e66:	b480      	push	{r7}
 8000e68:	b083      	sub	sp, #12
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]
	while(1)
 8000e6e:	e7fe      	b.n	8000e6e <led_task+0x8>

08000e70 <rtc_task>:

	}
}

void rtc_task(void* parameters)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
	while(1)
 8000e78:	e7fe      	b.n	8000e78 <rtc_task+0x8>

08000e7a <print_task>:

	}
}

void print_task(void* parameters)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	b083      	sub	sp, #12
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
	while(1)
 8000e82:	e7fe      	b.n	8000e82 <print_task+0x8>

08000e84 <command_handling_task>:

	}
}

void command_handling_task(void* parameters)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b08a      	sub	sp, #40	; 0x28
 8000e88:	af02      	add	r7, sp, #8
 8000e8a:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	command_t cmd;
	while(1)
	{
		// Implement notify wait
		status = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8000e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e90:	9300      	str	r3, [sp, #0]
 8000e92:	2300      	movs	r3, #0
 8000e94:	2200      	movs	r2, #0
 8000e96:	2100      	movs	r1, #0
 8000e98:	2000      	movs	r0, #0
 8000e9a:	f004 f935 	bl	8005108 <xTaskGenericNotifyWait>
 8000e9e:	61f8      	str	r0, [r7, #28]
		if(status == pdTRUE)
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d1f2      	bne.n	8000e8c <command_handling_task+0x8>
		{
			// Process the user data (command) stored in input data queue
			process_command(&cmd);
 8000ea6:	f107 030c 	add.w	r3, r7, #12
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f000 f802 	bl	8000eb4 <process_command>
		status = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8000eb0:	e7ec      	b.n	8000e8c <command_handling_task+0x8>
	...

08000eb4 <process_command>:
		}
	}
}

void process_command(command_t *cmd)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af02      	add	r7, sp, #8
 8000eba:	6078      	str	r0, [r7, #4]
	extract_command(cmd);
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f000 f835 	bl	8000f2c <extract_command>

	switch(curr_state)
 8000ec2:	4b16      	ldr	r3, [pc, #88]	; (8000f1c <process_command+0x68>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	2b05      	cmp	r3, #5
 8000ec8:	dc24      	bgt.n	8000f14 <process_command+0x60>
 8000eca:	2b02      	cmp	r3, #2
 8000ecc:	da18      	bge.n	8000f00 <process_command+0x4c>
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d002      	beq.n	8000ed8 <process_command+0x24>
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d00a      	beq.n	8000eec <process_command+0x38>
		case sRtcReport:
			// Notify task with the command
			xTaskNotify(rtc_task_handle, (uint32_t)cmd, eSetValueWithOverwrite);
			break;
	}
}
 8000ed6:	e01d      	b.n	8000f14 <process_command+0x60>
			xTaskNotify(menu_task_handle, (uint32_t)cmd, eSetValueWithOverwrite);
 8000ed8:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <process_command+0x6c>)
 8000eda:	6818      	ldr	r0, [r3, #0]
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	2300      	movs	r3, #0
 8000ee0:	9300      	str	r3, [sp, #0]
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	f004 f98f 	bl	8005208 <xTaskGenericNotify>
			break;
 8000eea:	e013      	b.n	8000f14 <process_command+0x60>
			xTaskNotify(led_task_handle, (uint32_t)cmd, eSetValueWithOverwrite);
 8000eec:	4b0d      	ldr	r3, [pc, #52]	; (8000f24 <process_command+0x70>)
 8000eee:	6818      	ldr	r0, [r3, #0]
 8000ef0:	687a      	ldr	r2, [r7, #4]
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	9300      	str	r3, [sp, #0]
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	2100      	movs	r1, #0
 8000efa:	f004 f985 	bl	8005208 <xTaskGenericNotify>
			break;
 8000efe:	e009      	b.n	8000f14 <process_command+0x60>
			xTaskNotify(rtc_task_handle, (uint32_t)cmd, eSetValueWithOverwrite);
 8000f00:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <process_command+0x74>)
 8000f02:	6818      	ldr	r0, [r3, #0]
 8000f04:	687a      	ldr	r2, [r7, #4]
 8000f06:	2300      	movs	r3, #0
 8000f08:	9300      	str	r3, [sp, #0]
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	f004 f97b 	bl	8005208 <xTaskGenericNotify>
			break;
 8000f12:	bf00      	nop
}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	200000b1 	.word	0x200000b1
 8000f20:	20000094 	.word	0x20000094
 8000f24:	20000098 	.word	0x20000098
 8000f28:	2000009c 	.word	0x2000009c

08000f2c <extract_command>:

int extract_command(command_t *cmd)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
	uint8_t item;
	UBaseType_t numberOfMessages;
	BaseType_t status;

	numberOfMessages = uxQueueMessagesWaiting(input_data_queue_handle);
 8000f34:	4b19      	ldr	r3, [pc, #100]	; (8000f9c <extract_command+0x70>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f003 f948 	bl	80041ce <uxQueueMessagesWaiting>
 8000f3e:	6138      	str	r0, [r7, #16]
	if(!numberOfMessages)
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d102      	bne.n	8000f4c <extract_command+0x20>
		return -1;
 8000f46:	f04f 33ff 	mov.w	r3, #4294967295
 8000f4a:	e022      	b.n	8000f92 <extract_command+0x66>
	uint8_t i = 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	75fb      	strb	r3, [r7, #23]

	do
	{
		status = xQueueReceive(input_data_queue_handle, &item, 0);
 8000f50:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <extract_command+0x70>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f107 010b 	add.w	r1, r7, #11
 8000f58:	2200      	movs	r2, #0
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f002 ffc8 	bl	8003ef0 <xQueueReceive>
 8000f60:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE)
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d106      	bne.n	8000f76 <extract_command+0x4a>
			cmd->payload[i++] = item;
 8000f68:	7dfb      	ldrb	r3, [r7, #23]
 8000f6a:	1c5a      	adds	r2, r3, #1
 8000f6c:	75fa      	strb	r2, [r7, #23]
 8000f6e:	461a      	mov	r2, r3
 8000f70:	7af9      	ldrb	r1, [r7, #11]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	5499      	strb	r1, [r3, r2]
	}while(item != '\n');
 8000f76:	7afb      	ldrb	r3, [r7, #11]
 8000f78:	2b0a      	cmp	r3, #10
 8000f7a:	d1e9      	bne.n	8000f50 <extract_command+0x24>

	cmd->payload[i-1] = '\0';
 8000f7c:	7dfb      	ldrb	r3, [r7, #23]
 8000f7e:	3b01      	subs	r3, #1
 8000f80:	687a      	ldr	r2, [r7, #4]
 8000f82:	2100      	movs	r1, #0
 8000f84:	54d1      	strb	r1, [r2, r3]
	cmd->len = i - 1;
 8000f86:	7dfb      	ldrb	r3, [r7, #23]
 8000f88:	3b01      	subs	r3, #1
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	60da      	str	r2, [r3, #12]

	return 0;
 8000f90:	2300      	movs	r3, #0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3718      	adds	r7, #24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	200000a8 	.word	0x200000a8

08000fa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000fa0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fd8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fa4:	480d      	ldr	r0, [pc, #52]	; (8000fdc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fa6:	490e      	ldr	r1, [pc, #56]	; (8000fe0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fa8:	4a0e      	ldr	r2, [pc, #56]	; (8000fe4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000faa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fac:	e002      	b.n	8000fb4 <LoopCopyDataInit>

08000fae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fb2:	3304      	adds	r3, #4

08000fb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fb8:	d3f9      	bcc.n	8000fae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fba:	4a0b      	ldr	r2, [pc, #44]	; (8000fe8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fbc:	4c0b      	ldr	r4, [pc, #44]	; (8000fec <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fc0:	e001      	b.n	8000fc6 <LoopFillZerobss>

08000fc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fc4:	3204      	adds	r2, #4

08000fc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fc8:	d3fb      	bcc.n	8000fc2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fca:	f7ff ff35 	bl	8000e38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fce:	f005 fb43 	bl	8006658 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fd2:	f7ff fa7f 	bl	80004d4 <main>
  bx  lr    
 8000fd6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000fd8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fe0:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000fe4:	08006744 	.word	0x08006744
  ldr r2, =_sbss
 8000fe8:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000fec:	20012ea8 	.word	0x20012ea8

08000ff0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ff0:	e7fe      	b.n	8000ff0 <ADC_IRQHandler>
	...

08000ff4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ff8:	4b0e      	ldr	r3, [pc, #56]	; (8001034 <HAL_Init+0x40>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a0d      	ldr	r2, [pc, #52]	; (8001034 <HAL_Init+0x40>)
 8000ffe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001002:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001004:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <HAL_Init+0x40>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a0a      	ldr	r2, [pc, #40]	; (8001034 <HAL_Init+0x40>)
 800100a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800100e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001010:	4b08      	ldr	r3, [pc, #32]	; (8001034 <HAL_Init+0x40>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a07      	ldr	r2, [pc, #28]	; (8001034 <HAL_Init+0x40>)
 8001016:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800101a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800101c:	2003      	movs	r0, #3
 800101e:	f000 f8d8 	bl	80011d2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001022:	2000      	movs	r0, #0
 8001024:	f7ff fe62 	bl	8000cec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001028:	f7ff fdbe 	bl	8000ba8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40023c00 	.word	0x40023c00

08001038 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800103c:	4b06      	ldr	r3, [pc, #24]	; (8001058 <HAL_IncTick+0x20>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	461a      	mov	r2, r3
 8001042:	4b06      	ldr	r3, [pc, #24]	; (800105c <HAL_IncTick+0x24>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4413      	add	r3, r2
 8001048:	4a04      	ldr	r2, [pc, #16]	; (800105c <HAL_IncTick+0x24>)
 800104a:	6013      	str	r3, [r2, #0]
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	20000008 	.word	0x20000008
 800105c:	200000fc 	.word	0x200000fc

08001060 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  return uwTick;
 8001064:	4b03      	ldr	r3, [pc, #12]	; (8001074 <HAL_GetTick+0x14>)
 8001066:	681b      	ldr	r3, [r3, #0]
}
 8001068:	4618      	mov	r0, r3
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	200000fc 	.word	0x200000fc

08001078 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f003 0307 	and.w	r3, r3, #7
 8001086:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001088:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <__NVIC_SetPriorityGrouping+0x44>)
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800108e:	68ba      	ldr	r2, [r7, #8]
 8001090:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001094:	4013      	ands	r3, r2
 8001096:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010aa:	4a04      	ldr	r2, [pc, #16]	; (80010bc <__NVIC_SetPriorityGrouping+0x44>)
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	60d3      	str	r3, [r2, #12]
}
 80010b0:	bf00      	nop
 80010b2:	3714      	adds	r7, #20
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c4:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <__NVIC_GetPriorityGrouping+0x18>)
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	0a1b      	lsrs	r3, r3, #8
 80010ca:	f003 0307 	and.w	r3, r3, #7
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	db0b      	blt.n	8001106 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	f003 021f 	and.w	r2, r3, #31
 80010f4:	4907      	ldr	r1, [pc, #28]	; (8001114 <__NVIC_EnableIRQ+0x38>)
 80010f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fa:	095b      	lsrs	r3, r3, #5
 80010fc:	2001      	movs	r0, #1
 80010fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	e000e100 	.word	0xe000e100

08001118 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	6039      	str	r1, [r7, #0]
 8001122:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001128:	2b00      	cmp	r3, #0
 800112a:	db0a      	blt.n	8001142 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	b2da      	uxtb	r2, r3
 8001130:	490c      	ldr	r1, [pc, #48]	; (8001164 <__NVIC_SetPriority+0x4c>)
 8001132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001136:	0112      	lsls	r2, r2, #4
 8001138:	b2d2      	uxtb	r2, r2
 800113a:	440b      	add	r3, r1
 800113c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001140:	e00a      	b.n	8001158 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	b2da      	uxtb	r2, r3
 8001146:	4908      	ldr	r1, [pc, #32]	; (8001168 <__NVIC_SetPriority+0x50>)
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	f003 030f 	and.w	r3, r3, #15
 800114e:	3b04      	subs	r3, #4
 8001150:	0112      	lsls	r2, r2, #4
 8001152:	b2d2      	uxtb	r2, r2
 8001154:	440b      	add	r3, r1
 8001156:	761a      	strb	r2, [r3, #24]
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	e000e100 	.word	0xe000e100
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800116c:	b480      	push	{r7}
 800116e:	b089      	sub	sp, #36	; 0x24
 8001170:	af00      	add	r7, sp, #0
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	60b9      	str	r1, [r7, #8]
 8001176:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	f003 0307 	and.w	r3, r3, #7
 800117e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	f1c3 0307 	rsb	r3, r3, #7
 8001186:	2b04      	cmp	r3, #4
 8001188:	bf28      	it	cs
 800118a:	2304      	movcs	r3, #4
 800118c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	3304      	adds	r3, #4
 8001192:	2b06      	cmp	r3, #6
 8001194:	d902      	bls.n	800119c <NVIC_EncodePriority+0x30>
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	3b03      	subs	r3, #3
 800119a:	e000      	b.n	800119e <NVIC_EncodePriority+0x32>
 800119c:	2300      	movs	r3, #0
 800119e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a0:	f04f 32ff 	mov.w	r2, #4294967295
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	43da      	mvns	r2, r3
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	401a      	ands	r2, r3
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b4:	f04f 31ff 	mov.w	r1, #4294967295
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	fa01 f303 	lsl.w	r3, r1, r3
 80011be:	43d9      	mvns	r1, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c4:	4313      	orrs	r3, r2
         );
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3724      	adds	r7, #36	; 0x24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b082      	sub	sp, #8
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f7ff ff4c 	bl	8001078 <__NVIC_SetPriorityGrouping>
}
 80011e0:	bf00      	nop
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
 80011f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011f6:	2300      	movs	r3, #0
 80011f8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011fa:	f7ff ff61 	bl	80010c0 <__NVIC_GetPriorityGrouping>
 80011fe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001200:	687a      	ldr	r2, [r7, #4]
 8001202:	68b9      	ldr	r1, [r7, #8]
 8001204:	6978      	ldr	r0, [r7, #20]
 8001206:	f7ff ffb1 	bl	800116c <NVIC_EncodePriority>
 800120a:	4602      	mov	r2, r0
 800120c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001210:	4611      	mov	r1, r2
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff ff80 	bl	8001118 <__NVIC_SetPriority>
}
 8001218:	bf00      	nop
 800121a:	3718      	adds	r7, #24
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800122a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff ff54 	bl	80010dc <__NVIC_EnableIRQ>
}
 8001234:	bf00      	nop
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001248:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800124a:	f7ff ff09 	bl	8001060 <HAL_GetTick>
 800124e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001256:	b2db      	uxtb	r3, r3
 8001258:	2b02      	cmp	r3, #2
 800125a:	d008      	beq.n	800126e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2280      	movs	r2, #128	; 0x80
 8001260:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2200      	movs	r2, #0
 8001266:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e052      	b.n	8001314 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f022 0216 	bic.w	r2, r2, #22
 800127c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	695a      	ldr	r2, [r3, #20]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800128c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	2b00      	cmp	r3, #0
 8001294:	d103      	bne.n	800129e <HAL_DMA_Abort+0x62>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800129a:	2b00      	cmp	r3, #0
 800129c:	d007      	beq.n	80012ae <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f022 0208 	bic.w	r2, r2, #8
 80012ac:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f022 0201 	bic.w	r2, r2, #1
 80012bc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012be:	e013      	b.n	80012e8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012c0:	f7ff fece 	bl	8001060 <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	2b05      	cmp	r3, #5
 80012cc:	d90c      	bls.n	80012e8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2220      	movs	r2, #32
 80012d2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2203      	movs	r2, #3
 80012d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2200      	movs	r2, #0
 80012e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80012e4:	2303      	movs	r3, #3
 80012e6:	e015      	b.n	8001314 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d1e4      	bne.n	80012c0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012fa:	223f      	movs	r2, #63	; 0x3f
 80012fc:	409a      	lsls	r2, r3
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2201      	movs	r2, #1
 8001306:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2200      	movs	r2, #0
 800130e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001312:	2300      	movs	r3, #0
}
 8001314:	4618      	mov	r0, r3
 8001316:	3710      	adds	r7, #16
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800132a:	b2db      	uxtb	r3, r3
 800132c:	2b02      	cmp	r3, #2
 800132e:	d004      	beq.n	800133a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2280      	movs	r2, #128	; 0x80
 8001334:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e00c      	b.n	8001354 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2205      	movs	r2, #5
 800133e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f022 0201 	bic.w	r2, r2, #1
 8001350:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001352:	2300      	movs	r3, #0
}
 8001354:	4618      	mov	r0, r3
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001360:	b480      	push	{r7}
 8001362:	b089      	sub	sp, #36	; 0x24
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800136a:	2300      	movs	r3, #0
 800136c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800136e:	2300      	movs	r3, #0
 8001370:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001372:	2300      	movs	r3, #0
 8001374:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001376:	2300      	movs	r3, #0
 8001378:	61fb      	str	r3, [r7, #28]
 800137a:	e16b      	b.n	8001654 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800137c:	2201      	movs	r2, #1
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	697a      	ldr	r2, [r7, #20]
 800138c:	4013      	ands	r3, r2
 800138e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001390:	693a      	ldr	r2, [r7, #16]
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	429a      	cmp	r2, r3
 8001396:	f040 815a 	bne.w	800164e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f003 0303 	and.w	r3, r3, #3
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d005      	beq.n	80013b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d130      	bne.n	8001414 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	2203      	movs	r2, #3
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	43db      	mvns	r3, r3
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	4013      	ands	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	68da      	ldr	r2, [r3, #12]
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	4313      	orrs	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013e8:	2201      	movs	r2, #1
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	43db      	mvns	r3, r3
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	4013      	ands	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	091b      	lsrs	r3, r3, #4
 80013fe:	f003 0201 	and.w	r2, r3, #1
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	4313      	orrs	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f003 0303 	and.w	r3, r3, #3
 800141c:	2b03      	cmp	r3, #3
 800141e:	d017      	beq.n	8001450 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	2203      	movs	r2, #3
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	43db      	mvns	r3, r3
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	4013      	ands	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	689a      	ldr	r2, [r3, #8]
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4313      	orrs	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f003 0303 	and.w	r3, r3, #3
 8001458:	2b02      	cmp	r3, #2
 800145a:	d123      	bne.n	80014a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	08da      	lsrs	r2, r3, #3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3208      	adds	r2, #8
 8001464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001468:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	f003 0307 	and.w	r3, r3, #7
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	220f      	movs	r2, #15
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	43db      	mvns	r3, r3
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	4013      	ands	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	691a      	ldr	r2, [r3, #16]
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	f003 0307 	and.w	r3, r3, #7
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	4313      	orrs	r3, r2
 8001494:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	08da      	lsrs	r2, r3, #3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	3208      	adds	r2, #8
 800149e:	69b9      	ldr	r1, [r7, #24]
 80014a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	2203      	movs	r2, #3
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	43db      	mvns	r3, r3
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	4013      	ands	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f003 0203 	and.w	r2, r3, #3
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	f000 80b4 	beq.w	800164e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	4b60      	ldr	r3, [pc, #384]	; (800166c <HAL_GPIO_Init+0x30c>)
 80014ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ee:	4a5f      	ldr	r2, [pc, #380]	; (800166c <HAL_GPIO_Init+0x30c>)
 80014f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014f4:	6453      	str	r3, [r2, #68]	; 0x44
 80014f6:	4b5d      	ldr	r3, [pc, #372]	; (800166c <HAL_GPIO_Init+0x30c>)
 80014f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001502:	4a5b      	ldr	r2, [pc, #364]	; (8001670 <HAL_GPIO_Init+0x310>)
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	089b      	lsrs	r3, r3, #2
 8001508:	3302      	adds	r3, #2
 800150a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800150e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	f003 0303 	and.w	r3, r3, #3
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	220f      	movs	r2, #15
 800151a:	fa02 f303 	lsl.w	r3, r2, r3
 800151e:	43db      	mvns	r3, r3
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	4013      	ands	r3, r2
 8001524:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a52      	ldr	r2, [pc, #328]	; (8001674 <HAL_GPIO_Init+0x314>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d02b      	beq.n	8001586 <HAL_GPIO_Init+0x226>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a51      	ldr	r2, [pc, #324]	; (8001678 <HAL_GPIO_Init+0x318>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d025      	beq.n	8001582 <HAL_GPIO_Init+0x222>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a50      	ldr	r2, [pc, #320]	; (800167c <HAL_GPIO_Init+0x31c>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d01f      	beq.n	800157e <HAL_GPIO_Init+0x21e>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a4f      	ldr	r2, [pc, #316]	; (8001680 <HAL_GPIO_Init+0x320>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d019      	beq.n	800157a <HAL_GPIO_Init+0x21a>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a4e      	ldr	r2, [pc, #312]	; (8001684 <HAL_GPIO_Init+0x324>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d013      	beq.n	8001576 <HAL_GPIO_Init+0x216>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a4d      	ldr	r2, [pc, #308]	; (8001688 <HAL_GPIO_Init+0x328>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d00d      	beq.n	8001572 <HAL_GPIO_Init+0x212>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a4c      	ldr	r2, [pc, #304]	; (800168c <HAL_GPIO_Init+0x32c>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d007      	beq.n	800156e <HAL_GPIO_Init+0x20e>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a4b      	ldr	r2, [pc, #300]	; (8001690 <HAL_GPIO_Init+0x330>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d101      	bne.n	800156a <HAL_GPIO_Init+0x20a>
 8001566:	2307      	movs	r3, #7
 8001568:	e00e      	b.n	8001588 <HAL_GPIO_Init+0x228>
 800156a:	2308      	movs	r3, #8
 800156c:	e00c      	b.n	8001588 <HAL_GPIO_Init+0x228>
 800156e:	2306      	movs	r3, #6
 8001570:	e00a      	b.n	8001588 <HAL_GPIO_Init+0x228>
 8001572:	2305      	movs	r3, #5
 8001574:	e008      	b.n	8001588 <HAL_GPIO_Init+0x228>
 8001576:	2304      	movs	r3, #4
 8001578:	e006      	b.n	8001588 <HAL_GPIO_Init+0x228>
 800157a:	2303      	movs	r3, #3
 800157c:	e004      	b.n	8001588 <HAL_GPIO_Init+0x228>
 800157e:	2302      	movs	r3, #2
 8001580:	e002      	b.n	8001588 <HAL_GPIO_Init+0x228>
 8001582:	2301      	movs	r3, #1
 8001584:	e000      	b.n	8001588 <HAL_GPIO_Init+0x228>
 8001586:	2300      	movs	r3, #0
 8001588:	69fa      	ldr	r2, [r7, #28]
 800158a:	f002 0203 	and.w	r2, r2, #3
 800158e:	0092      	lsls	r2, r2, #2
 8001590:	4093      	lsls	r3, r2
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	4313      	orrs	r3, r2
 8001596:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001598:	4935      	ldr	r1, [pc, #212]	; (8001670 <HAL_GPIO_Init+0x310>)
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	089b      	lsrs	r3, r3, #2
 800159e:	3302      	adds	r3, #2
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015a6:	4b3b      	ldr	r3, [pc, #236]	; (8001694 <HAL_GPIO_Init+0x334>)
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	43db      	mvns	r3, r3
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	4013      	ands	r3, r2
 80015b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d003      	beq.n	80015ca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015ca:	4a32      	ldr	r2, [pc, #200]	; (8001694 <HAL_GPIO_Init+0x334>)
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015d0:	4b30      	ldr	r3, [pc, #192]	; (8001694 <HAL_GPIO_Init+0x334>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	43db      	mvns	r3, r3
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	4013      	ands	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d003      	beq.n	80015f4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015f4:	4a27      	ldr	r2, [pc, #156]	; (8001694 <HAL_GPIO_Init+0x334>)
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015fa:	4b26      	ldr	r3, [pc, #152]	; (8001694 <HAL_GPIO_Init+0x334>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	43db      	mvns	r3, r3
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	4013      	ands	r3, r2
 8001608:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d003      	beq.n	800161e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	4313      	orrs	r3, r2
 800161c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800161e:	4a1d      	ldr	r2, [pc, #116]	; (8001694 <HAL_GPIO_Init+0x334>)
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001624:	4b1b      	ldr	r3, [pc, #108]	; (8001694 <HAL_GPIO_Init+0x334>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	43db      	mvns	r3, r3
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	4013      	ands	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d003      	beq.n	8001648 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	4313      	orrs	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001648:	4a12      	ldr	r2, [pc, #72]	; (8001694 <HAL_GPIO_Init+0x334>)
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	3301      	adds	r3, #1
 8001652:	61fb      	str	r3, [r7, #28]
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	2b0f      	cmp	r3, #15
 8001658:	f67f ae90 	bls.w	800137c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800165c:	bf00      	nop
 800165e:	bf00      	nop
 8001660:	3724      	adds	r7, #36	; 0x24
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	40023800 	.word	0x40023800
 8001670:	40013800 	.word	0x40013800
 8001674:	40020000 	.word	0x40020000
 8001678:	40020400 	.word	0x40020400
 800167c:	40020800 	.word	0x40020800
 8001680:	40020c00 	.word	0x40020c00
 8001684:	40021000 	.word	0x40021000
 8001688:	40021400 	.word	0x40021400
 800168c:	40021800 	.word	0x40021800
 8001690:	40021c00 	.word	0x40021c00
 8001694:	40013c00 	.word	0x40013c00

08001698 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	460b      	mov	r3, r1
 80016a2:	807b      	strh	r3, [r7, #2]
 80016a4:	4613      	mov	r3, r2
 80016a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016a8:	787b      	ldrb	r3, [r7, #1]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d003      	beq.n	80016b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016ae:	887a      	ldrh	r2, [r7, #2]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016b4:	e003      	b.n	80016be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016b6:	887b      	ldrh	r3, [r7, #2]
 80016b8:	041a      	lsls	r2, r3, #16
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	619a      	str	r2, [r3, #24]
}
 80016be:	bf00      	nop
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
	...

080016cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d101      	bne.n	80016de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e267      	b.n	8001bae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d075      	beq.n	80017d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016ea:	4b88      	ldr	r3, [pc, #544]	; (800190c <HAL_RCC_OscConfig+0x240>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	f003 030c 	and.w	r3, r3, #12
 80016f2:	2b04      	cmp	r3, #4
 80016f4:	d00c      	beq.n	8001710 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016f6:	4b85      	ldr	r3, [pc, #532]	; (800190c <HAL_RCC_OscConfig+0x240>)
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016fe:	2b08      	cmp	r3, #8
 8001700:	d112      	bne.n	8001728 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001702:	4b82      	ldr	r3, [pc, #520]	; (800190c <HAL_RCC_OscConfig+0x240>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800170a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800170e:	d10b      	bne.n	8001728 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001710:	4b7e      	ldr	r3, [pc, #504]	; (800190c <HAL_RCC_OscConfig+0x240>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d05b      	beq.n	80017d4 <HAL_RCC_OscConfig+0x108>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d157      	bne.n	80017d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e242      	b.n	8001bae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001730:	d106      	bne.n	8001740 <HAL_RCC_OscConfig+0x74>
 8001732:	4b76      	ldr	r3, [pc, #472]	; (800190c <HAL_RCC_OscConfig+0x240>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a75      	ldr	r2, [pc, #468]	; (800190c <HAL_RCC_OscConfig+0x240>)
 8001738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800173c:	6013      	str	r3, [r2, #0]
 800173e:	e01d      	b.n	800177c <HAL_RCC_OscConfig+0xb0>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001748:	d10c      	bne.n	8001764 <HAL_RCC_OscConfig+0x98>
 800174a:	4b70      	ldr	r3, [pc, #448]	; (800190c <HAL_RCC_OscConfig+0x240>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a6f      	ldr	r2, [pc, #444]	; (800190c <HAL_RCC_OscConfig+0x240>)
 8001750:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001754:	6013      	str	r3, [r2, #0]
 8001756:	4b6d      	ldr	r3, [pc, #436]	; (800190c <HAL_RCC_OscConfig+0x240>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a6c      	ldr	r2, [pc, #432]	; (800190c <HAL_RCC_OscConfig+0x240>)
 800175c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001760:	6013      	str	r3, [r2, #0]
 8001762:	e00b      	b.n	800177c <HAL_RCC_OscConfig+0xb0>
 8001764:	4b69      	ldr	r3, [pc, #420]	; (800190c <HAL_RCC_OscConfig+0x240>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a68      	ldr	r2, [pc, #416]	; (800190c <HAL_RCC_OscConfig+0x240>)
 800176a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800176e:	6013      	str	r3, [r2, #0]
 8001770:	4b66      	ldr	r3, [pc, #408]	; (800190c <HAL_RCC_OscConfig+0x240>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a65      	ldr	r2, [pc, #404]	; (800190c <HAL_RCC_OscConfig+0x240>)
 8001776:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800177a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d013      	beq.n	80017ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001784:	f7ff fc6c 	bl	8001060 <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800178c:	f7ff fc68 	bl	8001060 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b64      	cmp	r3, #100	; 0x64
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e207      	b.n	8001bae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800179e:	4b5b      	ldr	r3, [pc, #364]	; (800190c <HAL_RCC_OscConfig+0x240>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d0f0      	beq.n	800178c <HAL_RCC_OscConfig+0xc0>
 80017aa:	e014      	b.n	80017d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ac:	f7ff fc58 	bl	8001060 <HAL_GetTick>
 80017b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017b4:	f7ff fc54 	bl	8001060 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b64      	cmp	r3, #100	; 0x64
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e1f3      	b.n	8001bae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017c6:	4b51      	ldr	r3, [pc, #324]	; (800190c <HAL_RCC_OscConfig+0x240>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1f0      	bne.n	80017b4 <HAL_RCC_OscConfig+0xe8>
 80017d2:	e000      	b.n	80017d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d063      	beq.n	80018aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017e2:	4b4a      	ldr	r3, [pc, #296]	; (800190c <HAL_RCC_OscConfig+0x240>)
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	f003 030c 	and.w	r3, r3, #12
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d00b      	beq.n	8001806 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017ee:	4b47      	ldr	r3, [pc, #284]	; (800190c <HAL_RCC_OscConfig+0x240>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017f6:	2b08      	cmp	r3, #8
 80017f8:	d11c      	bne.n	8001834 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017fa:	4b44      	ldr	r3, [pc, #272]	; (800190c <HAL_RCC_OscConfig+0x240>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d116      	bne.n	8001834 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001806:	4b41      	ldr	r3, [pc, #260]	; (800190c <HAL_RCC_OscConfig+0x240>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d005      	beq.n	800181e <HAL_RCC_OscConfig+0x152>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d001      	beq.n	800181e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e1c7      	b.n	8001bae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800181e:	4b3b      	ldr	r3, [pc, #236]	; (800190c <HAL_RCC_OscConfig+0x240>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	691b      	ldr	r3, [r3, #16]
 800182a:	00db      	lsls	r3, r3, #3
 800182c:	4937      	ldr	r1, [pc, #220]	; (800190c <HAL_RCC_OscConfig+0x240>)
 800182e:	4313      	orrs	r3, r2
 8001830:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001832:	e03a      	b.n	80018aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d020      	beq.n	800187e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800183c:	4b34      	ldr	r3, [pc, #208]	; (8001910 <HAL_RCC_OscConfig+0x244>)
 800183e:	2201      	movs	r2, #1
 8001840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001842:	f7ff fc0d 	bl	8001060 <HAL_GetTick>
 8001846:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001848:	e008      	b.n	800185c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800184a:	f7ff fc09 	bl	8001060 <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	2b02      	cmp	r3, #2
 8001856:	d901      	bls.n	800185c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e1a8      	b.n	8001bae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800185c:	4b2b      	ldr	r3, [pc, #172]	; (800190c <HAL_RCC_OscConfig+0x240>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0302 	and.w	r3, r3, #2
 8001864:	2b00      	cmp	r3, #0
 8001866:	d0f0      	beq.n	800184a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001868:	4b28      	ldr	r3, [pc, #160]	; (800190c <HAL_RCC_OscConfig+0x240>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	691b      	ldr	r3, [r3, #16]
 8001874:	00db      	lsls	r3, r3, #3
 8001876:	4925      	ldr	r1, [pc, #148]	; (800190c <HAL_RCC_OscConfig+0x240>)
 8001878:	4313      	orrs	r3, r2
 800187a:	600b      	str	r3, [r1, #0]
 800187c:	e015      	b.n	80018aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800187e:	4b24      	ldr	r3, [pc, #144]	; (8001910 <HAL_RCC_OscConfig+0x244>)
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001884:	f7ff fbec 	bl	8001060 <HAL_GetTick>
 8001888:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800188c:	f7ff fbe8 	bl	8001060 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b02      	cmp	r3, #2
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e187      	b.n	8001bae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800189e:	4b1b      	ldr	r3, [pc, #108]	; (800190c <HAL_RCC_OscConfig+0x240>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1f0      	bne.n	800188c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0308 	and.w	r3, r3, #8
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d036      	beq.n	8001924 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	695b      	ldr	r3, [r3, #20]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d016      	beq.n	80018ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018be:	4b15      	ldr	r3, [pc, #84]	; (8001914 <HAL_RCC_OscConfig+0x248>)
 80018c0:	2201      	movs	r2, #1
 80018c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018c4:	f7ff fbcc 	bl	8001060 <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018cc:	f7ff fbc8 	bl	8001060 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e167      	b.n	8001bae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018de:	4b0b      	ldr	r3, [pc, #44]	; (800190c <HAL_RCC_OscConfig+0x240>)
 80018e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d0f0      	beq.n	80018cc <HAL_RCC_OscConfig+0x200>
 80018ea:	e01b      	b.n	8001924 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018ec:	4b09      	ldr	r3, [pc, #36]	; (8001914 <HAL_RCC_OscConfig+0x248>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f2:	f7ff fbb5 	bl	8001060 <HAL_GetTick>
 80018f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018f8:	e00e      	b.n	8001918 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018fa:	f7ff fbb1 	bl	8001060 <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d907      	bls.n	8001918 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e150      	b.n	8001bae <HAL_RCC_OscConfig+0x4e2>
 800190c:	40023800 	.word	0x40023800
 8001910:	42470000 	.word	0x42470000
 8001914:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001918:	4b88      	ldr	r3, [pc, #544]	; (8001b3c <HAL_RCC_OscConfig+0x470>)
 800191a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800191c:	f003 0302 	and.w	r3, r3, #2
 8001920:	2b00      	cmp	r3, #0
 8001922:	d1ea      	bne.n	80018fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0304 	and.w	r3, r3, #4
 800192c:	2b00      	cmp	r3, #0
 800192e:	f000 8097 	beq.w	8001a60 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001932:	2300      	movs	r3, #0
 8001934:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001936:	4b81      	ldr	r3, [pc, #516]	; (8001b3c <HAL_RCC_OscConfig+0x470>)
 8001938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d10f      	bne.n	8001962 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	60bb      	str	r3, [r7, #8]
 8001946:	4b7d      	ldr	r3, [pc, #500]	; (8001b3c <HAL_RCC_OscConfig+0x470>)
 8001948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194a:	4a7c      	ldr	r2, [pc, #496]	; (8001b3c <HAL_RCC_OscConfig+0x470>)
 800194c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001950:	6413      	str	r3, [r2, #64]	; 0x40
 8001952:	4b7a      	ldr	r3, [pc, #488]	; (8001b3c <HAL_RCC_OscConfig+0x470>)
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800195a:	60bb      	str	r3, [r7, #8]
 800195c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800195e:	2301      	movs	r3, #1
 8001960:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001962:	4b77      	ldr	r3, [pc, #476]	; (8001b40 <HAL_RCC_OscConfig+0x474>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800196a:	2b00      	cmp	r3, #0
 800196c:	d118      	bne.n	80019a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800196e:	4b74      	ldr	r3, [pc, #464]	; (8001b40 <HAL_RCC_OscConfig+0x474>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a73      	ldr	r2, [pc, #460]	; (8001b40 <HAL_RCC_OscConfig+0x474>)
 8001974:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001978:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800197a:	f7ff fb71 	bl	8001060 <HAL_GetTick>
 800197e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001980:	e008      	b.n	8001994 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001982:	f7ff fb6d 	bl	8001060 <HAL_GetTick>
 8001986:	4602      	mov	r2, r0
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	2b02      	cmp	r3, #2
 800198e:	d901      	bls.n	8001994 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001990:	2303      	movs	r3, #3
 8001992:	e10c      	b.n	8001bae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001994:	4b6a      	ldr	r3, [pc, #424]	; (8001b40 <HAL_RCC_OscConfig+0x474>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800199c:	2b00      	cmp	r3, #0
 800199e:	d0f0      	beq.n	8001982 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d106      	bne.n	80019b6 <HAL_RCC_OscConfig+0x2ea>
 80019a8:	4b64      	ldr	r3, [pc, #400]	; (8001b3c <HAL_RCC_OscConfig+0x470>)
 80019aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ac:	4a63      	ldr	r2, [pc, #396]	; (8001b3c <HAL_RCC_OscConfig+0x470>)
 80019ae:	f043 0301 	orr.w	r3, r3, #1
 80019b2:	6713      	str	r3, [r2, #112]	; 0x70
 80019b4:	e01c      	b.n	80019f0 <HAL_RCC_OscConfig+0x324>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	2b05      	cmp	r3, #5
 80019bc:	d10c      	bne.n	80019d8 <HAL_RCC_OscConfig+0x30c>
 80019be:	4b5f      	ldr	r3, [pc, #380]	; (8001b3c <HAL_RCC_OscConfig+0x470>)
 80019c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c2:	4a5e      	ldr	r2, [pc, #376]	; (8001b3c <HAL_RCC_OscConfig+0x470>)
 80019c4:	f043 0304 	orr.w	r3, r3, #4
 80019c8:	6713      	str	r3, [r2, #112]	; 0x70
 80019ca:	4b5c      	ldr	r3, [pc, #368]	; (8001b3c <HAL_RCC_OscConfig+0x470>)
 80019cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ce:	4a5b      	ldr	r2, [pc, #364]	; (8001b3c <HAL_RCC_OscConfig+0x470>)
 80019d0:	f043 0301 	orr.w	r3, r3, #1
 80019d4:	6713      	str	r3, [r2, #112]	; 0x70
 80019d6:	e00b      	b.n	80019f0 <HAL_RCC_OscConfig+0x324>
 80019d8:	4b58      	ldr	r3, [pc, #352]	; (8001b3c <HAL_RCC_OscConfig+0x470>)
 80019da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019dc:	4a57      	ldr	r2, [pc, #348]	; (8001b3c <HAL_RCC_OscConfig+0x470>)
 80019de:	f023 0301 	bic.w	r3, r3, #1
 80019e2:	6713      	str	r3, [r2, #112]	; 0x70
 80019e4:	4b55      	ldr	r3, [pc, #340]	; (8001b3c <HAL_RCC_OscConfig+0x470>)
 80019e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019e8:	4a54      	ldr	r2, [pc, #336]	; (8001b3c <HAL_RCC_OscConfig+0x470>)
 80019ea:	f023 0304 	bic.w	r3, r3, #4
 80019ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d015      	beq.n	8001a24 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019f8:	f7ff fb32 	bl	8001060 <HAL_GetTick>
 80019fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019fe:	e00a      	b.n	8001a16 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a00:	f7ff fb2e 	bl	8001060 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e0cb      	b.n	8001bae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a16:	4b49      	ldr	r3, [pc, #292]	; (8001b3c <HAL_RCC_OscConfig+0x470>)
 8001a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d0ee      	beq.n	8001a00 <HAL_RCC_OscConfig+0x334>
 8001a22:	e014      	b.n	8001a4e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a24:	f7ff fb1c 	bl	8001060 <HAL_GetTick>
 8001a28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a2a:	e00a      	b.n	8001a42 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a2c:	f7ff fb18 	bl	8001060 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e0b5      	b.n	8001bae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a42:	4b3e      	ldr	r3, [pc, #248]	; (8001b3c <HAL_RCC_OscConfig+0x470>)
 8001a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1ee      	bne.n	8001a2c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a4e:	7dfb      	ldrb	r3, [r7, #23]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d105      	bne.n	8001a60 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a54:	4b39      	ldr	r3, [pc, #228]	; (8001b3c <HAL_RCC_OscConfig+0x470>)
 8001a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a58:	4a38      	ldr	r2, [pc, #224]	; (8001b3c <HAL_RCC_OscConfig+0x470>)
 8001a5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a5e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	f000 80a1 	beq.w	8001bac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a6a:	4b34      	ldr	r3, [pc, #208]	; (8001b3c <HAL_RCC_OscConfig+0x470>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f003 030c 	and.w	r3, r3, #12
 8001a72:	2b08      	cmp	r3, #8
 8001a74:	d05c      	beq.n	8001b30 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	699b      	ldr	r3, [r3, #24]
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d141      	bne.n	8001b02 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a7e:	4b31      	ldr	r3, [pc, #196]	; (8001b44 <HAL_RCC_OscConfig+0x478>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a84:	f7ff faec 	bl	8001060 <HAL_GetTick>
 8001a88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a8a:	e008      	b.n	8001a9e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a8c:	f7ff fae8 	bl	8001060 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e087      	b.n	8001bae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a9e:	4b27      	ldr	r3, [pc, #156]	; (8001b3c <HAL_RCC_OscConfig+0x470>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d1f0      	bne.n	8001a8c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	69da      	ldr	r2, [r3, #28]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a1b      	ldr	r3, [r3, #32]
 8001ab2:	431a      	orrs	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab8:	019b      	lsls	r3, r3, #6
 8001aba:	431a      	orrs	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac0:	085b      	lsrs	r3, r3, #1
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	041b      	lsls	r3, r3, #16
 8001ac6:	431a      	orrs	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001acc:	061b      	lsls	r3, r3, #24
 8001ace:	491b      	ldr	r1, [pc, #108]	; (8001b3c <HAL_RCC_OscConfig+0x470>)
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ad4:	4b1b      	ldr	r3, [pc, #108]	; (8001b44 <HAL_RCC_OscConfig+0x478>)
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ada:	f7ff fac1 	bl	8001060 <HAL_GetTick>
 8001ade:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ae0:	e008      	b.n	8001af4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ae2:	f7ff fabd 	bl	8001060 <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e05c      	b.n	8001bae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001af4:	4b11      	ldr	r3, [pc, #68]	; (8001b3c <HAL_RCC_OscConfig+0x470>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d0f0      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x416>
 8001b00:	e054      	b.n	8001bac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b02:	4b10      	ldr	r3, [pc, #64]	; (8001b44 <HAL_RCC_OscConfig+0x478>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b08:	f7ff faaa 	bl	8001060 <HAL_GetTick>
 8001b0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b0e:	e008      	b.n	8001b22 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b10:	f7ff faa6 	bl	8001060 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e045      	b.n	8001bae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b22:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <HAL_RCC_OscConfig+0x470>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d1f0      	bne.n	8001b10 <HAL_RCC_OscConfig+0x444>
 8001b2e:	e03d      	b.n	8001bac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d107      	bne.n	8001b48 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e038      	b.n	8001bae <HAL_RCC_OscConfig+0x4e2>
 8001b3c:	40023800 	.word	0x40023800
 8001b40:	40007000 	.word	0x40007000
 8001b44:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b48:	4b1b      	ldr	r3, [pc, #108]	; (8001bb8 <HAL_RCC_OscConfig+0x4ec>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	699b      	ldr	r3, [r3, #24]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d028      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d121      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d11a      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b72:	68fa      	ldr	r2, [r7, #12]
 8001b74:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b78:	4013      	ands	r3, r2
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b7e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d111      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8e:	085b      	lsrs	r3, r3, #1
 8001b90:	3b01      	subs	r3, #1
 8001b92:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d107      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d001      	beq.n	8001bac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e000      	b.n	8001bae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3718      	adds	r7, #24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40023800 	.word	0x40023800

08001bbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d101      	bne.n	8001bd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e0cc      	b.n	8001d6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bd0:	4b68      	ldr	r3, [pc, #416]	; (8001d74 <HAL_RCC_ClockConfig+0x1b8>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0307 	and.w	r3, r3, #7
 8001bd8:	683a      	ldr	r2, [r7, #0]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d90c      	bls.n	8001bf8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bde:	4b65      	ldr	r3, [pc, #404]	; (8001d74 <HAL_RCC_ClockConfig+0x1b8>)
 8001be0:	683a      	ldr	r2, [r7, #0]
 8001be2:	b2d2      	uxtb	r2, r2
 8001be4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001be6:	4b63      	ldr	r3, [pc, #396]	; (8001d74 <HAL_RCC_ClockConfig+0x1b8>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	683a      	ldr	r2, [r7, #0]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d001      	beq.n	8001bf8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e0b8      	b.n	8001d6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0302 	and.w	r3, r3, #2
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d020      	beq.n	8001c46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0304 	and.w	r3, r3, #4
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d005      	beq.n	8001c1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c10:	4b59      	ldr	r3, [pc, #356]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	4a58      	ldr	r2, [pc, #352]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001c16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0308 	and.w	r3, r3, #8
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d005      	beq.n	8001c34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c28:	4b53      	ldr	r3, [pc, #332]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	4a52      	ldr	r2, [pc, #328]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001c2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c34:	4b50      	ldr	r3, [pc, #320]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	494d      	ldr	r1, [pc, #308]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d044      	beq.n	8001cdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d107      	bne.n	8001c6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c5a:	4b47      	ldr	r3, [pc, #284]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d119      	bne.n	8001c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e07f      	b.n	8001d6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d003      	beq.n	8001c7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c76:	2b03      	cmp	r3, #3
 8001c78:	d107      	bne.n	8001c8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c7a:	4b3f      	ldr	r3, [pc, #252]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d109      	bne.n	8001c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e06f      	b.n	8001d6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c8a:	4b3b      	ldr	r3, [pc, #236]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d101      	bne.n	8001c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e067      	b.n	8001d6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c9a:	4b37      	ldr	r3, [pc, #220]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f023 0203 	bic.w	r2, r3, #3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	4934      	ldr	r1, [pc, #208]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cac:	f7ff f9d8 	bl	8001060 <HAL_GetTick>
 8001cb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cb2:	e00a      	b.n	8001cca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cb4:	f7ff f9d4 	bl	8001060 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e04f      	b.n	8001d6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cca:	4b2b      	ldr	r3, [pc, #172]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f003 020c 	and.w	r2, r3, #12
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d1eb      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cdc:	4b25      	ldr	r3, [pc, #148]	; (8001d74 <HAL_RCC_ClockConfig+0x1b8>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0307 	and.w	r3, r3, #7
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d20c      	bcs.n	8001d04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cea:	4b22      	ldr	r3, [pc, #136]	; (8001d74 <HAL_RCC_ClockConfig+0x1b8>)
 8001cec:	683a      	ldr	r2, [r7, #0]
 8001cee:	b2d2      	uxtb	r2, r2
 8001cf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cf2:	4b20      	ldr	r3, [pc, #128]	; (8001d74 <HAL_RCC_ClockConfig+0x1b8>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d001      	beq.n	8001d04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e032      	b.n	8001d6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0304 	and.w	r3, r3, #4
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d008      	beq.n	8001d22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d10:	4b19      	ldr	r3, [pc, #100]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	4916      	ldr	r1, [pc, #88]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0308 	and.w	r3, r3, #8
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d009      	beq.n	8001d42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d2e:	4b12      	ldr	r3, [pc, #72]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	691b      	ldr	r3, [r3, #16]
 8001d3a:	00db      	lsls	r3, r3, #3
 8001d3c:	490e      	ldr	r1, [pc, #56]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d42:	f000 f821 	bl	8001d88 <HAL_RCC_GetSysClockFreq>
 8001d46:	4602      	mov	r2, r0
 8001d48:	4b0b      	ldr	r3, [pc, #44]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	091b      	lsrs	r3, r3, #4
 8001d4e:	f003 030f 	and.w	r3, r3, #15
 8001d52:	490a      	ldr	r1, [pc, #40]	; (8001d7c <HAL_RCC_ClockConfig+0x1c0>)
 8001d54:	5ccb      	ldrb	r3, [r1, r3]
 8001d56:	fa22 f303 	lsr.w	r3, r2, r3
 8001d5a:	4a09      	ldr	r2, [pc, #36]	; (8001d80 <HAL_RCC_ClockConfig+0x1c4>)
 8001d5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d5e:	4b09      	ldr	r3, [pc, #36]	; (8001d84 <HAL_RCC_ClockConfig+0x1c8>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7fe ffc2 	bl	8000cec <HAL_InitTick>

  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3710      	adds	r7, #16
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	40023c00 	.word	0x40023c00
 8001d78:	40023800 	.word	0x40023800
 8001d7c:	0800671c 	.word	0x0800671c
 8001d80:	20000000 	.word	0x20000000
 8001d84:	20000004 	.word	0x20000004

08001d88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d8c:	b094      	sub	sp, #80	; 0x50
 8001d8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d90:	2300      	movs	r3, #0
 8001d92:	647b      	str	r3, [r7, #68]	; 0x44
 8001d94:	2300      	movs	r3, #0
 8001d96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d98:	2300      	movs	r3, #0
 8001d9a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001da0:	4b79      	ldr	r3, [pc, #484]	; (8001f88 <HAL_RCC_GetSysClockFreq+0x200>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f003 030c 	and.w	r3, r3, #12
 8001da8:	2b08      	cmp	r3, #8
 8001daa:	d00d      	beq.n	8001dc8 <HAL_RCC_GetSysClockFreq+0x40>
 8001dac:	2b08      	cmp	r3, #8
 8001dae:	f200 80e1 	bhi.w	8001f74 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d002      	beq.n	8001dbc <HAL_RCC_GetSysClockFreq+0x34>
 8001db6:	2b04      	cmp	r3, #4
 8001db8:	d003      	beq.n	8001dc2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001dba:	e0db      	b.n	8001f74 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001dbc:	4b73      	ldr	r3, [pc, #460]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x204>)
 8001dbe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001dc0:	e0db      	b.n	8001f7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001dc2:	4b73      	ldr	r3, [pc, #460]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x208>)
 8001dc4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001dc6:	e0d8      	b.n	8001f7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001dc8:	4b6f      	ldr	r3, [pc, #444]	; (8001f88 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001dd0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001dd2:	4b6d      	ldr	r3, [pc, #436]	; (8001f88 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d063      	beq.n	8001ea6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dde:	4b6a      	ldr	r3, [pc, #424]	; (8001f88 <HAL_RCC_GetSysClockFreq+0x200>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	099b      	lsrs	r3, r3, #6
 8001de4:	2200      	movs	r2, #0
 8001de6:	63bb      	str	r3, [r7, #56]	; 0x38
 8001de8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001df0:	633b      	str	r3, [r7, #48]	; 0x30
 8001df2:	2300      	movs	r3, #0
 8001df4:	637b      	str	r3, [r7, #52]	; 0x34
 8001df6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001dfa:	4622      	mov	r2, r4
 8001dfc:	462b      	mov	r3, r5
 8001dfe:	f04f 0000 	mov.w	r0, #0
 8001e02:	f04f 0100 	mov.w	r1, #0
 8001e06:	0159      	lsls	r1, r3, #5
 8001e08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e0c:	0150      	lsls	r0, r2, #5
 8001e0e:	4602      	mov	r2, r0
 8001e10:	460b      	mov	r3, r1
 8001e12:	4621      	mov	r1, r4
 8001e14:	1a51      	subs	r1, r2, r1
 8001e16:	6139      	str	r1, [r7, #16]
 8001e18:	4629      	mov	r1, r5
 8001e1a:	eb63 0301 	sbc.w	r3, r3, r1
 8001e1e:	617b      	str	r3, [r7, #20]
 8001e20:	f04f 0200 	mov.w	r2, #0
 8001e24:	f04f 0300 	mov.w	r3, #0
 8001e28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001e2c:	4659      	mov	r1, fp
 8001e2e:	018b      	lsls	r3, r1, #6
 8001e30:	4651      	mov	r1, sl
 8001e32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e36:	4651      	mov	r1, sl
 8001e38:	018a      	lsls	r2, r1, #6
 8001e3a:	4651      	mov	r1, sl
 8001e3c:	ebb2 0801 	subs.w	r8, r2, r1
 8001e40:	4659      	mov	r1, fp
 8001e42:	eb63 0901 	sbc.w	r9, r3, r1
 8001e46:	f04f 0200 	mov.w	r2, #0
 8001e4a:	f04f 0300 	mov.w	r3, #0
 8001e4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e5a:	4690      	mov	r8, r2
 8001e5c:	4699      	mov	r9, r3
 8001e5e:	4623      	mov	r3, r4
 8001e60:	eb18 0303 	adds.w	r3, r8, r3
 8001e64:	60bb      	str	r3, [r7, #8]
 8001e66:	462b      	mov	r3, r5
 8001e68:	eb49 0303 	adc.w	r3, r9, r3
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	f04f 0200 	mov.w	r2, #0
 8001e72:	f04f 0300 	mov.w	r3, #0
 8001e76:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001e7a:	4629      	mov	r1, r5
 8001e7c:	024b      	lsls	r3, r1, #9
 8001e7e:	4621      	mov	r1, r4
 8001e80:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001e84:	4621      	mov	r1, r4
 8001e86:	024a      	lsls	r2, r1, #9
 8001e88:	4610      	mov	r0, r2
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e8e:	2200      	movs	r2, #0
 8001e90:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e92:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001e94:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e98:	f7fe f99a 	bl	80001d0 <__aeabi_uldivmod>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ea4:	e058      	b.n	8001f58 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ea6:	4b38      	ldr	r3, [pc, #224]	; (8001f88 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	099b      	lsrs	r3, r3, #6
 8001eac:	2200      	movs	r2, #0
 8001eae:	4618      	mov	r0, r3
 8001eb0:	4611      	mov	r1, r2
 8001eb2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001eb6:	623b      	str	r3, [r7, #32]
 8001eb8:	2300      	movs	r3, #0
 8001eba:	627b      	str	r3, [r7, #36]	; 0x24
 8001ebc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ec0:	4642      	mov	r2, r8
 8001ec2:	464b      	mov	r3, r9
 8001ec4:	f04f 0000 	mov.w	r0, #0
 8001ec8:	f04f 0100 	mov.w	r1, #0
 8001ecc:	0159      	lsls	r1, r3, #5
 8001ece:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ed2:	0150      	lsls	r0, r2, #5
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	4641      	mov	r1, r8
 8001eda:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ede:	4649      	mov	r1, r9
 8001ee0:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ee4:	f04f 0200 	mov.w	r2, #0
 8001ee8:	f04f 0300 	mov.w	r3, #0
 8001eec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ef0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ef4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ef8:	ebb2 040a 	subs.w	r4, r2, sl
 8001efc:	eb63 050b 	sbc.w	r5, r3, fp
 8001f00:	f04f 0200 	mov.w	r2, #0
 8001f04:	f04f 0300 	mov.w	r3, #0
 8001f08:	00eb      	lsls	r3, r5, #3
 8001f0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f0e:	00e2      	lsls	r2, r4, #3
 8001f10:	4614      	mov	r4, r2
 8001f12:	461d      	mov	r5, r3
 8001f14:	4643      	mov	r3, r8
 8001f16:	18e3      	adds	r3, r4, r3
 8001f18:	603b      	str	r3, [r7, #0]
 8001f1a:	464b      	mov	r3, r9
 8001f1c:	eb45 0303 	adc.w	r3, r5, r3
 8001f20:	607b      	str	r3, [r7, #4]
 8001f22:	f04f 0200 	mov.w	r2, #0
 8001f26:	f04f 0300 	mov.w	r3, #0
 8001f2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f2e:	4629      	mov	r1, r5
 8001f30:	028b      	lsls	r3, r1, #10
 8001f32:	4621      	mov	r1, r4
 8001f34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f38:	4621      	mov	r1, r4
 8001f3a:	028a      	lsls	r2, r1, #10
 8001f3c:	4610      	mov	r0, r2
 8001f3e:	4619      	mov	r1, r3
 8001f40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f42:	2200      	movs	r2, #0
 8001f44:	61bb      	str	r3, [r7, #24]
 8001f46:	61fa      	str	r2, [r7, #28]
 8001f48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f4c:	f7fe f940 	bl	80001d0 <__aeabi_uldivmod>
 8001f50:	4602      	mov	r2, r0
 8001f52:	460b      	mov	r3, r1
 8001f54:	4613      	mov	r3, r2
 8001f56:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f58:	4b0b      	ldr	r3, [pc, #44]	; (8001f88 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	0c1b      	lsrs	r3, r3, #16
 8001f5e:	f003 0303 	and.w	r3, r3, #3
 8001f62:	3301      	adds	r3, #1
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001f68:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001f6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f70:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f72:	e002      	b.n	8001f7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f74:	4b05      	ldr	r3, [pc, #20]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x204>)
 8001f76:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3750      	adds	r7, #80	; 0x50
 8001f80:	46bd      	mov	sp, r7
 8001f82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f86:	bf00      	nop
 8001f88:	40023800 	.word	0x40023800
 8001f8c:	00f42400 	.word	0x00f42400
 8001f90:	007a1200 	.word	0x007a1200

08001f94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f98:	4b03      	ldr	r3, [pc, #12]	; (8001fa8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	20000000 	.word	0x20000000

08001fac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001fb0:	f7ff fff0 	bl	8001f94 <HAL_RCC_GetHCLKFreq>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	4b05      	ldr	r3, [pc, #20]	; (8001fcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	0a9b      	lsrs	r3, r3, #10
 8001fbc:	f003 0307 	and.w	r3, r3, #7
 8001fc0:	4903      	ldr	r1, [pc, #12]	; (8001fd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fc2:	5ccb      	ldrb	r3, [r1, r3]
 8001fc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	0800672c 	.word	0x0800672c

08001fd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001fd8:	f7ff ffdc 	bl	8001f94 <HAL_RCC_GetHCLKFreq>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	4b05      	ldr	r3, [pc, #20]	; (8001ff4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	0b5b      	lsrs	r3, r3, #13
 8001fe4:	f003 0307 	and.w	r3, r3, #7
 8001fe8:	4903      	ldr	r1, [pc, #12]	; (8001ff8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fea:	5ccb      	ldrb	r3, [r1, r3]
 8001fec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	40023800 	.word	0x40023800
 8001ff8:	0800672c 	.word	0x0800672c

08001ffc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	220f      	movs	r2, #15
 800200a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800200c:	4b12      	ldr	r3, [pc, #72]	; (8002058 <HAL_RCC_GetClockConfig+0x5c>)
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f003 0203 	and.w	r2, r3, #3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002018:	4b0f      	ldr	r3, [pc, #60]	; (8002058 <HAL_RCC_GetClockConfig+0x5c>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002024:	4b0c      	ldr	r3, [pc, #48]	; (8002058 <HAL_RCC_GetClockConfig+0x5c>)
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002030:	4b09      	ldr	r3, [pc, #36]	; (8002058 <HAL_RCC_GetClockConfig+0x5c>)
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	08db      	lsrs	r3, r3, #3
 8002036:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800203e:	4b07      	ldr	r3, [pc, #28]	; (800205c <HAL_RCC_GetClockConfig+0x60>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0207 	and.w	r2, r3, #7
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	601a      	str	r2, [r3, #0]
}
 800204a:	bf00      	nop
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	40023800 	.word	0x40023800
 800205c:	40023c00 	.word	0x40023c00

08002060 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002068:	2300      	movs	r3, #0
 800206a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800206c:	2300      	movs	r3, #0
 800206e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0301 	and.w	r3, r3, #1
 8002078:	2b00      	cmp	r3, #0
 800207a:	d105      	bne.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002084:	2b00      	cmp	r3, #0
 8002086:	d035      	beq.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002088:	4b62      	ldr	r3, [pc, #392]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800208a:	2200      	movs	r2, #0
 800208c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800208e:	f7fe ffe7 	bl	8001060 <HAL_GetTick>
 8002092:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002094:	e008      	b.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002096:	f7fe ffe3 	bl	8001060 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d901      	bls.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e0b0      	b.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80020a8:	4b5b      	ldr	r3, [pc, #364]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d1f0      	bne.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	019a      	lsls	r2, r3, #6
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	071b      	lsls	r3, r3, #28
 80020c0:	4955      	ldr	r1, [pc, #340]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80020c8:	4b52      	ldr	r3, [pc, #328]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80020ca:	2201      	movs	r2, #1
 80020cc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80020ce:	f7fe ffc7 	bl	8001060 <HAL_GetTick>
 80020d2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80020d4:	e008      	b.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80020d6:	f7fe ffc3 	bl	8001060 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d901      	bls.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e090      	b.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80020e8:	4b4b      	ldr	r3, [pc, #300]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d0f0      	beq.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f000 8083 	beq.w	8002208 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002102:	2300      	movs	r3, #0
 8002104:	60fb      	str	r3, [r7, #12]
 8002106:	4b44      	ldr	r3, [pc, #272]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	4a43      	ldr	r2, [pc, #268]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800210c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002110:	6413      	str	r3, [r2, #64]	; 0x40
 8002112:	4b41      	ldr	r3, [pc, #260]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800211e:	4b3f      	ldr	r3, [pc, #252]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a3e      	ldr	r2, [pc, #248]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002124:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002128:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800212a:	f7fe ff99 	bl	8001060 <HAL_GetTick>
 800212e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002130:	e008      	b.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002132:	f7fe ff95 	bl	8001060 <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d901      	bls.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e062      	b.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002144:	4b35      	ldr	r3, [pc, #212]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800214c:	2b00      	cmp	r3, #0
 800214e:	d0f0      	beq.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002150:	4b31      	ldr	r3, [pc, #196]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002154:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002158:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d02f      	beq.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002168:	693a      	ldr	r2, [r7, #16]
 800216a:	429a      	cmp	r2, r3
 800216c:	d028      	beq.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800216e:	4b2a      	ldr	r3, [pc, #168]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002172:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002176:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002178:	4b29      	ldr	r3, [pc, #164]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800217a:	2201      	movs	r2, #1
 800217c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800217e:	4b28      	ldr	r3, [pc, #160]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002184:	4a24      	ldr	r2, [pc, #144]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800218a:	4b23      	ldr	r3, [pc, #140]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800218c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	2b01      	cmp	r3, #1
 8002194:	d114      	bne.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002196:	f7fe ff63 	bl	8001060 <HAL_GetTick>
 800219a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800219c:	e00a      	b.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800219e:	f7fe ff5f 	bl	8001060 <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d901      	bls.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e02a      	b.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021b4:	4b18      	ldr	r3, [pc, #96]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80021b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d0ee      	beq.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80021cc:	d10d      	bne.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80021ce:	4b12      	ldr	r3, [pc, #72]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80021de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021e2:	490d      	ldr	r1, [pc, #52]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80021e4:	4313      	orrs	r3, r2
 80021e6:	608b      	str	r3, [r1, #8]
 80021e8:	e005      	b.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80021ea:	4b0b      	ldr	r3, [pc, #44]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	4a0a      	ldr	r2, [pc, #40]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80021f0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80021f4:	6093      	str	r3, [r2, #8]
 80021f6:	4b08      	ldr	r3, [pc, #32]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80021f8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002202:	4905      	ldr	r1, [pc, #20]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002204:	4313      	orrs	r3, r2
 8002206:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3718      	adds	r7, #24
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	42470068 	.word	0x42470068
 8002218:	40023800 	.word	0x40023800
 800221c:	40007000 	.word	0x40007000
 8002220:	42470e40 	.word	0x42470e40

08002224 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e066      	b.n	8002308 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	7f5b      	ldrb	r3, [r3, #29]
 800223e:	b2db      	uxtb	r3, r3
 8002240:	2b00      	cmp	r3, #0
 8002242:	d105      	bne.n	8002250 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f7fe fcd4 	bl	8000bf8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2202      	movs	r2, #2
 8002254:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	22ca      	movs	r2, #202	; 0xca
 800225c:	625a      	str	r2, [r3, #36]	; 0x24
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2253      	movs	r2, #83	; 0x53
 8002264:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f000 f87a 	bl	8002360 <RTC_EnterInitMode>
 800226c:	4603      	mov	r3, r0
 800226e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002270:	7bfb      	ldrb	r3, [r7, #15]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d12c      	bne.n	80022d0 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	6812      	ldr	r2, [r2, #0]
 8002280:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002284:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002288:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	6899      	ldr	r1, [r3, #8]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685a      	ldr	r2, [r3, #4]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	691b      	ldr	r3, [r3, #16]
 8002298:	431a      	orrs	r2, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	695b      	ldr	r3, [r3, #20]
 800229e:	431a      	orrs	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	430a      	orrs	r2, r1
 80022a6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	68d2      	ldr	r2, [r2, #12]
 80022b0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	6919      	ldr	r1, [r3, #16]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	041a      	lsls	r2, r3, #16
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	430a      	orrs	r2, r1
 80022c4:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f000 f881 	bl	80023ce <RTC_ExitInitMode>
 80022cc:	4603      	mov	r3, r0
 80022ce:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80022d0:	7bfb      	ldrb	r3, [r7, #15]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d113      	bne.n	80022fe <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80022e4:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	699a      	ldr	r2, [r3, #24]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	430a      	orrs	r2, r1
 80022f6:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	22ff      	movs	r2, #255	; 0xff
 8002304:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8002306:	7bfb      	ldrb	r3, [r7, #15]
}
 8002308:	4618      	mov	r0, r3
 800230a:	3710      	adds	r7, #16
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002318:	2300      	movs	r3, #0
 800231a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	68da      	ldr	r2, [r3, #12]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800232a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800232c:	f7fe fe98 	bl	8001060 <HAL_GetTick>
 8002330:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002332:	e009      	b.n	8002348 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002334:	f7fe fe94 	bl	8001060 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002342:	d901      	bls.n	8002348 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e007      	b.n	8002358 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	f003 0320 	and.w	r3, r3, #32
 8002352:	2b00      	cmp	r3, #0
 8002354:	d0ee      	beq.n	8002334 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8002356:	2300      	movs	r3, #0
}
 8002358:	4618      	mov	r0, r3
 800235a:	3710      	adds	r7, #16
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002368:	2300      	movs	r3, #0
 800236a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800236c:	2300      	movs	r3, #0
 800236e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800237a:	2b00      	cmp	r3, #0
 800237c:	d122      	bne.n	80023c4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68da      	ldr	r2, [r3, #12]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800238c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800238e:	f7fe fe67 	bl	8001060 <HAL_GetTick>
 8002392:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002394:	e00c      	b.n	80023b0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002396:	f7fe fe63 	bl	8001060 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023a4:	d904      	bls.n	80023b0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2204      	movs	r2, #4
 80023aa:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d102      	bne.n	80023c4 <RTC_EnterInitMode+0x64>
 80023be:	7bfb      	ldrb	r3, [r7, #15]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d1e8      	bne.n	8002396 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80023c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3710      	adds	r7, #16
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b084      	sub	sp, #16
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023d6:	2300      	movs	r3, #0
 80023d8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68da      	ldr	r2, [r3, #12]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023e8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f003 0320 	and.w	r3, r3, #32
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d10a      	bne.n	800240e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f7ff ff89 	bl	8002310 <HAL_RTC_WaitForSynchro>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d004      	beq.n	800240e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2204      	movs	r2, #4
 8002408:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800240e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002410:	4618      	mov	r0, r3
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d101      	bne.n	800242a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e041      	b.n	80024ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d106      	bne.n	8002444 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 f839 	bl	80024b6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2202      	movs	r2, #2
 8002448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	3304      	adds	r3, #4
 8002454:	4619      	mov	r1, r3
 8002456:	4610      	mov	r0, r2
 8002458:	f000 f9d8 	bl	800280c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80024b6:	b480      	push	{r7}
 80024b8:	b083      	sub	sp, #12
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80024be:	bf00      	nop
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
	...

080024cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d001      	beq.n	80024e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e04e      	b.n	8002582 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2202      	movs	r2, #2
 80024e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	68da      	ldr	r2, [r3, #12]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f042 0201 	orr.w	r2, r2, #1
 80024fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a23      	ldr	r2, [pc, #140]	; (8002590 <HAL_TIM_Base_Start_IT+0xc4>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d022      	beq.n	800254c <HAL_TIM_Base_Start_IT+0x80>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800250e:	d01d      	beq.n	800254c <HAL_TIM_Base_Start_IT+0x80>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a1f      	ldr	r2, [pc, #124]	; (8002594 <HAL_TIM_Base_Start_IT+0xc8>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d018      	beq.n	800254c <HAL_TIM_Base_Start_IT+0x80>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a1e      	ldr	r2, [pc, #120]	; (8002598 <HAL_TIM_Base_Start_IT+0xcc>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d013      	beq.n	800254c <HAL_TIM_Base_Start_IT+0x80>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a1c      	ldr	r2, [pc, #112]	; (800259c <HAL_TIM_Base_Start_IT+0xd0>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d00e      	beq.n	800254c <HAL_TIM_Base_Start_IT+0x80>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a1b      	ldr	r2, [pc, #108]	; (80025a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d009      	beq.n	800254c <HAL_TIM_Base_Start_IT+0x80>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a19      	ldr	r2, [pc, #100]	; (80025a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d004      	beq.n	800254c <HAL_TIM_Base_Start_IT+0x80>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a18      	ldr	r2, [pc, #96]	; (80025a8 <HAL_TIM_Base_Start_IT+0xdc>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d111      	bne.n	8002570 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f003 0307 	and.w	r3, r3, #7
 8002556:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2b06      	cmp	r3, #6
 800255c:	d010      	beq.n	8002580 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f042 0201 	orr.w	r2, r2, #1
 800256c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800256e:	e007      	b.n	8002580 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f042 0201 	orr.w	r2, r2, #1
 800257e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3714      	adds	r7, #20
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	40010000 	.word	0x40010000
 8002594:	40000400 	.word	0x40000400
 8002598:	40000800 	.word	0x40000800
 800259c:	40000c00 	.word	0x40000c00
 80025a0:	40010400 	.word	0x40010400
 80025a4:	40014000 	.word	0x40014000
 80025a8:	40001800 	.word	0x40001800

080025ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d122      	bne.n	8002608 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d11b      	bne.n	8002608 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f06f 0202 	mvn.w	r2, #2
 80025d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2201      	movs	r2, #1
 80025de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	f003 0303 	and.w	r3, r3, #3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d003      	beq.n	80025f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 f8ee 	bl	80027d0 <HAL_TIM_IC_CaptureCallback>
 80025f4:	e005      	b.n	8002602 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f000 f8e0 	bl	80027bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f000 f8f1 	bl	80027e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	f003 0304 	and.w	r3, r3, #4
 8002612:	2b04      	cmp	r3, #4
 8002614:	d122      	bne.n	800265c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	f003 0304 	and.w	r3, r3, #4
 8002620:	2b04      	cmp	r3, #4
 8002622:	d11b      	bne.n	800265c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f06f 0204 	mvn.w	r2, #4
 800262c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2202      	movs	r2, #2
 8002632:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800263e:	2b00      	cmp	r3, #0
 8002640:	d003      	beq.n	800264a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 f8c4 	bl	80027d0 <HAL_TIM_IC_CaptureCallback>
 8002648:	e005      	b.n	8002656 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f000 f8b6 	bl	80027bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f000 f8c7 	bl	80027e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	f003 0308 	and.w	r3, r3, #8
 8002666:	2b08      	cmp	r3, #8
 8002668:	d122      	bne.n	80026b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	f003 0308 	and.w	r3, r3, #8
 8002674:	2b08      	cmp	r3, #8
 8002676:	d11b      	bne.n	80026b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f06f 0208 	mvn.w	r2, #8
 8002680:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2204      	movs	r2, #4
 8002686:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	69db      	ldr	r3, [r3, #28]
 800268e:	f003 0303 	and.w	r3, r3, #3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 f89a 	bl	80027d0 <HAL_TIM_IC_CaptureCallback>
 800269c:	e005      	b.n	80026aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 f88c 	bl	80027bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f000 f89d 	bl	80027e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	f003 0310 	and.w	r3, r3, #16
 80026ba:	2b10      	cmp	r3, #16
 80026bc:	d122      	bne.n	8002704 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	f003 0310 	and.w	r3, r3, #16
 80026c8:	2b10      	cmp	r3, #16
 80026ca:	d11b      	bne.n	8002704 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f06f 0210 	mvn.w	r2, #16
 80026d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2208      	movs	r2, #8
 80026da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d003      	beq.n	80026f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f000 f870 	bl	80027d0 <HAL_TIM_IC_CaptureCallback>
 80026f0:	e005      	b.n	80026fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 f862 	bl	80027bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f000 f873 	bl	80027e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	2b01      	cmp	r3, #1
 8002710:	d10e      	bne.n	8002730 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	f003 0301 	and.w	r3, r3, #1
 800271c:	2b01      	cmp	r3, #1
 800271e:	d107      	bne.n	8002730 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f06f 0201 	mvn.w	r2, #1
 8002728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f7fe fa24 	bl	8000b78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800273a:	2b80      	cmp	r3, #128	; 0x80
 800273c:	d10e      	bne.n	800275c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002748:	2b80      	cmp	r3, #128	; 0x80
 800274a:	d107      	bne.n	800275c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002754:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f000 f902 	bl	8002960 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002766:	2b40      	cmp	r3, #64	; 0x40
 8002768:	d10e      	bne.n	8002788 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002774:	2b40      	cmp	r3, #64	; 0x40
 8002776:	d107      	bne.n	8002788 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 f838 	bl	80027f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	f003 0320 	and.w	r3, r3, #32
 8002792:	2b20      	cmp	r3, #32
 8002794:	d10e      	bne.n	80027b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	f003 0320 	and.w	r3, r3, #32
 80027a0:	2b20      	cmp	r3, #32
 80027a2:	d107      	bne.n	80027b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f06f 0220 	mvn.w	r2, #32
 80027ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 f8cc 	bl	800294c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027b4:	bf00      	nop
 80027b6:	3708      	adds	r7, #8
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027c4:	bf00      	nop
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	4a40      	ldr	r2, [pc, #256]	; (8002920 <TIM_Base_SetConfig+0x114>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d013      	beq.n	800284c <TIM_Base_SetConfig+0x40>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800282a:	d00f      	beq.n	800284c <TIM_Base_SetConfig+0x40>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	4a3d      	ldr	r2, [pc, #244]	; (8002924 <TIM_Base_SetConfig+0x118>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d00b      	beq.n	800284c <TIM_Base_SetConfig+0x40>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a3c      	ldr	r2, [pc, #240]	; (8002928 <TIM_Base_SetConfig+0x11c>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d007      	beq.n	800284c <TIM_Base_SetConfig+0x40>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4a3b      	ldr	r2, [pc, #236]	; (800292c <TIM_Base_SetConfig+0x120>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d003      	beq.n	800284c <TIM_Base_SetConfig+0x40>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4a3a      	ldr	r2, [pc, #232]	; (8002930 <TIM_Base_SetConfig+0x124>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d108      	bne.n	800285e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002852:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	4313      	orrs	r3, r2
 800285c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a2f      	ldr	r2, [pc, #188]	; (8002920 <TIM_Base_SetConfig+0x114>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d02b      	beq.n	80028be <TIM_Base_SetConfig+0xb2>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800286c:	d027      	beq.n	80028be <TIM_Base_SetConfig+0xb2>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a2c      	ldr	r2, [pc, #176]	; (8002924 <TIM_Base_SetConfig+0x118>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d023      	beq.n	80028be <TIM_Base_SetConfig+0xb2>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a2b      	ldr	r2, [pc, #172]	; (8002928 <TIM_Base_SetConfig+0x11c>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d01f      	beq.n	80028be <TIM_Base_SetConfig+0xb2>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a2a      	ldr	r2, [pc, #168]	; (800292c <TIM_Base_SetConfig+0x120>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d01b      	beq.n	80028be <TIM_Base_SetConfig+0xb2>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a29      	ldr	r2, [pc, #164]	; (8002930 <TIM_Base_SetConfig+0x124>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d017      	beq.n	80028be <TIM_Base_SetConfig+0xb2>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a28      	ldr	r2, [pc, #160]	; (8002934 <TIM_Base_SetConfig+0x128>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d013      	beq.n	80028be <TIM_Base_SetConfig+0xb2>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a27      	ldr	r2, [pc, #156]	; (8002938 <TIM_Base_SetConfig+0x12c>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d00f      	beq.n	80028be <TIM_Base_SetConfig+0xb2>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a26      	ldr	r2, [pc, #152]	; (800293c <TIM_Base_SetConfig+0x130>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d00b      	beq.n	80028be <TIM_Base_SetConfig+0xb2>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a25      	ldr	r2, [pc, #148]	; (8002940 <TIM_Base_SetConfig+0x134>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d007      	beq.n	80028be <TIM_Base_SetConfig+0xb2>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a24      	ldr	r2, [pc, #144]	; (8002944 <TIM_Base_SetConfig+0x138>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d003      	beq.n	80028be <TIM_Base_SetConfig+0xb2>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a23      	ldr	r2, [pc, #140]	; (8002948 <TIM_Base_SetConfig+0x13c>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d108      	bne.n	80028d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	4313      	orrs	r3, r2
 80028dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	689a      	ldr	r2, [r3, #8]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4a0a      	ldr	r2, [pc, #40]	; (8002920 <TIM_Base_SetConfig+0x114>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d003      	beq.n	8002904 <TIM_Base_SetConfig+0xf8>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	4a0c      	ldr	r2, [pc, #48]	; (8002930 <TIM_Base_SetConfig+0x124>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d103      	bne.n	800290c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	691a      	ldr	r2, [r3, #16]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	615a      	str	r2, [r3, #20]
}
 8002912:	bf00      	nop
 8002914:	3714      	adds	r7, #20
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	40010000 	.word	0x40010000
 8002924:	40000400 	.word	0x40000400
 8002928:	40000800 	.word	0x40000800
 800292c:	40000c00 	.word	0x40000c00
 8002930:	40010400 	.word	0x40010400
 8002934:	40014000 	.word	0x40014000
 8002938:	40014400 	.word	0x40014400
 800293c:	40014800 	.word	0x40014800
 8002940:	40001800 	.word	0x40001800
 8002944:	40001c00 	.word	0x40001c00
 8002948:	40002000 	.word	0x40002000

0800294c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002954:	bf00      	nop
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e03f      	b.n	8002a06 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b00      	cmp	r3, #0
 8002990:	d106      	bne.n	80029a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f7fe f956 	bl	8000c4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2224      	movs	r2, #36	; 0x24
 80029a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68da      	ldr	r2, [r3, #12]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f000 fcdf 	bl	800337c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	691a      	ldr	r2, [r3, #16]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	695a      	ldr	r2, [r3, #20]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68da      	ldr	r2, [r3, #12]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2220      	movs	r2, #32
 80029f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2220      	movs	r2, #32
 8002a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b084      	sub	sp, #16
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	60f8      	str	r0, [r7, #12]
 8002a16:	60b9      	str	r1, [r7, #8]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	2b20      	cmp	r3, #32
 8002a26:	d11d      	bne.n	8002a64 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d002      	beq.n	8002a34 <HAL_UART_Receive_IT+0x26>
 8002a2e:	88fb      	ldrh	r3, [r7, #6]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d101      	bne.n	8002a38 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e016      	b.n	8002a66 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d101      	bne.n	8002a46 <HAL_UART_Receive_IT+0x38>
 8002a42:	2302      	movs	r3, #2
 8002a44:	e00f      	b.n	8002a66 <HAL_UART_Receive_IT+0x58>
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2200      	movs	r2, #0
 8002a52:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002a54:	88fb      	ldrh	r3, [r7, #6]
 8002a56:	461a      	mov	r2, r3
 8002a58:	68b9      	ldr	r1, [r7, #8]
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f000 fab6 	bl	8002fcc <UART_Start_Receive_IT>
 8002a60:	4603      	mov	r3, r0
 8002a62:	e000      	b.n	8002a66 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002a64:	2302      	movs	r3, #2
  }
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
	...

08002a70 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b0ba      	sub	sp, #232	; 0xe8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002a96:	2300      	movs	r3, #0
 8002a98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002aa6:	f003 030f 	and.w	r3, r3, #15
 8002aaa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002aae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d10f      	bne.n	8002ad6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002aba:	f003 0320 	and.w	r3, r3, #32
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d009      	beq.n	8002ad6 <HAL_UART_IRQHandler+0x66>
 8002ac2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ac6:	f003 0320 	and.w	r3, r3, #32
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d003      	beq.n	8002ad6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 fb99 	bl	8003206 <UART_Receive_IT>
      return;
 8002ad4:	e256      	b.n	8002f84 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002ad6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	f000 80de 	beq.w	8002c9c <HAL_UART_IRQHandler+0x22c>
 8002ae0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ae4:	f003 0301 	and.w	r3, r3, #1
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d106      	bne.n	8002afa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002aec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002af0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f000 80d1 	beq.w	8002c9c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00b      	beq.n	8002b1e <HAL_UART_IRQHandler+0xae>
 8002b06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d005      	beq.n	8002b1e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	f043 0201 	orr.w	r2, r3, #1
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b22:	f003 0304 	and.w	r3, r3, #4
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00b      	beq.n	8002b42 <HAL_UART_IRQHandler+0xd2>
 8002b2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d005      	beq.n	8002b42 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	f043 0202 	orr.w	r2, r3, #2
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00b      	beq.n	8002b66 <HAL_UART_IRQHandler+0xf6>
 8002b4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d005      	beq.n	8002b66 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	f043 0204 	orr.w	r2, r3, #4
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002b66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b6a:	f003 0308 	and.w	r3, r3, #8
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d011      	beq.n	8002b96 <HAL_UART_IRQHandler+0x126>
 8002b72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b76:	f003 0320 	and.w	r3, r3, #32
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d105      	bne.n	8002b8a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002b7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d005      	beq.n	8002b96 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	f043 0208 	orr.w	r2, r3, #8
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	f000 81ed 	beq.w	8002f7a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ba0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ba4:	f003 0320 	and.w	r3, r3, #32
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d008      	beq.n	8002bbe <HAL_UART_IRQHandler+0x14e>
 8002bac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bb0:	f003 0320 	and.w	r3, r3, #32
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d002      	beq.n	8002bbe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f000 fb24 	bl	8003206 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	695b      	ldr	r3, [r3, #20]
 8002bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bc8:	2b40      	cmp	r3, #64	; 0x40
 8002bca:	bf0c      	ite	eq
 8002bcc:	2301      	moveq	r3, #1
 8002bce:	2300      	movne	r3, #0
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bda:	f003 0308 	and.w	r3, r3, #8
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d103      	bne.n	8002bea <HAL_UART_IRQHandler+0x17a>
 8002be2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d04f      	beq.n	8002c8a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 fa2c 	bl	8003048 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bfa:	2b40      	cmp	r3, #64	; 0x40
 8002bfc:	d141      	bne.n	8002c82 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	3314      	adds	r3, #20
 8002c04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c0c:	e853 3f00 	ldrex	r3, [r3]
 8002c10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002c14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	3314      	adds	r3, #20
 8002c26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002c2a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002c2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002c36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002c3a:	e841 2300 	strex	r3, r2, [r1]
 8002c3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002c42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d1d9      	bne.n	8002bfe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d013      	beq.n	8002c7a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c56:	4a7d      	ldr	r2, [pc, #500]	; (8002e4c <HAL_UART_IRQHandler+0x3dc>)
 8002c58:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7fe fb5c 	bl	800131c <HAL_DMA_Abort_IT>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d016      	beq.n	8002c98 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c74:	4610      	mov	r0, r2
 8002c76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c78:	e00e      	b.n	8002c98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 f990 	bl	8002fa0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c80:	e00a      	b.n	8002c98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 f98c 	bl	8002fa0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c88:	e006      	b.n	8002c98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 f988 	bl	8002fa0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002c96:	e170      	b.n	8002f7a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c98:	bf00      	nop
    return;
 8002c9a:	e16e      	b.n	8002f7a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	f040 814a 	bne.w	8002f3a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002caa:	f003 0310 	and.w	r3, r3, #16
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	f000 8143 	beq.w	8002f3a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002cb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cb8:	f003 0310 	and.w	r3, r3, #16
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f000 813c 	beq.w	8002f3a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	60bb      	str	r3, [r7, #8]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	60bb      	str	r3, [r7, #8]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	60bb      	str	r3, [r7, #8]
 8002cd6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ce2:	2b40      	cmp	r3, #64	; 0x40
 8002ce4:	f040 80b4 	bne.w	8002e50 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002cf4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f000 8140 	beq.w	8002f7e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d06:	429a      	cmp	r2, r3
 8002d08:	f080 8139 	bcs.w	8002f7e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d12:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d18:	69db      	ldr	r3, [r3, #28]
 8002d1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d1e:	f000 8088 	beq.w	8002e32 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	330c      	adds	r3, #12
 8002d28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d30:	e853 3f00 	ldrex	r3, [r3]
 8002d34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002d38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	330c      	adds	r3, #12
 8002d4a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002d4e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002d52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d56:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002d5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002d5e:	e841 2300 	strex	r3, r2, [r1]
 8002d62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002d66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1d9      	bne.n	8002d22 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	3314      	adds	r3, #20
 8002d74:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d78:	e853 3f00 	ldrex	r3, [r3]
 8002d7c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002d7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d80:	f023 0301 	bic.w	r3, r3, #1
 8002d84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	3314      	adds	r3, #20
 8002d8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002d92:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002d96:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d98:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002d9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002d9e:	e841 2300 	strex	r3, r2, [r1]
 8002da2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002da4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1e1      	bne.n	8002d6e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	3314      	adds	r3, #20
 8002db0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002db2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002db4:	e853 3f00 	ldrex	r3, [r3]
 8002db8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002dba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dc0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	3314      	adds	r3, #20
 8002dca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002dce:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002dd0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dd2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002dd4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002dd6:	e841 2300 	strex	r3, r2, [r1]
 8002dda:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002ddc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1e3      	bne.n	8002daa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2220      	movs	r2, #32
 8002de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	330c      	adds	r3, #12
 8002df6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002df8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dfa:	e853 3f00 	ldrex	r3, [r3]
 8002dfe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002e00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e02:	f023 0310 	bic.w	r3, r3, #16
 8002e06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	330c      	adds	r3, #12
 8002e10:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002e14:	65ba      	str	r2, [r7, #88]	; 0x58
 8002e16:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e18:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002e1a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e1c:	e841 2300 	strex	r3, r2, [r1]
 8002e20:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002e22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d1e3      	bne.n	8002df0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7fe fa05 	bl	800123c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	4619      	mov	r1, r3
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 f8b6 	bl	8002fb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e48:	e099      	b.n	8002f7e <HAL_UART_IRQHandler+0x50e>
 8002e4a:	bf00      	nop
 8002e4c:	0800310f 	.word	0x0800310f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	f000 808b 	beq.w	8002f82 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002e6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	f000 8086 	beq.w	8002f82 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	330c      	adds	r3, #12
 8002e7c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e80:	e853 3f00 	ldrex	r3, [r3]
 8002e84:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002e8c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	330c      	adds	r3, #12
 8002e96:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002e9a:	647a      	str	r2, [r7, #68]	; 0x44
 8002e9c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e9e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002ea0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ea2:	e841 2300 	strex	r3, r2, [r1]
 8002ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002ea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1e3      	bne.n	8002e76 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	3314      	adds	r3, #20
 8002eb4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb8:	e853 3f00 	ldrex	r3, [r3]
 8002ebc:	623b      	str	r3, [r7, #32]
   return(result);
 8002ebe:	6a3b      	ldr	r3, [r7, #32]
 8002ec0:	f023 0301 	bic.w	r3, r3, #1
 8002ec4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	3314      	adds	r3, #20
 8002ece:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002ed2:	633a      	str	r2, [r7, #48]	; 0x30
 8002ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ed6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ed8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002eda:	e841 2300 	strex	r3, r2, [r1]
 8002ede:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1e3      	bne.n	8002eae <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2220      	movs	r2, #32
 8002eea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	330c      	adds	r3, #12
 8002efa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	e853 3f00 	ldrex	r3, [r3]
 8002f02:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f023 0310 	bic.w	r3, r3, #16
 8002f0a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	330c      	adds	r3, #12
 8002f14:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002f18:	61fa      	str	r2, [r7, #28]
 8002f1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f1c:	69b9      	ldr	r1, [r7, #24]
 8002f1e:	69fa      	ldr	r2, [r7, #28]
 8002f20:	e841 2300 	strex	r3, r2, [r1]
 8002f24:	617b      	str	r3, [r7, #20]
   return(result);
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1e3      	bne.n	8002ef4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002f30:	4619      	mov	r1, r3
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 f83e 	bl	8002fb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002f38:	e023      	b.n	8002f82 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d009      	beq.n	8002f5a <HAL_UART_IRQHandler+0x4ea>
 8002f46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d003      	beq.n	8002f5a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 f8ef 	bl	8003136 <UART_Transmit_IT>
    return;
 8002f58:	e014      	b.n	8002f84 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002f5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00e      	beq.n	8002f84 <HAL_UART_IRQHandler+0x514>
 8002f66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d008      	beq.n	8002f84 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 f92f 	bl	80031d6 <UART_EndTransmit_IT>
    return;
 8002f78:	e004      	b.n	8002f84 <HAL_UART_IRQHandler+0x514>
    return;
 8002f7a:	bf00      	nop
 8002f7c:	e002      	b.n	8002f84 <HAL_UART_IRQHandler+0x514>
      return;
 8002f7e:	bf00      	nop
 8002f80:	e000      	b.n	8002f84 <HAL_UART_IRQHandler+0x514>
      return;
 8002f82:	bf00      	nop
  }
}
 8002f84:	37e8      	adds	r7, #232	; 0xe8
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop

08002f8c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002f94:	bf00      	nop
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002fa8:	bf00      	nop
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b085      	sub	sp, #20
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	68ba      	ldr	r2, [r7, #8]
 8002fde:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	88fa      	ldrh	r2, [r7, #6]
 8002fe4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	88fa      	ldrh	r2, [r7, #6]
 8002fea:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2222      	movs	r2, #34	; 0x22
 8002ff6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d007      	beq.n	800301a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68da      	ldr	r2, [r3, #12]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003018:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	695a      	ldr	r2, [r3, #20]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f042 0201 	orr.w	r2, r2, #1
 8003028:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68da      	ldr	r2, [r3, #12]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f042 0220 	orr.w	r2, r2, #32
 8003038:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800303a:	2300      	movs	r3, #0
}
 800303c:	4618      	mov	r0, r3
 800303e:	3714      	adds	r7, #20
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003048:	b480      	push	{r7}
 800304a:	b095      	sub	sp, #84	; 0x54
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	330c      	adds	r3, #12
 8003056:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800305a:	e853 3f00 	ldrex	r3, [r3]
 800305e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003062:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003066:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	330c      	adds	r3, #12
 800306e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003070:	643a      	str	r2, [r7, #64]	; 0x40
 8003072:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003074:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003076:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003078:	e841 2300 	strex	r3, r2, [r1]
 800307c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800307e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003080:	2b00      	cmp	r3, #0
 8003082:	d1e5      	bne.n	8003050 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	3314      	adds	r3, #20
 800308a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800308c:	6a3b      	ldr	r3, [r7, #32]
 800308e:	e853 3f00 	ldrex	r3, [r3]
 8003092:	61fb      	str	r3, [r7, #28]
   return(result);
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	f023 0301 	bic.w	r3, r3, #1
 800309a:	64bb      	str	r3, [r7, #72]	; 0x48
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	3314      	adds	r3, #20
 80030a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80030a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030ac:	e841 2300 	strex	r3, r2, [r1]
 80030b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80030b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1e5      	bne.n	8003084 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d119      	bne.n	80030f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	330c      	adds	r3, #12
 80030c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	e853 3f00 	ldrex	r3, [r3]
 80030ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	f023 0310 	bic.w	r3, r3, #16
 80030d6:	647b      	str	r3, [r7, #68]	; 0x44
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	330c      	adds	r3, #12
 80030de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80030e0:	61ba      	str	r2, [r7, #24]
 80030e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030e4:	6979      	ldr	r1, [r7, #20]
 80030e6:	69ba      	ldr	r2, [r7, #24]
 80030e8:	e841 2300 	strex	r3, r2, [r1]
 80030ec:	613b      	str	r3, [r7, #16]
   return(result);
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d1e5      	bne.n	80030c0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2220      	movs	r2, #32
 80030f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003102:	bf00      	nop
 8003104:	3754      	adds	r7, #84	; 0x54
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr

0800310e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800310e:	b580      	push	{r7, lr}
 8003110:	b084      	sub	sp, #16
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800311a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2200      	movs	r2, #0
 8003120:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2200      	movs	r2, #0
 8003126:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003128:	68f8      	ldr	r0, [r7, #12]
 800312a:	f7ff ff39 	bl	8002fa0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800312e:	bf00      	nop
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003136:	b480      	push	{r7}
 8003138:	b085      	sub	sp, #20
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003144:	b2db      	uxtb	r3, r3
 8003146:	2b21      	cmp	r3, #33	; 0x21
 8003148:	d13e      	bne.n	80031c8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003152:	d114      	bne.n	800317e <UART_Transmit_IT+0x48>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d110      	bne.n	800317e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a1b      	ldr	r3, [r3, #32]
 8003160:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	881b      	ldrh	r3, [r3, #0]
 8003166:	461a      	mov	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003170:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a1b      	ldr	r3, [r3, #32]
 8003176:	1c9a      	adds	r2, r3, #2
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	621a      	str	r2, [r3, #32]
 800317c:	e008      	b.n	8003190 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a1b      	ldr	r3, [r3, #32]
 8003182:	1c59      	adds	r1, r3, #1
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	6211      	str	r1, [r2, #32]
 8003188:	781a      	ldrb	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003194:	b29b      	uxth	r3, r3
 8003196:	3b01      	subs	r3, #1
 8003198:	b29b      	uxth	r3, r3
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	4619      	mov	r1, r3
 800319e:	84d1      	strh	r1, [r2, #38]	; 0x26
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d10f      	bne.n	80031c4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68da      	ldr	r2, [r3, #12]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031b2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68da      	ldr	r2, [r3, #12]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031c2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80031c4:	2300      	movs	r3, #0
 80031c6:	e000      	b.n	80031ca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80031c8:	2302      	movs	r3, #2
  }
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3714      	adds	r7, #20
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr

080031d6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b082      	sub	sp, #8
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	68da      	ldr	r2, [r3, #12]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031ec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2220      	movs	r2, #32
 80031f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f7ff fec8 	bl	8002f8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3708      	adds	r7, #8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003206:	b580      	push	{r7, lr}
 8003208:	b08c      	sub	sp, #48	; 0x30
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b22      	cmp	r3, #34	; 0x22
 8003218:	f040 80ab 	bne.w	8003372 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003224:	d117      	bne.n	8003256 <UART_Receive_IT+0x50>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d113      	bne.n	8003256 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800322e:	2300      	movs	r3, #0
 8003230:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003236:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	b29b      	uxth	r3, r3
 8003240:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003244:	b29a      	uxth	r2, r3
 8003246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003248:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324e:	1c9a      	adds	r2, r3, #2
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	629a      	str	r2, [r3, #40]	; 0x28
 8003254:	e026      	b.n	80032a4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800325a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800325c:	2300      	movs	r3, #0
 800325e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003268:	d007      	beq.n	800327a <UART_Receive_IT+0x74>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d10a      	bne.n	8003288 <UART_Receive_IT+0x82>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d106      	bne.n	8003288 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	b2da      	uxtb	r2, r3
 8003282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003284:	701a      	strb	r2, [r3, #0]
 8003286:	e008      	b.n	800329a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	b2db      	uxtb	r3, r3
 8003290:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003294:	b2da      	uxtb	r2, r3
 8003296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003298:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800329e:	1c5a      	adds	r2, r3, #1
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	3b01      	subs	r3, #1
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	4619      	mov	r1, r3
 80032b2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d15a      	bne.n	800336e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68da      	ldr	r2, [r3, #12]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f022 0220 	bic.w	r2, r2, #32
 80032c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68da      	ldr	r2, [r3, #12]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	695a      	ldr	r2, [r3, #20]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f022 0201 	bic.w	r2, r2, #1
 80032e6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2220      	movs	r2, #32
 80032ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d135      	bne.n	8003364 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	330c      	adds	r3, #12
 8003304:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	e853 3f00 	ldrex	r3, [r3]
 800330c:	613b      	str	r3, [r7, #16]
   return(result);
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	f023 0310 	bic.w	r3, r3, #16
 8003314:	627b      	str	r3, [r7, #36]	; 0x24
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	330c      	adds	r3, #12
 800331c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800331e:	623a      	str	r2, [r7, #32]
 8003320:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003322:	69f9      	ldr	r1, [r7, #28]
 8003324:	6a3a      	ldr	r2, [r7, #32]
 8003326:	e841 2300 	strex	r3, r2, [r1]
 800332a:	61bb      	str	r3, [r7, #24]
   return(result);
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1e5      	bne.n	80032fe <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0310 	and.w	r3, r3, #16
 800333c:	2b10      	cmp	r3, #16
 800333e:	d10a      	bne.n	8003356 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003340:	2300      	movs	r3, #0
 8003342:	60fb      	str	r3, [r7, #12]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	60fb      	str	r3, [r7, #12]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	60fb      	str	r3, [r7, #12]
 8003354:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800335a:	4619      	mov	r1, r3
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f7ff fe29 	bl	8002fb4 <HAL_UARTEx_RxEventCallback>
 8003362:	e002      	b.n	800336a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f7fd fbbd 	bl	8000ae4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800336a:	2300      	movs	r3, #0
 800336c:	e002      	b.n	8003374 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800336e:	2300      	movs	r3, #0
 8003370:	e000      	b.n	8003374 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003372:	2302      	movs	r3, #2
  }
}
 8003374:	4618      	mov	r0, r3
 8003376:	3730      	adds	r7, #48	; 0x30
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800337c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003380:	b0c0      	sub	sp, #256	; 0x100
 8003382:	af00      	add	r7, sp, #0
 8003384:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003398:	68d9      	ldr	r1, [r3, #12]
 800339a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	ea40 0301 	orr.w	r3, r0, r1
 80033a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80033a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033aa:	689a      	ldr	r2, [r3, #8]
 80033ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	431a      	orrs	r2, r3
 80033b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	431a      	orrs	r2, r3
 80033bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033c0:	69db      	ldr	r3, [r3, #28]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80033c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80033d4:	f021 010c 	bic.w	r1, r1, #12
 80033d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80033e2:	430b      	orrs	r3, r1
 80033e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80033f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033f6:	6999      	ldr	r1, [r3, #24]
 80033f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	ea40 0301 	orr.w	r3, r0, r1
 8003402:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	4b8f      	ldr	r3, [pc, #572]	; (8003648 <UART_SetConfig+0x2cc>)
 800340c:	429a      	cmp	r2, r3
 800340e:	d005      	beq.n	800341c <UART_SetConfig+0xa0>
 8003410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	4b8d      	ldr	r3, [pc, #564]	; (800364c <UART_SetConfig+0x2d0>)
 8003418:	429a      	cmp	r2, r3
 800341a:	d104      	bne.n	8003426 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800341c:	f7fe fdda 	bl	8001fd4 <HAL_RCC_GetPCLK2Freq>
 8003420:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003424:	e003      	b.n	800342e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003426:	f7fe fdc1 	bl	8001fac <HAL_RCC_GetPCLK1Freq>
 800342a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800342e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003432:	69db      	ldr	r3, [r3, #28]
 8003434:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003438:	f040 810c 	bne.w	8003654 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800343c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003440:	2200      	movs	r2, #0
 8003442:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003446:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800344a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800344e:	4622      	mov	r2, r4
 8003450:	462b      	mov	r3, r5
 8003452:	1891      	adds	r1, r2, r2
 8003454:	65b9      	str	r1, [r7, #88]	; 0x58
 8003456:	415b      	adcs	r3, r3
 8003458:	65fb      	str	r3, [r7, #92]	; 0x5c
 800345a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800345e:	4621      	mov	r1, r4
 8003460:	eb12 0801 	adds.w	r8, r2, r1
 8003464:	4629      	mov	r1, r5
 8003466:	eb43 0901 	adc.w	r9, r3, r1
 800346a:	f04f 0200 	mov.w	r2, #0
 800346e:	f04f 0300 	mov.w	r3, #0
 8003472:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003476:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800347a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800347e:	4690      	mov	r8, r2
 8003480:	4699      	mov	r9, r3
 8003482:	4623      	mov	r3, r4
 8003484:	eb18 0303 	adds.w	r3, r8, r3
 8003488:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800348c:	462b      	mov	r3, r5
 800348e:	eb49 0303 	adc.w	r3, r9, r3
 8003492:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80034a2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80034a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80034aa:	460b      	mov	r3, r1
 80034ac:	18db      	adds	r3, r3, r3
 80034ae:	653b      	str	r3, [r7, #80]	; 0x50
 80034b0:	4613      	mov	r3, r2
 80034b2:	eb42 0303 	adc.w	r3, r2, r3
 80034b6:	657b      	str	r3, [r7, #84]	; 0x54
 80034b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80034bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80034c0:	f7fc fe86 	bl	80001d0 <__aeabi_uldivmod>
 80034c4:	4602      	mov	r2, r0
 80034c6:	460b      	mov	r3, r1
 80034c8:	4b61      	ldr	r3, [pc, #388]	; (8003650 <UART_SetConfig+0x2d4>)
 80034ca:	fba3 2302 	umull	r2, r3, r3, r2
 80034ce:	095b      	lsrs	r3, r3, #5
 80034d0:	011c      	lsls	r4, r3, #4
 80034d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034d6:	2200      	movs	r2, #0
 80034d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80034dc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80034e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80034e4:	4642      	mov	r2, r8
 80034e6:	464b      	mov	r3, r9
 80034e8:	1891      	adds	r1, r2, r2
 80034ea:	64b9      	str	r1, [r7, #72]	; 0x48
 80034ec:	415b      	adcs	r3, r3
 80034ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80034f4:	4641      	mov	r1, r8
 80034f6:	eb12 0a01 	adds.w	sl, r2, r1
 80034fa:	4649      	mov	r1, r9
 80034fc:	eb43 0b01 	adc.w	fp, r3, r1
 8003500:	f04f 0200 	mov.w	r2, #0
 8003504:	f04f 0300 	mov.w	r3, #0
 8003508:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800350c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003510:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003514:	4692      	mov	sl, r2
 8003516:	469b      	mov	fp, r3
 8003518:	4643      	mov	r3, r8
 800351a:	eb1a 0303 	adds.w	r3, sl, r3
 800351e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003522:	464b      	mov	r3, r9
 8003524:	eb4b 0303 	adc.w	r3, fp, r3
 8003528:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800352c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003538:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800353c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003540:	460b      	mov	r3, r1
 8003542:	18db      	adds	r3, r3, r3
 8003544:	643b      	str	r3, [r7, #64]	; 0x40
 8003546:	4613      	mov	r3, r2
 8003548:	eb42 0303 	adc.w	r3, r2, r3
 800354c:	647b      	str	r3, [r7, #68]	; 0x44
 800354e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003552:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003556:	f7fc fe3b 	bl	80001d0 <__aeabi_uldivmod>
 800355a:	4602      	mov	r2, r0
 800355c:	460b      	mov	r3, r1
 800355e:	4611      	mov	r1, r2
 8003560:	4b3b      	ldr	r3, [pc, #236]	; (8003650 <UART_SetConfig+0x2d4>)
 8003562:	fba3 2301 	umull	r2, r3, r3, r1
 8003566:	095b      	lsrs	r3, r3, #5
 8003568:	2264      	movs	r2, #100	; 0x64
 800356a:	fb02 f303 	mul.w	r3, r2, r3
 800356e:	1acb      	subs	r3, r1, r3
 8003570:	00db      	lsls	r3, r3, #3
 8003572:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003576:	4b36      	ldr	r3, [pc, #216]	; (8003650 <UART_SetConfig+0x2d4>)
 8003578:	fba3 2302 	umull	r2, r3, r3, r2
 800357c:	095b      	lsrs	r3, r3, #5
 800357e:	005b      	lsls	r3, r3, #1
 8003580:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003584:	441c      	add	r4, r3
 8003586:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800358a:	2200      	movs	r2, #0
 800358c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003590:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003594:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003598:	4642      	mov	r2, r8
 800359a:	464b      	mov	r3, r9
 800359c:	1891      	adds	r1, r2, r2
 800359e:	63b9      	str	r1, [r7, #56]	; 0x38
 80035a0:	415b      	adcs	r3, r3
 80035a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80035a8:	4641      	mov	r1, r8
 80035aa:	1851      	adds	r1, r2, r1
 80035ac:	6339      	str	r1, [r7, #48]	; 0x30
 80035ae:	4649      	mov	r1, r9
 80035b0:	414b      	adcs	r3, r1
 80035b2:	637b      	str	r3, [r7, #52]	; 0x34
 80035b4:	f04f 0200 	mov.w	r2, #0
 80035b8:	f04f 0300 	mov.w	r3, #0
 80035bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80035c0:	4659      	mov	r1, fp
 80035c2:	00cb      	lsls	r3, r1, #3
 80035c4:	4651      	mov	r1, sl
 80035c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035ca:	4651      	mov	r1, sl
 80035cc:	00ca      	lsls	r2, r1, #3
 80035ce:	4610      	mov	r0, r2
 80035d0:	4619      	mov	r1, r3
 80035d2:	4603      	mov	r3, r0
 80035d4:	4642      	mov	r2, r8
 80035d6:	189b      	adds	r3, r3, r2
 80035d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80035dc:	464b      	mov	r3, r9
 80035de:	460a      	mov	r2, r1
 80035e0:	eb42 0303 	adc.w	r3, r2, r3
 80035e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80035e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80035f4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80035f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80035fc:	460b      	mov	r3, r1
 80035fe:	18db      	adds	r3, r3, r3
 8003600:	62bb      	str	r3, [r7, #40]	; 0x28
 8003602:	4613      	mov	r3, r2
 8003604:	eb42 0303 	adc.w	r3, r2, r3
 8003608:	62fb      	str	r3, [r7, #44]	; 0x2c
 800360a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800360e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003612:	f7fc fddd 	bl	80001d0 <__aeabi_uldivmod>
 8003616:	4602      	mov	r2, r0
 8003618:	460b      	mov	r3, r1
 800361a:	4b0d      	ldr	r3, [pc, #52]	; (8003650 <UART_SetConfig+0x2d4>)
 800361c:	fba3 1302 	umull	r1, r3, r3, r2
 8003620:	095b      	lsrs	r3, r3, #5
 8003622:	2164      	movs	r1, #100	; 0x64
 8003624:	fb01 f303 	mul.w	r3, r1, r3
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	00db      	lsls	r3, r3, #3
 800362c:	3332      	adds	r3, #50	; 0x32
 800362e:	4a08      	ldr	r2, [pc, #32]	; (8003650 <UART_SetConfig+0x2d4>)
 8003630:	fba2 2303 	umull	r2, r3, r2, r3
 8003634:	095b      	lsrs	r3, r3, #5
 8003636:	f003 0207 	and.w	r2, r3, #7
 800363a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4422      	add	r2, r4
 8003642:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003644:	e105      	b.n	8003852 <UART_SetConfig+0x4d6>
 8003646:	bf00      	nop
 8003648:	40011000 	.word	0x40011000
 800364c:	40011400 	.word	0x40011400
 8003650:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003654:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003658:	2200      	movs	r2, #0
 800365a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800365e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003662:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003666:	4642      	mov	r2, r8
 8003668:	464b      	mov	r3, r9
 800366a:	1891      	adds	r1, r2, r2
 800366c:	6239      	str	r1, [r7, #32]
 800366e:	415b      	adcs	r3, r3
 8003670:	627b      	str	r3, [r7, #36]	; 0x24
 8003672:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003676:	4641      	mov	r1, r8
 8003678:	1854      	adds	r4, r2, r1
 800367a:	4649      	mov	r1, r9
 800367c:	eb43 0501 	adc.w	r5, r3, r1
 8003680:	f04f 0200 	mov.w	r2, #0
 8003684:	f04f 0300 	mov.w	r3, #0
 8003688:	00eb      	lsls	r3, r5, #3
 800368a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800368e:	00e2      	lsls	r2, r4, #3
 8003690:	4614      	mov	r4, r2
 8003692:	461d      	mov	r5, r3
 8003694:	4643      	mov	r3, r8
 8003696:	18e3      	adds	r3, r4, r3
 8003698:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800369c:	464b      	mov	r3, r9
 800369e:	eb45 0303 	adc.w	r3, r5, r3
 80036a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80036a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80036b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80036b6:	f04f 0200 	mov.w	r2, #0
 80036ba:	f04f 0300 	mov.w	r3, #0
 80036be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80036c2:	4629      	mov	r1, r5
 80036c4:	008b      	lsls	r3, r1, #2
 80036c6:	4621      	mov	r1, r4
 80036c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036cc:	4621      	mov	r1, r4
 80036ce:	008a      	lsls	r2, r1, #2
 80036d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80036d4:	f7fc fd7c 	bl	80001d0 <__aeabi_uldivmod>
 80036d8:	4602      	mov	r2, r0
 80036da:	460b      	mov	r3, r1
 80036dc:	4b60      	ldr	r3, [pc, #384]	; (8003860 <UART_SetConfig+0x4e4>)
 80036de:	fba3 2302 	umull	r2, r3, r3, r2
 80036e2:	095b      	lsrs	r3, r3, #5
 80036e4:	011c      	lsls	r4, r3, #4
 80036e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036ea:	2200      	movs	r2, #0
 80036ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80036f0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80036f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80036f8:	4642      	mov	r2, r8
 80036fa:	464b      	mov	r3, r9
 80036fc:	1891      	adds	r1, r2, r2
 80036fe:	61b9      	str	r1, [r7, #24]
 8003700:	415b      	adcs	r3, r3
 8003702:	61fb      	str	r3, [r7, #28]
 8003704:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003708:	4641      	mov	r1, r8
 800370a:	1851      	adds	r1, r2, r1
 800370c:	6139      	str	r1, [r7, #16]
 800370e:	4649      	mov	r1, r9
 8003710:	414b      	adcs	r3, r1
 8003712:	617b      	str	r3, [r7, #20]
 8003714:	f04f 0200 	mov.w	r2, #0
 8003718:	f04f 0300 	mov.w	r3, #0
 800371c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003720:	4659      	mov	r1, fp
 8003722:	00cb      	lsls	r3, r1, #3
 8003724:	4651      	mov	r1, sl
 8003726:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800372a:	4651      	mov	r1, sl
 800372c:	00ca      	lsls	r2, r1, #3
 800372e:	4610      	mov	r0, r2
 8003730:	4619      	mov	r1, r3
 8003732:	4603      	mov	r3, r0
 8003734:	4642      	mov	r2, r8
 8003736:	189b      	adds	r3, r3, r2
 8003738:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800373c:	464b      	mov	r3, r9
 800373e:	460a      	mov	r2, r1
 8003740:	eb42 0303 	adc.w	r3, r2, r3
 8003744:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	67bb      	str	r3, [r7, #120]	; 0x78
 8003752:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003754:	f04f 0200 	mov.w	r2, #0
 8003758:	f04f 0300 	mov.w	r3, #0
 800375c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003760:	4649      	mov	r1, r9
 8003762:	008b      	lsls	r3, r1, #2
 8003764:	4641      	mov	r1, r8
 8003766:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800376a:	4641      	mov	r1, r8
 800376c:	008a      	lsls	r2, r1, #2
 800376e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003772:	f7fc fd2d 	bl	80001d0 <__aeabi_uldivmod>
 8003776:	4602      	mov	r2, r0
 8003778:	460b      	mov	r3, r1
 800377a:	4b39      	ldr	r3, [pc, #228]	; (8003860 <UART_SetConfig+0x4e4>)
 800377c:	fba3 1302 	umull	r1, r3, r3, r2
 8003780:	095b      	lsrs	r3, r3, #5
 8003782:	2164      	movs	r1, #100	; 0x64
 8003784:	fb01 f303 	mul.w	r3, r1, r3
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	011b      	lsls	r3, r3, #4
 800378c:	3332      	adds	r3, #50	; 0x32
 800378e:	4a34      	ldr	r2, [pc, #208]	; (8003860 <UART_SetConfig+0x4e4>)
 8003790:	fba2 2303 	umull	r2, r3, r2, r3
 8003794:	095b      	lsrs	r3, r3, #5
 8003796:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800379a:	441c      	add	r4, r3
 800379c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037a0:	2200      	movs	r2, #0
 80037a2:	673b      	str	r3, [r7, #112]	; 0x70
 80037a4:	677a      	str	r2, [r7, #116]	; 0x74
 80037a6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80037aa:	4642      	mov	r2, r8
 80037ac:	464b      	mov	r3, r9
 80037ae:	1891      	adds	r1, r2, r2
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	415b      	adcs	r3, r3
 80037b4:	60fb      	str	r3, [r7, #12]
 80037b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037ba:	4641      	mov	r1, r8
 80037bc:	1851      	adds	r1, r2, r1
 80037be:	6039      	str	r1, [r7, #0]
 80037c0:	4649      	mov	r1, r9
 80037c2:	414b      	adcs	r3, r1
 80037c4:	607b      	str	r3, [r7, #4]
 80037c6:	f04f 0200 	mov.w	r2, #0
 80037ca:	f04f 0300 	mov.w	r3, #0
 80037ce:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80037d2:	4659      	mov	r1, fp
 80037d4:	00cb      	lsls	r3, r1, #3
 80037d6:	4651      	mov	r1, sl
 80037d8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037dc:	4651      	mov	r1, sl
 80037de:	00ca      	lsls	r2, r1, #3
 80037e0:	4610      	mov	r0, r2
 80037e2:	4619      	mov	r1, r3
 80037e4:	4603      	mov	r3, r0
 80037e6:	4642      	mov	r2, r8
 80037e8:	189b      	adds	r3, r3, r2
 80037ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80037ec:	464b      	mov	r3, r9
 80037ee:	460a      	mov	r2, r1
 80037f0:	eb42 0303 	adc.w	r3, r2, r3
 80037f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80037f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	663b      	str	r3, [r7, #96]	; 0x60
 8003800:	667a      	str	r2, [r7, #100]	; 0x64
 8003802:	f04f 0200 	mov.w	r2, #0
 8003806:	f04f 0300 	mov.w	r3, #0
 800380a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800380e:	4649      	mov	r1, r9
 8003810:	008b      	lsls	r3, r1, #2
 8003812:	4641      	mov	r1, r8
 8003814:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003818:	4641      	mov	r1, r8
 800381a:	008a      	lsls	r2, r1, #2
 800381c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003820:	f7fc fcd6 	bl	80001d0 <__aeabi_uldivmod>
 8003824:	4602      	mov	r2, r0
 8003826:	460b      	mov	r3, r1
 8003828:	4b0d      	ldr	r3, [pc, #52]	; (8003860 <UART_SetConfig+0x4e4>)
 800382a:	fba3 1302 	umull	r1, r3, r3, r2
 800382e:	095b      	lsrs	r3, r3, #5
 8003830:	2164      	movs	r1, #100	; 0x64
 8003832:	fb01 f303 	mul.w	r3, r1, r3
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	011b      	lsls	r3, r3, #4
 800383a:	3332      	adds	r3, #50	; 0x32
 800383c:	4a08      	ldr	r2, [pc, #32]	; (8003860 <UART_SetConfig+0x4e4>)
 800383e:	fba2 2303 	umull	r2, r3, r2, r3
 8003842:	095b      	lsrs	r3, r3, #5
 8003844:	f003 020f 	and.w	r2, r3, #15
 8003848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4422      	add	r2, r4
 8003850:	609a      	str	r2, [r3, #8]
}
 8003852:	bf00      	nop
 8003854:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003858:	46bd      	mov	sp, r7
 800385a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800385e:	bf00      	nop
 8003860:	51eb851f 	.word	0x51eb851f

08003864 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f103 0208 	add.w	r2, r3, #8
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f04f 32ff 	mov.w	r2, #4294967295
 800387c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f103 0208 	add.w	r2, r3, #8
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f103 0208 	add.w	r2, r3, #8
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80038b2:	bf00      	nop
 80038b4:	370c      	adds	r7, #12
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr

080038be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80038be:	b480      	push	{r7}
 80038c0:	b085      	sub	sp, #20
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
 80038c6:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	68fa      	ldr	r2, [r7, #12]
 80038d2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	689a      	ldr	r2, [r3, #8]
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	683a      	ldr	r2, [r7, #0]
 80038e2:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	683a      	ldr	r2, [r7, #0]
 80038e8:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	1c5a      	adds	r2, r3, #1
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	601a      	str	r2, [r3, #0]
}
 80038fa:	bf00      	nop
 80038fc:	3714      	adds	r7, #20
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr

08003906 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8003906:	b480      	push	{r7}
 8003908:	b085      	sub	sp, #20
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
 800390e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800391c:	d103      	bne.n	8003926 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	60fb      	str	r3, [r7, #12]
 8003924:	e00c      	b.n	8003940 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	3308      	adds	r3, #8
 800392a:	60fb      	str	r3, [r7, #12]
 800392c:	e002      	b.n	8003934 <vListInsert+0x2e>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	60fb      	str	r3, [r7, #12]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	68ba      	ldr	r2, [r7, #8]
 800393c:	429a      	cmp	r2, r3
 800393e:	d2f6      	bcs.n	800392e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	685a      	ldr	r2, [r3, #4]
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	683a      	ldr	r2, [r7, #0]
 800394e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	68fa      	ldr	r2, [r7, #12]
 8003954:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	683a      	ldr	r2, [r7, #0]
 800395a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	1c5a      	adds	r2, r3, #1
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	601a      	str	r2, [r3, #0]
}
 800396c:	bf00      	nop
 800396e:	3714      	adds	r7, #20
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003978:	b480      	push	{r7}
 800397a:	b085      	sub	sp, #20
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	691b      	ldr	r3, [r3, #16]
 8003984:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	6892      	ldr	r2, [r2, #8]
 800398e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	6852      	ldr	r2, [r2, #4]
 8003998:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d103      	bne.n	80039ac <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	689a      	ldr	r2, [r3, #8]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	1e5a      	subs	r2, r3, #1
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3714      	adds	r7, #20
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d10a      	bne.n	80039f6 <xQueueGenericReset+0x2a>
        __asm volatile
 80039e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e4:	f383 8811 	msr	BASEPRI, r3
 80039e8:	f3bf 8f6f 	isb	sy
 80039ec:	f3bf 8f4f 	dsb	sy
 80039f0:	60bb      	str	r3, [r7, #8]
    }
 80039f2:	bf00      	nop
 80039f4:	e7fe      	b.n	80039f4 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80039f6:	f002 fb0d 	bl	8006014 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a02:	68f9      	ldr	r1, [r7, #12]
 8003a04:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003a06:	fb01 f303 	mul.w	r3, r1, r3
 8003a0a:	441a      	add	r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2200      	movs	r2, #0
 8003a14:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a26:	3b01      	subs	r3, #1
 8003a28:	68f9      	ldr	r1, [r7, #12]
 8003a2a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003a2c:	fb01 f303 	mul.w	r3, r1, r3
 8003a30:	441a      	add	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	22ff      	movs	r2, #255	; 0xff
 8003a3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	22ff      	movs	r2, #255	; 0xff
 8003a42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d114      	bne.n	8003a76 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d01a      	beq.n	8003a8a <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	3310      	adds	r3, #16
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f001 f921 	bl	8004ca0 <xTaskRemoveFromEventList>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d012      	beq.n	8003a8a <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8003a64:	4b0c      	ldr	r3, [pc, #48]	; (8003a98 <xQueueGenericReset+0xcc>)
 8003a66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a6a:	601a      	str	r2, [r3, #0]
 8003a6c:	f3bf 8f4f 	dsb	sy
 8003a70:	f3bf 8f6f 	isb	sy
 8003a74:	e009      	b.n	8003a8a <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	3310      	adds	r3, #16
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7ff fef2 	bl	8003864 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	3324      	adds	r3, #36	; 0x24
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7ff feed 	bl	8003864 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8003a8a:	f002 faf3 	bl	8006074 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8003a8e:	2301      	movs	r3, #1
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3710      	adds	r7, #16
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	e000ed04 	.word	0xe000ed04

08003a9c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b08c      	sub	sp, #48	; 0x30
 8003aa0:	af02      	add	r7, sp, #8
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d10a      	bne.n	8003ac6 <xQueueGenericCreate+0x2a>
        __asm volatile
 8003ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab4:	f383 8811 	msr	BASEPRI, r3
 8003ab8:	f3bf 8f6f 	isb	sy
 8003abc:	f3bf 8f4f 	dsb	sy
 8003ac0:	61bb      	str	r3, [r7, #24]
    }
 8003ac2:	bf00      	nop
 8003ac4:	e7fe      	b.n	8003ac4 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	68ba      	ldr	r2, [r7, #8]
 8003aca:	fb02 f303 	mul.w	r3, r2, r3
 8003ace:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d006      	beq.n	8003ae4 <xQueueGenericCreate+0x48>
 8003ad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d101      	bne.n	8003ae8 <xQueueGenericCreate+0x4c>
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e000      	b.n	8003aea <xQueueGenericCreate+0x4e>
 8003ae8:	2300      	movs	r3, #0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d10a      	bne.n	8003b04 <xQueueGenericCreate+0x68>
        __asm volatile
 8003aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af2:	f383 8811 	msr	BASEPRI, r3
 8003af6:	f3bf 8f6f 	isb	sy
 8003afa:	f3bf 8f4f 	dsb	sy
 8003afe:	617b      	str	r3, [r7, #20]
    }
 8003b00:	bf00      	nop
 8003b02:	e7fe      	b.n	8003b02 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8003b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b06:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8003b0a:	d90a      	bls.n	8003b22 <xQueueGenericCreate+0x86>
        __asm volatile
 8003b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b10:	f383 8811 	msr	BASEPRI, r3
 8003b14:	f3bf 8f6f 	isb	sy
 8003b18:	f3bf 8f4f 	dsb	sy
 8003b1c:	613b      	str	r3, [r7, #16]
    }
 8003b1e:	bf00      	nop
 8003b20:	e7fe      	b.n	8003b20 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b24:	3350      	adds	r3, #80	; 0x50
 8003b26:	4618      	mov	r0, r3
 8003b28:	f002 fb98 	bl	800625c <pvPortMalloc>
 8003b2c:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8003b2e:	6a3b      	ldr	r3, [r7, #32]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00d      	beq.n	8003b50 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003b34:	6a3b      	ldr	r3, [r7, #32]
 8003b36:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	3350      	adds	r3, #80	; 0x50
 8003b3c:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003b3e:	79fa      	ldrb	r2, [r7, #7]
 8003b40:	6a3b      	ldr	r3, [r7, #32]
 8003b42:	9300      	str	r3, [sp, #0]
 8003b44:	4613      	mov	r3, r2
 8003b46:	69fa      	ldr	r2, [r7, #28]
 8003b48:	68b9      	ldr	r1, [r7, #8]
 8003b4a:	68f8      	ldr	r0, [r7, #12]
 8003b4c:	f000 f805 	bl	8003b5a <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8003b50:	6a3b      	ldr	r3, [r7, #32]
    }
 8003b52:	4618      	mov	r0, r3
 8003b54:	3728      	adds	r7, #40	; 0x28
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8003b5a:	b580      	push	{r7, lr}
 8003b5c:	b084      	sub	sp, #16
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	60f8      	str	r0, [r7, #12]
 8003b62:	60b9      	str	r1, [r7, #8]
 8003b64:	607a      	str	r2, [r7, #4]
 8003b66:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d103      	bne.n	8003b76 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	601a      	str	r2, [r3, #0]
 8003b74:	e002      	b.n	8003b7c <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	68ba      	ldr	r2, [r7, #8]
 8003b86:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003b88:	2101      	movs	r1, #1
 8003b8a:	69b8      	ldr	r0, [r7, #24]
 8003b8c:	f7ff ff1e 	bl	80039cc <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	78fa      	ldrb	r2, [r7, #3]
 8003b94:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8003b98:	bf00      	nop
 8003b9a:	3710      	adds	r7, #16
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b08e      	sub	sp, #56	; 0x38
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	607a      	str	r2, [r7, #4]
 8003bac:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8003bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d10a      	bne.n	8003bd2 <xQueueGenericSend+0x32>
        __asm volatile
 8003bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc0:	f383 8811 	msr	BASEPRI, r3
 8003bc4:	f3bf 8f6f 	isb	sy
 8003bc8:	f3bf 8f4f 	dsb	sy
 8003bcc:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8003bce:	bf00      	nop
 8003bd0:	e7fe      	b.n	8003bd0 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d103      	bne.n	8003be0 <xQueueGenericSend+0x40>
 8003bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d101      	bne.n	8003be4 <xQueueGenericSend+0x44>
 8003be0:	2301      	movs	r3, #1
 8003be2:	e000      	b.n	8003be6 <xQueueGenericSend+0x46>
 8003be4:	2300      	movs	r3, #0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10a      	bne.n	8003c00 <xQueueGenericSend+0x60>
        __asm volatile
 8003bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bee:	f383 8811 	msr	BASEPRI, r3
 8003bf2:	f3bf 8f6f 	isb	sy
 8003bf6:	f3bf 8f4f 	dsb	sy
 8003bfa:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8003bfc:	bf00      	nop
 8003bfe:	e7fe      	b.n	8003bfe <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d103      	bne.n	8003c0e <xQueueGenericSend+0x6e>
 8003c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d101      	bne.n	8003c12 <xQueueGenericSend+0x72>
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e000      	b.n	8003c14 <xQueueGenericSend+0x74>
 8003c12:	2300      	movs	r3, #0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d10a      	bne.n	8003c2e <xQueueGenericSend+0x8e>
        __asm volatile
 8003c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c1c:	f383 8811 	msr	BASEPRI, r3
 8003c20:	f3bf 8f6f 	isb	sy
 8003c24:	f3bf 8f4f 	dsb	sy
 8003c28:	623b      	str	r3, [r7, #32]
    }
 8003c2a:	bf00      	nop
 8003c2c:	e7fe      	b.n	8003c2c <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c2e:	f001 f9d3 	bl	8004fd8 <xTaskGetSchedulerState>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d102      	bne.n	8003c3e <xQueueGenericSend+0x9e>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <xQueueGenericSend+0xa2>
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e000      	b.n	8003c44 <xQueueGenericSend+0xa4>
 8003c42:	2300      	movs	r3, #0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d10a      	bne.n	8003c5e <xQueueGenericSend+0xbe>
        __asm volatile
 8003c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c4c:	f383 8811 	msr	BASEPRI, r3
 8003c50:	f3bf 8f6f 	isb	sy
 8003c54:	f3bf 8f4f 	dsb	sy
 8003c58:	61fb      	str	r3, [r7, #28]
    }
 8003c5a:	bf00      	nop
 8003c5c:	e7fe      	b.n	8003c5c <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003c5e:	f002 f9d9 	bl	8006014 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d302      	bcc.n	8003c74 <xQueueGenericSend+0xd4>
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d129      	bne.n	8003cc8 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003c74:	683a      	ldr	r2, [r7, #0]
 8003c76:	68b9      	ldr	r1, [r7, #8]
 8003c78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c7a:	f000 fac6 	bl	800420a <prvCopyDataToQueue>
 8003c7e:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d010      	beq.n	8003caa <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c8a:	3324      	adds	r3, #36	; 0x24
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f001 f807 	bl	8004ca0 <xTaskRemoveFromEventList>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d013      	beq.n	8003cc0 <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8003c98:	4b3f      	ldr	r3, [pc, #252]	; (8003d98 <xQueueGenericSend+0x1f8>)
 8003c9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c9e:	601a      	str	r2, [r3, #0]
 8003ca0:	f3bf 8f4f 	dsb	sy
 8003ca4:	f3bf 8f6f 	isb	sy
 8003ca8:	e00a      	b.n	8003cc0 <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8003caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d007      	beq.n	8003cc0 <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8003cb0:	4b39      	ldr	r3, [pc, #228]	; (8003d98 <xQueueGenericSend+0x1f8>)
 8003cb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cb6:	601a      	str	r2, [r3, #0]
 8003cb8:	f3bf 8f4f 	dsb	sy
 8003cbc:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8003cc0:	f002 f9d8 	bl	8006074 <vPortExitCritical>
                return pdPASS;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e063      	b.n	8003d90 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d103      	bne.n	8003cd6 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003cce:	f002 f9d1 	bl	8006074 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	e05c      	b.n	8003d90 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d106      	bne.n	8003cea <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003cdc:	f107 0314 	add.w	r3, r7, #20
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f001 f83f 	bl	8004d64 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003cea:	f002 f9c3 	bl	8006074 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003cee:	f000 fdb9 	bl	8004864 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003cf2:	f002 f98f 	bl	8006014 <vPortEnterCritical>
 8003cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003cfc:	b25b      	sxtb	r3, r3
 8003cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d02:	d103      	bne.n	8003d0c <xQueueGenericSend+0x16c>
 8003d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d12:	b25b      	sxtb	r3, r3
 8003d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d18:	d103      	bne.n	8003d22 <xQueueGenericSend+0x182>
 8003d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d22:	f002 f9a7 	bl	8006074 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d26:	1d3a      	adds	r2, r7, #4
 8003d28:	f107 0314 	add.w	r3, r7, #20
 8003d2c:	4611      	mov	r1, r2
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f001 f82e 	bl	8004d90 <xTaskCheckForTimeOut>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d124      	bne.n	8003d84 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003d3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d3c:	f000 fb5d 	bl	80043fa <prvIsQueueFull>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d018      	beq.n	8003d78 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d48:	3310      	adds	r3, #16
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	4611      	mov	r1, r2
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f000 ff56 	bl	8004c00 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8003d54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d56:	f000 fae8 	bl	800432a <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8003d5a:	f000 fd91 	bl	8004880 <xTaskResumeAll>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	f47f af7c 	bne.w	8003c5e <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8003d66:	4b0c      	ldr	r3, [pc, #48]	; (8003d98 <xQueueGenericSend+0x1f8>)
 8003d68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d6c:	601a      	str	r2, [r3, #0]
 8003d6e:	f3bf 8f4f 	dsb	sy
 8003d72:	f3bf 8f6f 	isb	sy
 8003d76:	e772      	b.n	8003c5e <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8003d78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d7a:	f000 fad6 	bl	800432a <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003d7e:	f000 fd7f 	bl	8004880 <xTaskResumeAll>
 8003d82:	e76c      	b.n	8003c5e <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8003d84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d86:	f000 fad0 	bl	800432a <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003d8a:	f000 fd79 	bl	8004880 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8003d8e:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3738      	adds	r7, #56	; 0x38
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	e000ed04 	.word	0xe000ed04

08003d9c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b090      	sub	sp, #64	; 0x40
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	607a      	str	r2, [r7, #4]
 8003da8:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8003dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d10a      	bne.n	8003dca <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8003db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db8:	f383 8811 	msr	BASEPRI, r3
 8003dbc:	f3bf 8f6f 	isb	sy
 8003dc0:	f3bf 8f4f 	dsb	sy
 8003dc4:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8003dc6:	bf00      	nop
 8003dc8:	e7fe      	b.n	8003dc8 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d103      	bne.n	8003dd8 <xQueueGenericSendFromISR+0x3c>
 8003dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d101      	bne.n	8003ddc <xQueueGenericSendFromISR+0x40>
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e000      	b.n	8003dde <xQueueGenericSendFromISR+0x42>
 8003ddc:	2300      	movs	r3, #0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10a      	bne.n	8003df8 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8003de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de6:	f383 8811 	msr	BASEPRI, r3
 8003dea:	f3bf 8f6f 	isb	sy
 8003dee:	f3bf 8f4f 	dsb	sy
 8003df2:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8003df4:	bf00      	nop
 8003df6:	e7fe      	b.n	8003df6 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d103      	bne.n	8003e06 <xQueueGenericSendFromISR+0x6a>
 8003dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d101      	bne.n	8003e0a <xQueueGenericSendFromISR+0x6e>
 8003e06:	2301      	movs	r3, #1
 8003e08:	e000      	b.n	8003e0c <xQueueGenericSendFromISR+0x70>
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d10a      	bne.n	8003e26 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8003e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e14:	f383 8811 	msr	BASEPRI, r3
 8003e18:	f3bf 8f6f 	isb	sy
 8003e1c:	f3bf 8f4f 	dsb	sy
 8003e20:	623b      	str	r3, [r7, #32]
    }
 8003e22:	bf00      	nop
 8003e24:	e7fe      	b.n	8003e24 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003e26:	f002 f9d9 	bl	80061dc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8003e2a:	f3ef 8211 	mrs	r2, BASEPRI
 8003e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e32:	f383 8811 	msr	BASEPRI, r3
 8003e36:	f3bf 8f6f 	isb	sy
 8003e3a:	f3bf 8f4f 	dsb	sy
 8003e3e:	61fa      	str	r2, [r7, #28]
 8003e40:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8003e42:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003e44:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d302      	bcc.n	8003e58 <xQueueGenericSendFromISR+0xbc>
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d13e      	bne.n	8003ed6 <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8003e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e66:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003e68:	683a      	ldr	r2, [r7, #0]
 8003e6a:	68b9      	ldr	r1, [r7, #8]
 8003e6c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003e6e:	f000 f9cc 	bl	800420a <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8003e72:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e7a:	d112      	bne.n	8003ea2 <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d025      	beq.n	8003ed0 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e86:	3324      	adds	r3, #36	; 0x24
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f000 ff09 	bl	8004ca0 <xTaskRemoveFromEventList>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d01d      	beq.n	8003ed0 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d01a      	beq.n	8003ed0 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	601a      	str	r2, [r3, #0]
 8003ea0:	e016      	b.n	8003ed0 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8003ea2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003ea6:	2b7f      	cmp	r3, #127	; 0x7f
 8003ea8:	d10a      	bne.n	8003ec0 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 8003eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eae:	f383 8811 	msr	BASEPRI, r3
 8003eb2:	f3bf 8f6f 	isb	sy
 8003eb6:	f3bf 8f4f 	dsb	sy
 8003eba:	617b      	str	r3, [r7, #20]
    }
 8003ebc:	bf00      	nop
 8003ebe:	e7fe      	b.n	8003ebe <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003ec0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	b25a      	sxtb	r2, r3
 8003eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ecc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8003ed4:	e001      	b.n	8003eda <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003edc:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003ee4:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003ee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3740      	adds	r7, #64	; 0x40
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b08c      	sub	sp, #48	; 0x30
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	60b9      	str	r1, [r7, #8]
 8003efa:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003efc:	2300      	movs	r3, #0
 8003efe:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d10a      	bne.n	8003f20 <xQueueReceive+0x30>
        __asm volatile
 8003f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f0e:	f383 8811 	msr	BASEPRI, r3
 8003f12:	f3bf 8f6f 	isb	sy
 8003f16:	f3bf 8f4f 	dsb	sy
 8003f1a:	623b      	str	r3, [r7, #32]
    }
 8003f1c:	bf00      	nop
 8003f1e:	e7fe      	b.n	8003f1e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d103      	bne.n	8003f2e <xQueueReceive+0x3e>
 8003f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d101      	bne.n	8003f32 <xQueueReceive+0x42>
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e000      	b.n	8003f34 <xQueueReceive+0x44>
 8003f32:	2300      	movs	r3, #0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d10a      	bne.n	8003f4e <xQueueReceive+0x5e>
        __asm volatile
 8003f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f3c:	f383 8811 	msr	BASEPRI, r3
 8003f40:	f3bf 8f6f 	isb	sy
 8003f44:	f3bf 8f4f 	dsb	sy
 8003f48:	61fb      	str	r3, [r7, #28]
    }
 8003f4a:	bf00      	nop
 8003f4c:	e7fe      	b.n	8003f4c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f4e:	f001 f843 	bl	8004fd8 <xTaskGetSchedulerState>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d102      	bne.n	8003f5e <xQueueReceive+0x6e>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d101      	bne.n	8003f62 <xQueueReceive+0x72>
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e000      	b.n	8003f64 <xQueueReceive+0x74>
 8003f62:	2300      	movs	r3, #0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d10a      	bne.n	8003f7e <xQueueReceive+0x8e>
        __asm volatile
 8003f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f6c:	f383 8811 	msr	BASEPRI, r3
 8003f70:	f3bf 8f6f 	isb	sy
 8003f74:	f3bf 8f4f 	dsb	sy
 8003f78:	61bb      	str	r3, [r7, #24]
    }
 8003f7a:	bf00      	nop
 8003f7c:	e7fe      	b.n	8003f7c <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003f7e:	f002 f849 	bl	8006014 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f86:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d01f      	beq.n	8003fce <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003f8e:	68b9      	ldr	r1, [r7, #8]
 8003f90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f92:	f000 f9a4 	bl	80042de <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f98:	1e5a      	subs	r2, r3, #1
 8003f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f9c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00f      	beq.n	8003fc6 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa8:	3310      	adds	r3, #16
 8003faa:	4618      	mov	r0, r3
 8003fac:	f000 fe78 	bl	8004ca0 <xTaskRemoveFromEventList>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d007      	beq.n	8003fc6 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003fb6:	4b3d      	ldr	r3, [pc, #244]	; (80040ac <xQueueReceive+0x1bc>)
 8003fb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fbc:	601a      	str	r2, [r3, #0]
 8003fbe:	f3bf 8f4f 	dsb	sy
 8003fc2:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003fc6:	f002 f855 	bl	8006074 <vPortExitCritical>
                return pdPASS;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e069      	b.n	80040a2 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d103      	bne.n	8003fdc <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003fd4:	f002 f84e 	bl	8006074 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	e062      	b.n	80040a2 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d106      	bne.n	8003ff0 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003fe2:	f107 0310 	add.w	r3, r7, #16
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f000 febc 	bl	8004d64 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003fec:	2301      	movs	r3, #1
 8003fee:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003ff0:	f002 f840 	bl	8006074 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003ff4:	f000 fc36 	bl	8004864 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003ff8:	f002 f80c 	bl	8006014 <vPortEnterCritical>
 8003ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ffe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004002:	b25b      	sxtb	r3, r3
 8004004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004008:	d103      	bne.n	8004012 <xQueueReceive+0x122>
 800400a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800400c:	2200      	movs	r2, #0
 800400e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004014:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004018:	b25b      	sxtb	r3, r3
 800401a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800401e:	d103      	bne.n	8004028 <xQueueReceive+0x138>
 8004020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004022:	2200      	movs	r2, #0
 8004024:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004028:	f002 f824 	bl	8006074 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800402c:	1d3a      	adds	r2, r7, #4
 800402e:	f107 0310 	add.w	r3, r7, #16
 8004032:	4611      	mov	r1, r2
 8004034:	4618      	mov	r0, r3
 8004036:	f000 feab 	bl	8004d90 <xTaskCheckForTimeOut>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d123      	bne.n	8004088 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004040:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004042:	f000 f9c4 	bl	80043ce <prvIsQueueEmpty>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d017      	beq.n	800407c <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800404c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800404e:	3324      	adds	r3, #36	; 0x24
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	4611      	mov	r1, r2
 8004054:	4618      	mov	r0, r3
 8004056:	f000 fdd3 	bl	8004c00 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800405a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800405c:	f000 f965 	bl	800432a <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8004060:	f000 fc0e 	bl	8004880 <xTaskResumeAll>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d189      	bne.n	8003f7e <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 800406a:	4b10      	ldr	r3, [pc, #64]	; (80040ac <xQueueReceive+0x1bc>)
 800406c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004070:	601a      	str	r2, [r3, #0]
 8004072:	f3bf 8f4f 	dsb	sy
 8004076:	f3bf 8f6f 	isb	sy
 800407a:	e780      	b.n	8003f7e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800407c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800407e:	f000 f954 	bl	800432a <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004082:	f000 fbfd 	bl	8004880 <xTaskResumeAll>
 8004086:	e77a      	b.n	8003f7e <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8004088:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800408a:	f000 f94e 	bl	800432a <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800408e:	f000 fbf7 	bl	8004880 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004092:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004094:	f000 f99b 	bl	80043ce <prvIsQueueEmpty>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	f43f af6f 	beq.w	8003f7e <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80040a0:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3730      	adds	r7, #48	; 0x30
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	e000ed04 	.word	0xe000ed04

080040b0 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b090      	sub	sp, #64	; 0x40
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80040c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d10a      	bne.n	80040dc <xQueueReceiveFromISR+0x2c>
        __asm volatile
 80040c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ca:	f383 8811 	msr	BASEPRI, r3
 80040ce:	f3bf 8f6f 	isb	sy
 80040d2:	f3bf 8f4f 	dsb	sy
 80040d6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80040d8:	bf00      	nop
 80040da:	e7fe      	b.n	80040da <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d103      	bne.n	80040ea <xQueueReceiveFromISR+0x3a>
 80040e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <xQueueReceiveFromISR+0x3e>
 80040ea:	2301      	movs	r3, #1
 80040ec:	e000      	b.n	80040f0 <xQueueReceiveFromISR+0x40>
 80040ee:	2300      	movs	r3, #0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d10a      	bne.n	800410a <xQueueReceiveFromISR+0x5a>
        __asm volatile
 80040f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f8:	f383 8811 	msr	BASEPRI, r3
 80040fc:	f3bf 8f6f 	isb	sy
 8004100:	f3bf 8f4f 	dsb	sy
 8004104:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8004106:	bf00      	nop
 8004108:	e7fe      	b.n	8004108 <xQueueReceiveFromISR+0x58>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800410a:	f002 f867 	bl	80061dc <vPortValidateInterruptPriority>
        __asm volatile
 800410e:	f3ef 8211 	mrs	r2, BASEPRI
 8004112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004116:	f383 8811 	msr	BASEPRI, r3
 800411a:	f3bf 8f6f 	isb	sy
 800411e:	f3bf 8f4f 	dsb	sy
 8004122:	623a      	str	r2, [r7, #32]
 8004124:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 8004126:	6a3b      	ldr	r3, [r7, #32]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004128:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800412a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800412c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412e:	633b      	str	r3, [r7, #48]	; 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004132:	2b00      	cmp	r3, #0
 8004134:	d03e      	beq.n	80041b4 <xQueueReceiveFromISR+0x104>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 8004136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004138:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800413c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004140:	68b9      	ldr	r1, [r7, #8]
 8004142:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004144:	f000 f8cb 	bl	80042de <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800414a:	1e5a      	subs	r2, r3, #1
 800414c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800414e:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 8004150:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004158:	d112      	bne.n	8004180 <xQueueReceiveFromISR+0xd0>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800415a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d025      	beq.n	80041ae <xQueueReceiveFromISR+0xfe>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004164:	3310      	adds	r3, #16
 8004166:	4618      	mov	r0, r3
 8004168:	f000 fd9a 	bl	8004ca0 <xTaskRemoveFromEventList>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d01d      	beq.n	80041ae <xQueueReceiveFromISR+0xfe>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d01a      	beq.n	80041ae <xQueueReceiveFromISR+0xfe>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	601a      	str	r2, [r3, #0]
 800417e:	e016      	b.n	80041ae <xQueueReceiveFromISR+0xfe>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                configASSERT( cRxLock != queueINT8_MAX );
 8004180:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004184:	2b7f      	cmp	r3, #127	; 0x7f
 8004186:	d10a      	bne.n	800419e <xQueueReceiveFromISR+0xee>
        __asm volatile
 8004188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800418c:	f383 8811 	msr	BASEPRI, r3
 8004190:	f3bf 8f6f 	isb	sy
 8004194:	f3bf 8f4f 	dsb	sy
 8004198:	61bb      	str	r3, [r7, #24]
    }
 800419a:	bf00      	nop
 800419c:	e7fe      	b.n	800419c <xQueueReceiveFromISR+0xec>

                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800419e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80041a2:	3301      	adds	r3, #1
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	b25a      	sxtb	r2, r3
 80041a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 80041ae:	2301      	movs	r3, #1
 80041b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041b2:	e001      	b.n	80041b8 <xQueueReceiveFromISR+0x108>
        }
        else
        {
            xReturn = pdFAIL;
 80041b4:	2300      	movs	r3, #0
 80041b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041ba:	617b      	str	r3, [r7, #20]
        __asm volatile
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	f383 8811 	msr	BASEPRI, r3
    }
 80041c2:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80041c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3740      	adds	r7, #64	; 0x40
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}

080041ce <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80041ce:	b580      	push	{r7, lr}
 80041d0:	b084      	sub	sp, #16
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d10a      	bne.n	80041f2 <uxQueueMessagesWaiting+0x24>
        __asm volatile
 80041dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e0:	f383 8811 	msr	BASEPRI, r3
 80041e4:	f3bf 8f6f 	isb	sy
 80041e8:	f3bf 8f4f 	dsb	sy
 80041ec:	60bb      	str	r3, [r7, #8]
    }
 80041ee:	bf00      	nop
 80041f0:	e7fe      	b.n	80041f0 <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 80041f2:	f001 ff0f 	bl	8006014 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041fa:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 80041fc:	f001 ff3a 	bl	8006074 <vPortExitCritical>

    return uxReturn;
 8004200:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8004202:	4618      	mov	r0, r3
 8004204:	3710      	adds	r7, #16
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}

0800420a <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800420a:	b580      	push	{r7, lr}
 800420c:	b086      	sub	sp, #24
 800420e:	af00      	add	r7, sp, #0
 8004210:	60f8      	str	r0, [r7, #12]
 8004212:	60b9      	str	r1, [r7, #8]
 8004214:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8004216:	2300      	movs	r3, #0
 8004218:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800421e:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004224:	2b00      	cmp	r3, #0
 8004226:	d10d      	bne.n	8004244 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d14d      	bne.n	80042cc <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	4618      	mov	r0, r3
 8004236:	f000 feed 	bl	8005014 <xTaskPriorityDisinherit>
 800423a:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2200      	movs	r2, #0
 8004240:	609a      	str	r2, [r3, #8]
 8004242:	e043      	b.n	80042cc <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d119      	bne.n	800427e <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6858      	ldr	r0, [r3, #4]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004252:	461a      	mov	r2, r3
 8004254:	68b9      	ldr	r1, [r7, #8]
 8004256:	f002 fa23 	bl	80066a0 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	685a      	ldr	r2, [r3, #4]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004262:	441a      	add	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	685a      	ldr	r2, [r3, #4]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	429a      	cmp	r2, r3
 8004272:	d32b      	bcc.n	80042cc <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	605a      	str	r2, [r3, #4]
 800427c:	e026      	b.n	80042cc <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	68d8      	ldr	r0, [r3, #12]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004286:	461a      	mov	r2, r3
 8004288:	68b9      	ldr	r1, [r7, #8]
 800428a:	f002 fa09 	bl	80066a0 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	68da      	ldr	r2, [r3, #12]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004296:	425b      	negs	r3, r3
 8004298:	441a      	add	r2, r3
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	68da      	ldr	r2, [r3, #12]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d207      	bcs.n	80042ba <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	689a      	ldr	r2, [r3, #8]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b2:	425b      	negs	r3, r3
 80042b4:	441a      	add	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d105      	bne.n	80042cc <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d002      	beq.n	80042cc <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	3b01      	subs	r3, #1
 80042ca:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	1c5a      	adds	r2, r3, #1
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80042d4:	697b      	ldr	r3, [r7, #20]
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3718      	adds	r7, #24
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}

080042de <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80042de:	b580      	push	{r7, lr}
 80042e0:	b082      	sub	sp, #8
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
 80042e6:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d018      	beq.n	8004322 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	68da      	ldr	r2, [r3, #12]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f8:	441a      	add	r2, r3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	68da      	ldr	r2, [r3, #12]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	429a      	cmp	r2, r3
 8004308:	d303      	bcc.n	8004312 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	68d9      	ldr	r1, [r3, #12]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431a:	461a      	mov	r2, r3
 800431c:	6838      	ldr	r0, [r7, #0]
 800431e:	f002 f9bf 	bl	80066a0 <memcpy>
    }
}
 8004322:	bf00      	nop
 8004324:	3708      	adds	r7, #8
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}

0800432a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800432a:	b580      	push	{r7, lr}
 800432c:	b084      	sub	sp, #16
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8004332:	f001 fe6f 	bl	8006014 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800433c:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800433e:	e011      	b.n	8004364 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004344:	2b00      	cmp	r3, #0
 8004346:	d012      	beq.n	800436e <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	3324      	adds	r3, #36	; 0x24
 800434c:	4618      	mov	r0, r3
 800434e:	f000 fca7 	bl	8004ca0 <xTaskRemoveFromEventList>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d001      	beq.n	800435c <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8004358:	f000 fd80 	bl	8004e5c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800435c:	7bfb      	ldrb	r3, [r7, #15]
 800435e:	3b01      	subs	r3, #1
 8004360:	b2db      	uxtb	r3, r3
 8004362:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004364:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004368:	2b00      	cmp	r3, #0
 800436a:	dce9      	bgt.n	8004340 <prvUnlockQueue+0x16>
 800436c:	e000      	b.n	8004370 <prvUnlockQueue+0x46>
                        break;
 800436e:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	22ff      	movs	r2, #255	; 0xff
 8004374:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8004378:	f001 fe7c 	bl	8006074 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800437c:	f001 fe4a 	bl	8006014 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004386:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004388:	e011      	b.n	80043ae <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d012      	beq.n	80043b8 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	3310      	adds	r3, #16
 8004396:	4618      	mov	r0, r3
 8004398:	f000 fc82 	bl	8004ca0 <xTaskRemoveFromEventList>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d001      	beq.n	80043a6 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80043a2:	f000 fd5b 	bl	8004e5c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80043a6:	7bbb      	ldrb	r3, [r7, #14]
 80043a8:	3b01      	subs	r3, #1
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80043ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	dce9      	bgt.n	800438a <prvUnlockQueue+0x60>
 80043b6:	e000      	b.n	80043ba <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80043b8:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	22ff      	movs	r2, #255	; 0xff
 80043be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80043c2:	f001 fe57 	bl	8006074 <vPortExitCritical>
}
 80043c6:	bf00      	nop
 80043c8:	3710      	adds	r7, #16
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}

080043ce <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80043ce:	b580      	push	{r7, lr}
 80043d0:	b084      	sub	sp, #16
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80043d6:	f001 fe1d 	bl	8006014 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d102      	bne.n	80043e8 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80043e2:	2301      	movs	r3, #1
 80043e4:	60fb      	str	r3, [r7, #12]
 80043e6:	e001      	b.n	80043ec <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80043e8:	2300      	movs	r3, #0
 80043ea:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80043ec:	f001 fe42 	bl	8006074 <vPortExitCritical>

    return xReturn;
 80043f0:	68fb      	ldr	r3, [r7, #12]
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3710      	adds	r7, #16
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}

080043fa <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80043fa:	b580      	push	{r7, lr}
 80043fc:	b084      	sub	sp, #16
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004402:	f001 fe07 	bl	8006014 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800440e:	429a      	cmp	r2, r3
 8004410:	d102      	bne.n	8004418 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8004412:	2301      	movs	r3, #1
 8004414:	60fb      	str	r3, [r7, #12]
 8004416:	e001      	b.n	800441c <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8004418:	2300      	movs	r3, #0
 800441a:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800441c:	f001 fe2a 	bl	8006074 <vPortExitCritical>

    return xReturn;
 8004420:	68fb      	ldr	r3, [r7, #12]
}
 8004422:	4618      	mov	r0, r3
 8004424:	3710      	adds	r7, #16
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}

0800442a <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 800442a:	b480      	push	{r7}
 800442c:	b087      	sub	sp, #28
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d10a      	bne.n	8004452 <xQueueIsQueueFullFromISR+0x28>
        __asm volatile
 800443c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004440:	f383 8811 	msr	BASEPRI, r3
 8004444:	f3bf 8f6f 	isb	sy
 8004448:	f3bf 8f4f 	dsb	sy
 800444c:	60fb      	str	r3, [r7, #12]
    }
 800444e:	bf00      	nop
 8004450:	e7fe      	b.n	8004450 <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800445a:	429a      	cmp	r2, r3
 800445c:	d102      	bne.n	8004464 <xQueueIsQueueFullFromISR+0x3a>
    {
        xReturn = pdTRUE;
 800445e:	2301      	movs	r3, #1
 8004460:	617b      	str	r3, [r7, #20]
 8004462:	e001      	b.n	8004468 <xQueueIsQueueFullFromISR+0x3e>
    }
    else
    {
        xReturn = pdFALSE;
 8004464:	2300      	movs	r3, #0
 8004466:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8004468:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800446a:	4618      	mov	r0, r3
 800446c:	371c      	adds	r7, #28
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
	...

08004478 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8004478:	b480      	push	{r7}
 800447a:	b085      	sub	sp, #20
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004482:	2300      	movs	r3, #0
 8004484:	60fb      	str	r3, [r7, #12]
 8004486:	e014      	b.n	80044b2 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004488:	4a0f      	ldr	r2, [pc, #60]	; (80044c8 <vQueueAddToRegistry+0x50>)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d10b      	bne.n	80044ac <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004494:	490c      	ldr	r1, [pc, #48]	; (80044c8 <vQueueAddToRegistry+0x50>)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	683a      	ldr	r2, [r7, #0]
 800449a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 800449e:	4a0a      	ldr	r2, [pc, #40]	; (80044c8 <vQueueAddToRegistry+0x50>)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	00db      	lsls	r3, r3, #3
 80044a4:	4413      	add	r3, r2
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 80044aa:	e006      	b.n	80044ba <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	3301      	adds	r3, #1
 80044b0:	60fb      	str	r3, [r7, #12]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2b07      	cmp	r3, #7
 80044b6:	d9e7      	bls.n	8004488 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80044b8:	bf00      	nop
 80044ba:	bf00      	nop
 80044bc:	3714      	adds	r7, #20
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop
 80044c8:	20000100 	.word	0x20000100

080044cc <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b086      	sub	sp, #24
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80044dc:	f001 fd9a 	bl	8006014 <vPortEnterCritical>
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80044e6:	b25b      	sxtb	r3, r3
 80044e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ec:	d103      	bne.n	80044f6 <vQueueWaitForMessageRestricted+0x2a>
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80044fc:	b25b      	sxtb	r3, r3
 80044fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004502:	d103      	bne.n	800450c <vQueueWaitForMessageRestricted+0x40>
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800450c:	f001 fdb2 	bl	8006074 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004514:	2b00      	cmp	r3, #0
 8004516:	d106      	bne.n	8004526 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	3324      	adds	r3, #36	; 0x24
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	68b9      	ldr	r1, [r7, #8]
 8004520:	4618      	mov	r0, r3
 8004522:	f000 fb91 	bl	8004c48 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8004526:	6978      	ldr	r0, [r7, #20]
 8004528:	f7ff feff 	bl	800432a <prvUnlockQueue>
    }
 800452c:	bf00      	nop
 800452e:	3718      	adds	r7, #24
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8004534:	b580      	push	{r7, lr}
 8004536:	b08c      	sub	sp, #48	; 0x30
 8004538:	af04      	add	r7, sp, #16
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	603b      	str	r3, [r7, #0]
 8004540:	4613      	mov	r3, r2
 8004542:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004544:	88fb      	ldrh	r3, [r7, #6]
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	4618      	mov	r0, r3
 800454a:	f001 fe87 	bl	800625c <pvPortMalloc>
 800454e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00e      	beq.n	8004574 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004556:	2058      	movs	r0, #88	; 0x58
 8004558:	f001 fe80 	bl	800625c <pvPortMalloc>
 800455c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d003      	beq.n	800456c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	697a      	ldr	r2, [r7, #20]
 8004568:	631a      	str	r2, [r3, #48]	; 0x30
 800456a:	e005      	b.n	8004578 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800456c:	6978      	ldr	r0, [r7, #20]
 800456e:	f001 ff55 	bl	800641c <vPortFree>
 8004572:	e001      	b.n	8004578 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8004574:	2300      	movs	r3, #0
 8004576:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d013      	beq.n	80045a6 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800457e:	88fa      	ldrh	r2, [r7, #6]
 8004580:	2300      	movs	r3, #0
 8004582:	9303      	str	r3, [sp, #12]
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	9302      	str	r3, [sp, #8]
 8004588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800458a:	9301      	str	r3, [sp, #4]
 800458c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800458e:	9300      	str	r3, [sp, #0]
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	68b9      	ldr	r1, [r7, #8]
 8004594:	68f8      	ldr	r0, [r7, #12]
 8004596:	f000 f80e 	bl	80045b6 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800459a:	69f8      	ldr	r0, [r7, #28]
 800459c:	f000 f8a2 	bl	80046e4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80045a0:	2301      	movs	r3, #1
 80045a2:	61bb      	str	r3, [r7, #24]
 80045a4:	e002      	b.n	80045ac <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80045a6:	f04f 33ff 	mov.w	r3, #4294967295
 80045aa:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80045ac:	69bb      	ldr	r3, [r7, #24]
    }
 80045ae:	4618      	mov	r0, r3
 80045b0:	3720      	adds	r7, #32
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80045b6:	b580      	push	{r7, lr}
 80045b8:	b088      	sub	sp, #32
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	60f8      	str	r0, [r7, #12]
 80045be:	60b9      	str	r1, [r7, #8]
 80045c0:	607a      	str	r2, [r7, #4]
 80045c2:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80045c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	461a      	mov	r2, r3
 80045ce:	21a5      	movs	r1, #165	; 0xa5
 80045d0:	f002 f874 	bl	80066bc <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80045d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80045de:	3b01      	subs	r3, #1
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	4413      	add	r3, r2
 80045e4:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	f023 0307 	bic.w	r3, r3, #7
 80045ec:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	f003 0307 	and.w	r3, r3, #7
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d00a      	beq.n	800460e <prvInitialiseNewTask+0x58>
        __asm volatile
 80045f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045fc:	f383 8811 	msr	BASEPRI, r3
 8004600:	f3bf 8f6f 	isb	sy
 8004604:	f3bf 8f4f 	dsb	sy
 8004608:	617b      	str	r3, [r7, #20]
    }
 800460a:	bf00      	nop
 800460c:	e7fe      	b.n	800460c <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d01f      	beq.n	8004654 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004614:	2300      	movs	r3, #0
 8004616:	61fb      	str	r3, [r7, #28]
 8004618:	e012      	b.n	8004640 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800461a:	68ba      	ldr	r2, [r7, #8]
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	4413      	add	r3, r2
 8004620:	7819      	ldrb	r1, [r3, #0]
 8004622:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	4413      	add	r3, r2
 8004628:	3334      	adds	r3, #52	; 0x34
 800462a:	460a      	mov	r2, r1
 800462c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800462e:	68ba      	ldr	r2, [r7, #8]
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	4413      	add	r3, r2
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d006      	beq.n	8004648 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	3301      	adds	r3, #1
 800463e:	61fb      	str	r3, [r7, #28]
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	2b09      	cmp	r3, #9
 8004644:	d9e9      	bls.n	800461a <prvInitialiseNewTask+0x64>
 8004646:	e000      	b.n	800464a <prvInitialiseNewTask+0x94>
            {
                break;
 8004648:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800464a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800464c:	2200      	movs	r2, #0
 800464e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004652:	e003      	b.n	800465c <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004656:	2200      	movs	r2, #0
 8004658:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800465c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800465e:	2b04      	cmp	r3, #4
 8004660:	d901      	bls.n	8004666 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004662:	2304      	movs	r3, #4
 8004664:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8004666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004668:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800466a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800466c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800466e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004670:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8004672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004674:	2200      	movs	r2, #0
 8004676:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800467a:	3304      	adds	r3, #4
 800467c:	4618      	mov	r0, r3
 800467e:	f7ff f911 	bl	80038a4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004684:	3318      	adds	r3, #24
 8004686:	4618      	mov	r0, r3
 8004688:	f7ff f90c 	bl	80038a4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800468c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800468e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004690:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004694:	f1c3 0205 	rsb	r2, r3, #5
 8004698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800469a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800469c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800469e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046a0:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80046a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a4:	3350      	adds	r3, #80	; 0x50
 80046a6:	2204      	movs	r2, #4
 80046a8:	2100      	movs	r1, #0
 80046aa:	4618      	mov	r0, r3
 80046ac:	f002 f806 	bl	80066bc <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80046b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b2:	3354      	adds	r3, #84	; 0x54
 80046b4:	2201      	movs	r2, #1
 80046b6:	2100      	movs	r1, #0
 80046b8:	4618      	mov	r0, r3
 80046ba:	f001 ffff 	bl	80066bc <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80046be:	683a      	ldr	r2, [r7, #0]
 80046c0:	68f9      	ldr	r1, [r7, #12]
 80046c2:	69b8      	ldr	r0, [r7, #24]
 80046c4:	f001 fafa 	bl	8005cbc <pxPortInitialiseStack>
 80046c8:	4602      	mov	r2, r0
 80046ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046cc:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80046ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d002      	beq.n	80046da <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80046d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046d8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80046da:	bf00      	nop
 80046dc:	3720      	adds	r7, #32
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
	...

080046e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80046ec:	f001 fc92 	bl	8006014 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80046f0:	4b2c      	ldr	r3, [pc, #176]	; (80047a4 <prvAddNewTaskToReadyList+0xc0>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	3301      	adds	r3, #1
 80046f6:	4a2b      	ldr	r2, [pc, #172]	; (80047a4 <prvAddNewTaskToReadyList+0xc0>)
 80046f8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80046fa:	4b2b      	ldr	r3, [pc, #172]	; (80047a8 <prvAddNewTaskToReadyList+0xc4>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d109      	bne.n	8004716 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8004702:	4a29      	ldr	r2, [pc, #164]	; (80047a8 <prvAddNewTaskToReadyList+0xc4>)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004708:	4b26      	ldr	r3, [pc, #152]	; (80047a4 <prvAddNewTaskToReadyList+0xc0>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2b01      	cmp	r3, #1
 800470e:	d110      	bne.n	8004732 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8004710:	f000 fbc8 	bl	8004ea4 <prvInitialiseTaskLists>
 8004714:	e00d      	b.n	8004732 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8004716:	4b25      	ldr	r3, [pc, #148]	; (80047ac <prvAddNewTaskToReadyList+0xc8>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d109      	bne.n	8004732 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800471e:	4b22      	ldr	r3, [pc, #136]	; (80047a8 <prvAddNewTaskToReadyList+0xc4>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004728:	429a      	cmp	r2, r3
 800472a:	d802      	bhi.n	8004732 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800472c:	4a1e      	ldr	r2, [pc, #120]	; (80047a8 <prvAddNewTaskToReadyList+0xc4>)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8004732:	4b1f      	ldr	r3, [pc, #124]	; (80047b0 <prvAddNewTaskToReadyList+0xcc>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	3301      	adds	r3, #1
 8004738:	4a1d      	ldr	r2, [pc, #116]	; (80047b0 <prvAddNewTaskToReadyList+0xcc>)
 800473a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800473c:	4b1c      	ldr	r3, [pc, #112]	; (80047b0 <prvAddNewTaskToReadyList+0xcc>)
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004748:	2201      	movs	r2, #1
 800474a:	409a      	lsls	r2, r3
 800474c:	4b19      	ldr	r3, [pc, #100]	; (80047b4 <prvAddNewTaskToReadyList+0xd0>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4313      	orrs	r3, r2
 8004752:	4a18      	ldr	r2, [pc, #96]	; (80047b4 <prvAddNewTaskToReadyList+0xd0>)
 8004754:	6013      	str	r3, [r2, #0]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800475a:	4613      	mov	r3, r2
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	4413      	add	r3, r2
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	4a15      	ldr	r2, [pc, #84]	; (80047b8 <prvAddNewTaskToReadyList+0xd4>)
 8004764:	441a      	add	r2, r3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	3304      	adds	r3, #4
 800476a:	4619      	mov	r1, r3
 800476c:	4610      	mov	r0, r2
 800476e:	f7ff f8a6 	bl	80038be <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8004772:	f001 fc7f 	bl	8006074 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8004776:	4b0d      	ldr	r3, [pc, #52]	; (80047ac <prvAddNewTaskToReadyList+0xc8>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00e      	beq.n	800479c <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800477e:	4b0a      	ldr	r3, [pc, #40]	; (80047a8 <prvAddNewTaskToReadyList+0xc4>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004788:	429a      	cmp	r2, r3
 800478a:	d207      	bcs.n	800479c <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800478c:	4b0b      	ldr	r3, [pc, #44]	; (80047bc <prvAddNewTaskToReadyList+0xd8>)
 800478e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004792:	601a      	str	r2, [r3, #0]
 8004794:	f3bf 8f4f 	dsb	sy
 8004798:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800479c:	bf00      	nop
 800479e:	3708      	adds	r7, #8
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	20000218 	.word	0x20000218
 80047a8:	20000140 	.word	0x20000140
 80047ac:	20000224 	.word	0x20000224
 80047b0:	20000234 	.word	0x20000234
 80047b4:	20000220 	.word	0x20000220
 80047b8:	20000144 	.word	0x20000144
 80047bc:	e000ed04 	.word	0xe000ed04

080047c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b086      	sub	sp, #24
 80047c4:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80047c6:	4b20      	ldr	r3, [pc, #128]	; (8004848 <vTaskStartScheduler+0x88>)
 80047c8:	9301      	str	r3, [sp, #4]
 80047ca:	2300      	movs	r3, #0
 80047cc:	9300      	str	r3, [sp, #0]
 80047ce:	2300      	movs	r3, #0
 80047d0:	2282      	movs	r2, #130	; 0x82
 80047d2:	491e      	ldr	r1, [pc, #120]	; (800484c <vTaskStartScheduler+0x8c>)
 80047d4:	481e      	ldr	r0, [pc, #120]	; (8004850 <vTaskStartScheduler+0x90>)
 80047d6:	f7ff fead 	bl	8004534 <xTaskCreate>
 80047da:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d102      	bne.n	80047e8 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80047e2:	f000 ff59 	bl	8005698 <xTimerCreateTimerTask>
 80047e6:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d116      	bne.n	800481c <vTaskStartScheduler+0x5c>
        __asm volatile
 80047ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f2:	f383 8811 	msr	BASEPRI, r3
 80047f6:	f3bf 8f6f 	isb	sy
 80047fa:	f3bf 8f4f 	dsb	sy
 80047fe:	60bb      	str	r3, [r7, #8]
    }
 8004800:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8004802:	4b14      	ldr	r3, [pc, #80]	; (8004854 <vTaskStartScheduler+0x94>)
 8004804:	f04f 32ff 	mov.w	r2, #4294967295
 8004808:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800480a:	4b13      	ldr	r3, [pc, #76]	; (8004858 <vTaskStartScheduler+0x98>)
 800480c:	2201      	movs	r2, #1
 800480e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004810:	4b12      	ldr	r3, [pc, #72]	; (800485c <vTaskStartScheduler+0x9c>)
 8004812:	2200      	movs	r2, #0
 8004814:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8004816:	f001 fadd 	bl	8005dd4 <xPortStartScheduler>
 800481a:	e00e      	b.n	800483a <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004822:	d10a      	bne.n	800483a <vTaskStartScheduler+0x7a>
        __asm volatile
 8004824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004828:	f383 8811 	msr	BASEPRI, r3
 800482c:	f3bf 8f6f 	isb	sy
 8004830:	f3bf 8f4f 	dsb	sy
 8004834:	607b      	str	r3, [r7, #4]
    }
 8004836:	bf00      	nop
 8004838:	e7fe      	b.n	8004838 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800483a:	4b09      	ldr	r3, [pc, #36]	; (8004860 <vTaskStartScheduler+0xa0>)
 800483c:	681b      	ldr	r3, [r3, #0]
}
 800483e:	bf00      	nop
 8004840:	3710      	adds	r7, #16
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	2000023c 	.word	0x2000023c
 800484c:	08006704 	.word	0x08006704
 8004850:	08004e75 	.word	0x08004e75
 8004854:	20000238 	.word	0x20000238
 8004858:	20000224 	.word	0x20000224
 800485c:	2000021c 	.word	0x2000021c
 8004860:	2000000c 	.word	0x2000000c

08004864 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004864:	b480      	push	{r7}
 8004866:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8004868:	4b04      	ldr	r3, [pc, #16]	; (800487c <vTaskSuspendAll+0x18>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	3301      	adds	r3, #1
 800486e:	4a03      	ldr	r2, [pc, #12]	; (800487c <vTaskSuspendAll+0x18>)
 8004870:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8004872:	bf00      	nop
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr
 800487c:	20000240 	.word	0x20000240

08004880 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8004886:	2300      	movs	r3, #0
 8004888:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800488a:	2300      	movs	r3, #0
 800488c:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800488e:	4b41      	ldr	r3, [pc, #260]	; (8004994 <xTaskResumeAll+0x114>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d10a      	bne.n	80048ac <xTaskResumeAll+0x2c>
        __asm volatile
 8004896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800489a:	f383 8811 	msr	BASEPRI, r3
 800489e:	f3bf 8f6f 	isb	sy
 80048a2:	f3bf 8f4f 	dsb	sy
 80048a6:	603b      	str	r3, [r7, #0]
    }
 80048a8:	bf00      	nop
 80048aa:	e7fe      	b.n	80048aa <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80048ac:	f001 fbb2 	bl	8006014 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80048b0:	4b38      	ldr	r3, [pc, #224]	; (8004994 <xTaskResumeAll+0x114>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	3b01      	subs	r3, #1
 80048b6:	4a37      	ldr	r2, [pc, #220]	; (8004994 <xTaskResumeAll+0x114>)
 80048b8:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048ba:	4b36      	ldr	r3, [pc, #216]	; (8004994 <xTaskResumeAll+0x114>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d161      	bne.n	8004986 <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80048c2:	4b35      	ldr	r3, [pc, #212]	; (8004998 <xTaskResumeAll+0x118>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d05d      	beq.n	8004986 <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80048ca:	e02e      	b.n	800492a <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048cc:	4b33      	ldr	r3, [pc, #204]	; (800499c <xTaskResumeAll+0x11c>)
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	3318      	adds	r3, #24
 80048d8:	4618      	mov	r0, r3
 80048da:	f7ff f84d 	bl	8003978 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	3304      	adds	r3, #4
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7ff f848 	bl	8003978 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ec:	2201      	movs	r2, #1
 80048ee:	409a      	lsls	r2, r3
 80048f0:	4b2b      	ldr	r3, [pc, #172]	; (80049a0 <xTaskResumeAll+0x120>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	4a2a      	ldr	r2, [pc, #168]	; (80049a0 <xTaskResumeAll+0x120>)
 80048f8:	6013      	str	r3, [r2, #0]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048fe:	4613      	mov	r3, r2
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	4413      	add	r3, r2
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	4a27      	ldr	r2, [pc, #156]	; (80049a4 <xTaskResumeAll+0x124>)
 8004908:	441a      	add	r2, r3
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	3304      	adds	r3, #4
 800490e:	4619      	mov	r1, r3
 8004910:	4610      	mov	r0, r2
 8004912:	f7fe ffd4 	bl	80038be <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800491a:	4b23      	ldr	r3, [pc, #140]	; (80049a8 <xTaskResumeAll+0x128>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004920:	429a      	cmp	r2, r3
 8004922:	d302      	bcc.n	800492a <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8004924:	4b21      	ldr	r3, [pc, #132]	; (80049ac <xTaskResumeAll+0x12c>)
 8004926:	2201      	movs	r2, #1
 8004928:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800492a:	4b1c      	ldr	r3, [pc, #112]	; (800499c <xTaskResumeAll+0x11c>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d1cc      	bne.n	80048cc <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d001      	beq.n	800493c <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8004938:	f000 fb32 	bl	8004fa0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800493c:	4b1c      	ldr	r3, [pc, #112]	; (80049b0 <xTaskResumeAll+0x130>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d010      	beq.n	800496a <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8004948:	f000 f846 	bl	80049d8 <xTaskIncrementTick>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d002      	beq.n	8004958 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 8004952:	4b16      	ldr	r3, [pc, #88]	; (80049ac <xTaskResumeAll+0x12c>)
 8004954:	2201      	movs	r2, #1
 8004956:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	3b01      	subs	r3, #1
 800495c:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d1f1      	bne.n	8004948 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8004964:	4b12      	ldr	r3, [pc, #72]	; (80049b0 <xTaskResumeAll+0x130>)
 8004966:	2200      	movs	r2, #0
 8004968:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800496a:	4b10      	ldr	r3, [pc, #64]	; (80049ac <xTaskResumeAll+0x12c>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d009      	beq.n	8004986 <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8004972:	2301      	movs	r3, #1
 8004974:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8004976:	4b0f      	ldr	r3, [pc, #60]	; (80049b4 <xTaskResumeAll+0x134>)
 8004978:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800497c:	601a      	str	r2, [r3, #0]
 800497e:	f3bf 8f4f 	dsb	sy
 8004982:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8004986:	f001 fb75 	bl	8006074 <vPortExitCritical>

    return xAlreadyYielded;
 800498a:	68bb      	ldr	r3, [r7, #8]
}
 800498c:	4618      	mov	r0, r3
 800498e:	3710      	adds	r7, #16
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}
 8004994:	20000240 	.word	0x20000240
 8004998:	20000218 	.word	0x20000218
 800499c:	200001d8 	.word	0x200001d8
 80049a0:	20000220 	.word	0x20000220
 80049a4:	20000144 	.word	0x20000144
 80049a8:	20000140 	.word	0x20000140
 80049ac:	2000022c 	.word	0x2000022c
 80049b0:	20000228 	.word	0x20000228
 80049b4:	e000ed04 	.word	0xe000ed04

080049b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80049be:	4b05      	ldr	r3, [pc, #20]	; (80049d4 <xTaskGetTickCount+0x1c>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80049c4:	687b      	ldr	r3, [r7, #4]
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	370c      	adds	r7, #12
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	2000021c 	.word	0x2000021c

080049d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b086      	sub	sp, #24
 80049dc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80049de:	2300      	movs	r3, #0
 80049e0:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049e2:	4b4e      	ldr	r3, [pc, #312]	; (8004b1c <xTaskIncrementTick+0x144>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	f040 808e 	bne.w	8004b08 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80049ec:	4b4c      	ldr	r3, [pc, #304]	; (8004b20 <xTaskIncrementTick+0x148>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	3301      	adds	r3, #1
 80049f2:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80049f4:	4a4a      	ldr	r2, [pc, #296]	; (8004b20 <xTaskIncrementTick+0x148>)
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d120      	bne.n	8004a42 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8004a00:	4b48      	ldr	r3, [pc, #288]	; (8004b24 <xTaskIncrementTick+0x14c>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d00a      	beq.n	8004a20 <xTaskIncrementTick+0x48>
        __asm volatile
 8004a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a0e:	f383 8811 	msr	BASEPRI, r3
 8004a12:	f3bf 8f6f 	isb	sy
 8004a16:	f3bf 8f4f 	dsb	sy
 8004a1a:	603b      	str	r3, [r7, #0]
    }
 8004a1c:	bf00      	nop
 8004a1e:	e7fe      	b.n	8004a1e <xTaskIncrementTick+0x46>
 8004a20:	4b40      	ldr	r3, [pc, #256]	; (8004b24 <xTaskIncrementTick+0x14c>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	60fb      	str	r3, [r7, #12]
 8004a26:	4b40      	ldr	r3, [pc, #256]	; (8004b28 <xTaskIncrementTick+0x150>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a3e      	ldr	r2, [pc, #248]	; (8004b24 <xTaskIncrementTick+0x14c>)
 8004a2c:	6013      	str	r3, [r2, #0]
 8004a2e:	4a3e      	ldr	r2, [pc, #248]	; (8004b28 <xTaskIncrementTick+0x150>)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6013      	str	r3, [r2, #0]
 8004a34:	4b3d      	ldr	r3, [pc, #244]	; (8004b2c <xTaskIncrementTick+0x154>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	3301      	adds	r3, #1
 8004a3a:	4a3c      	ldr	r2, [pc, #240]	; (8004b2c <xTaskIncrementTick+0x154>)
 8004a3c:	6013      	str	r3, [r2, #0]
 8004a3e:	f000 faaf 	bl	8004fa0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004a42:	4b3b      	ldr	r3, [pc, #236]	; (8004b30 <xTaskIncrementTick+0x158>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	693a      	ldr	r2, [r7, #16]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d348      	bcc.n	8004ade <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a4c:	4b35      	ldr	r3, [pc, #212]	; (8004b24 <xTaskIncrementTick+0x14c>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d104      	bne.n	8004a60 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a56:	4b36      	ldr	r3, [pc, #216]	; (8004b30 <xTaskIncrementTick+0x158>)
 8004a58:	f04f 32ff 	mov.w	r2, #4294967295
 8004a5c:	601a      	str	r2, [r3, #0]
                    break;
 8004a5e:	e03e      	b.n	8004ade <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a60:	4b30      	ldr	r3, [pc, #192]	; (8004b24 <xTaskIncrementTick+0x14c>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8004a70:	693a      	ldr	r2, [r7, #16]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d203      	bcs.n	8004a80 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004a78:	4a2d      	ldr	r2, [pc, #180]	; (8004b30 <xTaskIncrementTick+0x158>)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004a7e:	e02e      	b.n	8004ade <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	3304      	adds	r3, #4
 8004a84:	4618      	mov	r0, r3
 8004a86:	f7fe ff77 	bl	8003978 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d004      	beq.n	8004a9c <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	3318      	adds	r3, #24
 8004a96:	4618      	mov	r0, r3
 8004a98:	f7fe ff6e 	bl	8003978 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	409a      	lsls	r2, r3
 8004aa4:	4b23      	ldr	r3, [pc, #140]	; (8004b34 <xTaskIncrementTick+0x15c>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	4a22      	ldr	r2, [pc, #136]	; (8004b34 <xTaskIncrementTick+0x15c>)
 8004aac:	6013      	str	r3, [r2, #0]
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	4413      	add	r3, r2
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	4a1f      	ldr	r2, [pc, #124]	; (8004b38 <xTaskIncrementTick+0x160>)
 8004abc:	441a      	add	r2, r3
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	3304      	adds	r3, #4
 8004ac2:	4619      	mov	r1, r3
 8004ac4:	4610      	mov	r0, r2
 8004ac6:	f7fe fefa 	bl	80038be <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ace:	4b1b      	ldr	r3, [pc, #108]	; (8004b3c <xTaskIncrementTick+0x164>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d3b9      	bcc.n	8004a4c <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004adc:	e7b6      	b.n	8004a4c <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004ade:	4b17      	ldr	r3, [pc, #92]	; (8004b3c <xTaskIncrementTick+0x164>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ae4:	4914      	ldr	r1, [pc, #80]	; (8004b38 <xTaskIncrementTick+0x160>)
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	4413      	add	r3, r2
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	440b      	add	r3, r1
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d901      	bls.n	8004afa <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 8004af6:	2301      	movs	r3, #1
 8004af8:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8004afa:	4b11      	ldr	r3, [pc, #68]	; (8004b40 <xTaskIncrementTick+0x168>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d007      	beq.n	8004b12 <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 8004b02:	2301      	movs	r3, #1
 8004b04:	617b      	str	r3, [r7, #20]
 8004b06:	e004      	b.n	8004b12 <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8004b08:	4b0e      	ldr	r3, [pc, #56]	; (8004b44 <xTaskIncrementTick+0x16c>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	4a0d      	ldr	r2, [pc, #52]	; (8004b44 <xTaskIncrementTick+0x16c>)
 8004b10:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8004b12:	697b      	ldr	r3, [r7, #20]
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3718      	adds	r7, #24
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	20000240 	.word	0x20000240
 8004b20:	2000021c 	.word	0x2000021c
 8004b24:	200001d0 	.word	0x200001d0
 8004b28:	200001d4 	.word	0x200001d4
 8004b2c:	20000230 	.word	0x20000230
 8004b30:	20000238 	.word	0x20000238
 8004b34:	20000220 	.word	0x20000220
 8004b38:	20000144 	.word	0x20000144
 8004b3c:	20000140 	.word	0x20000140
 8004b40:	2000022c 	.word	0x2000022c
 8004b44:	20000228 	.word	0x20000228

08004b48 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b087      	sub	sp, #28
 8004b4c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004b4e:	4b27      	ldr	r3, [pc, #156]	; (8004bec <vTaskSwitchContext+0xa4>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d003      	beq.n	8004b5e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8004b56:	4b26      	ldr	r3, [pc, #152]	; (8004bf0 <vTaskSwitchContext+0xa8>)
 8004b58:	2201      	movs	r2, #1
 8004b5a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8004b5c:	e03f      	b.n	8004bde <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8004b5e:	4b24      	ldr	r3, [pc, #144]	; (8004bf0 <vTaskSwitchContext+0xa8>)
 8004b60:	2200      	movs	r2, #0
 8004b62:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b64:	4b23      	ldr	r3, [pc, #140]	; (8004bf4 <vTaskSwitchContext+0xac>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	fab3 f383 	clz	r3, r3
 8004b70:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8004b72:	7afb      	ldrb	r3, [r7, #11]
 8004b74:	f1c3 031f 	rsb	r3, r3, #31
 8004b78:	617b      	str	r3, [r7, #20]
 8004b7a:	491f      	ldr	r1, [pc, #124]	; (8004bf8 <vTaskSwitchContext+0xb0>)
 8004b7c:	697a      	ldr	r2, [r7, #20]
 8004b7e:	4613      	mov	r3, r2
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	4413      	add	r3, r2
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	440b      	add	r3, r1
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d10a      	bne.n	8004ba4 <vTaskSwitchContext+0x5c>
        __asm volatile
 8004b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b92:	f383 8811 	msr	BASEPRI, r3
 8004b96:	f3bf 8f6f 	isb	sy
 8004b9a:	f3bf 8f4f 	dsb	sy
 8004b9e:	607b      	str	r3, [r7, #4]
    }
 8004ba0:	bf00      	nop
 8004ba2:	e7fe      	b.n	8004ba2 <vTaskSwitchContext+0x5a>
 8004ba4:	697a      	ldr	r2, [r7, #20]
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	4413      	add	r3, r2
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	4a12      	ldr	r2, [pc, #72]	; (8004bf8 <vTaskSwitchContext+0xb0>)
 8004bb0:	4413      	add	r3, r2
 8004bb2:	613b      	str	r3, [r7, #16]
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	685a      	ldr	r2, [r3, #4]
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	605a      	str	r2, [r3, #4]
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	685a      	ldr	r2, [r3, #4]
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	3308      	adds	r3, #8
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d104      	bne.n	8004bd4 <vTaskSwitchContext+0x8c>
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	685a      	ldr	r2, [r3, #4]
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	605a      	str	r2, [r3, #4]
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	4a08      	ldr	r2, [pc, #32]	; (8004bfc <vTaskSwitchContext+0xb4>)
 8004bdc:	6013      	str	r3, [r2, #0]
}
 8004bde:	bf00      	nop
 8004be0:	371c      	adds	r7, #28
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	20000240 	.word	0x20000240
 8004bf0:	2000022c 	.word	0x2000022c
 8004bf4:	20000220 	.word	0x20000220
 8004bf8:	20000144 	.word	0x20000144
 8004bfc:	20000140 	.word	0x20000140

08004c00 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d10a      	bne.n	8004c26 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8004c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c14:	f383 8811 	msr	BASEPRI, r3
 8004c18:	f3bf 8f6f 	isb	sy
 8004c1c:	f3bf 8f4f 	dsb	sy
 8004c20:	60fb      	str	r3, [r7, #12]
    }
 8004c22:	bf00      	nop
 8004c24:	e7fe      	b.n	8004c24 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004c26:	4b07      	ldr	r3, [pc, #28]	; (8004c44 <vTaskPlaceOnEventList+0x44>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	3318      	adds	r3, #24
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f7fe fe69 	bl	8003906 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004c34:	2101      	movs	r1, #1
 8004c36:	6838      	ldr	r0, [r7, #0]
 8004c38:	f000 fcc8 	bl	80055cc <prvAddCurrentTaskToDelayedList>
}
 8004c3c:	bf00      	nop
 8004c3e:	3710      	adds	r7, #16
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	20000140 	.word	0x20000140

08004c48 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b086      	sub	sp, #24
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d10a      	bne.n	8004c70 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8004c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5e:	f383 8811 	msr	BASEPRI, r3
 8004c62:	f3bf 8f6f 	isb	sy
 8004c66:	f3bf 8f4f 	dsb	sy
 8004c6a:	617b      	str	r3, [r7, #20]
    }
 8004c6c:	bf00      	nop
 8004c6e:	e7fe      	b.n	8004c6e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004c70:	4b0a      	ldr	r3, [pc, #40]	; (8004c9c <vTaskPlaceOnEventListRestricted+0x54>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	3318      	adds	r3, #24
 8004c76:	4619      	mov	r1, r3
 8004c78:	68f8      	ldr	r0, [r7, #12]
 8004c7a:	f7fe fe20 	bl	80038be <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d002      	beq.n	8004c8a <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8004c84:	f04f 33ff 	mov.w	r3, #4294967295
 8004c88:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004c8a:	6879      	ldr	r1, [r7, #4]
 8004c8c:	68b8      	ldr	r0, [r7, #8]
 8004c8e:	f000 fc9d 	bl	80055cc <prvAddCurrentTaskToDelayedList>
    }
 8004c92:	bf00      	nop
 8004c94:	3718      	adds	r7, #24
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	20000140 	.word	0x20000140

08004ca0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b086      	sub	sp, #24
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d10a      	bne.n	8004ccc <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8004cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cba:	f383 8811 	msr	BASEPRI, r3
 8004cbe:	f3bf 8f6f 	isb	sy
 8004cc2:	f3bf 8f4f 	dsb	sy
 8004cc6:	60fb      	str	r3, [r7, #12]
    }
 8004cc8:	bf00      	nop
 8004cca:	e7fe      	b.n	8004cca <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	3318      	adds	r3, #24
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f7fe fe51 	bl	8003978 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cd6:	4b1d      	ldr	r3, [pc, #116]	; (8004d4c <xTaskRemoveFromEventList+0xac>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d11c      	bne.n	8004d18 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	3304      	adds	r3, #4
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f7fe fe48 	bl	8003978 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cec:	2201      	movs	r2, #1
 8004cee:	409a      	lsls	r2, r3
 8004cf0:	4b17      	ldr	r3, [pc, #92]	; (8004d50 <xTaskRemoveFromEventList+0xb0>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	4a16      	ldr	r2, [pc, #88]	; (8004d50 <xTaskRemoveFromEventList+0xb0>)
 8004cf8:	6013      	str	r3, [r2, #0]
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cfe:	4613      	mov	r3, r2
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	4413      	add	r3, r2
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	4a13      	ldr	r2, [pc, #76]	; (8004d54 <xTaskRemoveFromEventList+0xb4>)
 8004d08:	441a      	add	r2, r3
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	3304      	adds	r3, #4
 8004d0e:	4619      	mov	r1, r3
 8004d10:	4610      	mov	r0, r2
 8004d12:	f7fe fdd4 	bl	80038be <vListInsertEnd>
 8004d16:	e005      	b.n	8004d24 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	3318      	adds	r3, #24
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	480e      	ldr	r0, [pc, #56]	; (8004d58 <xTaskRemoveFromEventList+0xb8>)
 8004d20:	f7fe fdcd 	bl	80038be <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d28:	4b0c      	ldr	r3, [pc, #48]	; (8004d5c <xTaskRemoveFromEventList+0xbc>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d905      	bls.n	8004d3e <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8004d32:	2301      	movs	r3, #1
 8004d34:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8004d36:	4b0a      	ldr	r3, [pc, #40]	; (8004d60 <xTaskRemoveFromEventList+0xc0>)
 8004d38:	2201      	movs	r2, #1
 8004d3a:	601a      	str	r2, [r3, #0]
 8004d3c:	e001      	b.n	8004d42 <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8004d42:	697b      	ldr	r3, [r7, #20]
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3718      	adds	r7, #24
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	20000240 	.word	0x20000240
 8004d50:	20000220 	.word	0x20000220
 8004d54:	20000144 	.word	0x20000144
 8004d58:	200001d8 	.word	0x200001d8
 8004d5c:	20000140 	.word	0x20000140
 8004d60:	2000022c 	.word	0x2000022c

08004d64 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004d6c:	4b06      	ldr	r3, [pc, #24]	; (8004d88 <vTaskInternalSetTimeOutState+0x24>)
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004d74:	4b05      	ldr	r3, [pc, #20]	; (8004d8c <vTaskInternalSetTimeOutState+0x28>)
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	605a      	str	r2, [r3, #4]
}
 8004d7c:	bf00      	nop
 8004d7e:	370c      	adds	r7, #12
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr
 8004d88:	20000230 	.word	0x20000230
 8004d8c:	2000021c 	.word	0x2000021c

08004d90 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b088      	sub	sp, #32
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d10a      	bne.n	8004db6 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8004da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da4:	f383 8811 	msr	BASEPRI, r3
 8004da8:	f3bf 8f6f 	isb	sy
 8004dac:	f3bf 8f4f 	dsb	sy
 8004db0:	613b      	str	r3, [r7, #16]
    }
 8004db2:	bf00      	nop
 8004db4:	e7fe      	b.n	8004db4 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d10a      	bne.n	8004dd2 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8004dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc0:	f383 8811 	msr	BASEPRI, r3
 8004dc4:	f3bf 8f6f 	isb	sy
 8004dc8:	f3bf 8f4f 	dsb	sy
 8004dcc:	60fb      	str	r3, [r7, #12]
    }
 8004dce:	bf00      	nop
 8004dd0:	e7fe      	b.n	8004dd0 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8004dd2:	f001 f91f 	bl	8006014 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8004dd6:	4b1f      	ldr	r3, [pc, #124]	; (8004e54 <xTaskCheckForTimeOut+0xc4>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	69ba      	ldr	r2, [r7, #24]
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dee:	d102      	bne.n	8004df6 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004df0:	2300      	movs	r3, #0
 8004df2:	61fb      	str	r3, [r7, #28]
 8004df4:	e026      	b.n	8004e44 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	4b17      	ldr	r3, [pc, #92]	; (8004e58 <xTaskCheckForTimeOut+0xc8>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d00a      	beq.n	8004e18 <xTaskCheckForTimeOut+0x88>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	69ba      	ldr	r2, [r7, #24]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d305      	bcc.n	8004e18 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	2200      	movs	r2, #0
 8004e14:	601a      	str	r2, [r3, #0]
 8004e16:	e015      	b.n	8004e44 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	697a      	ldr	r2, [r7, #20]
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d20b      	bcs.n	8004e3a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	1ad2      	subs	r2, r2, r3
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f7ff ff98 	bl	8004d64 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004e34:	2300      	movs	r3, #0
 8004e36:	61fb      	str	r3, [r7, #28]
 8004e38:	e004      	b.n	8004e44 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004e40:	2301      	movs	r3, #1
 8004e42:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004e44:	f001 f916 	bl	8006074 <vPortExitCritical>

    return xReturn;
 8004e48:	69fb      	ldr	r3, [r7, #28]
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3720      	adds	r7, #32
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	2000021c 	.word	0x2000021c
 8004e58:	20000230 	.word	0x20000230

08004e5c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8004e60:	4b03      	ldr	r3, [pc, #12]	; (8004e70 <vTaskMissedYield+0x14>)
 8004e62:	2201      	movs	r2, #1
 8004e64:	601a      	str	r2, [r3, #0]
}
 8004e66:	bf00      	nop
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr
 8004e70:	2000022c 	.word	0x2000022c

08004e74 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004e7c:	f000 f852 	bl	8004f24 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004e80:	4b06      	ldr	r3, [pc, #24]	; (8004e9c <prvIdleTask+0x28>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d9f9      	bls.n	8004e7c <prvIdleTask+0x8>
                {
                    taskYIELD();
 8004e88:	4b05      	ldr	r3, [pc, #20]	; (8004ea0 <prvIdleTask+0x2c>)
 8004e8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e8e:	601a      	str	r2, [r3, #0]
 8004e90:	f3bf 8f4f 	dsb	sy
 8004e94:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004e98:	e7f0      	b.n	8004e7c <prvIdleTask+0x8>
 8004e9a:	bf00      	nop
 8004e9c:	20000144 	.word	0x20000144
 8004ea0:	e000ed04 	.word	0xe000ed04

08004ea4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004eaa:	2300      	movs	r3, #0
 8004eac:	607b      	str	r3, [r7, #4]
 8004eae:	e00c      	b.n	8004eca <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	4413      	add	r3, r2
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	4a12      	ldr	r2, [pc, #72]	; (8004f04 <prvInitialiseTaskLists+0x60>)
 8004ebc:	4413      	add	r3, r2
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f7fe fcd0 	bl	8003864 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	607b      	str	r3, [r7, #4]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2b04      	cmp	r3, #4
 8004ece:	d9ef      	bls.n	8004eb0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004ed0:	480d      	ldr	r0, [pc, #52]	; (8004f08 <prvInitialiseTaskLists+0x64>)
 8004ed2:	f7fe fcc7 	bl	8003864 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004ed6:	480d      	ldr	r0, [pc, #52]	; (8004f0c <prvInitialiseTaskLists+0x68>)
 8004ed8:	f7fe fcc4 	bl	8003864 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004edc:	480c      	ldr	r0, [pc, #48]	; (8004f10 <prvInitialiseTaskLists+0x6c>)
 8004ede:	f7fe fcc1 	bl	8003864 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8004ee2:	480c      	ldr	r0, [pc, #48]	; (8004f14 <prvInitialiseTaskLists+0x70>)
 8004ee4:	f7fe fcbe 	bl	8003864 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8004ee8:	480b      	ldr	r0, [pc, #44]	; (8004f18 <prvInitialiseTaskLists+0x74>)
 8004eea:	f7fe fcbb 	bl	8003864 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8004eee:	4b0b      	ldr	r3, [pc, #44]	; (8004f1c <prvInitialiseTaskLists+0x78>)
 8004ef0:	4a05      	ldr	r2, [pc, #20]	; (8004f08 <prvInitialiseTaskLists+0x64>)
 8004ef2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004ef4:	4b0a      	ldr	r3, [pc, #40]	; (8004f20 <prvInitialiseTaskLists+0x7c>)
 8004ef6:	4a05      	ldr	r2, [pc, #20]	; (8004f0c <prvInitialiseTaskLists+0x68>)
 8004ef8:	601a      	str	r2, [r3, #0]
}
 8004efa:	bf00      	nop
 8004efc:	3708      	adds	r7, #8
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	20000144 	.word	0x20000144
 8004f08:	200001a8 	.word	0x200001a8
 8004f0c:	200001bc 	.word	0x200001bc
 8004f10:	200001d8 	.word	0x200001d8
 8004f14:	200001ec 	.word	0x200001ec
 8004f18:	20000204 	.word	0x20000204
 8004f1c:	200001d0 	.word	0x200001d0
 8004f20:	200001d4 	.word	0x200001d4

08004f24 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f2a:	e019      	b.n	8004f60 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8004f2c:	f001 f872 	bl	8006014 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f30:	4b10      	ldr	r3, [pc, #64]	; (8004f74 <prvCheckTasksWaitingTermination+0x50>)
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	3304      	adds	r3, #4
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f7fe fd1b 	bl	8003978 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8004f42:	4b0d      	ldr	r3, [pc, #52]	; (8004f78 <prvCheckTasksWaitingTermination+0x54>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	3b01      	subs	r3, #1
 8004f48:	4a0b      	ldr	r2, [pc, #44]	; (8004f78 <prvCheckTasksWaitingTermination+0x54>)
 8004f4a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8004f4c:	4b0b      	ldr	r3, [pc, #44]	; (8004f7c <prvCheckTasksWaitingTermination+0x58>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	3b01      	subs	r3, #1
 8004f52:	4a0a      	ldr	r2, [pc, #40]	; (8004f7c <prvCheckTasksWaitingTermination+0x58>)
 8004f54:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8004f56:	f001 f88d 	bl	8006074 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 f810 	bl	8004f80 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f60:	4b06      	ldr	r3, [pc, #24]	; (8004f7c <prvCheckTasksWaitingTermination+0x58>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d1e1      	bne.n	8004f2c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8004f68:	bf00      	nop
 8004f6a:	bf00      	nop
 8004f6c:	3708      	adds	r7, #8
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	200001ec 	.word	0x200001ec
 8004f78:	20000218 	.word	0x20000218
 8004f7c:	20000200 	.word	0x20000200

08004f80 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b082      	sub	sp, #8
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f001 fa45 	bl	800641c <vPortFree>
                vPortFree( pxTCB );
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f001 fa42 	bl	800641c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004f98:	bf00      	nop
 8004f9a:	3708      	adds	r7, #8
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004fa4:	4b0a      	ldr	r3, [pc, #40]	; (8004fd0 <prvResetNextTaskUnblockTime+0x30>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d104      	bne.n	8004fb8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8004fae:	4b09      	ldr	r3, [pc, #36]	; (8004fd4 <prvResetNextTaskUnblockTime+0x34>)
 8004fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8004fb4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004fb6:	e005      	b.n	8004fc4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004fb8:	4b05      	ldr	r3, [pc, #20]	; (8004fd0 <prvResetNextTaskUnblockTime+0x30>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a04      	ldr	r2, [pc, #16]	; (8004fd4 <prvResetNextTaskUnblockTime+0x34>)
 8004fc2:	6013      	str	r3, [r2, #0]
}
 8004fc4:	bf00      	nop
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr
 8004fce:	bf00      	nop
 8004fd0:	200001d0 	.word	0x200001d0
 8004fd4:	20000238 	.word	0x20000238

08004fd8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8004fde:	4b0b      	ldr	r3, [pc, #44]	; (800500c <xTaskGetSchedulerState+0x34>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d102      	bne.n	8004fec <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	607b      	str	r3, [r7, #4]
 8004fea:	e008      	b.n	8004ffe <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fec:	4b08      	ldr	r3, [pc, #32]	; (8005010 <xTaskGetSchedulerState+0x38>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d102      	bne.n	8004ffa <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	607b      	str	r3, [r7, #4]
 8004ff8:	e001      	b.n	8004ffe <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8004ffe:	687b      	ldr	r3, [r7, #4]
    }
 8005000:	4618      	mov	r0, r3
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr
 800500c:	20000224 	.word	0x20000224
 8005010:	20000240 	.word	0x20000240

08005014 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8005014:	b580      	push	{r7, lr}
 8005016:	b086      	sub	sp, #24
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8005020:	2300      	movs	r3, #0
 8005022:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d063      	beq.n	80050f2 <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800502a:	4b34      	ldr	r3, [pc, #208]	; (80050fc <xTaskPriorityDisinherit+0xe8>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	693a      	ldr	r2, [r7, #16]
 8005030:	429a      	cmp	r2, r3
 8005032:	d00a      	beq.n	800504a <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8005034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005038:	f383 8811 	msr	BASEPRI, r3
 800503c:	f3bf 8f6f 	isb	sy
 8005040:	f3bf 8f4f 	dsb	sy
 8005044:	60fb      	str	r3, [r7, #12]
    }
 8005046:	bf00      	nop
 8005048:	e7fe      	b.n	8005048 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800504e:	2b00      	cmp	r3, #0
 8005050:	d10a      	bne.n	8005068 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8005052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005056:	f383 8811 	msr	BASEPRI, r3
 800505a:	f3bf 8f6f 	isb	sy
 800505e:	f3bf 8f4f 	dsb	sy
 8005062:	60bb      	str	r3, [r7, #8]
    }
 8005064:	bf00      	nop
 8005066:	e7fe      	b.n	8005066 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800506c:	1e5a      	subs	r2, r3, #1
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800507a:	429a      	cmp	r2, r3
 800507c:	d039      	beq.n	80050f2 <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005082:	2b00      	cmp	r3, #0
 8005084:	d135      	bne.n	80050f2 <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	3304      	adds	r3, #4
 800508a:	4618      	mov	r0, r3
 800508c:	f7fe fc74 	bl	8003978 <uxListRemove>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d10a      	bne.n	80050ac <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800509a:	2201      	movs	r2, #1
 800509c:	fa02 f303 	lsl.w	r3, r2, r3
 80050a0:	43da      	mvns	r2, r3
 80050a2:	4b17      	ldr	r3, [pc, #92]	; (8005100 <xTaskPriorityDisinherit+0xec>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4013      	ands	r3, r2
 80050a8:	4a15      	ldr	r2, [pc, #84]	; (8005100 <xTaskPriorityDisinherit+0xec>)
 80050aa:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b8:	f1c3 0205 	rsb	r2, r3, #5
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c4:	2201      	movs	r2, #1
 80050c6:	409a      	lsls	r2, r3
 80050c8:	4b0d      	ldr	r3, [pc, #52]	; (8005100 <xTaskPriorityDisinherit+0xec>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	4a0c      	ldr	r2, [pc, #48]	; (8005100 <xTaskPriorityDisinherit+0xec>)
 80050d0:	6013      	str	r3, [r2, #0]
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050d6:	4613      	mov	r3, r2
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	4413      	add	r3, r2
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	4a09      	ldr	r2, [pc, #36]	; (8005104 <xTaskPriorityDisinherit+0xf0>)
 80050e0:	441a      	add	r2, r3
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	3304      	adds	r3, #4
 80050e6:	4619      	mov	r1, r3
 80050e8:	4610      	mov	r0, r2
 80050ea:	f7fe fbe8 	bl	80038be <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80050ee:	2301      	movs	r3, #1
 80050f0:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80050f2:	697b      	ldr	r3, [r7, #20]
    }
 80050f4:	4618      	mov	r0, r3
 80050f6:	3718      	adds	r7, #24
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	20000140 	.word	0x20000140
 8005100:	20000220 	.word	0x20000220
 8005104:	20000144 	.word	0x20000144

08005108 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8005108:	b580      	push	{r7, lr}
 800510a:	b086      	sub	sp, #24
 800510c:	af00      	add	r7, sp, #0
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	607a      	str	r2, [r7, #4]
 8005114:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d00a      	beq.n	8005132 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 800511c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005120:	f383 8811 	msr	BASEPRI, r3
 8005124:	f3bf 8f6f 	isb	sy
 8005128:	f3bf 8f4f 	dsb	sy
 800512c:	613b      	str	r3, [r7, #16]
    }
 800512e:	bf00      	nop
 8005130:	e7fe      	b.n	8005130 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8005132:	f000 ff6f 	bl	8006014 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8005136:	4b32      	ldr	r3, [pc, #200]	; (8005200 <xTaskGenericNotifyWait+0xf8>)
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	4413      	add	r3, r2
 800513e:	3354      	adds	r3, #84	; 0x54
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	b2db      	uxtb	r3, r3
 8005144:	2b02      	cmp	r3, #2
 8005146:	d022      	beq.n	800518e <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8005148:	4b2d      	ldr	r3, [pc, #180]	; (8005200 <xTaskGenericNotifyWait+0xf8>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	3214      	adds	r2, #20
 8005150:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005154:	68ba      	ldr	r2, [r7, #8]
 8005156:	43d2      	mvns	r2, r2
 8005158:	4011      	ands	r1, r2
 800515a:	68fa      	ldr	r2, [r7, #12]
 800515c:	3214      	adds	r2, #20
 800515e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8005162:	4b27      	ldr	r3, [pc, #156]	; (8005200 <xTaskGenericNotifyWait+0xf8>)
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	4413      	add	r3, r2
 800516a:	3354      	adds	r3, #84	; 0x54
 800516c:	2201      	movs	r2, #1
 800516e:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8005170:	6a3b      	ldr	r3, [r7, #32]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d00b      	beq.n	800518e <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005176:	2101      	movs	r1, #1
 8005178:	6a38      	ldr	r0, [r7, #32]
 800517a:	f000 fa27 	bl	80055cc <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 800517e:	4b21      	ldr	r3, [pc, #132]	; (8005204 <xTaskGenericNotifyWait+0xfc>)
 8005180:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005184:	601a      	str	r2, [r3, #0]
 8005186:	f3bf 8f4f 	dsb	sy
 800518a:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800518e:	f000 ff71 	bl	8006074 <vPortExitCritical>

        taskENTER_CRITICAL();
 8005192:	f000 ff3f 	bl	8006014 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d007      	beq.n	80051ac <xTaskGenericNotifyWait+0xa4>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 800519c:	4b18      	ldr	r3, [pc, #96]	; (8005200 <xTaskGenericNotifyWait+0xf8>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	3214      	adds	r2, #20
 80051a4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80051ac:	4b14      	ldr	r3, [pc, #80]	; (8005200 <xTaskGenericNotifyWait+0xf8>)
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	4413      	add	r3, r2
 80051b4:	3354      	adds	r3, #84	; 0x54
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	d002      	beq.n	80051c4 <xTaskGenericNotifyWait+0xbc>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80051be:	2300      	movs	r3, #0
 80051c0:	617b      	str	r3, [r7, #20]
 80051c2:	e00e      	b.n	80051e2 <xTaskGenericNotifyWait+0xda>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 80051c4:	4b0e      	ldr	r3, [pc, #56]	; (8005200 <xTaskGenericNotifyWait+0xf8>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68fa      	ldr	r2, [r7, #12]
 80051ca:	3214      	adds	r2, #20
 80051cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	43d2      	mvns	r2, r2
 80051d4:	4011      	ands	r1, r2
 80051d6:	68fa      	ldr	r2, [r7, #12]
 80051d8:	3214      	adds	r2, #20
 80051da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 80051de:	2301      	movs	r3, #1
 80051e0:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 80051e2:	4b07      	ldr	r3, [pc, #28]	; (8005200 <xTaskGenericNotifyWait+0xf8>)
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	4413      	add	r3, r2
 80051ea:	3354      	adds	r3, #84	; 0x54
 80051ec:	2200      	movs	r2, #0
 80051ee:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 80051f0:	f000 ff40 	bl	8006074 <vPortExitCritical>

        return xReturn;
 80051f4:	697b      	ldr	r3, [r7, #20]
    }
 80051f6:	4618      	mov	r0, r3
 80051f8:	3718      	adds	r7, #24
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop
 8005200:	20000140 	.word	0x20000140
 8005204:	e000ed04 	.word	0xe000ed04

08005208 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8005208:	b580      	push	{r7, lr}
 800520a:	b08c      	sub	sp, #48	; 0x30
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	607a      	str	r2, [r7, #4]
 8005214:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8005216:	2301      	movs	r3, #1
 8005218:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00a      	beq.n	8005236 <xTaskGenericNotify+0x2e>
        __asm volatile
 8005220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005224:	f383 8811 	msr	BASEPRI, r3
 8005228:	f3bf 8f6f 	isb	sy
 800522c:	f3bf 8f4f 	dsb	sy
 8005230:	623b      	str	r3, [r7, #32]
    }
 8005232:	bf00      	nop
 8005234:	e7fe      	b.n	8005234 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d10a      	bne.n	8005252 <xTaskGenericNotify+0x4a>
        __asm volatile
 800523c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005240:	f383 8811 	msr	BASEPRI, r3
 8005244:	f3bf 8f6f 	isb	sy
 8005248:	f3bf 8f4f 	dsb	sy
 800524c:	61fb      	str	r3, [r7, #28]
    }
 800524e:	bf00      	nop
 8005250:	e7fe      	b.n	8005250 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 8005256:	f000 fedd 	bl	8006014 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 800525a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800525c:	2b00      	cmp	r3, #0
 800525e:	d006      	beq.n	800526e <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8005260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005262:	68ba      	ldr	r2, [r7, #8]
 8005264:	3214      	adds	r2, #20
 8005266:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800526a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800526c:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800526e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	4413      	add	r3, r2
 8005274:	3354      	adds	r3, #84	; 0x54
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800527c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	4413      	add	r3, r2
 8005282:	3354      	adds	r3, #84	; 0x54
 8005284:	2202      	movs	r2, #2
 8005286:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8005288:	78fb      	ldrb	r3, [r7, #3]
 800528a:	2b04      	cmp	r3, #4
 800528c:	d83b      	bhi.n	8005306 <xTaskGenericNotify+0xfe>
 800528e:	a201      	add	r2, pc, #4	; (adr r2, 8005294 <xTaskGenericNotify+0x8c>)
 8005290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005294:	08005325 	.word	0x08005325
 8005298:	080052a9 	.word	0x080052a9
 800529c:	080052c5 	.word	0x080052c5
 80052a0:	080052dd 	.word	0x080052dd
 80052a4:	080052eb 	.word	0x080052eb
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80052a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052aa:	68ba      	ldr	r2, [r7, #8]
 80052ac:	3214      	adds	r2, #20
 80052ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	ea42 0103 	orr.w	r1, r2, r3
 80052b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ba:	68ba      	ldr	r2, [r7, #8]
 80052bc:	3214      	adds	r2, #20
 80052be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80052c2:	e032      	b.n	800532a <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80052c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c6:	68ba      	ldr	r2, [r7, #8]
 80052c8:	3214      	adds	r2, #20
 80052ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052ce:	1c59      	adds	r1, r3, #1
 80052d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d2:	68ba      	ldr	r2, [r7, #8]
 80052d4:	3214      	adds	r2, #20
 80052d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80052da:	e026      	b.n	800532a <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80052dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052de:	68ba      	ldr	r2, [r7, #8]
 80052e0:	3214      	adds	r2, #20
 80052e2:	6879      	ldr	r1, [r7, #4]
 80052e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80052e8:	e01f      	b.n	800532a <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80052ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d006      	beq.n	8005300 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80052f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f4:	68ba      	ldr	r2, [r7, #8]
 80052f6:	3214      	adds	r2, #20
 80052f8:	6879      	ldr	r1, [r7, #4]
 80052fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80052fe:	e014      	b.n	800532a <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8005300:	2300      	movs	r3, #0
 8005302:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 8005304:	e011      	b.n	800532a <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8005306:	4b2b      	ldr	r3, [pc, #172]	; (80053b4 <xTaskGenericNotify+0x1ac>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d00c      	beq.n	8005328 <xTaskGenericNotify+0x120>
        __asm volatile
 800530e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005312:	f383 8811 	msr	BASEPRI, r3
 8005316:	f3bf 8f6f 	isb	sy
 800531a:	f3bf 8f4f 	dsb	sy
 800531e:	61bb      	str	r3, [r7, #24]
    }
 8005320:	bf00      	nop
 8005322:	e7fe      	b.n	8005322 <xTaskGenericNotify+0x11a>
                    break;
 8005324:	bf00      	nop
 8005326:	e000      	b.n	800532a <xTaskGenericNotify+0x122>

                    break;
 8005328:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800532a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800532e:	2b01      	cmp	r3, #1
 8005330:	d139      	bne.n	80053a6 <xTaskGenericNotify+0x19e>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005334:	3304      	adds	r3, #4
 8005336:	4618      	mov	r0, r3
 8005338:	f7fe fb1e 	bl	8003978 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 800533c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800533e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005340:	2201      	movs	r2, #1
 8005342:	409a      	lsls	r2, r3
 8005344:	4b1c      	ldr	r3, [pc, #112]	; (80053b8 <xTaskGenericNotify+0x1b0>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4313      	orrs	r3, r2
 800534a:	4a1b      	ldr	r2, [pc, #108]	; (80053b8 <xTaskGenericNotify+0x1b0>)
 800534c:	6013      	str	r3, [r2, #0]
 800534e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005352:	4613      	mov	r3, r2
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	4413      	add	r3, r2
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	4a18      	ldr	r2, [pc, #96]	; (80053bc <xTaskGenericNotify+0x1b4>)
 800535c:	441a      	add	r2, r3
 800535e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005360:	3304      	adds	r3, #4
 8005362:	4619      	mov	r1, r3
 8005364:	4610      	mov	r0, r2
 8005366:	f7fe faaa 	bl	80038be <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800536a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800536c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00a      	beq.n	8005388 <xTaskGenericNotify+0x180>
        __asm volatile
 8005372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005376:	f383 8811 	msr	BASEPRI, r3
 800537a:	f3bf 8f6f 	isb	sy
 800537e:	f3bf 8f4f 	dsb	sy
 8005382:	617b      	str	r3, [r7, #20]
    }
 8005384:	bf00      	nop
 8005386:	e7fe      	b.n	8005386 <xTaskGenericNotify+0x17e>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800538a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800538c:	4b0c      	ldr	r3, [pc, #48]	; (80053c0 <xTaskGenericNotify+0x1b8>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005392:	429a      	cmp	r2, r3
 8005394:	d907      	bls.n	80053a6 <xTaskGenericNotify+0x19e>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8005396:	4b0b      	ldr	r3, [pc, #44]	; (80053c4 <xTaskGenericNotify+0x1bc>)
 8005398:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800539c:	601a      	str	r2, [r3, #0]
 800539e:	f3bf 8f4f 	dsb	sy
 80053a2:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80053a6:	f000 fe65 	bl	8006074 <vPortExitCritical>

        return xReturn;
 80053aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 80053ac:	4618      	mov	r0, r3
 80053ae:	3730      	adds	r7, #48	; 0x30
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	2000021c 	.word	0x2000021c
 80053b8:	20000220 	.word	0x20000220
 80053bc:	20000144 	.word	0x20000144
 80053c0:	20000140 	.word	0x20000140
 80053c4:	e000ed04 	.word	0xe000ed04

080053c8 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b090      	sub	sp, #64	; 0x40
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	607a      	str	r2, [r7, #4]
 80053d4:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 80053d6:	2301      	movs	r3, #1
 80053d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d10a      	bne.n	80053f6 <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 80053e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e4:	f383 8811 	msr	BASEPRI, r3
 80053e8:	f3bf 8f6f 	isb	sy
 80053ec:	f3bf 8f4f 	dsb	sy
 80053f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 80053f2:	bf00      	nop
 80053f4:	e7fe      	b.n	80053f4 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d00a      	beq.n	8005412 <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 80053fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005400:	f383 8811 	msr	BASEPRI, r3
 8005404:	f3bf 8f6f 	isb	sy
 8005408:	f3bf 8f4f 	dsb	sy
 800540c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800540e:	bf00      	nop
 8005410:	e7fe      	b.n	8005410 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005412:	f000 fee3 	bl	80061dc <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	63bb      	str	r3, [r7, #56]	; 0x38
        __asm volatile
 800541a:	f3ef 8211 	mrs	r2, BASEPRI
 800541e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005422:	f383 8811 	msr	BASEPRI, r3
 8005426:	f3bf 8f6f 	isb	sy
 800542a:	f3bf 8f4f 	dsb	sy
 800542e:	627a      	str	r2, [r7, #36]	; 0x24
 8005430:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 8005432:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005434:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 8005436:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005438:	2b00      	cmp	r3, #0
 800543a:	d006      	beq.n	800544a <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 800543c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800543e:	68ba      	ldr	r2, [r7, #8]
 8005440:	3214      	adds	r2, #20
 8005442:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005446:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005448:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800544a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	4413      	add	r3, r2
 8005450:	3354      	adds	r3, #84	; 0x54
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8005458:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	4413      	add	r3, r2
 800545e:	3354      	adds	r3, #84	; 0x54
 8005460:	2202      	movs	r2, #2
 8005462:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8005464:	78fb      	ldrb	r3, [r7, #3]
 8005466:	2b04      	cmp	r3, #4
 8005468:	d83b      	bhi.n	80054e2 <xTaskGenericNotifyFromISR+0x11a>
 800546a:	a201      	add	r2, pc, #4	; (adr r2, 8005470 <xTaskGenericNotifyFromISR+0xa8>)
 800546c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005470:	08005501 	.word	0x08005501
 8005474:	08005485 	.word	0x08005485
 8005478:	080054a1 	.word	0x080054a1
 800547c:	080054b9 	.word	0x080054b9
 8005480:	080054c7 	.word	0x080054c7
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8005484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005486:	68ba      	ldr	r2, [r7, #8]
 8005488:	3214      	adds	r2, #20
 800548a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	ea42 0103 	orr.w	r1, r2, r3
 8005494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005496:	68ba      	ldr	r2, [r7, #8]
 8005498:	3214      	adds	r2, #20
 800549a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800549e:	e032      	b.n	8005506 <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80054a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a2:	68ba      	ldr	r2, [r7, #8]
 80054a4:	3214      	adds	r2, #20
 80054a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054aa:	1c59      	adds	r1, r3, #1
 80054ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ae:	68ba      	ldr	r2, [r7, #8]
 80054b0:	3214      	adds	r2, #20
 80054b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80054b6:	e026      	b.n	8005506 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80054b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ba:	68ba      	ldr	r2, [r7, #8]
 80054bc:	3214      	adds	r2, #20
 80054be:	6879      	ldr	r1, [r7, #4]
 80054c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80054c4:	e01f      	b.n	8005506 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80054c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80054ca:	2b02      	cmp	r3, #2
 80054cc:	d006      	beq.n	80054dc <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80054ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d0:	68ba      	ldr	r2, [r7, #8]
 80054d2:	3214      	adds	r2, #20
 80054d4:	6879      	ldr	r1, [r7, #4]
 80054d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80054da:	e014      	b.n	8005506 <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 80054dc:	2300      	movs	r3, #0
 80054de:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 80054e0:	e011      	b.n	8005506 <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80054e2:	4b33      	ldr	r3, [pc, #204]	; (80055b0 <xTaskGenericNotifyFromISR+0x1e8>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00c      	beq.n	8005504 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 80054ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ee:	f383 8811 	msr	BASEPRI, r3
 80054f2:	f3bf 8f6f 	isb	sy
 80054f6:	f3bf 8f4f 	dsb	sy
 80054fa:	61fb      	str	r3, [r7, #28]
    }
 80054fc:	bf00      	nop
 80054fe:	e7fe      	b.n	80054fe <xTaskGenericNotifyFromISR+0x136>
                    break;
 8005500:	bf00      	nop
 8005502:	e000      	b.n	8005506 <xTaskGenericNotifyFromISR+0x13e>
                    break;
 8005504:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005506:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800550a:	2b01      	cmp	r3, #1
 800550c:	d145      	bne.n	800559a <xTaskGenericNotifyFromISR+0x1d2>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800550e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005512:	2b00      	cmp	r3, #0
 8005514:	d00a      	beq.n	800552c <xTaskGenericNotifyFromISR+0x164>
        __asm volatile
 8005516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800551a:	f383 8811 	msr	BASEPRI, r3
 800551e:	f3bf 8f6f 	isb	sy
 8005522:	f3bf 8f4f 	dsb	sy
 8005526:	61bb      	str	r3, [r7, #24]
    }
 8005528:	bf00      	nop
 800552a:	e7fe      	b.n	800552a <xTaskGenericNotifyFromISR+0x162>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800552c:	4b21      	ldr	r3, [pc, #132]	; (80055b4 <xTaskGenericNotifyFromISR+0x1ec>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d11c      	bne.n	800556e <xTaskGenericNotifyFromISR+0x1a6>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005536:	3304      	adds	r3, #4
 8005538:	4618      	mov	r0, r3
 800553a:	f7fe fa1d 	bl	8003978 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800553e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005542:	2201      	movs	r2, #1
 8005544:	409a      	lsls	r2, r3
 8005546:	4b1c      	ldr	r3, [pc, #112]	; (80055b8 <xTaskGenericNotifyFromISR+0x1f0>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4313      	orrs	r3, r2
 800554c:	4a1a      	ldr	r2, [pc, #104]	; (80055b8 <xTaskGenericNotifyFromISR+0x1f0>)
 800554e:	6013      	str	r3, [r2, #0]
 8005550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005554:	4613      	mov	r3, r2
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	4413      	add	r3, r2
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	4a17      	ldr	r2, [pc, #92]	; (80055bc <xTaskGenericNotifyFromISR+0x1f4>)
 800555e:	441a      	add	r2, r3
 8005560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005562:	3304      	adds	r3, #4
 8005564:	4619      	mov	r1, r3
 8005566:	4610      	mov	r0, r2
 8005568:	f7fe f9a9 	bl	80038be <vListInsertEnd>
 800556c:	e005      	b.n	800557a <xTaskGenericNotifyFromISR+0x1b2>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800556e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005570:	3318      	adds	r3, #24
 8005572:	4619      	mov	r1, r3
 8005574:	4812      	ldr	r0, [pc, #72]	; (80055c0 <xTaskGenericNotifyFromISR+0x1f8>)
 8005576:	f7fe f9a2 	bl	80038be <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800557a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800557c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800557e:	4b11      	ldr	r3, [pc, #68]	; (80055c4 <xTaskGenericNotifyFromISR+0x1fc>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005584:	429a      	cmp	r2, r3
 8005586:	d908      	bls.n	800559a <xTaskGenericNotifyFromISR+0x1d2>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8005588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800558a:	2b00      	cmp	r3, #0
 800558c:	d002      	beq.n	8005594 <xTaskGenericNotifyFromISR+0x1cc>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 800558e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005590:	2201      	movs	r2, #1
 8005592:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8005594:	4b0c      	ldr	r3, [pc, #48]	; (80055c8 <xTaskGenericNotifyFromISR+0x200>)
 8005596:	2201      	movs	r2, #1
 8005598:	601a      	str	r2, [r3, #0]
 800559a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800559c:	617b      	str	r3, [r7, #20]
        __asm volatile
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	f383 8811 	msr	BASEPRI, r3
    }
 80055a4:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 80055a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 80055a8:	4618      	mov	r0, r3
 80055aa:	3740      	adds	r7, #64	; 0x40
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	2000021c 	.word	0x2000021c
 80055b4:	20000240 	.word	0x20000240
 80055b8:	20000220 	.word	0x20000220
 80055bc:	20000144 	.word	0x20000144
 80055c0:	200001d8 	.word	0x200001d8
 80055c4:	20000140 	.word	0x20000140
 80055c8:	2000022c 	.word	0x2000022c

080055cc <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80055d6:	4b29      	ldr	r3, [pc, #164]	; (800567c <prvAddCurrentTaskToDelayedList+0xb0>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80055dc:	4b28      	ldr	r3, [pc, #160]	; (8005680 <prvAddCurrentTaskToDelayedList+0xb4>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	3304      	adds	r3, #4
 80055e2:	4618      	mov	r0, r3
 80055e4:	f7fe f9c8 	bl	8003978 <uxListRemove>
 80055e8:	4603      	mov	r3, r0
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d10b      	bne.n	8005606 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80055ee:	4b24      	ldr	r3, [pc, #144]	; (8005680 <prvAddCurrentTaskToDelayedList+0xb4>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f4:	2201      	movs	r2, #1
 80055f6:	fa02 f303 	lsl.w	r3, r2, r3
 80055fa:	43da      	mvns	r2, r3
 80055fc:	4b21      	ldr	r3, [pc, #132]	; (8005684 <prvAddCurrentTaskToDelayedList+0xb8>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4013      	ands	r3, r2
 8005602:	4a20      	ldr	r2, [pc, #128]	; (8005684 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005604:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800560c:	d10a      	bne.n	8005624 <prvAddCurrentTaskToDelayedList+0x58>
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d007      	beq.n	8005624 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005614:	4b1a      	ldr	r3, [pc, #104]	; (8005680 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	3304      	adds	r3, #4
 800561a:	4619      	mov	r1, r3
 800561c:	481a      	ldr	r0, [pc, #104]	; (8005688 <prvAddCurrentTaskToDelayedList+0xbc>)
 800561e:	f7fe f94e 	bl	80038be <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8005622:	e026      	b.n	8005672 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8005624:	68fa      	ldr	r2, [r7, #12]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4413      	add	r3, r2
 800562a:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800562c:	4b14      	ldr	r3, [pc, #80]	; (8005680 <prvAddCurrentTaskToDelayedList+0xb4>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	68ba      	ldr	r2, [r7, #8]
 8005632:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8005634:	68ba      	ldr	r2, [r7, #8]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	429a      	cmp	r2, r3
 800563a:	d209      	bcs.n	8005650 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800563c:	4b13      	ldr	r3, [pc, #76]	; (800568c <prvAddCurrentTaskToDelayedList+0xc0>)
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	4b0f      	ldr	r3, [pc, #60]	; (8005680 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	3304      	adds	r3, #4
 8005646:	4619      	mov	r1, r3
 8005648:	4610      	mov	r0, r2
 800564a:	f7fe f95c 	bl	8003906 <vListInsert>
}
 800564e:	e010      	b.n	8005672 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005650:	4b0f      	ldr	r3, [pc, #60]	; (8005690 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	4b0a      	ldr	r3, [pc, #40]	; (8005680 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	3304      	adds	r3, #4
 800565a:	4619      	mov	r1, r3
 800565c:	4610      	mov	r0, r2
 800565e:	f7fe f952 	bl	8003906 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8005662:	4b0c      	ldr	r3, [pc, #48]	; (8005694 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68ba      	ldr	r2, [r7, #8]
 8005668:	429a      	cmp	r2, r3
 800566a:	d202      	bcs.n	8005672 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 800566c:	4a09      	ldr	r2, [pc, #36]	; (8005694 <prvAddCurrentTaskToDelayedList+0xc8>)
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	6013      	str	r3, [r2, #0]
}
 8005672:	bf00      	nop
 8005674:	3710      	adds	r7, #16
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop
 800567c:	2000021c 	.word	0x2000021c
 8005680:	20000140 	.word	0x20000140
 8005684:	20000220 	.word	0x20000220
 8005688:	20000204 	.word	0x20000204
 800568c:	200001d4 	.word	0x200001d4
 8005690:	200001d0 	.word	0x200001d0
 8005694:	20000238 	.word	0x20000238

08005698 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8005698:	b580      	push	{r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800569e:	2300      	movs	r3, #0
 80056a0:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80056a2:	f000 fad5 	bl	8005c50 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80056a6:	4b11      	ldr	r3, [pc, #68]	; (80056ec <xTimerCreateTimerTask+0x54>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d00b      	beq.n	80056c6 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80056ae:	4b10      	ldr	r3, [pc, #64]	; (80056f0 <xTimerCreateTimerTask+0x58>)
 80056b0:	9301      	str	r3, [sp, #4]
 80056b2:	2302      	movs	r3, #2
 80056b4:	9300      	str	r3, [sp, #0]
 80056b6:	2300      	movs	r3, #0
 80056b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80056bc:	490d      	ldr	r1, [pc, #52]	; (80056f4 <xTimerCreateTimerTask+0x5c>)
 80056be:	480e      	ldr	r0, [pc, #56]	; (80056f8 <xTimerCreateTimerTask+0x60>)
 80056c0:	f7fe ff38 	bl	8004534 <xTaskCreate>
 80056c4:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d10a      	bne.n	80056e2 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80056cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d0:	f383 8811 	msr	BASEPRI, r3
 80056d4:	f3bf 8f6f 	isb	sy
 80056d8:	f3bf 8f4f 	dsb	sy
 80056dc:	603b      	str	r3, [r7, #0]
    }
 80056de:	bf00      	nop
 80056e0:	e7fe      	b.n	80056e0 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80056e2:	687b      	ldr	r3, [r7, #4]
    }
 80056e4:	4618      	mov	r0, r3
 80056e6:	3708      	adds	r7, #8
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}
 80056ec:	20000274 	.word	0x20000274
 80056f0:	20000278 	.word	0x20000278
 80056f4:	0800670c 	.word	0x0800670c
 80056f8:	08005831 	.word	0x08005831

080056fc <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b08a      	sub	sp, #40	; 0x28
 8005700:	af00      	add	r7, sp, #0
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	607a      	str	r2, [r7, #4]
 8005708:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800570a:	2300      	movs	r3, #0
 800570c:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d10a      	bne.n	800572a <xTimerGenericCommand+0x2e>
        __asm volatile
 8005714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005718:	f383 8811 	msr	BASEPRI, r3
 800571c:	f3bf 8f6f 	isb	sy
 8005720:	f3bf 8f4f 	dsb	sy
 8005724:	623b      	str	r3, [r7, #32]
    }
 8005726:	bf00      	nop
 8005728:	e7fe      	b.n	8005728 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800572a:	4b1a      	ldr	r3, [pc, #104]	; (8005794 <xTimerGenericCommand+0x98>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d02a      	beq.n	8005788 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	2b05      	cmp	r3, #5
 8005742:	dc18      	bgt.n	8005776 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005744:	f7ff fc48 	bl	8004fd8 <xTaskGetSchedulerState>
 8005748:	4603      	mov	r3, r0
 800574a:	2b02      	cmp	r3, #2
 800574c:	d109      	bne.n	8005762 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800574e:	4b11      	ldr	r3, [pc, #68]	; (8005794 <xTimerGenericCommand+0x98>)
 8005750:	6818      	ldr	r0, [r3, #0]
 8005752:	f107 0114 	add.w	r1, r7, #20
 8005756:	2300      	movs	r3, #0
 8005758:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800575a:	f7fe fa21 	bl	8003ba0 <xQueueGenericSend>
 800575e:	6278      	str	r0, [r7, #36]	; 0x24
 8005760:	e012      	b.n	8005788 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005762:	4b0c      	ldr	r3, [pc, #48]	; (8005794 <xTimerGenericCommand+0x98>)
 8005764:	6818      	ldr	r0, [r3, #0]
 8005766:	f107 0114 	add.w	r1, r7, #20
 800576a:	2300      	movs	r3, #0
 800576c:	2200      	movs	r2, #0
 800576e:	f7fe fa17 	bl	8003ba0 <xQueueGenericSend>
 8005772:	6278      	str	r0, [r7, #36]	; 0x24
 8005774:	e008      	b.n	8005788 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005776:	4b07      	ldr	r3, [pc, #28]	; (8005794 <xTimerGenericCommand+0x98>)
 8005778:	6818      	ldr	r0, [r3, #0]
 800577a:	f107 0114 	add.w	r1, r7, #20
 800577e:	2300      	movs	r3, #0
 8005780:	683a      	ldr	r2, [r7, #0]
 8005782:	f7fe fb0b 	bl	8003d9c <xQueueGenericSendFromISR>
 8005786:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8005788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800578a:	4618      	mov	r0, r3
 800578c:	3728      	adds	r7, #40	; 0x28
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	20000274 	.word	0x20000274

08005798 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8005798:	b580      	push	{r7, lr}
 800579a:	b088      	sub	sp, #32
 800579c:	af02      	add	r7, sp, #8
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057a2:	4b22      	ldr	r3, [pc, #136]	; (800582c <prvProcessExpiredTimer+0x94>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	68db      	ldr	r3, [r3, #12]
 80057aa:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	3304      	adds	r3, #4
 80057b0:	4618      	mov	r0, r3
 80057b2:	f7fe f8e1 	bl	8003978 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057bc:	f003 0304 	and.w	r3, r3, #4
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d022      	beq.n	800580a <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	699a      	ldr	r2, [r3, #24]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	18d1      	adds	r1, r2, r3
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	683a      	ldr	r2, [r7, #0]
 80057d0:	6978      	ldr	r0, [r7, #20]
 80057d2:	f000 f8d1 	bl	8005978 <prvInsertTimerInActiveList>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d01f      	beq.n	800581c <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80057dc:	2300      	movs	r3, #0
 80057de:	9300      	str	r3, [sp, #0]
 80057e0:	2300      	movs	r3, #0
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	2100      	movs	r1, #0
 80057e6:	6978      	ldr	r0, [r7, #20]
 80057e8:	f7ff ff88 	bl	80056fc <xTimerGenericCommand>
 80057ec:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d113      	bne.n	800581c <prvProcessExpiredTimer+0x84>
        __asm volatile
 80057f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f8:	f383 8811 	msr	BASEPRI, r3
 80057fc:	f3bf 8f6f 	isb	sy
 8005800:	f3bf 8f4f 	dsb	sy
 8005804:	60fb      	str	r3, [r7, #12]
    }
 8005806:	bf00      	nop
 8005808:	e7fe      	b.n	8005808 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005810:	f023 0301 	bic.w	r3, r3, #1
 8005814:	b2da      	uxtb	r2, r3
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	6a1b      	ldr	r3, [r3, #32]
 8005820:	6978      	ldr	r0, [r7, #20]
 8005822:	4798      	blx	r3
    }
 8005824:	bf00      	nop
 8005826:	3718      	adds	r7, #24
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}
 800582c:	2000026c 	.word	0x2000026c

08005830 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005838:	f107 0308 	add.w	r3, r7, #8
 800583c:	4618      	mov	r0, r3
 800583e:	f000 f857 	bl	80058f0 <prvGetNextExpireTime>
 8005842:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	4619      	mov	r1, r3
 8005848:	68f8      	ldr	r0, [r7, #12]
 800584a:	f000 f803 	bl	8005854 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800584e:	f000 f8d5 	bl	80059fc <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005852:	e7f1      	b.n	8005838 <prvTimerTask+0x8>

08005854 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800585e:	f7ff f801 	bl	8004864 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005862:	f107 0308 	add.w	r3, r7, #8
 8005866:	4618      	mov	r0, r3
 8005868:	f000 f866 	bl	8005938 <prvSampleTimeNow>
 800586c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d130      	bne.n	80058d6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d10a      	bne.n	8005890 <prvProcessTimerOrBlockTask+0x3c>
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	429a      	cmp	r2, r3
 8005880:	d806      	bhi.n	8005890 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8005882:	f7fe fffd 	bl	8004880 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005886:	68f9      	ldr	r1, [r7, #12]
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f7ff ff85 	bl	8005798 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800588e:	e024      	b.n	80058da <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d008      	beq.n	80058a8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005896:	4b13      	ldr	r3, [pc, #76]	; (80058e4 <prvProcessTimerOrBlockTask+0x90>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d101      	bne.n	80058a4 <prvProcessTimerOrBlockTask+0x50>
 80058a0:	2301      	movs	r3, #1
 80058a2:	e000      	b.n	80058a6 <prvProcessTimerOrBlockTask+0x52>
 80058a4:	2300      	movs	r3, #0
 80058a6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80058a8:	4b0f      	ldr	r3, [pc, #60]	; (80058e8 <prvProcessTimerOrBlockTask+0x94>)
 80058aa:	6818      	ldr	r0, [r3, #0]
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	683a      	ldr	r2, [r7, #0]
 80058b4:	4619      	mov	r1, r3
 80058b6:	f7fe fe09 	bl	80044cc <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80058ba:	f7fe ffe1 	bl	8004880 <xTaskResumeAll>
 80058be:	4603      	mov	r3, r0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d10a      	bne.n	80058da <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80058c4:	4b09      	ldr	r3, [pc, #36]	; (80058ec <prvProcessTimerOrBlockTask+0x98>)
 80058c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058ca:	601a      	str	r2, [r3, #0]
 80058cc:	f3bf 8f4f 	dsb	sy
 80058d0:	f3bf 8f6f 	isb	sy
    }
 80058d4:	e001      	b.n	80058da <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80058d6:	f7fe ffd3 	bl	8004880 <xTaskResumeAll>
    }
 80058da:	bf00      	nop
 80058dc:	3710      	adds	r7, #16
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	20000270 	.word	0x20000270
 80058e8:	20000274 	.word	0x20000274
 80058ec:	e000ed04 	.word	0xe000ed04

080058f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80058f0:	b480      	push	{r7}
 80058f2:	b085      	sub	sp, #20
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80058f8:	4b0e      	ldr	r3, [pc, #56]	; (8005934 <prvGetNextExpireTime+0x44>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d101      	bne.n	8005906 <prvGetNextExpireTime+0x16>
 8005902:	2201      	movs	r2, #1
 8005904:	e000      	b.n	8005908 <prvGetNextExpireTime+0x18>
 8005906:	2200      	movs	r2, #0
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d105      	bne.n	8005920 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005914:	4b07      	ldr	r3, [pc, #28]	; (8005934 <prvGetNextExpireTime+0x44>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	60fb      	str	r3, [r7, #12]
 800591e:	e001      	b.n	8005924 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8005920:	2300      	movs	r3, #0
 8005922:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8005924:	68fb      	ldr	r3, [r7, #12]
    }
 8005926:	4618      	mov	r0, r3
 8005928:	3714      	adds	r7, #20
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop
 8005934:	2000026c 	.word	0x2000026c

08005938 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8005938:	b580      	push	{r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8005940:	f7ff f83a 	bl	80049b8 <xTaskGetTickCount>
 8005944:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8005946:	4b0b      	ldr	r3, [pc, #44]	; (8005974 <prvSampleTimeNow+0x3c>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	68fa      	ldr	r2, [r7, #12]
 800594c:	429a      	cmp	r2, r3
 800594e:	d205      	bcs.n	800595c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8005950:	f000 f91a 	bl	8005b88 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	601a      	str	r2, [r3, #0]
 800595a:	e002      	b.n	8005962 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8005962:	4a04      	ldr	r2, [pc, #16]	; (8005974 <prvSampleTimeNow+0x3c>)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8005968:	68fb      	ldr	r3, [r7, #12]
    }
 800596a:	4618      	mov	r0, r3
 800596c:	3710      	adds	r7, #16
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
 8005972:	bf00      	nop
 8005974:	2000027c 	.word	0x2000027c

08005978 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8005978:	b580      	push	{r7, lr}
 800597a:	b086      	sub	sp, #24
 800597c:	af00      	add	r7, sp, #0
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	60b9      	str	r1, [r7, #8]
 8005982:	607a      	str	r2, [r7, #4]
 8005984:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8005986:	2300      	movs	r3, #0
 8005988:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	68ba      	ldr	r2, [r7, #8]
 800598e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	68fa      	ldr	r2, [r7, #12]
 8005994:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8005996:	68ba      	ldr	r2, [r7, #8]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	429a      	cmp	r2, r3
 800599c:	d812      	bhi.n	80059c4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	1ad2      	subs	r2, r2, r3
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	699b      	ldr	r3, [r3, #24]
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d302      	bcc.n	80059b2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80059ac:	2301      	movs	r3, #1
 80059ae:	617b      	str	r3, [r7, #20]
 80059b0:	e01b      	b.n	80059ea <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80059b2:	4b10      	ldr	r3, [pc, #64]	; (80059f4 <prvInsertTimerInActiveList+0x7c>)
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	3304      	adds	r3, #4
 80059ba:	4619      	mov	r1, r3
 80059bc:	4610      	mov	r0, r2
 80059be:	f7fd ffa2 	bl	8003906 <vListInsert>
 80059c2:	e012      	b.n	80059ea <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d206      	bcs.n	80059da <prvInsertTimerInActiveList+0x62>
 80059cc:	68ba      	ldr	r2, [r7, #8]
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d302      	bcc.n	80059da <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80059d4:	2301      	movs	r3, #1
 80059d6:	617b      	str	r3, [r7, #20]
 80059d8:	e007      	b.n	80059ea <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80059da:	4b07      	ldr	r3, [pc, #28]	; (80059f8 <prvInsertTimerInActiveList+0x80>)
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	3304      	adds	r3, #4
 80059e2:	4619      	mov	r1, r3
 80059e4:	4610      	mov	r0, r2
 80059e6:	f7fd ff8e 	bl	8003906 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80059ea:	697b      	ldr	r3, [r7, #20]
    }
 80059ec:	4618      	mov	r0, r3
 80059ee:	3718      	adds	r7, #24
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}
 80059f4:	20000270 	.word	0x20000270
 80059f8:	2000026c 	.word	0x2000026c

080059fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b08c      	sub	sp, #48	; 0x30
 8005a00:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005a02:	e0ae      	b.n	8005b62 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	f2c0 80aa 	blt.w	8005b60 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a12:	695b      	ldr	r3, [r3, #20]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d004      	beq.n	8005a22 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1a:	3304      	adds	r3, #4
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f7fd ffab 	bl	8003978 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005a22:	1d3b      	adds	r3, r7, #4
 8005a24:	4618      	mov	r0, r3
 8005a26:	f7ff ff87 	bl	8005938 <prvSampleTimeNow>
 8005a2a:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	2b09      	cmp	r3, #9
 8005a30:	f200 8097 	bhi.w	8005b62 <prvProcessReceivedCommands+0x166>
 8005a34:	a201      	add	r2, pc, #4	; (adr r2, 8005a3c <prvProcessReceivedCommands+0x40>)
 8005a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a3a:	bf00      	nop
 8005a3c:	08005a65 	.word	0x08005a65
 8005a40:	08005a65 	.word	0x08005a65
 8005a44:	08005a65 	.word	0x08005a65
 8005a48:	08005ad9 	.word	0x08005ad9
 8005a4c:	08005aed 	.word	0x08005aed
 8005a50:	08005b37 	.word	0x08005b37
 8005a54:	08005a65 	.word	0x08005a65
 8005a58:	08005a65 	.word	0x08005a65
 8005a5c:	08005ad9 	.word	0x08005ad9
 8005a60:	08005aed 	.word	0x08005aed
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a6a:	f043 0301 	orr.w	r3, r3, #1
 8005a6e:	b2da      	uxtb	r2, r3
 8005a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005a76:	68fa      	ldr	r2, [r7, #12]
 8005a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7a:	699b      	ldr	r3, [r3, #24]
 8005a7c:	18d1      	adds	r1, r2, r3
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	6a3a      	ldr	r2, [r7, #32]
 8005a82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005a84:	f7ff ff78 	bl	8005978 <prvInsertTimerInActiveList>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d069      	beq.n	8005b62 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a90:	6a1b      	ldr	r3, [r3, #32]
 8005a92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005a94:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a9c:	f003 0304 	and.w	r3, r3, #4
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d05e      	beq.n	8005b62 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005aa4:	68fa      	ldr	r2, [r7, #12]
 8005aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa8:	699b      	ldr	r3, [r3, #24]
 8005aaa:	441a      	add	r2, r3
 8005aac:	2300      	movs	r3, #0
 8005aae:	9300      	str	r3, [sp, #0]
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	2100      	movs	r1, #0
 8005ab4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005ab6:	f7ff fe21 	bl	80056fc <xTimerGenericCommand>
 8005aba:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d14f      	bne.n	8005b62 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8005ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac6:	f383 8811 	msr	BASEPRI, r3
 8005aca:	f3bf 8f6f 	isb	sy
 8005ace:	f3bf 8f4f 	dsb	sy
 8005ad2:	61bb      	str	r3, [r7, #24]
    }
 8005ad4:	bf00      	nop
 8005ad6:	e7fe      	b.n	8005ad6 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ada:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ade:	f023 0301 	bic.w	r3, r3, #1
 8005ae2:	b2da      	uxtb	r2, r3
 8005ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8005aea:	e03a      	b.n	8005b62 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005af2:	f043 0301 	orr.w	r3, r3, #1
 8005af6:	b2da      	uxtb	r2, r3
 8005af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b02:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b06:	699b      	ldr	r3, [r3, #24]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d10a      	bne.n	8005b22 <prvProcessReceivedCommands+0x126>
        __asm volatile
 8005b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b10:	f383 8811 	msr	BASEPRI, r3
 8005b14:	f3bf 8f6f 	isb	sy
 8005b18:	f3bf 8f4f 	dsb	sy
 8005b1c:	617b      	str	r3, [r7, #20]
    }
 8005b1e:	bf00      	nop
 8005b20:	e7fe      	b.n	8005b20 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b24:	699a      	ldr	r2, [r3, #24]
 8005b26:	6a3b      	ldr	r3, [r7, #32]
 8005b28:	18d1      	adds	r1, r2, r3
 8005b2a:	6a3b      	ldr	r3, [r7, #32]
 8005b2c:	6a3a      	ldr	r2, [r7, #32]
 8005b2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b30:	f7ff ff22 	bl	8005978 <prvInsertTimerInActiveList>
                        break;
 8005b34:	e015      	b.n	8005b62 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b3c:	f003 0302 	and.w	r3, r3, #2
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d103      	bne.n	8005b4c <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8005b44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b46:	f000 fc69 	bl	800641c <vPortFree>
 8005b4a:	e00a      	b.n	8005b62 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b52:	f023 0301 	bic.w	r3, r3, #1
 8005b56:	b2da      	uxtb	r2, r3
 8005b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8005b5e:	e000      	b.n	8005b62 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8005b60:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005b62:	4b08      	ldr	r3, [pc, #32]	; (8005b84 <prvProcessReceivedCommands+0x188>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f107 0108 	add.w	r1, r7, #8
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f7fe f9bf 	bl	8003ef0 <xQueueReceive>
 8005b72:	4603      	mov	r3, r0
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	f47f af45 	bne.w	8005a04 <prvProcessReceivedCommands+0x8>
        }
    }
 8005b7a:	bf00      	nop
 8005b7c:	bf00      	nop
 8005b7e:	3728      	adds	r7, #40	; 0x28
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	20000274 	.word	0x20000274

08005b88 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b088      	sub	sp, #32
 8005b8c:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005b8e:	e048      	b.n	8005c22 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005b90:	4b2d      	ldr	r3, [pc, #180]	; (8005c48 <prvSwitchTimerLists+0xc0>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68db      	ldr	r3, [r3, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b9a:	4b2b      	ldr	r3, [pc, #172]	; (8005c48 <prvSwitchTimerLists+0xc0>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	3304      	adds	r3, #4
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f7fd fee5 	bl	8003978 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	6a1b      	ldr	r3, [r3, #32]
 8005bb2:	68f8      	ldr	r0, [r7, #12]
 8005bb4:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005bbc:	f003 0304 	and.w	r3, r3, #4
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d02e      	beq.n	8005c22 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	699b      	ldr	r3, [r3, #24]
 8005bc8:	693a      	ldr	r2, [r7, #16]
 8005bca:	4413      	add	r3, r2
 8005bcc:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8005bce:	68ba      	ldr	r2, [r7, #8]
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d90e      	bls.n	8005bf4 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	68ba      	ldr	r2, [r7, #8]
 8005bda:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	68fa      	ldr	r2, [r7, #12]
 8005be0:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005be2:	4b19      	ldr	r3, [pc, #100]	; (8005c48 <prvSwitchTimerLists+0xc0>)
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	3304      	adds	r3, #4
 8005bea:	4619      	mov	r1, r3
 8005bec:	4610      	mov	r0, r2
 8005bee:	f7fd fe8a 	bl	8003906 <vListInsert>
 8005bf2:	e016      	b.n	8005c22 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	9300      	str	r3, [sp, #0]
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	693a      	ldr	r2, [r7, #16]
 8005bfc:	2100      	movs	r1, #0
 8005bfe:	68f8      	ldr	r0, [r7, #12]
 8005c00:	f7ff fd7c 	bl	80056fc <xTimerGenericCommand>
 8005c04:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d10a      	bne.n	8005c22 <prvSwitchTimerLists+0x9a>
        __asm volatile
 8005c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c10:	f383 8811 	msr	BASEPRI, r3
 8005c14:	f3bf 8f6f 	isb	sy
 8005c18:	f3bf 8f4f 	dsb	sy
 8005c1c:	603b      	str	r3, [r7, #0]
    }
 8005c1e:	bf00      	nop
 8005c20:	e7fe      	b.n	8005c20 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005c22:	4b09      	ldr	r3, [pc, #36]	; (8005c48 <prvSwitchTimerLists+0xc0>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d1b1      	bne.n	8005b90 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8005c2c:	4b06      	ldr	r3, [pc, #24]	; (8005c48 <prvSwitchTimerLists+0xc0>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8005c32:	4b06      	ldr	r3, [pc, #24]	; (8005c4c <prvSwitchTimerLists+0xc4>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a04      	ldr	r2, [pc, #16]	; (8005c48 <prvSwitchTimerLists+0xc0>)
 8005c38:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8005c3a:	4a04      	ldr	r2, [pc, #16]	; (8005c4c <prvSwitchTimerLists+0xc4>)
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	6013      	str	r3, [r2, #0]
    }
 8005c40:	bf00      	nop
 8005c42:	3718      	adds	r7, #24
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	2000026c 	.word	0x2000026c
 8005c4c:	20000270 	.word	0x20000270

08005c50 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8005c50:	b580      	push	{r7, lr}
 8005c52:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8005c54:	f000 f9de 	bl	8006014 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8005c58:	4b12      	ldr	r3, [pc, #72]	; (8005ca4 <prvCheckForValidListAndQueue+0x54>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d11d      	bne.n	8005c9c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8005c60:	4811      	ldr	r0, [pc, #68]	; (8005ca8 <prvCheckForValidListAndQueue+0x58>)
 8005c62:	f7fd fdff 	bl	8003864 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8005c66:	4811      	ldr	r0, [pc, #68]	; (8005cac <prvCheckForValidListAndQueue+0x5c>)
 8005c68:	f7fd fdfc 	bl	8003864 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8005c6c:	4b10      	ldr	r3, [pc, #64]	; (8005cb0 <prvCheckForValidListAndQueue+0x60>)
 8005c6e:	4a0e      	ldr	r2, [pc, #56]	; (8005ca8 <prvCheckForValidListAndQueue+0x58>)
 8005c70:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8005c72:	4b10      	ldr	r3, [pc, #64]	; (8005cb4 <prvCheckForValidListAndQueue+0x64>)
 8005c74:	4a0d      	ldr	r2, [pc, #52]	; (8005cac <prvCheckForValidListAndQueue+0x5c>)
 8005c76:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8005c78:	2200      	movs	r2, #0
 8005c7a:	210c      	movs	r1, #12
 8005c7c:	200a      	movs	r0, #10
 8005c7e:	f7fd ff0d 	bl	8003a9c <xQueueGenericCreate>
 8005c82:	4603      	mov	r3, r0
 8005c84:	4a07      	ldr	r2, [pc, #28]	; (8005ca4 <prvCheckForValidListAndQueue+0x54>)
 8005c86:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8005c88:	4b06      	ldr	r3, [pc, #24]	; (8005ca4 <prvCheckForValidListAndQueue+0x54>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d005      	beq.n	8005c9c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005c90:	4b04      	ldr	r3, [pc, #16]	; (8005ca4 <prvCheckForValidListAndQueue+0x54>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4908      	ldr	r1, [pc, #32]	; (8005cb8 <prvCheckForValidListAndQueue+0x68>)
 8005c96:	4618      	mov	r0, r3
 8005c98:	f7fe fbee 	bl	8004478 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005c9c:	f000 f9ea 	bl	8006074 <vPortExitCritical>
    }
 8005ca0:	bf00      	nop
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	20000274 	.word	0x20000274
 8005ca8:	20000244 	.word	0x20000244
 8005cac:	20000258 	.word	0x20000258
 8005cb0:	2000026c 	.word	0x2000026c
 8005cb4:	20000270 	.word	0x20000270
 8005cb8:	08006714 	.word	0x08006714

08005cbc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b085      	sub	sp, #20
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	60f8      	str	r0, [r7, #12]
 8005cc4:	60b9      	str	r1, [r7, #8]
 8005cc6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	3b04      	subs	r3, #4
 8005ccc:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005cd4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	3b04      	subs	r3, #4
 8005cda:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	f023 0201 	bic.w	r2, r3, #1
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	3b04      	subs	r3, #4
 8005cea:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8005cec:	4a0c      	ldr	r2, [pc, #48]	; (8005d20 <pxPortInitialiseStack+0x64>)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	3b14      	subs	r3, #20
 8005cf6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	3b04      	subs	r3, #4
 8005d02:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f06f 0202 	mvn.w	r2, #2
 8005d0a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	3b20      	subs	r3, #32
 8005d10:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8005d12:	68fb      	ldr	r3, [r7, #12]
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3714      	adds	r7, #20
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr
 8005d20:	08005d25 	.word	0x08005d25

08005d24 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005d24:	b480      	push	{r7}
 8005d26:	b085      	sub	sp, #20
 8005d28:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8005d2e:	4b12      	ldr	r3, [pc, #72]	; (8005d78 <prvTaskExitError+0x54>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d36:	d00a      	beq.n	8005d4e <prvTaskExitError+0x2a>
        __asm volatile
 8005d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d3c:	f383 8811 	msr	BASEPRI, r3
 8005d40:	f3bf 8f6f 	isb	sy
 8005d44:	f3bf 8f4f 	dsb	sy
 8005d48:	60fb      	str	r3, [r7, #12]
    }
 8005d4a:	bf00      	nop
 8005d4c:	e7fe      	b.n	8005d4c <prvTaskExitError+0x28>
        __asm volatile
 8005d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d52:	f383 8811 	msr	BASEPRI, r3
 8005d56:	f3bf 8f6f 	isb	sy
 8005d5a:	f3bf 8f4f 	dsb	sy
 8005d5e:	60bb      	str	r3, [r7, #8]
    }
 8005d60:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8005d62:	bf00      	nop
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d0fc      	beq.n	8005d64 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8005d6a:	bf00      	nop
 8005d6c:	bf00      	nop
 8005d6e:	3714      	adds	r7, #20
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr
 8005d78:	20000010 	.word	0x20000010
 8005d7c:	00000000 	.word	0x00000000

08005d80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005d80:	4b07      	ldr	r3, [pc, #28]	; (8005da0 <pxCurrentTCBConst2>)
 8005d82:	6819      	ldr	r1, [r3, #0]
 8005d84:	6808      	ldr	r0, [r1, #0]
 8005d86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d8a:	f380 8809 	msr	PSP, r0
 8005d8e:	f3bf 8f6f 	isb	sy
 8005d92:	f04f 0000 	mov.w	r0, #0
 8005d96:	f380 8811 	msr	BASEPRI, r0
 8005d9a:	4770      	bx	lr
 8005d9c:	f3af 8000 	nop.w

08005da0 <pxCurrentTCBConst2>:
 8005da0:	20000140 	.word	0x20000140
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8005da4:	bf00      	nop
 8005da6:	bf00      	nop

08005da8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8005da8:	4808      	ldr	r0, [pc, #32]	; (8005dcc <prvPortStartFirstTask+0x24>)
 8005daa:	6800      	ldr	r0, [r0, #0]
 8005dac:	6800      	ldr	r0, [r0, #0]
 8005dae:	f380 8808 	msr	MSP, r0
 8005db2:	f04f 0000 	mov.w	r0, #0
 8005db6:	f380 8814 	msr	CONTROL, r0
 8005dba:	b662      	cpsie	i
 8005dbc:	b661      	cpsie	f
 8005dbe:	f3bf 8f4f 	dsb	sy
 8005dc2:	f3bf 8f6f 	isb	sy
 8005dc6:	df00      	svc	0
 8005dc8:	bf00      	nop
 8005dca:	0000      	.short	0x0000
 8005dcc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8005dd0:	bf00      	nop
 8005dd2:	bf00      	nop

08005dd4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b086      	sub	sp, #24
 8005dd8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005dda:	4b46      	ldr	r3, [pc, #280]	; (8005ef4 <xPortStartScheduler+0x120>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a46      	ldr	r2, [pc, #280]	; (8005ef8 <xPortStartScheduler+0x124>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d10a      	bne.n	8005dfa <xPortStartScheduler+0x26>
        __asm volatile
 8005de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de8:	f383 8811 	msr	BASEPRI, r3
 8005dec:	f3bf 8f6f 	isb	sy
 8005df0:	f3bf 8f4f 	dsb	sy
 8005df4:	613b      	str	r3, [r7, #16]
    }
 8005df6:	bf00      	nop
 8005df8:	e7fe      	b.n	8005df8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005dfa:	4b3e      	ldr	r3, [pc, #248]	; (8005ef4 <xPortStartScheduler+0x120>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a3f      	ldr	r2, [pc, #252]	; (8005efc <xPortStartScheduler+0x128>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d10a      	bne.n	8005e1a <xPortStartScheduler+0x46>
        __asm volatile
 8005e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e08:	f383 8811 	msr	BASEPRI, r3
 8005e0c:	f3bf 8f6f 	isb	sy
 8005e10:	f3bf 8f4f 	dsb	sy
 8005e14:	60fb      	str	r3, [r7, #12]
    }
 8005e16:	bf00      	nop
 8005e18:	e7fe      	b.n	8005e18 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005e1a:	4b39      	ldr	r3, [pc, #228]	; (8005f00 <xPortStartScheduler+0x12c>)
 8005e1c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	22ff      	movs	r2, #255	; 0xff
 8005e2a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005e34:	78fb      	ldrb	r3, [r7, #3]
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005e3c:	b2da      	uxtb	r2, r3
 8005e3e:	4b31      	ldr	r3, [pc, #196]	; (8005f04 <xPortStartScheduler+0x130>)
 8005e40:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005e42:	4b31      	ldr	r3, [pc, #196]	; (8005f08 <xPortStartScheduler+0x134>)
 8005e44:	2207      	movs	r2, #7
 8005e46:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e48:	e009      	b.n	8005e5e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8005e4a:	4b2f      	ldr	r3, [pc, #188]	; (8005f08 <xPortStartScheduler+0x134>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	3b01      	subs	r3, #1
 8005e50:	4a2d      	ldr	r2, [pc, #180]	; (8005f08 <xPortStartScheduler+0x134>)
 8005e52:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005e54:	78fb      	ldrb	r3, [r7, #3]
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	005b      	lsls	r3, r3, #1
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e5e:	78fb      	ldrb	r3, [r7, #3]
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e66:	2b80      	cmp	r3, #128	; 0x80
 8005e68:	d0ef      	beq.n	8005e4a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005e6a:	4b27      	ldr	r3, [pc, #156]	; (8005f08 <xPortStartScheduler+0x134>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f1c3 0307 	rsb	r3, r3, #7
 8005e72:	2b04      	cmp	r3, #4
 8005e74:	d00a      	beq.n	8005e8c <xPortStartScheduler+0xb8>
        __asm volatile
 8005e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e7a:	f383 8811 	msr	BASEPRI, r3
 8005e7e:	f3bf 8f6f 	isb	sy
 8005e82:	f3bf 8f4f 	dsb	sy
 8005e86:	60bb      	str	r3, [r7, #8]
    }
 8005e88:	bf00      	nop
 8005e8a:	e7fe      	b.n	8005e8a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005e8c:	4b1e      	ldr	r3, [pc, #120]	; (8005f08 <xPortStartScheduler+0x134>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	021b      	lsls	r3, r3, #8
 8005e92:	4a1d      	ldr	r2, [pc, #116]	; (8005f08 <xPortStartScheduler+0x134>)
 8005e94:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005e96:	4b1c      	ldr	r3, [pc, #112]	; (8005f08 <xPortStartScheduler+0x134>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005e9e:	4a1a      	ldr	r2, [pc, #104]	; (8005f08 <xPortStartScheduler+0x134>)
 8005ea0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	b2da      	uxtb	r2, r3
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8005eaa:	4b18      	ldr	r3, [pc, #96]	; (8005f0c <xPortStartScheduler+0x138>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a17      	ldr	r2, [pc, #92]	; (8005f0c <xPortStartScheduler+0x138>)
 8005eb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005eb4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8005eb6:	4b15      	ldr	r3, [pc, #84]	; (8005f0c <xPortStartScheduler+0x138>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a14      	ldr	r2, [pc, #80]	; (8005f0c <xPortStartScheduler+0x138>)
 8005ebc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005ec0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8005ec2:	f000 f95b 	bl	800617c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8005ec6:	4b12      	ldr	r3, [pc, #72]	; (8005f10 <xPortStartScheduler+0x13c>)
 8005ec8:	2200      	movs	r2, #0
 8005eca:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8005ecc:	f000 f97a 	bl	80061c4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005ed0:	4b10      	ldr	r3, [pc, #64]	; (8005f14 <xPortStartScheduler+0x140>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a0f      	ldr	r2, [pc, #60]	; (8005f14 <xPortStartScheduler+0x140>)
 8005ed6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005eda:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8005edc:	f7ff ff64 	bl	8005da8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8005ee0:	f7fe fe32 	bl	8004b48 <vTaskSwitchContext>
    prvTaskExitError();
 8005ee4:	f7ff ff1e 	bl	8005d24 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8005ee8:	2300      	movs	r3, #0
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3718      	adds	r7, #24
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	e000ed00 	.word	0xe000ed00
 8005ef8:	410fc271 	.word	0x410fc271
 8005efc:	410fc270 	.word	0x410fc270
 8005f00:	e000e400 	.word	0xe000e400
 8005f04:	20000280 	.word	0x20000280
 8005f08:	20000284 	.word	0x20000284
 8005f0c:	e000ed20 	.word	0xe000ed20
 8005f10:	20000010 	.word	0x20000010
 8005f14:	e000ef34 	.word	0xe000ef34

08005f18 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b087      	sub	sp, #28
 8005f1c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005f1e:	4b37      	ldr	r3, [pc, #220]	; (8005ffc <vInitPrioGroupValue+0xe4>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a37      	ldr	r2, [pc, #220]	; (8006000 <vInitPrioGroupValue+0xe8>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d10a      	bne.n	8005f3e <vInitPrioGroupValue+0x26>
        __asm volatile
 8005f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f2c:	f383 8811 	msr	BASEPRI, r3
 8005f30:	f3bf 8f6f 	isb	sy
 8005f34:	f3bf 8f4f 	dsb	sy
 8005f38:	613b      	str	r3, [r7, #16]
    }
 8005f3a:	bf00      	nop
 8005f3c:	e7fe      	b.n	8005f3c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005f3e:	4b2f      	ldr	r3, [pc, #188]	; (8005ffc <vInitPrioGroupValue+0xe4>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a30      	ldr	r2, [pc, #192]	; (8006004 <vInitPrioGroupValue+0xec>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d10a      	bne.n	8005f5e <vInitPrioGroupValue+0x46>
        __asm volatile
 8005f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f4c:	f383 8811 	msr	BASEPRI, r3
 8005f50:	f3bf 8f6f 	isb	sy
 8005f54:	f3bf 8f4f 	dsb	sy
 8005f58:	60fb      	str	r3, [r7, #12]
    }
 8005f5a:	bf00      	nop
 8005f5c:	e7fe      	b.n	8005f5c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005f5e:	4b2a      	ldr	r3, [pc, #168]	; (8006008 <vInitPrioGroupValue+0xf0>)
 8005f60:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	22ff      	movs	r2, #255	; 0xff
 8005f6e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005f78:	78fb      	ldrb	r3, [r7, #3]
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005f80:	b2da      	uxtb	r2, r3
 8005f82:	4b22      	ldr	r3, [pc, #136]	; (800600c <vInitPrioGroupValue+0xf4>)
 8005f84:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005f86:	4b22      	ldr	r3, [pc, #136]	; (8006010 <vInitPrioGroupValue+0xf8>)
 8005f88:	2207      	movs	r2, #7
 8005f8a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f8c:	e009      	b.n	8005fa2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8005f8e:	4b20      	ldr	r3, [pc, #128]	; (8006010 <vInitPrioGroupValue+0xf8>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	3b01      	subs	r3, #1
 8005f94:	4a1e      	ldr	r2, [pc, #120]	; (8006010 <vInitPrioGroupValue+0xf8>)
 8005f96:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005f98:	78fb      	ldrb	r3, [r7, #3]
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	005b      	lsls	r3, r3, #1
 8005f9e:	b2db      	uxtb	r3, r3
 8005fa0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005fa2:	78fb      	ldrb	r3, [r7, #3]
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005faa:	2b80      	cmp	r3, #128	; 0x80
 8005fac:	d0ef      	beq.n	8005f8e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005fae:	4b18      	ldr	r3, [pc, #96]	; (8006010 <vInitPrioGroupValue+0xf8>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f1c3 0307 	rsb	r3, r3, #7
 8005fb6:	2b04      	cmp	r3, #4
 8005fb8:	d00a      	beq.n	8005fd0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8005fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fbe:	f383 8811 	msr	BASEPRI, r3
 8005fc2:	f3bf 8f6f 	isb	sy
 8005fc6:	f3bf 8f4f 	dsb	sy
 8005fca:	60bb      	str	r3, [r7, #8]
    }
 8005fcc:	bf00      	nop
 8005fce:	e7fe      	b.n	8005fce <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005fd0:	4b0f      	ldr	r3, [pc, #60]	; (8006010 <vInitPrioGroupValue+0xf8>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	021b      	lsls	r3, r3, #8
 8005fd6:	4a0e      	ldr	r2, [pc, #56]	; (8006010 <vInitPrioGroupValue+0xf8>)
 8005fd8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005fda:	4b0d      	ldr	r3, [pc, #52]	; (8006010 <vInitPrioGroupValue+0xf8>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005fe2:	4a0b      	ldr	r2, [pc, #44]	; (8006010 <vInitPrioGroupValue+0xf8>)
 8005fe4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	b2da      	uxtb	r2, r3
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8005fee:	bf00      	nop
 8005ff0:	371c      	adds	r7, #28
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr
 8005ffa:	bf00      	nop
 8005ffc:	e000ed00 	.word	0xe000ed00
 8006000:	410fc271 	.word	0x410fc271
 8006004:	410fc270 	.word	0x410fc270
 8006008:	e000e400 	.word	0xe000e400
 800600c:	20000280 	.word	0x20000280
 8006010:	20000284 	.word	0x20000284

08006014 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006014:	b480      	push	{r7}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
        __asm volatile
 800601a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800601e:	f383 8811 	msr	BASEPRI, r3
 8006022:	f3bf 8f6f 	isb	sy
 8006026:	f3bf 8f4f 	dsb	sy
 800602a:	607b      	str	r3, [r7, #4]
    }
 800602c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800602e:	4b0f      	ldr	r3, [pc, #60]	; (800606c <vPortEnterCritical+0x58>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	3301      	adds	r3, #1
 8006034:	4a0d      	ldr	r2, [pc, #52]	; (800606c <vPortEnterCritical+0x58>)
 8006036:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8006038:	4b0c      	ldr	r3, [pc, #48]	; (800606c <vPortEnterCritical+0x58>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	2b01      	cmp	r3, #1
 800603e:	d10f      	bne.n	8006060 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006040:	4b0b      	ldr	r3, [pc, #44]	; (8006070 <vPortEnterCritical+0x5c>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	b2db      	uxtb	r3, r3
 8006046:	2b00      	cmp	r3, #0
 8006048:	d00a      	beq.n	8006060 <vPortEnterCritical+0x4c>
        __asm volatile
 800604a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800604e:	f383 8811 	msr	BASEPRI, r3
 8006052:	f3bf 8f6f 	isb	sy
 8006056:	f3bf 8f4f 	dsb	sy
 800605a:	603b      	str	r3, [r7, #0]
    }
 800605c:	bf00      	nop
 800605e:	e7fe      	b.n	800605e <vPortEnterCritical+0x4a>
    }
}
 8006060:	bf00      	nop
 8006062:	370c      	adds	r7, #12
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr
 800606c:	20000010 	.word	0x20000010
 8006070:	e000ed04 	.word	0xe000ed04

08006074 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006074:	b480      	push	{r7}
 8006076:	b083      	sub	sp, #12
 8006078:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800607a:	4b12      	ldr	r3, [pc, #72]	; (80060c4 <vPortExitCritical+0x50>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d10a      	bne.n	8006098 <vPortExitCritical+0x24>
        __asm volatile
 8006082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006086:	f383 8811 	msr	BASEPRI, r3
 800608a:	f3bf 8f6f 	isb	sy
 800608e:	f3bf 8f4f 	dsb	sy
 8006092:	607b      	str	r3, [r7, #4]
    }
 8006094:	bf00      	nop
 8006096:	e7fe      	b.n	8006096 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8006098:	4b0a      	ldr	r3, [pc, #40]	; (80060c4 <vPortExitCritical+0x50>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	3b01      	subs	r3, #1
 800609e:	4a09      	ldr	r2, [pc, #36]	; (80060c4 <vPortExitCritical+0x50>)
 80060a0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80060a2:	4b08      	ldr	r3, [pc, #32]	; (80060c4 <vPortExitCritical+0x50>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d105      	bne.n	80060b6 <vPortExitCritical+0x42>
 80060aa:	2300      	movs	r3, #0
 80060ac:	603b      	str	r3, [r7, #0]
        __asm volatile
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	f383 8811 	msr	BASEPRI, r3
    }
 80060b4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80060b6:	bf00      	nop
 80060b8:	370c      	adds	r7, #12
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr
 80060c2:	bf00      	nop
 80060c4:	20000010 	.word	0x20000010
	...

080060d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80060d0:	f3ef 8009 	mrs	r0, PSP
 80060d4:	f3bf 8f6f 	isb	sy
 80060d8:	4b15      	ldr	r3, [pc, #84]	; (8006130 <pxCurrentTCBConst>)
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	f01e 0f10 	tst.w	lr, #16
 80060e0:	bf08      	it	eq
 80060e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80060e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060ea:	6010      	str	r0, [r2, #0]
 80060ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80060f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80060f4:	f380 8811 	msr	BASEPRI, r0
 80060f8:	f3bf 8f4f 	dsb	sy
 80060fc:	f3bf 8f6f 	isb	sy
 8006100:	f7fe fd22 	bl	8004b48 <vTaskSwitchContext>
 8006104:	f04f 0000 	mov.w	r0, #0
 8006108:	f380 8811 	msr	BASEPRI, r0
 800610c:	bc09      	pop	{r0, r3}
 800610e:	6819      	ldr	r1, [r3, #0]
 8006110:	6808      	ldr	r0, [r1, #0]
 8006112:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006116:	f01e 0f10 	tst.w	lr, #16
 800611a:	bf08      	it	eq
 800611c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006120:	f380 8809 	msr	PSP, r0
 8006124:	f3bf 8f6f 	isb	sy
 8006128:	4770      	bx	lr
 800612a:	bf00      	nop
 800612c:	f3af 8000 	nop.w

08006130 <pxCurrentTCBConst>:
 8006130:	20000140 	.word	0x20000140
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8006134:	bf00      	nop
 8006136:	bf00      	nop

08006138 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b082      	sub	sp, #8
 800613c:	af00      	add	r7, sp, #0
        __asm volatile
 800613e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006142:	f383 8811 	msr	BASEPRI, r3
 8006146:	f3bf 8f6f 	isb	sy
 800614a:	f3bf 8f4f 	dsb	sy
 800614e:	607b      	str	r3, [r7, #4]
    }
 8006150:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8006152:	f7fe fc41 	bl	80049d8 <xTaskIncrementTick>
 8006156:	4603      	mov	r3, r0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d003      	beq.n	8006164 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800615c:	4b06      	ldr	r3, [pc, #24]	; (8006178 <SysTick_Handler+0x40>)
 800615e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006162:	601a      	str	r2, [r3, #0]
 8006164:	2300      	movs	r3, #0
 8006166:	603b      	str	r3, [r7, #0]
        __asm volatile
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	f383 8811 	msr	BASEPRI, r3
    }
 800616e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8006170:	bf00      	nop
 8006172:	3708      	adds	r7, #8
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}
 8006178:	e000ed04 	.word	0xe000ed04

0800617c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800617c:	b480      	push	{r7}
 800617e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006180:	4b0b      	ldr	r3, [pc, #44]	; (80061b0 <vPortSetupTimerInterrupt+0x34>)
 8006182:	2200      	movs	r2, #0
 8006184:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006186:	4b0b      	ldr	r3, [pc, #44]	; (80061b4 <vPortSetupTimerInterrupt+0x38>)
 8006188:	2200      	movs	r2, #0
 800618a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800618c:	4b0a      	ldr	r3, [pc, #40]	; (80061b8 <vPortSetupTimerInterrupt+0x3c>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a0a      	ldr	r2, [pc, #40]	; (80061bc <vPortSetupTimerInterrupt+0x40>)
 8006192:	fba2 2303 	umull	r2, r3, r2, r3
 8006196:	099b      	lsrs	r3, r3, #6
 8006198:	4a09      	ldr	r2, [pc, #36]	; (80061c0 <vPortSetupTimerInterrupt+0x44>)
 800619a:	3b01      	subs	r3, #1
 800619c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800619e:	4b04      	ldr	r3, [pc, #16]	; (80061b0 <vPortSetupTimerInterrupt+0x34>)
 80061a0:	2207      	movs	r2, #7
 80061a2:	601a      	str	r2, [r3, #0]
}
 80061a4:	bf00      	nop
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr
 80061ae:	bf00      	nop
 80061b0:	e000e010 	.word	0xe000e010
 80061b4:	e000e018 	.word	0xe000e018
 80061b8:	20000000 	.word	0x20000000
 80061bc:	10624dd3 	.word	0x10624dd3
 80061c0:	e000e014 	.word	0xe000e014

080061c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80061c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80061d4 <vPortEnableVFP+0x10>
 80061c8:	6801      	ldr	r1, [r0, #0]
 80061ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80061ce:	6001      	str	r1, [r0, #0]
 80061d0:	4770      	bx	lr
 80061d2:	0000      	.short	0x0000
 80061d4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80061d8:	bf00      	nop
 80061da:	bf00      	nop

080061dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80061dc:	b480      	push	{r7}
 80061de:	b085      	sub	sp, #20
 80061e0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80061e2:	f3ef 8305 	mrs	r3, IPSR
 80061e6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2b0f      	cmp	r3, #15
 80061ec:	d914      	bls.n	8006218 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80061ee:	4a17      	ldr	r2, [pc, #92]	; (800624c <vPortValidateInterruptPriority+0x70>)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	4413      	add	r3, r2
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80061f8:	4b15      	ldr	r3, [pc, #84]	; (8006250 <vPortValidateInterruptPriority+0x74>)
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	7afa      	ldrb	r2, [r7, #11]
 80061fe:	429a      	cmp	r2, r3
 8006200:	d20a      	bcs.n	8006218 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8006202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006206:	f383 8811 	msr	BASEPRI, r3
 800620a:	f3bf 8f6f 	isb	sy
 800620e:	f3bf 8f4f 	dsb	sy
 8006212:	607b      	str	r3, [r7, #4]
    }
 8006214:	bf00      	nop
 8006216:	e7fe      	b.n	8006216 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006218:	4b0e      	ldr	r3, [pc, #56]	; (8006254 <vPortValidateInterruptPriority+0x78>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006220:	4b0d      	ldr	r3, [pc, #52]	; (8006258 <vPortValidateInterruptPriority+0x7c>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	429a      	cmp	r2, r3
 8006226:	d90a      	bls.n	800623e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8006228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800622c:	f383 8811 	msr	BASEPRI, r3
 8006230:	f3bf 8f6f 	isb	sy
 8006234:	f3bf 8f4f 	dsb	sy
 8006238:	603b      	str	r3, [r7, #0]
    }
 800623a:	bf00      	nop
 800623c:	e7fe      	b.n	800623c <vPortValidateInterruptPriority+0x60>
    }
 800623e:	bf00      	nop
 8006240:	3714      	adds	r7, #20
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr
 800624a:	bf00      	nop
 800624c:	e000e3f0 	.word	0xe000e3f0
 8006250:	20000280 	.word	0x20000280
 8006254:	e000ed0c 	.word	0xe000ed0c
 8006258:	20000284 	.word	0x20000284

0800625c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b08a      	sub	sp, #40	; 0x28
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8006264:	2300      	movs	r3, #0
 8006266:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8006268:	f7fe fafc 	bl	8004864 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800626c:	4b65      	ldr	r3, [pc, #404]	; (8006404 <pvPortMalloc+0x1a8>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d101      	bne.n	8006278 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8006274:	f000 f934 	bl	80064e0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006278:	4b63      	ldr	r3, [pc, #396]	; (8006408 <pvPortMalloc+0x1ac>)
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4013      	ands	r3, r2
 8006280:	2b00      	cmp	r3, #0
 8006282:	f040 80a7 	bne.w	80063d4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d02d      	beq.n	80062e8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800628c:	2208      	movs	r2, #8
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	429a      	cmp	r2, r3
 8006296:	d227      	bcs.n	80062e8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8006298:	2208      	movs	r2, #8
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4413      	add	r3, r2
 800629e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f003 0307 	and.w	r3, r3, #7
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d021      	beq.n	80062ee <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f023 0307 	bic.w	r3, r3, #7
 80062b0:	3308      	adds	r3, #8
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d214      	bcs.n	80062e2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f023 0307 	bic.w	r3, r3, #7
 80062be:	3308      	adds	r3, #8
 80062c0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f003 0307 	and.w	r3, r3, #7
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d010      	beq.n	80062ee <pvPortMalloc+0x92>
        __asm volatile
 80062cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d0:	f383 8811 	msr	BASEPRI, r3
 80062d4:	f3bf 8f6f 	isb	sy
 80062d8:	f3bf 8f4f 	dsb	sy
 80062dc:	617b      	str	r3, [r7, #20]
    }
 80062de:	bf00      	nop
 80062e0:	e7fe      	b.n	80062e0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80062e2:	2300      	movs	r3, #0
 80062e4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80062e6:	e002      	b.n	80062ee <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80062e8:	2300      	movs	r3, #0
 80062ea:	607b      	str	r3, [r7, #4]
 80062ec:	e000      	b.n	80062f0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80062ee:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d06e      	beq.n	80063d4 <pvPortMalloc+0x178>
 80062f6:	4b45      	ldr	r3, [pc, #276]	; (800640c <pvPortMalloc+0x1b0>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d869      	bhi.n	80063d4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8006300:	4b43      	ldr	r3, [pc, #268]	; (8006410 <pvPortMalloc+0x1b4>)
 8006302:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8006304:	4b42      	ldr	r3, [pc, #264]	; (8006410 <pvPortMalloc+0x1b4>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800630a:	e004      	b.n	8006316 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800630c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8006310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	429a      	cmp	r2, r3
 800631e:	d903      	bls.n	8006328 <pvPortMalloc+0xcc>
 8006320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d1f1      	bne.n	800630c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8006328:	4b36      	ldr	r3, [pc, #216]	; (8006404 <pvPortMalloc+0x1a8>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800632e:	429a      	cmp	r2, r3
 8006330:	d050      	beq.n	80063d4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006332:	6a3b      	ldr	r3, [r7, #32]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	2208      	movs	r2, #8
 8006338:	4413      	add	r3, r2
 800633a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800633c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	6a3b      	ldr	r3, [r7, #32]
 8006342:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006346:	685a      	ldr	r2, [r3, #4]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	1ad2      	subs	r2, r2, r3
 800634c:	2308      	movs	r3, #8
 800634e:	005b      	lsls	r3, r3, #1
 8006350:	429a      	cmp	r2, r3
 8006352:	d91f      	bls.n	8006394 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4413      	add	r3, r2
 800635a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800635c:	69bb      	ldr	r3, [r7, #24]
 800635e:	f003 0307 	and.w	r3, r3, #7
 8006362:	2b00      	cmp	r3, #0
 8006364:	d00a      	beq.n	800637c <pvPortMalloc+0x120>
        __asm volatile
 8006366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800636a:	f383 8811 	msr	BASEPRI, r3
 800636e:	f3bf 8f6f 	isb	sy
 8006372:	f3bf 8f4f 	dsb	sy
 8006376:	613b      	str	r3, [r7, #16]
    }
 8006378:	bf00      	nop
 800637a:	e7fe      	b.n	800637a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800637c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637e:	685a      	ldr	r2, [r3, #4]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	1ad2      	subs	r2, r2, r3
 8006384:	69bb      	ldr	r3, [r7, #24]
 8006386:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8006388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800638e:	69b8      	ldr	r0, [r7, #24]
 8006390:	f000 f908 	bl	80065a4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006394:	4b1d      	ldr	r3, [pc, #116]	; (800640c <pvPortMalloc+0x1b0>)
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	1ad3      	subs	r3, r2, r3
 800639e:	4a1b      	ldr	r2, [pc, #108]	; (800640c <pvPortMalloc+0x1b0>)
 80063a0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80063a2:	4b1a      	ldr	r3, [pc, #104]	; (800640c <pvPortMalloc+0x1b0>)
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	4b1b      	ldr	r3, [pc, #108]	; (8006414 <pvPortMalloc+0x1b8>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d203      	bcs.n	80063b6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80063ae:	4b17      	ldr	r3, [pc, #92]	; (800640c <pvPortMalloc+0x1b0>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a18      	ldr	r2, [pc, #96]	; (8006414 <pvPortMalloc+0x1b8>)
 80063b4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80063b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b8:	685a      	ldr	r2, [r3, #4]
 80063ba:	4b13      	ldr	r3, [pc, #76]	; (8006408 <pvPortMalloc+0x1ac>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	431a      	orrs	r2, r3
 80063c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80063c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c6:	2200      	movs	r2, #0
 80063c8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80063ca:	4b13      	ldr	r3, [pc, #76]	; (8006418 <pvPortMalloc+0x1bc>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	3301      	adds	r3, #1
 80063d0:	4a11      	ldr	r2, [pc, #68]	; (8006418 <pvPortMalloc+0x1bc>)
 80063d2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80063d4:	f7fe fa54 	bl	8004880 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80063d8:	69fb      	ldr	r3, [r7, #28]
 80063da:	f003 0307 	and.w	r3, r3, #7
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d00a      	beq.n	80063f8 <pvPortMalloc+0x19c>
        __asm volatile
 80063e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e6:	f383 8811 	msr	BASEPRI, r3
 80063ea:	f3bf 8f6f 	isb	sy
 80063ee:	f3bf 8f4f 	dsb	sy
 80063f2:	60fb      	str	r3, [r7, #12]
    }
 80063f4:	bf00      	nop
 80063f6:	e7fe      	b.n	80063f6 <pvPortMalloc+0x19a>
    return pvReturn;
 80063f8:	69fb      	ldr	r3, [r7, #28]
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3728      	adds	r7, #40	; 0x28
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
 8006402:	bf00      	nop
 8006404:	20012e90 	.word	0x20012e90
 8006408:	20012ea4 	.word	0x20012ea4
 800640c:	20012e94 	.word	0x20012e94
 8006410:	20012e88 	.word	0x20012e88
 8006414:	20012e98 	.word	0x20012e98
 8006418:	20012e9c 	.word	0x20012e9c

0800641c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b086      	sub	sp, #24
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d04d      	beq.n	80064ca <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800642e:	2308      	movs	r3, #8
 8006430:	425b      	negs	r3, r3
 8006432:	697a      	ldr	r2, [r7, #20]
 8006434:	4413      	add	r3, r2
 8006436:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	685a      	ldr	r2, [r3, #4]
 8006440:	4b24      	ldr	r3, [pc, #144]	; (80064d4 <vPortFree+0xb8>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4013      	ands	r3, r2
 8006446:	2b00      	cmp	r3, #0
 8006448:	d10a      	bne.n	8006460 <vPortFree+0x44>
        __asm volatile
 800644a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800644e:	f383 8811 	msr	BASEPRI, r3
 8006452:	f3bf 8f6f 	isb	sy
 8006456:	f3bf 8f4f 	dsb	sy
 800645a:	60fb      	str	r3, [r7, #12]
    }
 800645c:	bf00      	nop
 800645e:	e7fe      	b.n	800645e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d00a      	beq.n	800647e <vPortFree+0x62>
        __asm volatile
 8006468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800646c:	f383 8811 	msr	BASEPRI, r3
 8006470:	f3bf 8f6f 	isb	sy
 8006474:	f3bf 8f4f 	dsb	sy
 8006478:	60bb      	str	r3, [r7, #8]
    }
 800647a:	bf00      	nop
 800647c:	e7fe      	b.n	800647c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	685a      	ldr	r2, [r3, #4]
 8006482:	4b14      	ldr	r3, [pc, #80]	; (80064d4 <vPortFree+0xb8>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4013      	ands	r3, r2
 8006488:	2b00      	cmp	r3, #0
 800648a:	d01e      	beq.n	80064ca <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d11a      	bne.n	80064ca <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	685a      	ldr	r2, [r3, #4]
 8006498:	4b0e      	ldr	r3, [pc, #56]	; (80064d4 <vPortFree+0xb8>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	43db      	mvns	r3, r3
 800649e:	401a      	ands	r2, r3
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80064a4:	f7fe f9de 	bl	8004864 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	685a      	ldr	r2, [r3, #4]
 80064ac:	4b0a      	ldr	r3, [pc, #40]	; (80064d8 <vPortFree+0xbc>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4413      	add	r3, r2
 80064b2:	4a09      	ldr	r2, [pc, #36]	; (80064d8 <vPortFree+0xbc>)
 80064b4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80064b6:	6938      	ldr	r0, [r7, #16]
 80064b8:	f000 f874 	bl	80065a4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80064bc:	4b07      	ldr	r3, [pc, #28]	; (80064dc <vPortFree+0xc0>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	3301      	adds	r3, #1
 80064c2:	4a06      	ldr	r2, [pc, #24]	; (80064dc <vPortFree+0xc0>)
 80064c4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80064c6:	f7fe f9db 	bl	8004880 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80064ca:	bf00      	nop
 80064cc:	3718      	adds	r7, #24
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	bf00      	nop
 80064d4:	20012ea4 	.word	0x20012ea4
 80064d8:	20012e94 	.word	0x20012e94
 80064dc:	20012ea0 	.word	0x20012ea0

080064e0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80064e0:	b480      	push	{r7}
 80064e2:	b085      	sub	sp, #20
 80064e4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80064e6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80064ea:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80064ec:	4b27      	ldr	r3, [pc, #156]	; (800658c <prvHeapInit+0xac>)
 80064ee:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f003 0307 	and.w	r3, r3, #7
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d00c      	beq.n	8006514 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	3307      	adds	r3, #7
 80064fe:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f023 0307 	bic.w	r3, r3, #7
 8006506:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006508:	68ba      	ldr	r2, [r7, #8]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	1ad3      	subs	r3, r2, r3
 800650e:	4a1f      	ldr	r2, [pc, #124]	; (800658c <prvHeapInit+0xac>)
 8006510:	4413      	add	r3, r2
 8006512:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006518:	4a1d      	ldr	r2, [pc, #116]	; (8006590 <prvHeapInit+0xb0>)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800651e:	4b1c      	ldr	r3, [pc, #112]	; (8006590 <prvHeapInit+0xb0>)
 8006520:	2200      	movs	r2, #0
 8006522:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	68ba      	ldr	r2, [r7, #8]
 8006528:	4413      	add	r3, r2
 800652a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800652c:	2208      	movs	r2, #8
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	1a9b      	subs	r3, r3, r2
 8006532:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f023 0307 	bic.w	r3, r3, #7
 800653a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	4a15      	ldr	r2, [pc, #84]	; (8006594 <prvHeapInit+0xb4>)
 8006540:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8006542:	4b14      	ldr	r3, [pc, #80]	; (8006594 <prvHeapInit+0xb4>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	2200      	movs	r2, #0
 8006548:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800654a:	4b12      	ldr	r3, [pc, #72]	; (8006594 <prvHeapInit+0xb4>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	2200      	movs	r2, #0
 8006550:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	68fa      	ldr	r2, [r7, #12]
 800655a:	1ad2      	subs	r2, r2, r3
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006560:	4b0c      	ldr	r3, [pc, #48]	; (8006594 <prvHeapInit+0xb4>)
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	4a0a      	ldr	r2, [pc, #40]	; (8006598 <prvHeapInit+0xb8>)
 800656e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	4a09      	ldr	r2, [pc, #36]	; (800659c <prvHeapInit+0xbc>)
 8006576:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006578:	4b09      	ldr	r3, [pc, #36]	; (80065a0 <prvHeapInit+0xc0>)
 800657a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800657e:	601a      	str	r2, [r3, #0]
}
 8006580:	bf00      	nop
 8006582:	3714      	adds	r7, #20
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr
 800658c:	20000288 	.word	0x20000288
 8006590:	20012e88 	.word	0x20012e88
 8006594:	20012e90 	.word	0x20012e90
 8006598:	20012e98 	.word	0x20012e98
 800659c:	20012e94 	.word	0x20012e94
 80065a0:	20012ea4 	.word	0x20012ea4

080065a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80065a4:	b480      	push	{r7}
 80065a6:	b085      	sub	sp, #20
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80065ac:	4b28      	ldr	r3, [pc, #160]	; (8006650 <prvInsertBlockIntoFreeList+0xac>)
 80065ae:	60fb      	str	r3, [r7, #12]
 80065b0:	e002      	b.n	80065b8 <prvInsertBlockIntoFreeList+0x14>
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	60fb      	str	r3, [r7, #12]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	429a      	cmp	r2, r3
 80065c0:	d8f7      	bhi.n	80065b2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	68ba      	ldr	r2, [r7, #8]
 80065cc:	4413      	add	r3, r2
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d108      	bne.n	80065e6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	685a      	ldr	r2, [r3, #4]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	441a      	add	r2, r3
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	68ba      	ldr	r2, [r7, #8]
 80065f0:	441a      	add	r2, r3
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d118      	bne.n	800662c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	4b15      	ldr	r3, [pc, #84]	; (8006654 <prvInsertBlockIntoFreeList+0xb0>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	429a      	cmp	r2, r3
 8006604:	d00d      	beq.n	8006622 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	685a      	ldr	r2, [r3, #4]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	441a      	add	r2, r3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	601a      	str	r2, [r3, #0]
 8006620:	e008      	b.n	8006634 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006622:	4b0c      	ldr	r3, [pc, #48]	; (8006654 <prvInsertBlockIntoFreeList+0xb0>)
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	601a      	str	r2, [r3, #0]
 800662a:	e003      	b.n	8006634 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8006634:	68fa      	ldr	r2, [r7, #12]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	429a      	cmp	r2, r3
 800663a:	d002      	beq.n	8006642 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006642:	bf00      	nop
 8006644:	3714      	adds	r7, #20
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr
 800664e:	bf00      	nop
 8006650:	20012e88 	.word	0x20012e88
 8006654:	20012e90 	.word	0x20012e90

08006658 <__libc_init_array>:
 8006658:	b570      	push	{r4, r5, r6, lr}
 800665a:	4d0d      	ldr	r5, [pc, #52]	; (8006690 <__libc_init_array+0x38>)
 800665c:	4c0d      	ldr	r4, [pc, #52]	; (8006694 <__libc_init_array+0x3c>)
 800665e:	1b64      	subs	r4, r4, r5
 8006660:	10a4      	asrs	r4, r4, #2
 8006662:	2600      	movs	r6, #0
 8006664:	42a6      	cmp	r6, r4
 8006666:	d109      	bne.n	800667c <__libc_init_array+0x24>
 8006668:	4d0b      	ldr	r5, [pc, #44]	; (8006698 <__libc_init_array+0x40>)
 800666a:	4c0c      	ldr	r4, [pc, #48]	; (800669c <__libc_init_array+0x44>)
 800666c:	f000 f82e 	bl	80066cc <_init>
 8006670:	1b64      	subs	r4, r4, r5
 8006672:	10a4      	asrs	r4, r4, #2
 8006674:	2600      	movs	r6, #0
 8006676:	42a6      	cmp	r6, r4
 8006678:	d105      	bne.n	8006686 <__libc_init_array+0x2e>
 800667a:	bd70      	pop	{r4, r5, r6, pc}
 800667c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006680:	4798      	blx	r3
 8006682:	3601      	adds	r6, #1
 8006684:	e7ee      	b.n	8006664 <__libc_init_array+0xc>
 8006686:	f855 3b04 	ldr.w	r3, [r5], #4
 800668a:	4798      	blx	r3
 800668c:	3601      	adds	r6, #1
 800668e:	e7f2      	b.n	8006676 <__libc_init_array+0x1e>
 8006690:	0800673c 	.word	0x0800673c
 8006694:	0800673c 	.word	0x0800673c
 8006698:	0800673c 	.word	0x0800673c
 800669c:	08006740 	.word	0x08006740

080066a0 <memcpy>:
 80066a0:	440a      	add	r2, r1
 80066a2:	4291      	cmp	r1, r2
 80066a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80066a8:	d100      	bne.n	80066ac <memcpy+0xc>
 80066aa:	4770      	bx	lr
 80066ac:	b510      	push	{r4, lr}
 80066ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066b6:	4291      	cmp	r1, r2
 80066b8:	d1f9      	bne.n	80066ae <memcpy+0xe>
 80066ba:	bd10      	pop	{r4, pc}

080066bc <memset>:
 80066bc:	4402      	add	r2, r0
 80066be:	4603      	mov	r3, r0
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d100      	bne.n	80066c6 <memset+0xa>
 80066c4:	4770      	bx	lr
 80066c6:	f803 1b01 	strb.w	r1, [r3], #1
 80066ca:	e7f9      	b.n	80066c0 <memset+0x4>

080066cc <_init>:
 80066cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ce:	bf00      	nop
 80066d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066d2:	bc08      	pop	{r3}
 80066d4:	469e      	mov	lr, r3
 80066d6:	4770      	bx	lr

080066d8 <_fini>:
 80066d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066da:	bf00      	nop
 80066dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066de:	bc08      	pop	{r3}
 80066e0:	469e      	mov	lr, r3
 80066e2:	4770      	bx	lr
