
008Queue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c1c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  08007dac  08007dac  00017dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f64  08007f64  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08007f64  08007f64  00017f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f6c  08007f6c  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f6c  08007f6c  00017f6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f70  08007f70  00017f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08007f74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          000144a4  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20014524  20014524  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014d85  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003100  00000000  00000000  00034e35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001370  00000000  00000000  00037f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011d8  00000000  00000000  000392a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024044  00000000  00000000  0003a480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015ee0  00000000  00000000  0005e4c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d848a  00000000  00000000  000743a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014c82e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000054d4  00000000  00000000  0014c880  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007d94 	.word	0x08007d94

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08007d94 	.word	0x08007d94

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012f40 	.word	0x20012f40
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b974 	b.w	8000610 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468e      	mov	lr, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14d      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034e:	428a      	cmp	r2, r1
 8000350:	4694      	mov	ip, r2
 8000352:	d969      	bls.n	8000428 <__udivmoddi4+0xe8>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b152      	cbz	r2, 8000370 <__udivmoddi4+0x30>
 800035a:	fa01 f302 	lsl.w	r3, r1, r2
 800035e:	f1c2 0120 	rsb	r1, r2, #32
 8000362:	fa20 f101 	lsr.w	r1, r0, r1
 8000366:	fa0c fc02 	lsl.w	ip, ip, r2
 800036a:	ea41 0e03 	orr.w	lr, r1, r3
 800036e:	4094      	lsls	r4, r2
 8000370:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000374:	0c21      	lsrs	r1, r4, #16
 8000376:	fbbe f6f8 	udiv	r6, lr, r8
 800037a:	fa1f f78c 	uxth.w	r7, ip
 800037e:	fb08 e316 	mls	r3, r8, r6, lr
 8000382:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000386:	fb06 f107 	mul.w	r1, r6, r7
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f106 30ff 	add.w	r0, r6, #4294967295
 8000396:	f080 811f 	bcs.w	80005d8 <__udivmoddi4+0x298>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 811c 	bls.w	80005d8 <__udivmoddi4+0x298>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ac:	fb08 3310 	mls	r3, r8, r0, r3
 80003b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b4:	fb00 f707 	mul.w	r7, r0, r7
 80003b8:	42a7      	cmp	r7, r4
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x92>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c4:	f080 810a 	bcs.w	80005dc <__udivmoddi4+0x29c>
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	f240 8107 	bls.w	80005dc <__udivmoddi4+0x29c>
 80003ce:	4464      	add	r4, ip
 80003d0:	3802      	subs	r0, #2
 80003d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d6:	1be4      	subs	r4, r4, r7
 80003d8:	2600      	movs	r6, #0
 80003da:	b11d      	cbz	r5, 80003e4 <__udivmoddi4+0xa4>
 80003dc:	40d4      	lsrs	r4, r2
 80003de:	2300      	movs	r3, #0
 80003e0:	e9c5 4300 	strd	r4, r3, [r5]
 80003e4:	4631      	mov	r1, r6
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0xc2>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80ef 	beq.w	80005d2 <__udivmoddi4+0x292>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x160>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0xd4>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80f9 	bhi.w	8000606 <__udivmoddi4+0x2c6>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0303 	sbc.w	r3, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	469e      	mov	lr, r3
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0e0      	beq.n	80003e4 <__udivmoddi4+0xa4>
 8000422:	e9c5 4e00 	strd	r4, lr, [r5]
 8000426:	e7dd      	b.n	80003e4 <__udivmoddi4+0xa4>
 8000428:	b902      	cbnz	r2, 800042c <__udivmoddi4+0xec>
 800042a:	deff      	udf	#255	; 0xff
 800042c:	fab2 f282 	clz	r2, r2
 8000430:	2a00      	cmp	r2, #0
 8000432:	f040 8092 	bne.w	800055a <__udivmoddi4+0x21a>
 8000436:	eba1 010c 	sub.w	r1, r1, ip
 800043a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043e:	fa1f fe8c 	uxth.w	lr, ip
 8000442:	2601      	movs	r6, #1
 8000444:	0c20      	lsrs	r0, r4, #16
 8000446:	fbb1 f3f7 	udiv	r3, r1, r7
 800044a:	fb07 1113 	mls	r1, r7, r3, r1
 800044e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000452:	fb0e f003 	mul.w	r0, lr, r3
 8000456:	4288      	cmp	r0, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x12c>
 800045a:	eb1c 0101 	adds.w	r1, ip, r1
 800045e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x12a>
 8000464:	4288      	cmp	r0, r1
 8000466:	f200 80cb 	bhi.w	8000600 <__udivmoddi4+0x2c0>
 800046a:	4643      	mov	r3, r8
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1110 	mls	r1, r7, r0, r1
 8000478:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800047c:	fb0e fe00 	mul.w	lr, lr, r0
 8000480:	45a6      	cmp	lr, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x156>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f100 31ff 	add.w	r1, r0, #4294967295
 800048c:	d202      	bcs.n	8000494 <__udivmoddi4+0x154>
 800048e:	45a6      	cmp	lr, r4
 8000490:	f200 80bb 	bhi.w	800060a <__udivmoddi4+0x2ca>
 8000494:	4608      	mov	r0, r1
 8000496:	eba4 040e 	sub.w	r4, r4, lr
 800049a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049e:	e79c      	b.n	80003da <__udivmoddi4+0x9a>
 80004a0:	f1c6 0720 	rsb	r7, r6, #32
 80004a4:	40b3      	lsls	r3, r6
 80004a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ae:	fa20 f407 	lsr.w	r4, r0, r7
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	431c      	orrs	r4, r3
 80004b8:	40f9      	lsrs	r1, r7
 80004ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004be:	fa00 f306 	lsl.w	r3, r0, r6
 80004c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c6:	0c20      	lsrs	r0, r4, #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fb09 1118 	mls	r1, r9, r8, r1
 80004d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d4:	fb08 f00e 	mul.w	r0, r8, lr
 80004d8:	4288      	cmp	r0, r1
 80004da:	fa02 f206 	lsl.w	r2, r2, r6
 80004de:	d90b      	bls.n	80004f8 <__udivmoddi4+0x1b8>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e8:	f080 8088 	bcs.w	80005fc <__udivmoddi4+0x2bc>
 80004ec:	4288      	cmp	r0, r1
 80004ee:	f240 8085 	bls.w	80005fc <__udivmoddi4+0x2bc>
 80004f2:	f1a8 0802 	sub.w	r8, r8, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1a09      	subs	r1, r1, r0
 80004fa:	b2a4      	uxth	r4, r4
 80004fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000500:	fb09 1110 	mls	r1, r9, r0, r1
 8000504:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000508:	fb00 fe0e 	mul.w	lr, r0, lr
 800050c:	458e      	cmp	lr, r1
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x1e2>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f100 34ff 	add.w	r4, r0, #4294967295
 8000518:	d26c      	bcs.n	80005f4 <__udivmoddi4+0x2b4>
 800051a:	458e      	cmp	lr, r1
 800051c:	d96a      	bls.n	80005f4 <__udivmoddi4+0x2b4>
 800051e:	3802      	subs	r0, #2
 8000520:	4461      	add	r1, ip
 8000522:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000526:	fba0 9402 	umull	r9, r4, r0, r2
 800052a:	eba1 010e 	sub.w	r1, r1, lr
 800052e:	42a1      	cmp	r1, r4
 8000530:	46c8      	mov	r8, r9
 8000532:	46a6      	mov	lr, r4
 8000534:	d356      	bcc.n	80005e4 <__udivmoddi4+0x2a4>
 8000536:	d053      	beq.n	80005e0 <__udivmoddi4+0x2a0>
 8000538:	b15d      	cbz	r5, 8000552 <__udivmoddi4+0x212>
 800053a:	ebb3 0208 	subs.w	r2, r3, r8
 800053e:	eb61 010e 	sbc.w	r1, r1, lr
 8000542:	fa01 f707 	lsl.w	r7, r1, r7
 8000546:	fa22 f306 	lsr.w	r3, r2, r6
 800054a:	40f1      	lsrs	r1, r6
 800054c:	431f      	orrs	r7, r3
 800054e:	e9c5 7100 	strd	r7, r1, [r5]
 8000552:	2600      	movs	r6, #0
 8000554:	4631      	mov	r1, r6
 8000556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	40d8      	lsrs	r0, r3
 8000560:	fa0c fc02 	lsl.w	ip, ip, r2
 8000564:	fa21 f303 	lsr.w	r3, r1, r3
 8000568:	4091      	lsls	r1, r2
 800056a:	4301      	orrs	r1, r0
 800056c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000570:	fa1f fe8c 	uxth.w	lr, ip
 8000574:	fbb3 f0f7 	udiv	r0, r3, r7
 8000578:	fb07 3610 	mls	r6, r7, r0, r3
 800057c:	0c0b      	lsrs	r3, r1, #16
 800057e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000582:	fb00 f60e 	mul.w	r6, r0, lr
 8000586:	429e      	cmp	r6, r3
 8000588:	fa04 f402 	lsl.w	r4, r4, r2
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x260>
 800058e:	eb1c 0303 	adds.w	r3, ip, r3
 8000592:	f100 38ff 	add.w	r8, r0, #4294967295
 8000596:	d22f      	bcs.n	80005f8 <__udivmoddi4+0x2b8>
 8000598:	429e      	cmp	r6, r3
 800059a:	d92d      	bls.n	80005f8 <__udivmoddi4+0x2b8>
 800059c:	3802      	subs	r0, #2
 800059e:	4463      	add	r3, ip
 80005a0:	1b9b      	subs	r3, r3, r6
 80005a2:	b289      	uxth	r1, r1
 80005a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005b0:	fb06 f30e 	mul.w	r3, r6, lr
 80005b4:	428b      	cmp	r3, r1
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x28a>
 80005b8:	eb1c 0101 	adds.w	r1, ip, r1
 80005bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005c0:	d216      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 80005c2:	428b      	cmp	r3, r1
 80005c4:	d914      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 80005c6:	3e02      	subs	r6, #2
 80005c8:	4461      	add	r1, ip
 80005ca:	1ac9      	subs	r1, r1, r3
 80005cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005d0:	e738      	b.n	8000444 <__udivmoddi4+0x104>
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e705      	b.n	80003e4 <__udivmoddi4+0xa4>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e3      	b.n	80003a4 <__udivmoddi4+0x64>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6f8      	b.n	80003d2 <__udivmoddi4+0x92>
 80005e0:	454b      	cmp	r3, r9
 80005e2:	d2a9      	bcs.n	8000538 <__udivmoddi4+0x1f8>
 80005e4:	ebb9 0802 	subs.w	r8, r9, r2
 80005e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7a3      	b.n	8000538 <__udivmoddi4+0x1f8>
 80005f0:	4646      	mov	r6, r8
 80005f2:	e7ea      	b.n	80005ca <__udivmoddi4+0x28a>
 80005f4:	4620      	mov	r0, r4
 80005f6:	e794      	b.n	8000522 <__udivmoddi4+0x1e2>
 80005f8:	4640      	mov	r0, r8
 80005fa:	e7d1      	b.n	80005a0 <__udivmoddi4+0x260>
 80005fc:	46d0      	mov	r8, sl
 80005fe:	e77b      	b.n	80004f8 <__udivmoddi4+0x1b8>
 8000600:	3b02      	subs	r3, #2
 8000602:	4461      	add	r1, ip
 8000604:	e732      	b.n	800046c <__udivmoddi4+0x12c>
 8000606:	4630      	mov	r0, r6
 8000608:	e709      	b.n	800041e <__udivmoddi4+0xde>
 800060a:	4464      	add	r4, ip
 800060c:	3802      	subs	r0, #2
 800060e:	e742      	b.n	8000496 <__udivmoddi4+0x156>

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b088      	sub	sp, #32
 8000618:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061a:	f000 fb97 	bl	8000d4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061e:	f000 f853 	bl	80006c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000622:	f000 f8bb 	bl	800079c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  DWT_CTRL |= (1 << 0);
 8000626:	4b20      	ldr	r3, [pc, #128]	; (80006a8 <main+0x94>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a1f      	ldr	r2, [pc, #124]	; (80006a8 <main+0x94>)
 800062c:	f043 0301 	orr.w	r3, r3, #1
 8000630:	6013      	str	r3, [r2, #0]
  SEGGER_UART_init(250000);
 8000632:	481e      	ldr	r0, [pc, #120]	; (80006ac <main+0x98>)
 8000634:	f004 fc8c 	bl	8004f50 <SEGGER_UART_init>

  SEGGER_SYSVIEW_Conf();
 8000638:	f004 fab4 	bl	8004ba4 <SEGGER_SYSVIEW_Conf>

  status = xTaskCreate(task1_handler, "RED", 200, "Hello world from task 1", 2, &task1_handle);
 800063c:	f107 0308 	add.w	r3, r7, #8
 8000640:	9301      	str	r3, [sp, #4]
 8000642:	2302      	movs	r3, #2
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	4b1a      	ldr	r3, [pc, #104]	; (80006b0 <main+0x9c>)
 8000648:	22c8      	movs	r2, #200	; 0xc8
 800064a:	491a      	ldr	r1, [pc, #104]	; (80006b4 <main+0xa0>)
 800064c:	481a      	ldr	r0, [pc, #104]	; (80006b8 <main+0xa4>)
 800064e:	f002 fbed 	bl	8002e2c <xTaskCreate>
 8000652:	6178      	str	r0, [r7, #20]
	configASSERT(status == pdPASS);
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	2b01      	cmp	r3, #1
 8000658:	d00a      	beq.n	8000670 <main+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800065a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800065e:	f383 8811 	msr	BASEPRI, r3
 8000662:	f3bf 8f6f 	isb	sy
 8000666:	f3bf 8f4f 	dsb	sy
 800066a:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800066c:	bf00      	nop
 800066e:	e7fe      	b.n	800066e <main+0x5a>

	status = xTaskCreate(task2_handler, "GREEN", 200, "Hello world from task 2", 3, &task2_handle);
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	9301      	str	r3, [sp, #4]
 8000674:	2303      	movs	r3, #3
 8000676:	9300      	str	r3, [sp, #0]
 8000678:	4b10      	ldr	r3, [pc, #64]	; (80006bc <main+0xa8>)
 800067a:	22c8      	movs	r2, #200	; 0xc8
 800067c:	4910      	ldr	r1, [pc, #64]	; (80006c0 <main+0xac>)
 800067e:	4811      	ldr	r0, [pc, #68]	; (80006c4 <main+0xb0>)
 8000680:	f002 fbd4 	bl	8002e2c <xTaskCreate>
 8000684:	6178      	str	r0, [r7, #20]
	configASSERT(status == pdPASS);
 8000686:	697b      	ldr	r3, [r7, #20]
 8000688:	2b01      	cmp	r3, #1
 800068a:	d00a      	beq.n	80006a2 <main+0x8e>
        __asm volatile
 800068c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000690:	f383 8811 	msr	BASEPRI, r3
 8000694:	f3bf 8f6f 	isb	sy
 8000698:	f3bf 8f4f 	dsb	sy
 800069c:	60fb      	str	r3, [r7, #12]
    }
 800069e:	bf00      	nop
 80006a0:	e7fe      	b.n	80006a0 <main+0x8c>

  vTaskStartScheduler();
 80006a2:	f002 fd27 	bl	80030f4 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006a6:	e7fe      	b.n	80006a6 <main+0x92>
 80006a8:	e0001000 	.word	0xe0001000
 80006ac:	0003d090 	.word	0x0003d090
 80006b0:	08007dac 	.word	0x08007dac
 80006b4:	08007dc4 	.word	0x08007dc4
 80006b8:	08000a59 	.word	0x08000a59
 80006bc:	08007dc8 	.word	0x08007dc8
 80006c0:	08007de0 	.word	0x08007de0
 80006c4:	08000a85 	.word	0x08000a85

080006c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b094      	sub	sp, #80	; 0x50
 80006cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ce:	f107 0320 	add.w	r3, r7, #32
 80006d2:	2230      	movs	r2, #48	; 0x30
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f006 fee0 	bl	800749c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
 80006ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ec:	2300      	movs	r3, #0
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	4b28      	ldr	r3, [pc, #160]	; (8000794 <SystemClock_Config+0xcc>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f4:	4a27      	ldr	r2, [pc, #156]	; (8000794 <SystemClock_Config+0xcc>)
 80006f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006fa:	6413      	str	r3, [r2, #64]	; 0x40
 80006fc:	4b25      	ldr	r3, [pc, #148]	; (8000794 <SystemClock_Config+0xcc>)
 80006fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000708:	2300      	movs	r3, #0
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	4b22      	ldr	r3, [pc, #136]	; (8000798 <SystemClock_Config+0xd0>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a21      	ldr	r2, [pc, #132]	; (8000798 <SystemClock_Config+0xd0>)
 8000712:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000716:	6013      	str	r3, [r2, #0]
 8000718:	4b1f      	ldr	r3, [pc, #124]	; (8000798 <SystemClock_Config+0xd0>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000724:	2302      	movs	r3, #2
 8000726:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000728:	2301      	movs	r3, #1
 800072a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800072c:	2310      	movs	r3, #16
 800072e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000730:	2302      	movs	r3, #2
 8000732:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000734:	2300      	movs	r3, #0
 8000736:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000738:	2308      	movs	r3, #8
 800073a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800073c:	23a8      	movs	r3, #168	; 0xa8
 800073e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000740:	2302      	movs	r3, #2
 8000742:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000744:	2307      	movs	r3, #7
 8000746:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000748:	f107 0320 	add.w	r3, r7, #32
 800074c:	4618      	mov	r0, r3
 800074e:	f000 fdfb 	bl	8001348 <HAL_RCC_OscConfig>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000758:	f000 f9bc 	bl	8000ad4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075c:	230f      	movs	r3, #15
 800075e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000760:	2302      	movs	r3, #2
 8000762:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000768:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800076c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800076e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000772:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000774:	f107 030c 	add.w	r3, r7, #12
 8000778:	2105      	movs	r1, #5
 800077a:	4618      	mov	r0, r3
 800077c:	f001 f85c 	bl	8001838 <HAL_RCC_ClockConfig>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000786:	f000 f9a5 	bl	8000ad4 <Error_Handler>
  }
}
 800078a:	bf00      	nop
 800078c:	3750      	adds	r7, #80	; 0x50
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40023800 	.word	0x40023800
 8000798:	40007000 	.word	0x40007000

0800079c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b08c      	sub	sp, #48	; 0x30
 80007a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a2:	f107 031c 	add.w	r3, r7, #28
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]
 80007b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	61bb      	str	r3, [r7, #24]
 80007b6:	4ba2      	ldr	r3, [pc, #648]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4aa1      	ldr	r2, [pc, #644]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 80007bc:	f043 0310 	orr.w	r3, r3, #16
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b9f      	ldr	r3, [pc, #636]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0310 	and.w	r3, r3, #16
 80007ca:	61bb      	str	r3, [r7, #24]
 80007cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	617b      	str	r3, [r7, #20]
 80007d2:	4b9b      	ldr	r3, [pc, #620]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a9a      	ldr	r2, [pc, #616]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 80007d8:	f043 0304 	orr.w	r3, r3, #4
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b98      	ldr	r3, [pc, #608]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0304 	and.w	r3, r3, #4
 80007e6:	617b      	str	r3, [r7, #20]
 80007e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	613b      	str	r3, [r7, #16]
 80007ee:	4b94      	ldr	r3, [pc, #592]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a93      	ldr	r2, [pc, #588]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 80007f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b91      	ldr	r3, [pc, #580]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000802:	613b      	str	r3, [r7, #16]
 8000804:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	60fb      	str	r3, [r7, #12]
 800080a:	4b8d      	ldr	r3, [pc, #564]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a8c      	ldr	r2, [pc, #560]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 8000810:	f043 0301 	orr.w	r3, r3, #1
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b8a      	ldr	r3, [pc, #552]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	60bb      	str	r3, [r7, #8]
 8000826:	4b86      	ldr	r3, [pc, #536]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a85      	ldr	r2, [pc, #532]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 800082c:	f043 0302 	orr.w	r3, r3, #2
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b83      	ldr	r3, [pc, #524]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0302 	and.w	r3, r3, #2
 800083a:	60bb      	str	r3, [r7, #8]
 800083c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	607b      	str	r3, [r7, #4]
 8000842:	4b7f      	ldr	r3, [pc, #508]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a7e      	ldr	r2, [pc, #504]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 8000848:	f043 0308 	orr.w	r3, r3, #8
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b7c      	ldr	r3, [pc, #496]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0308 	and.w	r3, r3, #8
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	2108      	movs	r1, #8
 800085e:	4879      	ldr	r0, [pc, #484]	; (8000a44 <MX_GPIO_Init+0x2a8>)
 8000860:	f000 fd58 	bl	8001314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000864:	2201      	movs	r2, #1
 8000866:	2101      	movs	r1, #1
 8000868:	4877      	ldr	r0, [pc, #476]	; (8000a48 <MX_GPIO_Init+0x2ac>)
 800086a:	f000 fd53 	bl	8001314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800086e:	2200      	movs	r2, #0
 8000870:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000874:	4875      	ldr	r0, [pc, #468]	; (8000a4c <MX_GPIO_Init+0x2b0>)
 8000876:	f000 fd4d 	bl	8001314 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800087a:	2308      	movs	r3, #8
 800087c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087e:	2301      	movs	r3, #1
 8000880:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000886:	2300      	movs	r3, #0
 8000888:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800088a:	f107 031c 	add.w	r3, r7, #28
 800088e:	4619      	mov	r1, r3
 8000890:	486c      	ldr	r0, [pc, #432]	; (8000a44 <MX_GPIO_Init+0x2a8>)
 8000892:	f000 fba3 	bl	8000fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000896:	2301      	movs	r3, #1
 8000898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089a:	2301      	movs	r3, #1
 800089c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a2:	2300      	movs	r3, #0
 80008a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	4619      	mov	r1, r3
 80008ac:	4866      	ldr	r0, [pc, #408]	; (8000a48 <MX_GPIO_Init+0x2ac>)
 80008ae:	f000 fb95 	bl	8000fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008b2:	2308      	movs	r3, #8
 80008b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b6:	2302      	movs	r3, #2
 80008b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008be:	2300      	movs	r3, #0
 80008c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008c2:	2305      	movs	r3, #5
 80008c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	4619      	mov	r1, r3
 80008cc:	485e      	ldr	r0, [pc, #376]	; (8000a48 <MX_GPIO_Init+0x2ac>)
 80008ce:	f000 fb85 	bl	8000fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008d2:	2301      	movs	r3, #1
 80008d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008d6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	4619      	mov	r1, r3
 80008e6:	485a      	ldr	r0, [pc, #360]	; (8000a50 <MX_GPIO_Init+0x2b4>)
 80008e8:	f000 fb78 	bl	8000fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008ec:	2310      	movs	r3, #16
 80008ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f0:	2302      	movs	r3, #2
 80008f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008fc:	2306      	movs	r3, #6
 80008fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000900:	f107 031c 	add.w	r3, r7, #28
 8000904:	4619      	mov	r1, r3
 8000906:	4852      	ldr	r0, [pc, #328]	; (8000a50 <MX_GPIO_Init+0x2b4>)
 8000908:	f000 fb68 	bl	8000fdc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800090c:	23e0      	movs	r3, #224	; 0xe0
 800090e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000910:	2302      	movs	r3, #2
 8000912:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000918:	2300      	movs	r3, #0
 800091a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800091c:	2305      	movs	r3, #5
 800091e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000920:	f107 031c 	add.w	r3, r7, #28
 8000924:	4619      	mov	r1, r3
 8000926:	484a      	ldr	r0, [pc, #296]	; (8000a50 <MX_GPIO_Init+0x2b4>)
 8000928:	f000 fb58 	bl	8000fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800092c:	2304      	movs	r3, #4
 800092e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000930:	2300      	movs	r3, #0
 8000932:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000938:	f107 031c 	add.w	r3, r7, #28
 800093c:	4619      	mov	r1, r3
 800093e:	4845      	ldr	r0, [pc, #276]	; (8000a54 <MX_GPIO_Init+0x2b8>)
 8000940:	f000 fb4c 	bl	8000fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000944:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094a:	2302      	movs	r3, #2
 800094c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000952:	2300      	movs	r3, #0
 8000954:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000956:	2305      	movs	r3, #5
 8000958:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800095a:	f107 031c 	add.w	r3, r7, #28
 800095e:	4619      	mov	r1, r3
 8000960:	483c      	ldr	r0, [pc, #240]	; (8000a54 <MX_GPIO_Init+0x2b8>)
 8000962:	f000 fb3b 	bl	8000fdc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000966:	f24f 0310 	movw	r3, #61456	; 0xf010
 800096a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096c:	2301      	movs	r3, #1
 800096e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000974:	2300      	movs	r3, #0
 8000976:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000978:	f107 031c 	add.w	r3, r7, #28
 800097c:	4619      	mov	r1, r3
 800097e:	4833      	ldr	r0, [pc, #204]	; (8000a4c <MX_GPIO_Init+0x2b0>)
 8000980:	f000 fb2c 	bl	8000fdc <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000984:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098a:	2302      	movs	r3, #2
 800098c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000996:	2306      	movs	r3, #6
 8000998:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800099a:	f107 031c 	add.w	r3, r7, #28
 800099e:	4619      	mov	r1, r3
 80009a0:	4829      	ldr	r0, [pc, #164]	; (8000a48 <MX_GPIO_Init+0x2ac>)
 80009a2:	f000 fb1b 	bl	8000fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80009a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ac:	2300      	movs	r3, #0
 80009ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80009b4:	f107 031c 	add.w	r3, r7, #28
 80009b8:	4619      	mov	r1, r3
 80009ba:	4825      	ldr	r0, [pc, #148]	; (8000a50 <MX_GPIO_Init+0x2b4>)
 80009bc:	f000 fb0e 	bl	8000fdc <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80009c0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80009c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c6:	2302      	movs	r3, #2
 80009c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ce:	2300      	movs	r3, #0
 80009d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009d2:	230a      	movs	r3, #10
 80009d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d6:	f107 031c 	add.w	r3, r7, #28
 80009da:	4619      	mov	r1, r3
 80009dc:	481c      	ldr	r0, [pc, #112]	; (8000a50 <MX_GPIO_Init+0x2b4>)
 80009de:	f000 fafd 	bl	8000fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009e2:	2320      	movs	r3, #32
 80009e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e6:	2300      	movs	r3, #0
 80009e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009ee:	f107 031c 	add.w	r3, r7, #28
 80009f2:	4619      	mov	r1, r3
 80009f4:	4815      	ldr	r0, [pc, #84]	; (8000a4c <MX_GPIO_Init+0x2b0>)
 80009f6:	f000 faf1 	bl	8000fdc <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009fa:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a00:	2312      	movs	r3, #18
 8000a02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a0c:	2304      	movs	r3, #4
 8000a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a10:	f107 031c 	add.w	r3, r7, #28
 8000a14:	4619      	mov	r1, r3
 8000a16:	480f      	ldr	r0, [pc, #60]	; (8000a54 <MX_GPIO_Init+0x2b8>)
 8000a18:	f000 fae0 	bl	8000fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a20:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a2a:	f107 031c 	add.w	r3, r7, #28
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4804      	ldr	r0, [pc, #16]	; (8000a44 <MX_GPIO_Init+0x2a8>)
 8000a32:	f000 fad3 	bl	8000fdc <HAL_GPIO_Init>

}
 8000a36:	bf00      	nop
 8000a38:	3730      	adds	r7, #48	; 0x30
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40023800 	.word	0x40023800
 8000a44:	40021000 	.word	0x40021000
 8000a48:	40020800 	.word	0x40020800
 8000a4c:	40020c00 	.word	0x40020c00
 8000a50:	40020000 	.word	0x40020000
 8000a54:	40020400 	.word	0x40020400

08000a58 <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void* parameters)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b09c      	sub	sp, #112	; 0x70
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
	char msg[100];
	while(1)
	{
		snprintf(msg, 100, "Hello TASK 1: %s\n", (char*)parameters);
 8000a60:	f107 000c 	add.w	r0, r7, #12
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	4a06      	ldr	r2, [pc, #24]	; (8000a80 <task1_handler+0x28>)
 8000a68:	2164      	movs	r1, #100	; 0x64
 8000a6a:	f006 fd1f 	bl	80074ac <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000a6e:	f107 030c 	add.w	r3, r7, #12
 8000a72:	4618      	mov	r0, r3
 8000a74:	f006 fc2c 	bl	80072d0 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_Delay(200);
 8000a78:	20c8      	movs	r0, #200	; 0xc8
 8000a7a:	f000 f9a9 	bl	8000dd0 <HAL_Delay>
		snprintf(msg, 100, "Hello TASK 1: %s\n", (char*)parameters);
 8000a7e:	e7ef      	b.n	8000a60 <task1_handler+0x8>
 8000a80:	08007de8 	.word	0x08007de8

08000a84 <task2_handler>:
	}
}

static void task2_handler(void* parameters)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b09c      	sub	sp, #112	; 0x70
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
	char msg[100];
	while(1)
	{
		snprintf(msg, 100, "Hello TASK 2: %s\n", (char*)parameters);
 8000a8c:	f107 000c 	add.w	r0, r7, #12
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	4a06      	ldr	r2, [pc, #24]	; (8000aac <task2_handler+0x28>)
 8000a94:	2164      	movs	r1, #100	; 0x64
 8000a96:	f006 fd09 	bl	80074ac <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000a9a:	f107 030c 	add.w	r3, r7, #12
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f006 fc16 	bl	80072d0 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_Delay(200);
 8000aa4:	20c8      	movs	r0, #200	; 0xc8
 8000aa6:	f000 f993 	bl	8000dd0 <HAL_Delay>
		snprintf(msg, 100, "Hello TASK 2: %s\n", (char*)parameters);
 8000aaa:	e7ef      	b.n	8000a8c <task2_handler+0x8>
 8000aac:	08007dfc 	.word	0x08007dfc

08000ab0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a04      	ldr	r2, [pc, #16]	; (8000ad0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d101      	bne.n	8000ac6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ac2:	f000 f965 	bl	8000d90 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40001000 	.word	0x40001000

08000ad4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad8:	b672      	cpsid	i
}
 8000ada:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000adc:	e7fe      	b.n	8000adc <Error_Handler+0x8>
	...

08000ae0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	607b      	str	r3, [r7, #4]
 8000aea:	4b10      	ldr	r3, [pc, #64]	; (8000b2c <HAL_MspInit+0x4c>)
 8000aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aee:	4a0f      	ldr	r2, [pc, #60]	; (8000b2c <HAL_MspInit+0x4c>)
 8000af0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000af4:	6453      	str	r3, [r2, #68]	; 0x44
 8000af6:	4b0d      	ldr	r3, [pc, #52]	; (8000b2c <HAL_MspInit+0x4c>)
 8000af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	603b      	str	r3, [r7, #0]
 8000b06:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <HAL_MspInit+0x4c>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0a:	4a08      	ldr	r2, [pc, #32]	; (8000b2c <HAL_MspInit+0x4c>)
 8000b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b10:	6413      	str	r3, [r2, #64]	; 0x40
 8000b12:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <HAL_MspInit+0x4c>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b1a:	603b      	str	r3, [r7, #0]
 8000b1c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000b1e:	f003 fc8b 	bl	8004438 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40023800 	.word	0x40023800

08000b30 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08e      	sub	sp, #56	; 0x38
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b40:	2300      	movs	r3, #0
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	4b33      	ldr	r3, [pc, #204]	; (8000c14 <HAL_InitTick+0xe4>)
 8000b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b48:	4a32      	ldr	r2, [pc, #200]	; (8000c14 <HAL_InitTick+0xe4>)
 8000b4a:	f043 0310 	orr.w	r3, r3, #16
 8000b4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b50:	4b30      	ldr	r3, [pc, #192]	; (8000c14 <HAL_InitTick+0xe4>)
 8000b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b54:	f003 0310 	and.w	r3, r3, #16
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b5c:	f107 0210 	add.w	r2, r7, #16
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	4611      	mov	r1, r2
 8000b66:	4618      	mov	r0, r3
 8000b68:	f001 f872 	bl	8001c50 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b6c:	6a3b      	ldr	r3, [r7, #32]
 8000b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d103      	bne.n	8000b7e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b76:	f001 f857 	bl	8001c28 <HAL_RCC_GetPCLK1Freq>
 8000b7a:	6378      	str	r0, [r7, #52]	; 0x34
 8000b7c:	e004      	b.n	8000b88 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b7e:	f001 f853 	bl	8001c28 <HAL_RCC_GetPCLK1Freq>
 8000b82:	4603      	mov	r3, r0
 8000b84:	005b      	lsls	r3, r3, #1
 8000b86:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b8a:	4a23      	ldr	r2, [pc, #140]	; (8000c18 <HAL_InitTick+0xe8>)
 8000b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b90:	0c9b      	lsrs	r3, r3, #18
 8000b92:	3b01      	subs	r3, #1
 8000b94:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b96:	4b21      	ldr	r3, [pc, #132]	; (8000c1c <HAL_InitTick+0xec>)
 8000b98:	4a21      	ldr	r2, [pc, #132]	; (8000c20 <HAL_InitTick+0xf0>)
 8000b9a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b9c:	4b1f      	ldr	r3, [pc, #124]	; (8000c1c <HAL_InitTick+0xec>)
 8000b9e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ba2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ba4:	4a1d      	ldr	r2, [pc, #116]	; (8000c1c <HAL_InitTick+0xec>)
 8000ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ba8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000baa:	4b1c      	ldr	r3, [pc, #112]	; (8000c1c <HAL_InitTick+0xec>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb0:	4b1a      	ldr	r3, [pc, #104]	; (8000c1c <HAL_InitTick+0xec>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bb6:	4b19      	ldr	r3, [pc, #100]	; (8000c1c <HAL_InitTick+0xec>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000bbc:	4817      	ldr	r0, [pc, #92]	; (8000c1c <HAL_InitTick+0xec>)
 8000bbe:	f001 f879 	bl	8001cb4 <HAL_TIM_Base_Init>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000bc8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d11b      	bne.n	8000c08 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000bd0:	4812      	ldr	r0, [pc, #72]	; (8000c1c <HAL_InitTick+0xec>)
 8000bd2:	f001 f8c9 	bl	8001d68 <HAL_TIM_Base_Start_IT>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000bdc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d111      	bne.n	8000c08 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000be4:	2036      	movs	r0, #54	; 0x36
 8000be6:	f000 f9eb 	bl	8000fc0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2b0f      	cmp	r3, #15
 8000bee:	d808      	bhi.n	8000c02 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	6879      	ldr	r1, [r7, #4]
 8000bf4:	2036      	movs	r0, #54	; 0x36
 8000bf6:	f000 f9c7 	bl	8000f88 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bfa:	4a0a      	ldr	r2, [pc, #40]	; (8000c24 <HAL_InitTick+0xf4>)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6013      	str	r3, [r2, #0]
 8000c00:	e002      	b.n	8000c08 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000c02:	2301      	movs	r3, #1
 8000c04:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c08:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3738      	adds	r7, #56	; 0x38
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	40023800 	.word	0x40023800
 8000c18:	431bde83 	.word	0x431bde83
 8000c1c:	2000009c 	.word	0x2000009c
 8000c20:	40001000 	.word	0x40001000
 8000c24:	20000004 	.word	0x20000004

08000c28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c2c:	e7fe      	b.n	8000c2c <NMI_Handler+0x4>

08000c2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c32:	e7fe      	b.n	8000c32 <HardFault_Handler+0x4>

08000c34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c38:	e7fe      	b.n	8000c38 <MemManage_Handler+0x4>

08000c3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c3e:	e7fe      	b.n	8000c3e <BusFault_Handler+0x4>

08000c40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <UsageFault_Handler+0x4>

08000c46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c58:	4802      	ldr	r0, [pc, #8]	; (8000c64 <TIM6_DAC_IRQHandler+0x10>)
 8000c5a:	f001 f8f5 	bl	8001e48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	2000009c 	.word	0x2000009c

08000c68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b086      	sub	sp, #24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c70:	4a14      	ldr	r2, [pc, #80]	; (8000cc4 <_sbrk+0x5c>)
 8000c72:	4b15      	ldr	r3, [pc, #84]	; (8000cc8 <_sbrk+0x60>)
 8000c74:	1ad3      	subs	r3, r2, r3
 8000c76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c7c:	4b13      	ldr	r3, [pc, #76]	; (8000ccc <_sbrk+0x64>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d102      	bne.n	8000c8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c84:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <_sbrk+0x64>)
 8000c86:	4a12      	ldr	r2, [pc, #72]	; (8000cd0 <_sbrk+0x68>)
 8000c88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c8a:	4b10      	ldr	r3, [pc, #64]	; (8000ccc <_sbrk+0x64>)
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4413      	add	r3, r2
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	d207      	bcs.n	8000ca8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c98:	f006 fbb8 	bl	800740c <__errno>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	220c      	movs	r2, #12
 8000ca0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca6:	e009      	b.n	8000cbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ca8:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <_sbrk+0x64>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cae:	4b07      	ldr	r3, [pc, #28]	; (8000ccc <_sbrk+0x64>)
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	4a05      	ldr	r2, [pc, #20]	; (8000ccc <_sbrk+0x64>)
 8000cb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cba:	68fb      	ldr	r3, [r7, #12]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3718      	adds	r7, #24
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20020000 	.word	0x20020000
 8000cc8:	00000400 	.word	0x00000400
 8000ccc:	200000e4 	.word	0x200000e4
 8000cd0:	20014528 	.word	0x20014528

08000cd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cd8:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <SystemInit+0x20>)
 8000cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cde:	4a05      	ldr	r2, [pc, #20]	; (8000cf4 <SystemInit+0x20>)
 8000ce0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ce4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	e000ed00 	.word	0xe000ed00

08000cf8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cf8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cfc:	480d      	ldr	r0, [pc, #52]	; (8000d34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cfe:	490e      	ldr	r1, [pc, #56]	; (8000d38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d00:	4a0e      	ldr	r2, [pc, #56]	; (8000d3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d04:	e002      	b.n	8000d0c <LoopCopyDataInit>

08000d06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d0a:	3304      	adds	r3, #4

08000d0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d10:	d3f9      	bcc.n	8000d06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d12:	4a0b      	ldr	r2, [pc, #44]	; (8000d40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d14:	4c0b      	ldr	r4, [pc, #44]	; (8000d44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d18:	e001      	b.n	8000d1e <LoopFillZerobss>

08000d1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d1c:	3204      	adds	r2, #4

08000d1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d20:	d3fb      	bcc.n	8000d1a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d22:	f7ff ffd7 	bl	8000cd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d26:	f006 fb77 	bl	8007418 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d2a:	f7ff fc73 	bl	8000614 <main>
  bx  lr    
 8000d2e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d38:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000d3c:	08007f74 	.word	0x08007f74
  ldr r2, =_sbss
 8000d40:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000d44:	20014524 	.word	0x20014524

08000d48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d48:	e7fe      	b.n	8000d48 <ADC_IRQHandler>
	...

08000d4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d50:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <HAL_Init+0x40>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a0d      	ldr	r2, [pc, #52]	; (8000d8c <HAL_Init+0x40>)
 8000d56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d5c:	4b0b      	ldr	r3, [pc, #44]	; (8000d8c <HAL_Init+0x40>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a0a      	ldr	r2, [pc, #40]	; (8000d8c <HAL_Init+0x40>)
 8000d62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d68:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <HAL_Init+0x40>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a07      	ldr	r2, [pc, #28]	; (8000d8c <HAL_Init+0x40>)
 8000d6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d74:	2003      	movs	r0, #3
 8000d76:	f000 f8fc 	bl	8000f72 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d7a:	2000      	movs	r0, #0
 8000d7c:	f7ff fed8 	bl	8000b30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d80:	f7ff feae 	bl	8000ae0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d84:	2300      	movs	r3, #0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40023c00 	.word	0x40023c00

08000d90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <HAL_IncTick+0x20>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	461a      	mov	r2, r3
 8000d9a:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <HAL_IncTick+0x24>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4413      	add	r3, r2
 8000da0:	4a04      	ldr	r2, [pc, #16]	; (8000db4 <HAL_IncTick+0x24>)
 8000da2:	6013      	str	r3, [r2, #0]
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	20000008 	.word	0x20000008
 8000db4:	200000e8 	.word	0x200000e8

08000db8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  return uwTick;
 8000dbc:	4b03      	ldr	r3, [pc, #12]	; (8000dcc <HAL_GetTick+0x14>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	200000e8 	.word	0x200000e8

08000dd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dd8:	f7ff ffee 	bl	8000db8 <HAL_GetTick>
 8000ddc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000de8:	d005      	beq.n	8000df6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dea:	4b0a      	ldr	r3, [pc, #40]	; (8000e14 <HAL_Delay+0x44>)
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	461a      	mov	r2, r3
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	4413      	add	r3, r2
 8000df4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000df6:	bf00      	nop
 8000df8:	f7ff ffde 	bl	8000db8 <HAL_GetTick>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	68fa      	ldr	r2, [r7, #12]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d8f7      	bhi.n	8000df8 <HAL_Delay+0x28>
  {
  }
}
 8000e08:	bf00      	nop
 8000e0a:	bf00      	nop
 8000e0c:	3710      	adds	r7, #16
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000008 	.word	0x20000008

08000e18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	f003 0307 	and.w	r3, r3, #7
 8000e26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e28:	4b0c      	ldr	r3, [pc, #48]	; (8000e5c <__NVIC_SetPriorityGrouping+0x44>)
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e2e:	68ba      	ldr	r2, [r7, #8]
 8000e30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e34:	4013      	ands	r3, r2
 8000e36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e4a:	4a04      	ldr	r2, [pc, #16]	; (8000e5c <__NVIC_SetPriorityGrouping+0x44>)
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	60d3      	str	r3, [r2, #12]
}
 8000e50:	bf00      	nop
 8000e52:	3714      	adds	r7, #20
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e64:	4b04      	ldr	r3, [pc, #16]	; (8000e78 <__NVIC_GetPriorityGrouping+0x18>)
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	0a1b      	lsrs	r3, r3, #8
 8000e6a:	f003 0307 	and.w	r3, r3, #7
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	db0b      	blt.n	8000ea6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e8e:	79fb      	ldrb	r3, [r7, #7]
 8000e90:	f003 021f 	and.w	r2, r3, #31
 8000e94:	4907      	ldr	r1, [pc, #28]	; (8000eb4 <__NVIC_EnableIRQ+0x38>)
 8000e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9a:	095b      	lsrs	r3, r3, #5
 8000e9c:	2001      	movs	r0, #1
 8000e9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ea6:	bf00      	nop
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	e000e100 	.word	0xe000e100

08000eb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	6039      	str	r1, [r7, #0]
 8000ec2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	db0a      	blt.n	8000ee2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	b2da      	uxtb	r2, r3
 8000ed0:	490c      	ldr	r1, [pc, #48]	; (8000f04 <__NVIC_SetPriority+0x4c>)
 8000ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed6:	0112      	lsls	r2, r2, #4
 8000ed8:	b2d2      	uxtb	r2, r2
 8000eda:	440b      	add	r3, r1
 8000edc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ee0:	e00a      	b.n	8000ef8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	b2da      	uxtb	r2, r3
 8000ee6:	4908      	ldr	r1, [pc, #32]	; (8000f08 <__NVIC_SetPriority+0x50>)
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	f003 030f 	and.w	r3, r3, #15
 8000eee:	3b04      	subs	r3, #4
 8000ef0:	0112      	lsls	r2, r2, #4
 8000ef2:	b2d2      	uxtb	r2, r2
 8000ef4:	440b      	add	r3, r1
 8000ef6:	761a      	strb	r2, [r3, #24]
}
 8000ef8:	bf00      	nop
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	e000e100 	.word	0xe000e100
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b089      	sub	sp, #36	; 0x24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	f003 0307 	and.w	r3, r3, #7
 8000f1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	f1c3 0307 	rsb	r3, r3, #7
 8000f26:	2b04      	cmp	r3, #4
 8000f28:	bf28      	it	cs
 8000f2a:	2304      	movcs	r3, #4
 8000f2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	3304      	adds	r3, #4
 8000f32:	2b06      	cmp	r3, #6
 8000f34:	d902      	bls.n	8000f3c <NVIC_EncodePriority+0x30>
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	3b03      	subs	r3, #3
 8000f3a:	e000      	b.n	8000f3e <NVIC_EncodePriority+0x32>
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f40:	f04f 32ff 	mov.w	r2, #4294967295
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	43da      	mvns	r2, r3
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	401a      	ands	r2, r3
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f54:	f04f 31ff 	mov.w	r1, #4294967295
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5e:	43d9      	mvns	r1, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f64:	4313      	orrs	r3, r2
         );
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3724      	adds	r7, #36	; 0x24
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr

08000f72 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b082      	sub	sp, #8
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f7ff ff4c 	bl	8000e18 <__NVIC_SetPriorityGrouping>
}
 8000f80:	bf00      	nop
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
 8000f94:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f96:	2300      	movs	r3, #0
 8000f98:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f9a:	f7ff ff61 	bl	8000e60 <__NVIC_GetPriorityGrouping>
 8000f9e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fa0:	687a      	ldr	r2, [r7, #4]
 8000fa2:	68b9      	ldr	r1, [r7, #8]
 8000fa4:	6978      	ldr	r0, [r7, #20]
 8000fa6:	f7ff ffb1 	bl	8000f0c <NVIC_EncodePriority>
 8000faa:	4602      	mov	r2, r0
 8000fac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb0:	4611      	mov	r1, r2
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff ff80 	bl	8000eb8 <__NVIC_SetPriority>
}
 8000fb8:	bf00      	nop
 8000fba:	3718      	adds	r7, #24
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff ff54 	bl	8000e7c <__NVIC_EnableIRQ>
}
 8000fd4:	bf00      	nop
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b089      	sub	sp, #36	; 0x24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fea:	2300      	movs	r3, #0
 8000fec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61fb      	str	r3, [r7, #28]
 8000ff6:	e16b      	b.n	80012d0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	697a      	ldr	r2, [r7, #20]
 8001008:	4013      	ands	r3, r2
 800100a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	429a      	cmp	r2, r3
 8001012:	f040 815a 	bne.w	80012ca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f003 0303 	and.w	r3, r3, #3
 800101e:	2b01      	cmp	r3, #1
 8001020:	d005      	beq.n	800102e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800102a:	2b02      	cmp	r3, #2
 800102c:	d130      	bne.n	8001090 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	2203      	movs	r2, #3
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	43db      	mvns	r3, r3
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	4013      	ands	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	68da      	ldr	r2, [r3, #12]
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	4313      	orrs	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001064:	2201      	movs	r2, #1
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4013      	ands	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	091b      	lsrs	r3, r3, #4
 800107a:	f003 0201 	and.w	r2, r3, #1
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	4313      	orrs	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f003 0303 	and.w	r3, r3, #3
 8001098:	2b03      	cmp	r3, #3
 800109a:	d017      	beq.n	80010cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	2203      	movs	r2, #3
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	43db      	mvns	r3, r3
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	4013      	ands	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	689a      	ldr	r2, [r3, #8]
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f003 0303 	and.w	r3, r3, #3
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	d123      	bne.n	8001120 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	08da      	lsrs	r2, r3, #3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3208      	adds	r2, #8
 80010e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	f003 0307 	and.w	r3, r3, #7
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	220f      	movs	r2, #15
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	43db      	mvns	r3, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4013      	ands	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	691a      	ldr	r2, [r3, #16]
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	f003 0307 	and.w	r3, r3, #7
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4313      	orrs	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	08da      	lsrs	r2, r3, #3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	3208      	adds	r2, #8
 800111a:	69b9      	ldr	r1, [r7, #24]
 800111c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	2203      	movs	r2, #3
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	43db      	mvns	r3, r3
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	4013      	ands	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f003 0203 	and.w	r2, r3, #3
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4313      	orrs	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800115c:	2b00      	cmp	r3, #0
 800115e:	f000 80b4 	beq.w	80012ca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	4b60      	ldr	r3, [pc, #384]	; (80012e8 <HAL_GPIO_Init+0x30c>)
 8001168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116a:	4a5f      	ldr	r2, [pc, #380]	; (80012e8 <HAL_GPIO_Init+0x30c>)
 800116c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001170:	6453      	str	r3, [r2, #68]	; 0x44
 8001172:	4b5d      	ldr	r3, [pc, #372]	; (80012e8 <HAL_GPIO_Init+0x30c>)
 8001174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001176:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800117e:	4a5b      	ldr	r2, [pc, #364]	; (80012ec <HAL_GPIO_Init+0x310>)
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	089b      	lsrs	r3, r3, #2
 8001184:	3302      	adds	r3, #2
 8001186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800118a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	f003 0303 	and.w	r3, r3, #3
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	220f      	movs	r2, #15
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	43db      	mvns	r3, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4013      	ands	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a52      	ldr	r2, [pc, #328]	; (80012f0 <HAL_GPIO_Init+0x314>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d02b      	beq.n	8001202 <HAL_GPIO_Init+0x226>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a51      	ldr	r2, [pc, #324]	; (80012f4 <HAL_GPIO_Init+0x318>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d025      	beq.n	80011fe <HAL_GPIO_Init+0x222>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a50      	ldr	r2, [pc, #320]	; (80012f8 <HAL_GPIO_Init+0x31c>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d01f      	beq.n	80011fa <HAL_GPIO_Init+0x21e>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a4f      	ldr	r2, [pc, #316]	; (80012fc <HAL_GPIO_Init+0x320>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d019      	beq.n	80011f6 <HAL_GPIO_Init+0x21a>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a4e      	ldr	r2, [pc, #312]	; (8001300 <HAL_GPIO_Init+0x324>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d013      	beq.n	80011f2 <HAL_GPIO_Init+0x216>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a4d      	ldr	r2, [pc, #308]	; (8001304 <HAL_GPIO_Init+0x328>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d00d      	beq.n	80011ee <HAL_GPIO_Init+0x212>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a4c      	ldr	r2, [pc, #304]	; (8001308 <HAL_GPIO_Init+0x32c>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d007      	beq.n	80011ea <HAL_GPIO_Init+0x20e>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a4b      	ldr	r2, [pc, #300]	; (800130c <HAL_GPIO_Init+0x330>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d101      	bne.n	80011e6 <HAL_GPIO_Init+0x20a>
 80011e2:	2307      	movs	r3, #7
 80011e4:	e00e      	b.n	8001204 <HAL_GPIO_Init+0x228>
 80011e6:	2308      	movs	r3, #8
 80011e8:	e00c      	b.n	8001204 <HAL_GPIO_Init+0x228>
 80011ea:	2306      	movs	r3, #6
 80011ec:	e00a      	b.n	8001204 <HAL_GPIO_Init+0x228>
 80011ee:	2305      	movs	r3, #5
 80011f0:	e008      	b.n	8001204 <HAL_GPIO_Init+0x228>
 80011f2:	2304      	movs	r3, #4
 80011f4:	e006      	b.n	8001204 <HAL_GPIO_Init+0x228>
 80011f6:	2303      	movs	r3, #3
 80011f8:	e004      	b.n	8001204 <HAL_GPIO_Init+0x228>
 80011fa:	2302      	movs	r3, #2
 80011fc:	e002      	b.n	8001204 <HAL_GPIO_Init+0x228>
 80011fe:	2301      	movs	r3, #1
 8001200:	e000      	b.n	8001204 <HAL_GPIO_Init+0x228>
 8001202:	2300      	movs	r3, #0
 8001204:	69fa      	ldr	r2, [r7, #28]
 8001206:	f002 0203 	and.w	r2, r2, #3
 800120a:	0092      	lsls	r2, r2, #2
 800120c:	4093      	lsls	r3, r2
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4313      	orrs	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001214:	4935      	ldr	r1, [pc, #212]	; (80012ec <HAL_GPIO_Init+0x310>)
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	089b      	lsrs	r3, r3, #2
 800121a:	3302      	adds	r3, #2
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001222:	4b3b      	ldr	r3, [pc, #236]	; (8001310 <HAL_GPIO_Init+0x334>)
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	43db      	mvns	r3, r3
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	4013      	ands	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d003      	beq.n	8001246 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	4313      	orrs	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001246:	4a32      	ldr	r2, [pc, #200]	; (8001310 <HAL_GPIO_Init+0x334>)
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800124c:	4b30      	ldr	r3, [pc, #192]	; (8001310 <HAL_GPIO_Init+0x334>)
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	43db      	mvns	r3, r3
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	4013      	ands	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001264:	2b00      	cmp	r3, #0
 8001266:	d003      	beq.n	8001270 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	4313      	orrs	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001270:	4a27      	ldr	r2, [pc, #156]	; (8001310 <HAL_GPIO_Init+0x334>)
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001276:	4b26      	ldr	r3, [pc, #152]	; (8001310 <HAL_GPIO_Init+0x334>)
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	43db      	mvns	r3, r3
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	4013      	ands	r3, r2
 8001284:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d003      	beq.n	800129a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	4313      	orrs	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800129a:	4a1d      	ldr	r2, [pc, #116]	; (8001310 <HAL_GPIO_Init+0x334>)
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012a0:	4b1b      	ldr	r3, [pc, #108]	; (8001310 <HAL_GPIO_Init+0x334>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	43db      	mvns	r3, r3
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4013      	ands	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d003      	beq.n	80012c4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012c4:	4a12      	ldr	r2, [pc, #72]	; (8001310 <HAL_GPIO_Init+0x334>)
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	3301      	adds	r3, #1
 80012ce:	61fb      	str	r3, [r7, #28]
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	2b0f      	cmp	r3, #15
 80012d4:	f67f ae90 	bls.w	8000ff8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012d8:	bf00      	nop
 80012da:	bf00      	nop
 80012dc:	3724      	adds	r7, #36	; 0x24
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	40023800 	.word	0x40023800
 80012ec:	40013800 	.word	0x40013800
 80012f0:	40020000 	.word	0x40020000
 80012f4:	40020400 	.word	0x40020400
 80012f8:	40020800 	.word	0x40020800
 80012fc:	40020c00 	.word	0x40020c00
 8001300:	40021000 	.word	0x40021000
 8001304:	40021400 	.word	0x40021400
 8001308:	40021800 	.word	0x40021800
 800130c:	40021c00 	.word	0x40021c00
 8001310:	40013c00 	.word	0x40013c00

08001314 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	460b      	mov	r3, r1
 800131e:	807b      	strh	r3, [r7, #2]
 8001320:	4613      	mov	r3, r2
 8001322:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001324:	787b      	ldrb	r3, [r7, #1]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d003      	beq.n	8001332 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800132a:	887a      	ldrh	r2, [r7, #2]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001330:	e003      	b.n	800133a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001332:	887b      	ldrh	r3, [r7, #2]
 8001334:	041a      	lsls	r2, r3, #16
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	619a      	str	r2, [r3, #24]
}
 800133a:	bf00      	nop
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
	...

08001348 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d101      	bne.n	800135a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e267      	b.n	800182a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	2b00      	cmp	r3, #0
 8001364:	d075      	beq.n	8001452 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001366:	4b88      	ldr	r3, [pc, #544]	; (8001588 <HAL_RCC_OscConfig+0x240>)
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	f003 030c 	and.w	r3, r3, #12
 800136e:	2b04      	cmp	r3, #4
 8001370:	d00c      	beq.n	800138c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001372:	4b85      	ldr	r3, [pc, #532]	; (8001588 <HAL_RCC_OscConfig+0x240>)
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800137a:	2b08      	cmp	r3, #8
 800137c:	d112      	bne.n	80013a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800137e:	4b82      	ldr	r3, [pc, #520]	; (8001588 <HAL_RCC_OscConfig+0x240>)
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001386:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800138a:	d10b      	bne.n	80013a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800138c:	4b7e      	ldr	r3, [pc, #504]	; (8001588 <HAL_RCC_OscConfig+0x240>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d05b      	beq.n	8001450 <HAL_RCC_OscConfig+0x108>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d157      	bne.n	8001450 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e242      	b.n	800182a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013ac:	d106      	bne.n	80013bc <HAL_RCC_OscConfig+0x74>
 80013ae:	4b76      	ldr	r3, [pc, #472]	; (8001588 <HAL_RCC_OscConfig+0x240>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a75      	ldr	r2, [pc, #468]	; (8001588 <HAL_RCC_OscConfig+0x240>)
 80013b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013b8:	6013      	str	r3, [r2, #0]
 80013ba:	e01d      	b.n	80013f8 <HAL_RCC_OscConfig+0xb0>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013c4:	d10c      	bne.n	80013e0 <HAL_RCC_OscConfig+0x98>
 80013c6:	4b70      	ldr	r3, [pc, #448]	; (8001588 <HAL_RCC_OscConfig+0x240>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a6f      	ldr	r2, [pc, #444]	; (8001588 <HAL_RCC_OscConfig+0x240>)
 80013cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013d0:	6013      	str	r3, [r2, #0]
 80013d2:	4b6d      	ldr	r3, [pc, #436]	; (8001588 <HAL_RCC_OscConfig+0x240>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a6c      	ldr	r2, [pc, #432]	; (8001588 <HAL_RCC_OscConfig+0x240>)
 80013d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013dc:	6013      	str	r3, [r2, #0]
 80013de:	e00b      	b.n	80013f8 <HAL_RCC_OscConfig+0xb0>
 80013e0:	4b69      	ldr	r3, [pc, #420]	; (8001588 <HAL_RCC_OscConfig+0x240>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a68      	ldr	r2, [pc, #416]	; (8001588 <HAL_RCC_OscConfig+0x240>)
 80013e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013ea:	6013      	str	r3, [r2, #0]
 80013ec:	4b66      	ldr	r3, [pc, #408]	; (8001588 <HAL_RCC_OscConfig+0x240>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a65      	ldr	r2, [pc, #404]	; (8001588 <HAL_RCC_OscConfig+0x240>)
 80013f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d013      	beq.n	8001428 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001400:	f7ff fcda 	bl	8000db8 <HAL_GetTick>
 8001404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001406:	e008      	b.n	800141a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001408:	f7ff fcd6 	bl	8000db8 <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b64      	cmp	r3, #100	; 0x64
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e207      	b.n	800182a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800141a:	4b5b      	ldr	r3, [pc, #364]	; (8001588 <HAL_RCC_OscConfig+0x240>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d0f0      	beq.n	8001408 <HAL_RCC_OscConfig+0xc0>
 8001426:	e014      	b.n	8001452 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001428:	f7ff fcc6 	bl	8000db8 <HAL_GetTick>
 800142c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800142e:	e008      	b.n	8001442 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001430:	f7ff fcc2 	bl	8000db8 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	2b64      	cmp	r3, #100	; 0x64
 800143c:	d901      	bls.n	8001442 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e1f3      	b.n	800182a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001442:	4b51      	ldr	r3, [pc, #324]	; (8001588 <HAL_RCC_OscConfig+0x240>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d1f0      	bne.n	8001430 <HAL_RCC_OscConfig+0xe8>
 800144e:	e000      	b.n	8001452 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001450:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	2b00      	cmp	r3, #0
 800145c:	d063      	beq.n	8001526 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800145e:	4b4a      	ldr	r3, [pc, #296]	; (8001588 <HAL_RCC_OscConfig+0x240>)
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	f003 030c 	and.w	r3, r3, #12
 8001466:	2b00      	cmp	r3, #0
 8001468:	d00b      	beq.n	8001482 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800146a:	4b47      	ldr	r3, [pc, #284]	; (8001588 <HAL_RCC_OscConfig+0x240>)
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001472:	2b08      	cmp	r3, #8
 8001474:	d11c      	bne.n	80014b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001476:	4b44      	ldr	r3, [pc, #272]	; (8001588 <HAL_RCC_OscConfig+0x240>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d116      	bne.n	80014b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001482:	4b41      	ldr	r3, [pc, #260]	; (8001588 <HAL_RCC_OscConfig+0x240>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	2b00      	cmp	r3, #0
 800148c:	d005      	beq.n	800149a <HAL_RCC_OscConfig+0x152>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	68db      	ldr	r3, [r3, #12]
 8001492:	2b01      	cmp	r3, #1
 8001494:	d001      	beq.n	800149a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e1c7      	b.n	800182a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800149a:	4b3b      	ldr	r3, [pc, #236]	; (8001588 <HAL_RCC_OscConfig+0x240>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	691b      	ldr	r3, [r3, #16]
 80014a6:	00db      	lsls	r3, r3, #3
 80014a8:	4937      	ldr	r1, [pc, #220]	; (8001588 <HAL_RCC_OscConfig+0x240>)
 80014aa:	4313      	orrs	r3, r2
 80014ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ae:	e03a      	b.n	8001526 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d020      	beq.n	80014fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014b8:	4b34      	ldr	r3, [pc, #208]	; (800158c <HAL_RCC_OscConfig+0x244>)
 80014ba:	2201      	movs	r2, #1
 80014bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014be:	f7ff fc7b 	bl	8000db8 <HAL_GetTick>
 80014c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c4:	e008      	b.n	80014d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014c6:	f7ff fc77 	bl	8000db8 <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d901      	bls.n	80014d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014d4:	2303      	movs	r3, #3
 80014d6:	e1a8      	b.n	800182a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014d8:	4b2b      	ldr	r3, [pc, #172]	; (8001588 <HAL_RCC_OscConfig+0x240>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0302 	and.w	r3, r3, #2
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d0f0      	beq.n	80014c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014e4:	4b28      	ldr	r3, [pc, #160]	; (8001588 <HAL_RCC_OscConfig+0x240>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	691b      	ldr	r3, [r3, #16]
 80014f0:	00db      	lsls	r3, r3, #3
 80014f2:	4925      	ldr	r1, [pc, #148]	; (8001588 <HAL_RCC_OscConfig+0x240>)
 80014f4:	4313      	orrs	r3, r2
 80014f6:	600b      	str	r3, [r1, #0]
 80014f8:	e015      	b.n	8001526 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014fa:	4b24      	ldr	r3, [pc, #144]	; (800158c <HAL_RCC_OscConfig+0x244>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001500:	f7ff fc5a 	bl	8000db8 <HAL_GetTick>
 8001504:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001506:	e008      	b.n	800151a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001508:	f7ff fc56 	bl	8000db8 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b02      	cmp	r3, #2
 8001514:	d901      	bls.n	800151a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e187      	b.n	800182a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800151a:	4b1b      	ldr	r3, [pc, #108]	; (8001588 <HAL_RCC_OscConfig+0x240>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	2b00      	cmp	r3, #0
 8001524:	d1f0      	bne.n	8001508 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0308 	and.w	r3, r3, #8
 800152e:	2b00      	cmp	r3, #0
 8001530:	d036      	beq.n	80015a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	695b      	ldr	r3, [r3, #20]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d016      	beq.n	8001568 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800153a:	4b15      	ldr	r3, [pc, #84]	; (8001590 <HAL_RCC_OscConfig+0x248>)
 800153c:	2201      	movs	r2, #1
 800153e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001540:	f7ff fc3a 	bl	8000db8 <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001548:	f7ff fc36 	bl	8000db8 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b02      	cmp	r3, #2
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e167      	b.n	800182a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800155a:	4b0b      	ldr	r3, [pc, #44]	; (8001588 <HAL_RCC_OscConfig+0x240>)
 800155c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d0f0      	beq.n	8001548 <HAL_RCC_OscConfig+0x200>
 8001566:	e01b      	b.n	80015a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001568:	4b09      	ldr	r3, [pc, #36]	; (8001590 <HAL_RCC_OscConfig+0x248>)
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800156e:	f7ff fc23 	bl	8000db8 <HAL_GetTick>
 8001572:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001574:	e00e      	b.n	8001594 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001576:	f7ff fc1f 	bl	8000db8 <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	2b02      	cmp	r3, #2
 8001582:	d907      	bls.n	8001594 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e150      	b.n	800182a <HAL_RCC_OscConfig+0x4e2>
 8001588:	40023800 	.word	0x40023800
 800158c:	42470000 	.word	0x42470000
 8001590:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001594:	4b88      	ldr	r3, [pc, #544]	; (80017b8 <HAL_RCC_OscConfig+0x470>)
 8001596:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001598:	f003 0302 	and.w	r3, r3, #2
 800159c:	2b00      	cmp	r3, #0
 800159e:	d1ea      	bne.n	8001576 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0304 	and.w	r3, r3, #4
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	f000 8097 	beq.w	80016dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015ae:	2300      	movs	r3, #0
 80015b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015b2:	4b81      	ldr	r3, [pc, #516]	; (80017b8 <HAL_RCC_OscConfig+0x470>)
 80015b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d10f      	bne.n	80015de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	60bb      	str	r3, [r7, #8]
 80015c2:	4b7d      	ldr	r3, [pc, #500]	; (80017b8 <HAL_RCC_OscConfig+0x470>)
 80015c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c6:	4a7c      	ldr	r2, [pc, #496]	; (80017b8 <HAL_RCC_OscConfig+0x470>)
 80015c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015cc:	6413      	str	r3, [r2, #64]	; 0x40
 80015ce:	4b7a      	ldr	r3, [pc, #488]	; (80017b8 <HAL_RCC_OscConfig+0x470>)
 80015d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d6:	60bb      	str	r3, [r7, #8]
 80015d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015da:	2301      	movs	r3, #1
 80015dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015de:	4b77      	ldr	r3, [pc, #476]	; (80017bc <HAL_RCC_OscConfig+0x474>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d118      	bne.n	800161c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015ea:	4b74      	ldr	r3, [pc, #464]	; (80017bc <HAL_RCC_OscConfig+0x474>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a73      	ldr	r2, [pc, #460]	; (80017bc <HAL_RCC_OscConfig+0x474>)
 80015f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015f6:	f7ff fbdf 	bl	8000db8 <HAL_GetTick>
 80015fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015fc:	e008      	b.n	8001610 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015fe:	f7ff fbdb 	bl	8000db8 <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	2b02      	cmp	r3, #2
 800160a:	d901      	bls.n	8001610 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e10c      	b.n	800182a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001610:	4b6a      	ldr	r3, [pc, #424]	; (80017bc <HAL_RCC_OscConfig+0x474>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001618:	2b00      	cmp	r3, #0
 800161a:	d0f0      	beq.n	80015fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d106      	bne.n	8001632 <HAL_RCC_OscConfig+0x2ea>
 8001624:	4b64      	ldr	r3, [pc, #400]	; (80017b8 <HAL_RCC_OscConfig+0x470>)
 8001626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001628:	4a63      	ldr	r2, [pc, #396]	; (80017b8 <HAL_RCC_OscConfig+0x470>)
 800162a:	f043 0301 	orr.w	r3, r3, #1
 800162e:	6713      	str	r3, [r2, #112]	; 0x70
 8001630:	e01c      	b.n	800166c <HAL_RCC_OscConfig+0x324>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	2b05      	cmp	r3, #5
 8001638:	d10c      	bne.n	8001654 <HAL_RCC_OscConfig+0x30c>
 800163a:	4b5f      	ldr	r3, [pc, #380]	; (80017b8 <HAL_RCC_OscConfig+0x470>)
 800163c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800163e:	4a5e      	ldr	r2, [pc, #376]	; (80017b8 <HAL_RCC_OscConfig+0x470>)
 8001640:	f043 0304 	orr.w	r3, r3, #4
 8001644:	6713      	str	r3, [r2, #112]	; 0x70
 8001646:	4b5c      	ldr	r3, [pc, #368]	; (80017b8 <HAL_RCC_OscConfig+0x470>)
 8001648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800164a:	4a5b      	ldr	r2, [pc, #364]	; (80017b8 <HAL_RCC_OscConfig+0x470>)
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	6713      	str	r3, [r2, #112]	; 0x70
 8001652:	e00b      	b.n	800166c <HAL_RCC_OscConfig+0x324>
 8001654:	4b58      	ldr	r3, [pc, #352]	; (80017b8 <HAL_RCC_OscConfig+0x470>)
 8001656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001658:	4a57      	ldr	r2, [pc, #348]	; (80017b8 <HAL_RCC_OscConfig+0x470>)
 800165a:	f023 0301 	bic.w	r3, r3, #1
 800165e:	6713      	str	r3, [r2, #112]	; 0x70
 8001660:	4b55      	ldr	r3, [pc, #340]	; (80017b8 <HAL_RCC_OscConfig+0x470>)
 8001662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001664:	4a54      	ldr	r2, [pc, #336]	; (80017b8 <HAL_RCC_OscConfig+0x470>)
 8001666:	f023 0304 	bic.w	r3, r3, #4
 800166a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d015      	beq.n	80016a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001674:	f7ff fba0 	bl	8000db8 <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800167a:	e00a      	b.n	8001692 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800167c:	f7ff fb9c 	bl	8000db8 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	f241 3288 	movw	r2, #5000	; 0x1388
 800168a:	4293      	cmp	r3, r2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e0cb      	b.n	800182a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001692:	4b49      	ldr	r3, [pc, #292]	; (80017b8 <HAL_RCC_OscConfig+0x470>)
 8001694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	2b00      	cmp	r3, #0
 800169c:	d0ee      	beq.n	800167c <HAL_RCC_OscConfig+0x334>
 800169e:	e014      	b.n	80016ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016a0:	f7ff fb8a 	bl	8000db8 <HAL_GetTick>
 80016a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016a6:	e00a      	b.n	80016be <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016a8:	f7ff fb86 	bl	8000db8 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e0b5      	b.n	800182a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016be:	4b3e      	ldr	r3, [pc, #248]	; (80017b8 <HAL_RCC_OscConfig+0x470>)
 80016c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1ee      	bne.n	80016a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016ca:	7dfb      	ldrb	r3, [r7, #23]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d105      	bne.n	80016dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016d0:	4b39      	ldr	r3, [pc, #228]	; (80017b8 <HAL_RCC_OscConfig+0x470>)
 80016d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d4:	4a38      	ldr	r2, [pc, #224]	; (80017b8 <HAL_RCC_OscConfig+0x470>)
 80016d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	f000 80a1 	beq.w	8001828 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016e6:	4b34      	ldr	r3, [pc, #208]	; (80017b8 <HAL_RCC_OscConfig+0x470>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	f003 030c 	and.w	r3, r3, #12
 80016ee:	2b08      	cmp	r3, #8
 80016f0:	d05c      	beq.n	80017ac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	699b      	ldr	r3, [r3, #24]
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d141      	bne.n	800177e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016fa:	4b31      	ldr	r3, [pc, #196]	; (80017c0 <HAL_RCC_OscConfig+0x478>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001700:	f7ff fb5a 	bl	8000db8 <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001708:	f7ff fb56 	bl	8000db8 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e087      	b.n	800182a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800171a:	4b27      	ldr	r3, [pc, #156]	; (80017b8 <HAL_RCC_OscConfig+0x470>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1f0      	bne.n	8001708 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	69da      	ldr	r2, [r3, #28]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6a1b      	ldr	r3, [r3, #32]
 800172e:	431a      	orrs	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001734:	019b      	lsls	r3, r3, #6
 8001736:	431a      	orrs	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800173c:	085b      	lsrs	r3, r3, #1
 800173e:	3b01      	subs	r3, #1
 8001740:	041b      	lsls	r3, r3, #16
 8001742:	431a      	orrs	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001748:	061b      	lsls	r3, r3, #24
 800174a:	491b      	ldr	r1, [pc, #108]	; (80017b8 <HAL_RCC_OscConfig+0x470>)
 800174c:	4313      	orrs	r3, r2
 800174e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001750:	4b1b      	ldr	r3, [pc, #108]	; (80017c0 <HAL_RCC_OscConfig+0x478>)
 8001752:	2201      	movs	r2, #1
 8001754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001756:	f7ff fb2f 	bl	8000db8 <HAL_GetTick>
 800175a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800175c:	e008      	b.n	8001770 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800175e:	f7ff fb2b 	bl	8000db8 <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	2b02      	cmp	r3, #2
 800176a:	d901      	bls.n	8001770 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e05c      	b.n	800182a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001770:	4b11      	ldr	r3, [pc, #68]	; (80017b8 <HAL_RCC_OscConfig+0x470>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d0f0      	beq.n	800175e <HAL_RCC_OscConfig+0x416>
 800177c:	e054      	b.n	8001828 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800177e:	4b10      	ldr	r3, [pc, #64]	; (80017c0 <HAL_RCC_OscConfig+0x478>)
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001784:	f7ff fb18 	bl	8000db8 <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800178c:	f7ff fb14 	bl	8000db8 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b02      	cmp	r3, #2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e045      	b.n	800182a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800179e:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <HAL_RCC_OscConfig+0x470>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1f0      	bne.n	800178c <HAL_RCC_OscConfig+0x444>
 80017aa:	e03d      	b.n	8001828 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d107      	bne.n	80017c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e038      	b.n	800182a <HAL_RCC_OscConfig+0x4e2>
 80017b8:	40023800 	.word	0x40023800
 80017bc:	40007000 	.word	0x40007000
 80017c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017c4:	4b1b      	ldr	r3, [pc, #108]	; (8001834 <HAL_RCC_OscConfig+0x4ec>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d028      	beq.n	8001824 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017dc:	429a      	cmp	r2, r3
 80017de:	d121      	bne.n	8001824 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d11a      	bne.n	8001824 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017ee:	68fa      	ldr	r2, [r7, #12]
 80017f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017f4:	4013      	ands	r3, r2
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d111      	bne.n	8001824 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180a:	085b      	lsrs	r3, r3, #1
 800180c:	3b01      	subs	r3, #1
 800180e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001810:	429a      	cmp	r2, r3
 8001812:	d107      	bne.n	8001824 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001820:	429a      	cmp	r2, r3
 8001822:	d001      	beq.n	8001828 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e000      	b.n	800182a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3718      	adds	r7, #24
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40023800 	.word	0x40023800

08001838 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d101      	bne.n	800184c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e0cc      	b.n	80019e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800184c:	4b68      	ldr	r3, [pc, #416]	; (80019f0 <HAL_RCC_ClockConfig+0x1b8>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0307 	and.w	r3, r3, #7
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	429a      	cmp	r2, r3
 8001858:	d90c      	bls.n	8001874 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800185a:	4b65      	ldr	r3, [pc, #404]	; (80019f0 <HAL_RCC_ClockConfig+0x1b8>)
 800185c:	683a      	ldr	r2, [r7, #0]
 800185e:	b2d2      	uxtb	r2, r2
 8001860:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001862:	4b63      	ldr	r3, [pc, #396]	; (80019f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0307 	and.w	r3, r3, #7
 800186a:	683a      	ldr	r2, [r7, #0]
 800186c:	429a      	cmp	r2, r3
 800186e:	d001      	beq.n	8001874 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e0b8      	b.n	80019e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0302 	and.w	r3, r3, #2
 800187c:	2b00      	cmp	r3, #0
 800187e:	d020      	beq.n	80018c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0304 	and.w	r3, r3, #4
 8001888:	2b00      	cmp	r3, #0
 800188a:	d005      	beq.n	8001898 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800188c:	4b59      	ldr	r3, [pc, #356]	; (80019f4 <HAL_RCC_ClockConfig+0x1bc>)
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	4a58      	ldr	r2, [pc, #352]	; (80019f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001892:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001896:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0308 	and.w	r3, r3, #8
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d005      	beq.n	80018b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018a4:	4b53      	ldr	r3, [pc, #332]	; (80019f4 <HAL_RCC_ClockConfig+0x1bc>)
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	4a52      	ldr	r2, [pc, #328]	; (80019f4 <HAL_RCC_ClockConfig+0x1bc>)
 80018aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018b0:	4b50      	ldr	r3, [pc, #320]	; (80019f4 <HAL_RCC_ClockConfig+0x1bc>)
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	494d      	ldr	r1, [pc, #308]	; (80019f4 <HAL_RCC_ClockConfig+0x1bc>)
 80018be:	4313      	orrs	r3, r2
 80018c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d044      	beq.n	8001958 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d107      	bne.n	80018e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018d6:	4b47      	ldr	r3, [pc, #284]	; (80019f4 <HAL_RCC_ClockConfig+0x1bc>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d119      	bne.n	8001916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e07f      	b.n	80019e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d003      	beq.n	80018f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018f2:	2b03      	cmp	r3, #3
 80018f4:	d107      	bne.n	8001906 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018f6:	4b3f      	ldr	r3, [pc, #252]	; (80019f4 <HAL_RCC_ClockConfig+0x1bc>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d109      	bne.n	8001916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e06f      	b.n	80019e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001906:	4b3b      	ldr	r3, [pc, #236]	; (80019f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d101      	bne.n	8001916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e067      	b.n	80019e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001916:	4b37      	ldr	r3, [pc, #220]	; (80019f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f023 0203 	bic.w	r2, r3, #3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	4934      	ldr	r1, [pc, #208]	; (80019f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001924:	4313      	orrs	r3, r2
 8001926:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001928:	f7ff fa46 	bl	8000db8 <HAL_GetTick>
 800192c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800192e:	e00a      	b.n	8001946 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001930:	f7ff fa42 	bl	8000db8 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	f241 3288 	movw	r2, #5000	; 0x1388
 800193e:	4293      	cmp	r3, r2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e04f      	b.n	80019e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001946:	4b2b      	ldr	r3, [pc, #172]	; (80019f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f003 020c 	and.w	r2, r3, #12
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	429a      	cmp	r2, r3
 8001956:	d1eb      	bne.n	8001930 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001958:	4b25      	ldr	r3, [pc, #148]	; (80019f0 <HAL_RCC_ClockConfig+0x1b8>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0307 	and.w	r3, r3, #7
 8001960:	683a      	ldr	r2, [r7, #0]
 8001962:	429a      	cmp	r2, r3
 8001964:	d20c      	bcs.n	8001980 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001966:	4b22      	ldr	r3, [pc, #136]	; (80019f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001968:	683a      	ldr	r2, [r7, #0]
 800196a:	b2d2      	uxtb	r2, r2
 800196c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800196e:	4b20      	ldr	r3, [pc, #128]	; (80019f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	683a      	ldr	r2, [r7, #0]
 8001978:	429a      	cmp	r2, r3
 800197a:	d001      	beq.n	8001980 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e032      	b.n	80019e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0304 	and.w	r3, r3, #4
 8001988:	2b00      	cmp	r3, #0
 800198a:	d008      	beq.n	800199e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800198c:	4b19      	ldr	r3, [pc, #100]	; (80019f4 <HAL_RCC_ClockConfig+0x1bc>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	4916      	ldr	r1, [pc, #88]	; (80019f4 <HAL_RCC_ClockConfig+0x1bc>)
 800199a:	4313      	orrs	r3, r2
 800199c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0308 	and.w	r3, r3, #8
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d009      	beq.n	80019be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019aa:	4b12      	ldr	r3, [pc, #72]	; (80019f4 <HAL_RCC_ClockConfig+0x1bc>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	691b      	ldr	r3, [r3, #16]
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	490e      	ldr	r1, [pc, #56]	; (80019f4 <HAL_RCC_ClockConfig+0x1bc>)
 80019ba:	4313      	orrs	r3, r2
 80019bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019be:	f000 f821 	bl	8001a04 <HAL_RCC_GetSysClockFreq>
 80019c2:	4602      	mov	r2, r0
 80019c4:	4b0b      	ldr	r3, [pc, #44]	; (80019f4 <HAL_RCC_ClockConfig+0x1bc>)
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	091b      	lsrs	r3, r3, #4
 80019ca:	f003 030f 	and.w	r3, r3, #15
 80019ce:	490a      	ldr	r1, [pc, #40]	; (80019f8 <HAL_RCC_ClockConfig+0x1c0>)
 80019d0:	5ccb      	ldrb	r3, [r1, r3]
 80019d2:	fa22 f303 	lsr.w	r3, r2, r3
 80019d6:	4a09      	ldr	r2, [pc, #36]	; (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 80019d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019da:	4b09      	ldr	r3, [pc, #36]	; (8001a00 <HAL_RCC_ClockConfig+0x1c8>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff f8a6 	bl	8000b30 <HAL_InitTick>

  return HAL_OK;
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3710      	adds	r7, #16
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	40023c00 	.word	0x40023c00
 80019f4:	40023800 	.word	0x40023800
 80019f8:	08007ef0 	.word	0x08007ef0
 80019fc:	20000000 	.word	0x20000000
 8001a00:	20000004 	.word	0x20000004

08001a04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a08:	b094      	sub	sp, #80	; 0x50
 8001a0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	647b      	str	r3, [r7, #68]	; 0x44
 8001a10:	2300      	movs	r3, #0
 8001a12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a14:	2300      	movs	r3, #0
 8001a16:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a1c:	4b79      	ldr	r3, [pc, #484]	; (8001c04 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f003 030c 	and.w	r3, r3, #12
 8001a24:	2b08      	cmp	r3, #8
 8001a26:	d00d      	beq.n	8001a44 <HAL_RCC_GetSysClockFreq+0x40>
 8001a28:	2b08      	cmp	r3, #8
 8001a2a:	f200 80e1 	bhi.w	8001bf0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d002      	beq.n	8001a38 <HAL_RCC_GetSysClockFreq+0x34>
 8001a32:	2b04      	cmp	r3, #4
 8001a34:	d003      	beq.n	8001a3e <HAL_RCC_GetSysClockFreq+0x3a>
 8001a36:	e0db      	b.n	8001bf0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a38:	4b73      	ldr	r3, [pc, #460]	; (8001c08 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a3a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001a3c:	e0db      	b.n	8001bf6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a3e:	4b73      	ldr	r3, [pc, #460]	; (8001c0c <HAL_RCC_GetSysClockFreq+0x208>)
 8001a40:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a42:	e0d8      	b.n	8001bf6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a44:	4b6f      	ldr	r3, [pc, #444]	; (8001c04 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a4c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a4e:	4b6d      	ldr	r3, [pc, #436]	; (8001c04 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d063      	beq.n	8001b22 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a5a:	4b6a      	ldr	r3, [pc, #424]	; (8001c04 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	099b      	lsrs	r3, r3, #6
 8001a60:	2200      	movs	r2, #0
 8001a62:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a64:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a6c:	633b      	str	r3, [r7, #48]	; 0x30
 8001a6e:	2300      	movs	r3, #0
 8001a70:	637b      	str	r3, [r7, #52]	; 0x34
 8001a72:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001a76:	4622      	mov	r2, r4
 8001a78:	462b      	mov	r3, r5
 8001a7a:	f04f 0000 	mov.w	r0, #0
 8001a7e:	f04f 0100 	mov.w	r1, #0
 8001a82:	0159      	lsls	r1, r3, #5
 8001a84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a88:	0150      	lsls	r0, r2, #5
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	4621      	mov	r1, r4
 8001a90:	1a51      	subs	r1, r2, r1
 8001a92:	6139      	str	r1, [r7, #16]
 8001a94:	4629      	mov	r1, r5
 8001a96:	eb63 0301 	sbc.w	r3, r3, r1
 8001a9a:	617b      	str	r3, [r7, #20]
 8001a9c:	f04f 0200 	mov.w	r2, #0
 8001aa0:	f04f 0300 	mov.w	r3, #0
 8001aa4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001aa8:	4659      	mov	r1, fp
 8001aaa:	018b      	lsls	r3, r1, #6
 8001aac:	4651      	mov	r1, sl
 8001aae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ab2:	4651      	mov	r1, sl
 8001ab4:	018a      	lsls	r2, r1, #6
 8001ab6:	4651      	mov	r1, sl
 8001ab8:	ebb2 0801 	subs.w	r8, r2, r1
 8001abc:	4659      	mov	r1, fp
 8001abe:	eb63 0901 	sbc.w	r9, r3, r1
 8001ac2:	f04f 0200 	mov.w	r2, #0
 8001ac6:	f04f 0300 	mov.w	r3, #0
 8001aca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ace:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ad2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ad6:	4690      	mov	r8, r2
 8001ad8:	4699      	mov	r9, r3
 8001ada:	4623      	mov	r3, r4
 8001adc:	eb18 0303 	adds.w	r3, r8, r3
 8001ae0:	60bb      	str	r3, [r7, #8]
 8001ae2:	462b      	mov	r3, r5
 8001ae4:	eb49 0303 	adc.w	r3, r9, r3
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	f04f 0200 	mov.w	r2, #0
 8001aee:	f04f 0300 	mov.w	r3, #0
 8001af2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001af6:	4629      	mov	r1, r5
 8001af8:	024b      	lsls	r3, r1, #9
 8001afa:	4621      	mov	r1, r4
 8001afc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b00:	4621      	mov	r1, r4
 8001b02:	024a      	lsls	r2, r1, #9
 8001b04:	4610      	mov	r0, r2
 8001b06:	4619      	mov	r1, r3
 8001b08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b10:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b14:	f7fe fbfc 	bl	8000310 <__aeabi_uldivmod>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b20:	e058      	b.n	8001bd4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b22:	4b38      	ldr	r3, [pc, #224]	; (8001c04 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	099b      	lsrs	r3, r3, #6
 8001b28:	2200      	movs	r2, #0
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	4611      	mov	r1, r2
 8001b2e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b32:	623b      	str	r3, [r7, #32]
 8001b34:	2300      	movs	r3, #0
 8001b36:	627b      	str	r3, [r7, #36]	; 0x24
 8001b38:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b3c:	4642      	mov	r2, r8
 8001b3e:	464b      	mov	r3, r9
 8001b40:	f04f 0000 	mov.w	r0, #0
 8001b44:	f04f 0100 	mov.w	r1, #0
 8001b48:	0159      	lsls	r1, r3, #5
 8001b4a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b4e:	0150      	lsls	r0, r2, #5
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	4641      	mov	r1, r8
 8001b56:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b5a:	4649      	mov	r1, r9
 8001b5c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b60:	f04f 0200 	mov.w	r2, #0
 8001b64:	f04f 0300 	mov.w	r3, #0
 8001b68:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b6c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b70:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b74:	ebb2 040a 	subs.w	r4, r2, sl
 8001b78:	eb63 050b 	sbc.w	r5, r3, fp
 8001b7c:	f04f 0200 	mov.w	r2, #0
 8001b80:	f04f 0300 	mov.w	r3, #0
 8001b84:	00eb      	lsls	r3, r5, #3
 8001b86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b8a:	00e2      	lsls	r2, r4, #3
 8001b8c:	4614      	mov	r4, r2
 8001b8e:	461d      	mov	r5, r3
 8001b90:	4643      	mov	r3, r8
 8001b92:	18e3      	adds	r3, r4, r3
 8001b94:	603b      	str	r3, [r7, #0]
 8001b96:	464b      	mov	r3, r9
 8001b98:	eb45 0303 	adc.w	r3, r5, r3
 8001b9c:	607b      	str	r3, [r7, #4]
 8001b9e:	f04f 0200 	mov.w	r2, #0
 8001ba2:	f04f 0300 	mov.w	r3, #0
 8001ba6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001baa:	4629      	mov	r1, r5
 8001bac:	028b      	lsls	r3, r1, #10
 8001bae:	4621      	mov	r1, r4
 8001bb0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bb4:	4621      	mov	r1, r4
 8001bb6:	028a      	lsls	r2, r1, #10
 8001bb8:	4610      	mov	r0, r2
 8001bba:	4619      	mov	r1, r3
 8001bbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	61bb      	str	r3, [r7, #24]
 8001bc2:	61fa      	str	r2, [r7, #28]
 8001bc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bc8:	f7fe fba2 	bl	8000310 <__aeabi_uldivmod>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	460b      	mov	r3, r1
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001bd4:	4b0b      	ldr	r3, [pc, #44]	; (8001c04 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	0c1b      	lsrs	r3, r3, #16
 8001bda:	f003 0303 	and.w	r3, r3, #3
 8001bde:	3301      	adds	r3, #1
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001be4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001be6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001bee:	e002      	b.n	8001bf6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bf0:	4b05      	ldr	r3, [pc, #20]	; (8001c08 <HAL_RCC_GetSysClockFreq+0x204>)
 8001bf2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001bf4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3750      	adds	r7, #80	; 0x50
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c02:	bf00      	nop
 8001c04:	40023800 	.word	0x40023800
 8001c08:	00f42400 	.word	0x00f42400
 8001c0c:	007a1200 	.word	0x007a1200

08001c10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c14:	4b03      	ldr	r3, [pc, #12]	; (8001c24 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c16:	681b      	ldr	r3, [r3, #0]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	20000000 	.word	0x20000000

08001c28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c2c:	f7ff fff0 	bl	8001c10 <HAL_RCC_GetHCLKFreq>
 8001c30:	4602      	mov	r2, r0
 8001c32:	4b05      	ldr	r3, [pc, #20]	; (8001c48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	0a9b      	lsrs	r3, r3, #10
 8001c38:	f003 0307 	and.w	r3, r3, #7
 8001c3c:	4903      	ldr	r1, [pc, #12]	; (8001c4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c3e:	5ccb      	ldrb	r3, [r1, r3]
 8001c40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	40023800 	.word	0x40023800
 8001c4c:	08007f00 	.word	0x08007f00

08001c50 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	220f      	movs	r2, #15
 8001c5e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c60:	4b12      	ldr	r3, [pc, #72]	; (8001cac <HAL_RCC_GetClockConfig+0x5c>)
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f003 0203 	and.w	r2, r3, #3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c6c:	4b0f      	ldr	r3, [pc, #60]	; (8001cac <HAL_RCC_GetClockConfig+0x5c>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c78:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <HAL_RCC_GetClockConfig+0x5c>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c84:	4b09      	ldr	r3, [pc, #36]	; (8001cac <HAL_RCC_GetClockConfig+0x5c>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	08db      	lsrs	r3, r3, #3
 8001c8a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c92:	4b07      	ldr	r3, [pc, #28]	; (8001cb0 <HAL_RCC_GetClockConfig+0x60>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0207 	and.w	r2, r3, #7
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	601a      	str	r2, [r3, #0]
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	40023c00 	.word	0x40023c00

08001cb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d101      	bne.n	8001cc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e041      	b.n	8001d4a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d106      	bne.n	8001ce0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 f839 	bl	8001d52 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2202      	movs	r2, #2
 8001ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	3304      	adds	r3, #4
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4610      	mov	r0, r2
 8001cf4:	f000 f9d8 	bl	80020a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d52:	b480      	push	{r7}
 8001d54:	b083      	sub	sp, #12
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d5a:	bf00      	nop
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
	...

08001d68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d001      	beq.n	8001d80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e04e      	b.n	8001e1e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2202      	movs	r2, #2
 8001d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	68da      	ldr	r2, [r3, #12]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f042 0201 	orr.w	r2, r2, #1
 8001d96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a23      	ldr	r2, [pc, #140]	; (8001e2c <HAL_TIM_Base_Start_IT+0xc4>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d022      	beq.n	8001de8 <HAL_TIM_Base_Start_IT+0x80>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001daa:	d01d      	beq.n	8001de8 <HAL_TIM_Base_Start_IT+0x80>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a1f      	ldr	r2, [pc, #124]	; (8001e30 <HAL_TIM_Base_Start_IT+0xc8>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d018      	beq.n	8001de8 <HAL_TIM_Base_Start_IT+0x80>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a1e      	ldr	r2, [pc, #120]	; (8001e34 <HAL_TIM_Base_Start_IT+0xcc>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d013      	beq.n	8001de8 <HAL_TIM_Base_Start_IT+0x80>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a1c      	ldr	r2, [pc, #112]	; (8001e38 <HAL_TIM_Base_Start_IT+0xd0>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d00e      	beq.n	8001de8 <HAL_TIM_Base_Start_IT+0x80>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a1b      	ldr	r2, [pc, #108]	; (8001e3c <HAL_TIM_Base_Start_IT+0xd4>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d009      	beq.n	8001de8 <HAL_TIM_Base_Start_IT+0x80>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a19      	ldr	r2, [pc, #100]	; (8001e40 <HAL_TIM_Base_Start_IT+0xd8>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d004      	beq.n	8001de8 <HAL_TIM_Base_Start_IT+0x80>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a18      	ldr	r2, [pc, #96]	; (8001e44 <HAL_TIM_Base_Start_IT+0xdc>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d111      	bne.n	8001e0c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f003 0307 	and.w	r3, r3, #7
 8001df2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2b06      	cmp	r3, #6
 8001df8:	d010      	beq.n	8001e1c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f042 0201 	orr.w	r2, r2, #1
 8001e08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e0a:	e007      	b.n	8001e1c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f042 0201 	orr.w	r2, r2, #1
 8001e1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3714      	adds	r7, #20
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	40010000 	.word	0x40010000
 8001e30:	40000400 	.word	0x40000400
 8001e34:	40000800 	.word	0x40000800
 8001e38:	40000c00 	.word	0x40000c00
 8001e3c:	40010400 	.word	0x40010400
 8001e40:	40014000 	.word	0x40014000
 8001e44:	40001800 	.word	0x40001800

08001e48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d122      	bne.n	8001ea4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	f003 0302 	and.w	r3, r3, #2
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d11b      	bne.n	8001ea4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f06f 0202 	mvn.w	r2, #2
 8001e74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	f003 0303 	and.w	r3, r3, #3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 f8ee 	bl	800206c <HAL_TIM_IC_CaptureCallback>
 8001e90:	e005      	b.n	8001e9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 f8e0 	bl	8002058 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 f8f1 	bl	8002080 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	f003 0304 	and.w	r3, r3, #4
 8001eae:	2b04      	cmp	r3, #4
 8001eb0:	d122      	bne.n	8001ef8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	f003 0304 	and.w	r3, r3, #4
 8001ebc:	2b04      	cmp	r3, #4
 8001ebe:	d11b      	bne.n	8001ef8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f06f 0204 	mvn.w	r2, #4
 8001ec8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2202      	movs	r2, #2
 8001ece:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 f8c4 	bl	800206c <HAL_TIM_IC_CaptureCallback>
 8001ee4:	e005      	b.n	8001ef2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f000 f8b6 	bl	8002058 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f000 f8c7 	bl	8002080 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	f003 0308 	and.w	r3, r3, #8
 8001f02:	2b08      	cmp	r3, #8
 8001f04:	d122      	bne.n	8001f4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	f003 0308 	and.w	r3, r3, #8
 8001f10:	2b08      	cmp	r3, #8
 8001f12:	d11b      	bne.n	8001f4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f06f 0208 	mvn.w	r2, #8
 8001f1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2204      	movs	r2, #4
 8001f22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	69db      	ldr	r3, [r3, #28]
 8001f2a:	f003 0303 	and.w	r3, r3, #3
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d003      	beq.n	8001f3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 f89a 	bl	800206c <HAL_TIM_IC_CaptureCallback>
 8001f38:	e005      	b.n	8001f46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f000 f88c 	bl	8002058 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f000 f89d 	bl	8002080 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	f003 0310 	and.w	r3, r3, #16
 8001f56:	2b10      	cmp	r3, #16
 8001f58:	d122      	bne.n	8001fa0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	f003 0310 	and.w	r3, r3, #16
 8001f64:	2b10      	cmp	r3, #16
 8001f66:	d11b      	bne.n	8001fa0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f06f 0210 	mvn.w	r2, #16
 8001f70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2208      	movs	r2, #8
 8001f76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	69db      	ldr	r3, [r3, #28]
 8001f7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d003      	beq.n	8001f8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 f870 	bl	800206c <HAL_TIM_IC_CaptureCallback>
 8001f8c:	e005      	b.n	8001f9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 f862 	bl	8002058 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f000 f873 	bl	8002080 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d10e      	bne.n	8001fcc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	f003 0301 	and.w	r3, r3, #1
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d107      	bne.n	8001fcc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f06f 0201 	mvn.w	r2, #1
 8001fc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f7fe fd72 	bl	8000ab0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fd6:	2b80      	cmp	r3, #128	; 0x80
 8001fd8:	d10e      	bne.n	8001ff8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fe4:	2b80      	cmp	r3, #128	; 0x80
 8001fe6:	d107      	bne.n	8001ff8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 f902 	bl	80021fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	691b      	ldr	r3, [r3, #16]
 8001ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002002:	2b40      	cmp	r3, #64	; 0x40
 8002004:	d10e      	bne.n	8002024 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002010:	2b40      	cmp	r3, #64	; 0x40
 8002012:	d107      	bne.n	8002024 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800201c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f000 f838 	bl	8002094 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	f003 0320 	and.w	r3, r3, #32
 800202e:	2b20      	cmp	r3, #32
 8002030:	d10e      	bne.n	8002050 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	f003 0320 	and.w	r3, r3, #32
 800203c:	2b20      	cmp	r3, #32
 800203e:	d107      	bne.n	8002050 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f06f 0220 	mvn.w	r2, #32
 8002048:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f8cc 	bl	80021e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002050:	bf00      	nop
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4a40      	ldr	r2, [pc, #256]	; (80021bc <TIM_Base_SetConfig+0x114>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d013      	beq.n	80020e8 <TIM_Base_SetConfig+0x40>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020c6:	d00f      	beq.n	80020e8 <TIM_Base_SetConfig+0x40>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a3d      	ldr	r2, [pc, #244]	; (80021c0 <TIM_Base_SetConfig+0x118>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d00b      	beq.n	80020e8 <TIM_Base_SetConfig+0x40>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a3c      	ldr	r2, [pc, #240]	; (80021c4 <TIM_Base_SetConfig+0x11c>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d007      	beq.n	80020e8 <TIM_Base_SetConfig+0x40>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4a3b      	ldr	r2, [pc, #236]	; (80021c8 <TIM_Base_SetConfig+0x120>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d003      	beq.n	80020e8 <TIM_Base_SetConfig+0x40>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4a3a      	ldr	r2, [pc, #232]	; (80021cc <TIM_Base_SetConfig+0x124>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d108      	bne.n	80020fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	68fa      	ldr	r2, [r7, #12]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a2f      	ldr	r2, [pc, #188]	; (80021bc <TIM_Base_SetConfig+0x114>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d02b      	beq.n	800215a <TIM_Base_SetConfig+0xb2>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002108:	d027      	beq.n	800215a <TIM_Base_SetConfig+0xb2>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a2c      	ldr	r2, [pc, #176]	; (80021c0 <TIM_Base_SetConfig+0x118>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d023      	beq.n	800215a <TIM_Base_SetConfig+0xb2>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a2b      	ldr	r2, [pc, #172]	; (80021c4 <TIM_Base_SetConfig+0x11c>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d01f      	beq.n	800215a <TIM_Base_SetConfig+0xb2>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a2a      	ldr	r2, [pc, #168]	; (80021c8 <TIM_Base_SetConfig+0x120>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d01b      	beq.n	800215a <TIM_Base_SetConfig+0xb2>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a29      	ldr	r2, [pc, #164]	; (80021cc <TIM_Base_SetConfig+0x124>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d017      	beq.n	800215a <TIM_Base_SetConfig+0xb2>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a28      	ldr	r2, [pc, #160]	; (80021d0 <TIM_Base_SetConfig+0x128>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d013      	beq.n	800215a <TIM_Base_SetConfig+0xb2>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a27      	ldr	r2, [pc, #156]	; (80021d4 <TIM_Base_SetConfig+0x12c>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d00f      	beq.n	800215a <TIM_Base_SetConfig+0xb2>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a26      	ldr	r2, [pc, #152]	; (80021d8 <TIM_Base_SetConfig+0x130>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d00b      	beq.n	800215a <TIM_Base_SetConfig+0xb2>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a25      	ldr	r2, [pc, #148]	; (80021dc <TIM_Base_SetConfig+0x134>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d007      	beq.n	800215a <TIM_Base_SetConfig+0xb2>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a24      	ldr	r2, [pc, #144]	; (80021e0 <TIM_Base_SetConfig+0x138>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d003      	beq.n	800215a <TIM_Base_SetConfig+0xb2>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a23      	ldr	r2, [pc, #140]	; (80021e4 <TIM_Base_SetConfig+0x13c>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d108      	bne.n	800216c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002160:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	4313      	orrs	r3, r2
 800216a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	695b      	ldr	r3, [r3, #20]
 8002176:	4313      	orrs	r3, r2
 8002178:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	68fa      	ldr	r2, [r7, #12]
 800217e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	689a      	ldr	r2, [r3, #8]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a0a      	ldr	r2, [pc, #40]	; (80021bc <TIM_Base_SetConfig+0x114>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d003      	beq.n	80021a0 <TIM_Base_SetConfig+0xf8>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a0c      	ldr	r2, [pc, #48]	; (80021cc <TIM_Base_SetConfig+0x124>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d103      	bne.n	80021a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	691a      	ldr	r2, [r3, #16]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	615a      	str	r2, [r3, #20]
}
 80021ae:	bf00      	nop
 80021b0:	3714      	adds	r7, #20
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	40010000 	.word	0x40010000
 80021c0:	40000400 	.word	0x40000400
 80021c4:	40000800 	.word	0x40000800
 80021c8:	40000c00 	.word	0x40000c00
 80021cc:	40010400 	.word	0x40010400
 80021d0:	40014000 	.word	0x40014000
 80021d4:	40014400 	.word	0x40014400
 80021d8:	40014800 	.word	0x40014800
 80021dc:	40001800 	.word	0x40001800
 80021e0:	40001c00 	.word	0x40001c00
 80021e4:	40002000 	.word	0x40002000

080021e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f103 0208 	add.w	r2, r3, #8
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f04f 32ff 	mov.w	r2, #4294967295
 8002228:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f103 0208 	add.w	r2, r3, #8
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f103 0208 	add.w	r2, r3, #8
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002244:	bf00      	nop
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800225e:	bf00      	nop
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr

0800226a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800226a:	b480      	push	{r7}
 800226c:	b085      	sub	sp, #20
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
 8002272:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	68fa      	ldr	r2, [r7, #12]
 800227e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	689a      	ldr	r2, [r3, #8]
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	683a      	ldr	r2, [r7, #0]
 800228e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	683a      	ldr	r2, [r7, #0]
 8002294:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	1c5a      	adds	r2, r3, #1
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	601a      	str	r2, [r3, #0]
}
 80022a6:	bf00      	nop
 80022a8:	3714      	adds	r7, #20
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr

080022b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80022b2:	b480      	push	{r7}
 80022b4:	b085      	sub	sp, #20
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
 80022ba:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022c8:	d103      	bne.n	80022d2 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	60fb      	str	r3, [r7, #12]
 80022d0:	e00c      	b.n	80022ec <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	3308      	adds	r3, #8
 80022d6:	60fb      	str	r3, [r7, #12]
 80022d8:	e002      	b.n	80022e0 <vListInsert+0x2e>
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	60fb      	str	r3, [r7, #12]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68ba      	ldr	r2, [r7, #8]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d2f6      	bcs.n	80022da <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	685a      	ldr	r2, [r3, #4]
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	683a      	ldr	r2, [r7, #0]
 80022fa:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	68fa      	ldr	r2, [r7, #12]
 8002300:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	683a      	ldr	r2, [r7, #0]
 8002306:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	1c5a      	adds	r2, r3, #1
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	601a      	str	r2, [r3, #0]
}
 8002318:	bf00      	nop
 800231a:	3714      	adds	r7, #20
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002324:	b480      	push	{r7}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	6892      	ldr	r2, [r2, #8]
 800233a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	6852      	ldr	r2, [r2, #4]
 8002344:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	429a      	cmp	r2, r3
 800234e:	d103      	bne.n	8002358 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689a      	ldr	r2, [r3, #8]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	1e5a      	subs	r2, r3, #1
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
}
 800236c:	4618      	mov	r0, r3
 800236e:	3714      	adds	r7, #20
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d10a      	bne.n	80023a2 <xQueueGenericReset+0x2a>
        __asm volatile
 800238c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002390:	f383 8811 	msr	BASEPRI, r3
 8002394:	f3bf 8f6f 	isb	sy
 8002398:	f3bf 8f4f 	dsb	sy
 800239c:	60bb      	str	r3, [r7, #8]
    }
 800239e:	bf00      	nop
 80023a0:	e7fe      	b.n	80023a0 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80023a2:	f002 f8c7 	bl	8004534 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ae:	68f9      	ldr	r1, [r7, #12]
 80023b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80023b2:	fb01 f303 	mul.w	r3, r1, r3
 80023b6:	441a      	add	r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2200      	movs	r2, #0
 80023c0:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d2:	3b01      	subs	r3, #1
 80023d4:	68f9      	ldr	r1, [r7, #12]
 80023d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80023d8:	fb01 f303 	mul.w	r3, r1, r3
 80023dc:	441a      	add	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	22ff      	movs	r2, #255	; 0xff
 80023e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	22ff      	movs	r2, #255	; 0xff
 80023ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d114      	bne.n	8002422 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	691b      	ldr	r3, [r3, #16]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d01a      	beq.n	8002436 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	3310      	adds	r3, #16
 8002404:	4618      	mov	r0, r3
 8002406:	f001 f91f 	bl	8003648 <xTaskRemoveFromEventList>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d012      	beq.n	8002436 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8002410:	4b0c      	ldr	r3, [pc, #48]	; (8002444 <xQueueGenericReset+0xcc>)
 8002412:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	f3bf 8f4f 	dsb	sy
 800241c:	f3bf 8f6f 	isb	sy
 8002420:	e009      	b.n	8002436 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	3310      	adds	r3, #16
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff fef2 	bl	8002210 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	3324      	adds	r3, #36	; 0x24
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff feed 	bl	8002210 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8002436:	f002 f8ad 	bl	8004594 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800243a:	2301      	movs	r3, #1
}
 800243c:	4618      	mov	r0, r3
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	e000ed04 	.word	0xe000ed04

08002448 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002448:	b580      	push	{r7, lr}
 800244a:	b08c      	sub	sp, #48	; 0x30
 800244c:	af02      	add	r7, sp, #8
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	4613      	mov	r3, r2
 8002454:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d10a      	bne.n	8002472 <xQueueGenericCreate+0x2a>
        __asm volatile
 800245c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002460:	f383 8811 	msr	BASEPRI, r3
 8002464:	f3bf 8f6f 	isb	sy
 8002468:	f3bf 8f4f 	dsb	sy
 800246c:	61bb      	str	r3, [r7, #24]
    }
 800246e:	bf00      	nop
 8002470:	e7fe      	b.n	8002470 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	68ba      	ldr	r2, [r7, #8]
 8002476:	fb02 f303 	mul.w	r3, r2, r3
 800247a:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d006      	beq.n	8002490 <xQueueGenericCreate+0x48>
 8002482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	fbb2 f3f3 	udiv	r3, r2, r3
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	429a      	cmp	r2, r3
 800248e:	d101      	bne.n	8002494 <xQueueGenericCreate+0x4c>
 8002490:	2301      	movs	r3, #1
 8002492:	e000      	b.n	8002496 <xQueueGenericCreate+0x4e>
 8002494:	2300      	movs	r3, #0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d10a      	bne.n	80024b0 <xQueueGenericCreate+0x68>
        __asm volatile
 800249a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800249e:	f383 8811 	msr	BASEPRI, r3
 80024a2:	f3bf 8f6f 	isb	sy
 80024a6:	f3bf 8f4f 	dsb	sy
 80024aa:	617b      	str	r3, [r7, #20]
    }
 80024ac:	bf00      	nop
 80024ae:	e7fe      	b.n	80024ae <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80024b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b2:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80024b6:	d90a      	bls.n	80024ce <xQueueGenericCreate+0x86>
        __asm volatile
 80024b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024bc:	f383 8811 	msr	BASEPRI, r3
 80024c0:	f3bf 8f6f 	isb	sy
 80024c4:	f3bf 8f4f 	dsb	sy
 80024c8:	613b      	str	r3, [r7, #16]
    }
 80024ca:	bf00      	nop
 80024cc:	e7fe      	b.n	80024cc <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80024ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d0:	3350      	adds	r3, #80	; 0x50
 80024d2:	4618      	mov	r0, r3
 80024d4:	f002 f95a 	bl	800478c <pvPortMalloc>
 80024d8:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80024da:	6a3b      	ldr	r3, [r7, #32]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d00d      	beq.n	80024fc <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80024e0:	6a3b      	ldr	r3, [r7, #32]
 80024e2:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	3350      	adds	r3, #80	; 0x50
 80024e8:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80024ea:	79fa      	ldrb	r2, [r7, #7]
 80024ec:	6a3b      	ldr	r3, [r7, #32]
 80024ee:	9300      	str	r3, [sp, #0]
 80024f0:	4613      	mov	r3, r2
 80024f2:	69fa      	ldr	r2, [r7, #28]
 80024f4:	68b9      	ldr	r1, [r7, #8]
 80024f6:	68f8      	ldr	r0, [r7, #12]
 80024f8:	f000 f805 	bl	8002506 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80024fc:	6a3b      	ldr	r3, [r7, #32]
    }
 80024fe:	4618      	mov	r0, r3
 8002500:	3728      	adds	r7, #40	; 0x28
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b084      	sub	sp, #16
 800250a:	af00      	add	r7, sp, #0
 800250c:	60f8      	str	r0, [r7, #12]
 800250e:	60b9      	str	r1, [r7, #8]
 8002510:	607a      	str	r2, [r7, #4]
 8002512:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d103      	bne.n	8002522 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	601a      	str	r2, [r3, #0]
 8002520:	e002      	b.n	8002528 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	68ba      	ldr	r2, [r7, #8]
 8002532:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002534:	2101      	movs	r1, #1
 8002536:	69b8      	ldr	r0, [r7, #24]
 8002538:	f7ff ff1e 	bl	8002378 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	78fa      	ldrb	r2, [r7, #3]
 8002540:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002544:	78fb      	ldrb	r3, [r7, #3]
 8002546:	68ba      	ldr	r2, [r7, #8]
 8002548:	68f9      	ldr	r1, [r7, #12]
 800254a:	2073      	movs	r0, #115	; 0x73
 800254c:	f004 f846 	bl	80065dc <SEGGER_SYSVIEW_RecordU32x3>
}
 8002550:	bf00      	nop
 8002552:	3710      	adds	r7, #16
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b090      	sub	sp, #64	; 0x40
 800255c:	af02      	add	r7, sp, #8
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
 8002564:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002566:	2300      	movs	r3, #0
 8002568:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 800256e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002570:	2b00      	cmp	r3, #0
 8002572:	d10a      	bne.n	800258a <xQueueGenericSend+0x32>
        __asm volatile
 8002574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002578:	f383 8811 	msr	BASEPRI, r3
 800257c:	f3bf 8f6f 	isb	sy
 8002580:	f3bf 8f4f 	dsb	sy
 8002584:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002586:	bf00      	nop
 8002588:	e7fe      	b.n	8002588 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d103      	bne.n	8002598 <xQueueGenericSend+0x40>
 8002590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002594:	2b00      	cmp	r3, #0
 8002596:	d101      	bne.n	800259c <xQueueGenericSend+0x44>
 8002598:	2301      	movs	r3, #1
 800259a:	e000      	b.n	800259e <xQueueGenericSend+0x46>
 800259c:	2300      	movs	r3, #0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d10a      	bne.n	80025b8 <xQueueGenericSend+0x60>
        __asm volatile
 80025a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025a6:	f383 8811 	msr	BASEPRI, r3
 80025aa:	f3bf 8f6f 	isb	sy
 80025ae:	f3bf 8f4f 	dsb	sy
 80025b2:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80025b4:	bf00      	nop
 80025b6:	e7fe      	b.n	80025b6 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d103      	bne.n	80025c6 <xQueueGenericSend+0x6e>
 80025be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d101      	bne.n	80025ca <xQueueGenericSend+0x72>
 80025c6:	2301      	movs	r3, #1
 80025c8:	e000      	b.n	80025cc <xQueueGenericSend+0x74>
 80025ca:	2300      	movs	r3, #0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d10a      	bne.n	80025e6 <xQueueGenericSend+0x8e>
        __asm volatile
 80025d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025d4:	f383 8811 	msr	BASEPRI, r3
 80025d8:	f3bf 8f6f 	isb	sy
 80025dc:	f3bf 8f4f 	dsb	sy
 80025e0:	623b      	str	r3, [r7, #32]
    }
 80025e2:	bf00      	nop
 80025e4:	e7fe      	b.n	80025e4 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80025e6:	f001 f9cf 	bl	8003988 <xTaskGetSchedulerState>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d102      	bne.n	80025f6 <xQueueGenericSend+0x9e>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <xQueueGenericSend+0xa2>
 80025f6:	2301      	movs	r3, #1
 80025f8:	e000      	b.n	80025fc <xQueueGenericSend+0xa4>
 80025fa:	2300      	movs	r3, #0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d10a      	bne.n	8002616 <xQueueGenericSend+0xbe>
        __asm volatile
 8002600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002604:	f383 8811 	msr	BASEPRI, r3
 8002608:	f3bf 8f6f 	isb	sy
 800260c:	f3bf 8f4f 	dsb	sy
 8002610:	61fb      	str	r3, [r7, #28]
    }
 8002612:	bf00      	nop
 8002614:	e7fe      	b.n	8002614 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002616:	f001 ff8d 	bl	8004534 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800261a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800261c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800261e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002622:	429a      	cmp	r2, r3
 8002624:	d302      	bcc.n	800262c <xQueueGenericSend+0xd4>
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	2b02      	cmp	r3, #2
 800262a:	d136      	bne.n	800269a <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 800262c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800262e:	4618      	mov	r0, r3
 8002630:	f004 fd62 	bl	80070f8 <SEGGER_SYSVIEW_ShrinkId>
 8002634:	68ba      	ldr	r2, [r7, #8]
 8002636:	6879      	ldr	r1, [r7, #4]
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	9300      	str	r3, [sp, #0]
 800263c:	460b      	mov	r3, r1
 800263e:	4601      	mov	r1, r0
 8002640:	205a      	movs	r0, #90	; 0x5a
 8002642:	f004 f841 	bl	80066c8 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002646:	683a      	ldr	r2, [r7, #0]
 8002648:	68b9      	ldr	r1, [r7, #8]
 800264a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800264c:	f000 fa78 	bl	8002b40 <prvCopyDataToQueue>
 8002650:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002656:	2b00      	cmp	r3, #0
 8002658:	d010      	beq.n	800267c <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800265a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800265c:	3324      	adds	r3, #36	; 0x24
 800265e:	4618      	mov	r0, r3
 8002660:	f000 fff2 	bl	8003648 <xTaskRemoveFromEventList>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d013      	beq.n	8002692 <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 800266a:	4b4d      	ldr	r3, [pc, #308]	; (80027a0 <xQueueGenericSend+0x248>)
 800266c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002670:	601a      	str	r2, [r3, #0]
 8002672:	f3bf 8f4f 	dsb	sy
 8002676:	f3bf 8f6f 	isb	sy
 800267a:	e00a      	b.n	8002692 <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 800267c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800267e:	2b00      	cmp	r3, #0
 8002680:	d007      	beq.n	8002692 <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002682:	4b47      	ldr	r3, [pc, #284]	; (80027a0 <xQueueGenericSend+0x248>)
 8002684:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002688:	601a      	str	r2, [r3, #0]
 800268a:	f3bf 8f4f 	dsb	sy
 800268e:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002692:	f001 ff7f 	bl	8004594 <vPortExitCritical>
                return pdPASS;
 8002696:	2301      	movs	r3, #1
 8002698:	e07d      	b.n	8002796 <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d110      	bne.n	80026c2 <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80026a0:	f001 ff78 	bl	8004594 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 80026a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a6:	4618      	mov	r0, r3
 80026a8:	f004 fd26 	bl	80070f8 <SEGGER_SYSVIEW_ShrinkId>
 80026ac:	68ba      	ldr	r2, [r7, #8]
 80026ae:	6879      	ldr	r1, [r7, #4]
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	9300      	str	r3, [sp, #0]
 80026b4:	460b      	mov	r3, r1
 80026b6:	4601      	mov	r1, r0
 80026b8:	205a      	movs	r0, #90	; 0x5a
 80026ba:	f004 f805 	bl	80066c8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 80026be:	2300      	movs	r3, #0
 80026c0:	e069      	b.n	8002796 <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 80026c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d106      	bne.n	80026d6 <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80026c8:	f107 0314 	add.w	r3, r7, #20
 80026cc:	4618      	mov	r0, r3
 80026ce:	f001 f821 	bl	8003714 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80026d2:	2301      	movs	r3, #1
 80026d4:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80026d6:	f001 ff5d 	bl	8004594 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80026da:	f000 fd6d 	bl	80031b8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80026de:	f001 ff29 	bl	8004534 <vPortEnterCritical>
 80026e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80026e8:	b25b      	sxtb	r3, r3
 80026ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ee:	d103      	bne.n	80026f8 <xQueueGenericSend+0x1a0>
 80026f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026fe:	b25b      	sxtb	r3, r3
 8002700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002704:	d103      	bne.n	800270e <xQueueGenericSend+0x1b6>
 8002706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002708:	2200      	movs	r2, #0
 800270a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800270e:	f001 ff41 	bl	8004594 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002712:	1d3a      	adds	r2, r7, #4
 8002714:	f107 0314 	add.w	r3, r7, #20
 8002718:	4611      	mov	r1, r2
 800271a:	4618      	mov	r0, r3
 800271c:	f001 f810 	bl	8003740 <xTaskCheckForTimeOut>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d124      	bne.n	8002770 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002726:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002728:	f000 fb02 	bl	8002d30 <prvIsQueueFull>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d018      	beq.n	8002764 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002734:	3310      	adds	r3, #16
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	4611      	mov	r1, r2
 800273a:	4618      	mov	r0, r3
 800273c:	f000 ff32 	bl	80035a4 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002740:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002742:	f000 fa8d 	bl	8002c60 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002746:	f000 fd45 	bl	80031d4 <xTaskResumeAll>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	f47f af62 	bne.w	8002616 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8002752:	4b13      	ldr	r3, [pc, #76]	; (80027a0 <xQueueGenericSend+0x248>)
 8002754:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002758:	601a      	str	r2, [r3, #0]
 800275a:	f3bf 8f4f 	dsb	sy
 800275e:	f3bf 8f6f 	isb	sy
 8002762:	e758      	b.n	8002616 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002764:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002766:	f000 fa7b 	bl	8002c60 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800276a:	f000 fd33 	bl	80031d4 <xTaskResumeAll>
 800276e:	e752      	b.n	8002616 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002770:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002772:	f000 fa75 	bl	8002c60 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002776:	f000 fd2d 	bl	80031d4 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 800277a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800277c:	4618      	mov	r0, r3
 800277e:	f004 fcbb 	bl	80070f8 <SEGGER_SYSVIEW_ShrinkId>
 8002782:	68ba      	ldr	r2, [r7, #8]
 8002784:	6879      	ldr	r1, [r7, #4]
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	9300      	str	r3, [sp, #0]
 800278a:	460b      	mov	r3, r1
 800278c:	4601      	mov	r1, r0
 800278e:	205a      	movs	r0, #90	; 0x5a
 8002790:	f003 ff9a 	bl	80066c8 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8002794:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002796:	4618      	mov	r0, r3
 8002798:	3738      	adds	r7, #56	; 0x38
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	e000ed04 	.word	0xe000ed04

080027a4 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b090      	sub	sp, #64	; 0x40
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
 80027b0:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80027b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d10a      	bne.n	80027d2 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 80027bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027c0:	f383 8811 	msr	BASEPRI, r3
 80027c4:	f3bf 8f6f 	isb	sy
 80027c8:	f3bf 8f4f 	dsb	sy
 80027cc:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80027ce:	bf00      	nop
 80027d0:	e7fe      	b.n	80027d0 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d103      	bne.n	80027e0 <xQueueGenericSendFromISR+0x3c>
 80027d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d101      	bne.n	80027e4 <xQueueGenericSendFromISR+0x40>
 80027e0:	2301      	movs	r3, #1
 80027e2:	e000      	b.n	80027e6 <xQueueGenericSendFromISR+0x42>
 80027e4:	2300      	movs	r3, #0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d10a      	bne.n	8002800 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 80027ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ee:	f383 8811 	msr	BASEPRI, r3
 80027f2:	f3bf 8f6f 	isb	sy
 80027f6:	f3bf 8f4f 	dsb	sy
 80027fa:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80027fc:	bf00      	nop
 80027fe:	e7fe      	b.n	80027fe <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	2b02      	cmp	r3, #2
 8002804:	d103      	bne.n	800280e <xQueueGenericSendFromISR+0x6a>
 8002806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800280a:	2b01      	cmp	r3, #1
 800280c:	d101      	bne.n	8002812 <xQueueGenericSendFromISR+0x6e>
 800280e:	2301      	movs	r3, #1
 8002810:	e000      	b.n	8002814 <xQueueGenericSendFromISR+0x70>
 8002812:	2300      	movs	r3, #0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d10a      	bne.n	800282e <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8002818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800281c:	f383 8811 	msr	BASEPRI, r3
 8002820:	f3bf 8f6f 	isb	sy
 8002824:	f3bf 8f4f 	dsb	sy
 8002828:	623b      	str	r3, [r7, #32]
    }
 800282a:	bf00      	nop
 800282c:	e7fe      	b.n	800282c <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800282e:	f001 ff6d 	bl	800470c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002832:	f3ef 8211 	mrs	r2, BASEPRI
 8002836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800283a:	f383 8811 	msr	BASEPRI, r3
 800283e:	f3bf 8f6f 	isb	sy
 8002842:	f3bf 8f4f 	dsb	sy
 8002846:	61fa      	str	r2, [r7, #28]
 8002848:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800284a:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800284c:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800284e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002850:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002856:	429a      	cmp	r2, r3
 8002858:	d302      	bcc.n	8002860 <xQueueGenericSendFromISR+0xbc>
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	2b02      	cmp	r3, #2
 800285e:	d148      	bne.n	80028f2 <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002862:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002866:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800286a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800286c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800286e:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8002870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002872:	4618      	mov	r0, r3
 8002874:	f004 fc40 	bl	80070f8 <SEGGER_SYSVIEW_ShrinkId>
 8002878:	4601      	mov	r1, r0
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	461a      	mov	r2, r3
 800287e:	2060      	movs	r0, #96	; 0x60
 8002880:	f003 fe52 	bl	8006528 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002884:	683a      	ldr	r2, [r7, #0]
 8002886:	68b9      	ldr	r1, [r7, #8]
 8002888:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800288a:	f000 f959 	bl	8002b40 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800288e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002896:	d112      	bne.n	80028be <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800289a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289c:	2b00      	cmp	r3, #0
 800289e:	d025      	beq.n	80028ec <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028a2:	3324      	adds	r3, #36	; 0x24
 80028a4:	4618      	mov	r0, r3
 80028a6:	f000 fecf 	bl	8003648 <xTaskRemoveFromEventList>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d01d      	beq.n	80028ec <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d01a      	beq.n	80028ec <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2201      	movs	r2, #1
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	e016      	b.n	80028ec <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80028be:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80028c2:	2b7f      	cmp	r3, #127	; 0x7f
 80028c4:	d10a      	bne.n	80028dc <xQueueGenericSendFromISR+0x138>
        __asm volatile
 80028c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ca:	f383 8811 	msr	BASEPRI, r3
 80028ce:	f3bf 8f6f 	isb	sy
 80028d2:	f3bf 8f4f 	dsb	sy
 80028d6:	617b      	str	r3, [r7, #20]
    }
 80028d8:	bf00      	nop
 80028da:	e7fe      	b.n	80028da <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80028dc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80028e0:	3301      	adds	r3, #1
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	b25a      	sxtb	r2, r3
 80028e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80028ec:	2301      	movs	r3, #1
 80028ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 80028f0:	e00b      	b.n	800290a <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 80028f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028f4:	4618      	mov	r0, r3
 80028f6:	f004 fbff 	bl	80070f8 <SEGGER_SYSVIEW_ShrinkId>
 80028fa:	4601      	mov	r1, r0
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	461a      	mov	r2, r3
 8002900:	2060      	movs	r0, #96	; 0x60
 8002902:	f003 fe11 	bl	8006528 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8002906:	2300      	movs	r3, #0
 8002908:	63fb      	str	r3, [r7, #60]	; 0x3c
 800290a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800290c:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002914:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002916:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002918:	4618      	mov	r0, r3
 800291a:	3740      	adds	r7, #64	; 0x40
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002920:	b590      	push	{r4, r7, lr}
 8002922:	b08f      	sub	sp, #60	; 0x3c
 8002924:	af02      	add	r7, sp, #8
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800292c:	2300      	movs	r3, #0
 800292e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002936:	2b00      	cmp	r3, #0
 8002938:	d10a      	bne.n	8002950 <xQueueReceive+0x30>
        __asm volatile
 800293a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800293e:	f383 8811 	msr	BASEPRI, r3
 8002942:	f3bf 8f6f 	isb	sy
 8002946:	f3bf 8f4f 	dsb	sy
 800294a:	623b      	str	r3, [r7, #32]
    }
 800294c:	bf00      	nop
 800294e:	e7fe      	b.n	800294e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d103      	bne.n	800295e <xQueueReceive+0x3e>
 8002956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <xQueueReceive+0x42>
 800295e:	2301      	movs	r3, #1
 8002960:	e000      	b.n	8002964 <xQueueReceive+0x44>
 8002962:	2300      	movs	r3, #0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d10a      	bne.n	800297e <xQueueReceive+0x5e>
        __asm volatile
 8002968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800296c:	f383 8811 	msr	BASEPRI, r3
 8002970:	f3bf 8f6f 	isb	sy
 8002974:	f3bf 8f4f 	dsb	sy
 8002978:	61fb      	str	r3, [r7, #28]
    }
 800297a:	bf00      	nop
 800297c:	e7fe      	b.n	800297c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800297e:	f001 f803 	bl	8003988 <xTaskGetSchedulerState>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d102      	bne.n	800298e <xQueueReceive+0x6e>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <xQueueReceive+0x72>
 800298e:	2301      	movs	r3, #1
 8002990:	e000      	b.n	8002994 <xQueueReceive+0x74>
 8002992:	2300      	movs	r3, #0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d10a      	bne.n	80029ae <xQueueReceive+0x8e>
        __asm volatile
 8002998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800299c:	f383 8811 	msr	BASEPRI, r3
 80029a0:	f3bf 8f6f 	isb	sy
 80029a4:	f3bf 8f4f 	dsb	sy
 80029a8:	61bb      	str	r3, [r7, #24]
    }
 80029aa:	bf00      	nop
 80029ac:	e7fe      	b.n	80029ac <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80029ae:	f001 fdc1 	bl	8004534 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80029b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b6:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80029b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d02f      	beq.n	8002a1e <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80029be:	68b9      	ldr	r1, [r7, #8]
 80029c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029c2:	f000 f927 	bl	8002c14 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80029c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c8:	4618      	mov	r0, r3
 80029ca:	f004 fb95 	bl	80070f8 <SEGGER_SYSVIEW_ShrinkId>
 80029ce:	4604      	mov	r4, r0
 80029d0:	2000      	movs	r0, #0
 80029d2:	f004 fb91 	bl	80070f8 <SEGGER_SYSVIEW_ShrinkId>
 80029d6:	4602      	mov	r2, r0
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2101      	movs	r1, #1
 80029dc:	9100      	str	r1, [sp, #0]
 80029de:	4621      	mov	r1, r4
 80029e0:	205c      	movs	r0, #92	; 0x5c
 80029e2:	f003 fe71 	bl	80066c8 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80029e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e8:	1e5a      	subs	r2, r3, #1
 80029ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ec:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80029ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00f      	beq.n	8002a16 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80029f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f8:	3310      	adds	r3, #16
 80029fa:	4618      	mov	r0, r3
 80029fc:	f000 fe24 	bl	8003648 <xTaskRemoveFromEventList>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d007      	beq.n	8002a16 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002a06:	4b4d      	ldr	r3, [pc, #308]	; (8002b3c <xQueueReceive+0x21c>)
 8002a08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a0c:	601a      	str	r2, [r3, #0]
 8002a0e:	f3bf 8f4f 	dsb	sy
 8002a12:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002a16:	f001 fdbd 	bl	8004594 <vPortExitCritical>
                return pdPASS;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e08a      	b.n	8002b34 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d113      	bne.n	8002a4c <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002a24:	f001 fdb6 	bl	8004594 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f004 fb64 	bl	80070f8 <SEGGER_SYSVIEW_ShrinkId>
 8002a30:	4604      	mov	r4, r0
 8002a32:	2000      	movs	r0, #0
 8002a34:	f004 fb60 	bl	80070f8 <SEGGER_SYSVIEW_ShrinkId>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2101      	movs	r1, #1
 8002a3e:	9100      	str	r1, [sp, #0]
 8002a40:	4621      	mov	r1, r4
 8002a42:	205c      	movs	r0, #92	; 0x5c
 8002a44:	f003 fe40 	bl	80066c8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	e073      	b.n	8002b34 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d106      	bne.n	8002a60 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002a52:	f107 0310 	add.w	r3, r7, #16
 8002a56:	4618      	mov	r0, r3
 8002a58:	f000 fe5c 	bl	8003714 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002a60:	f001 fd98 	bl	8004594 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002a64:	f000 fba8 	bl	80031b8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002a68:	f001 fd64 	bl	8004534 <vPortEnterCritical>
 8002a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a72:	b25b      	sxtb	r3, r3
 8002a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a78:	d103      	bne.n	8002a82 <xQueueReceive+0x162>
 8002a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a88:	b25b      	sxtb	r3, r3
 8002a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a8e:	d103      	bne.n	8002a98 <xQueueReceive+0x178>
 8002a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a98:	f001 fd7c 	bl	8004594 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002a9c:	1d3a      	adds	r2, r7, #4
 8002a9e:	f107 0310 	add.w	r3, r7, #16
 8002aa2:	4611      	mov	r1, r2
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f000 fe4b 	bl	8003740 <xTaskCheckForTimeOut>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d124      	bne.n	8002afa <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002ab0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ab2:	f000 f927 	bl	8002d04 <prvIsQueueEmpty>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d018      	beq.n	8002aee <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002abe:	3324      	adds	r3, #36	; 0x24
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	4611      	mov	r1, r2
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f000 fd6d 	bl	80035a4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002aca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002acc:	f000 f8c8 	bl	8002c60 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002ad0:	f000 fb80 	bl	80031d4 <xTaskResumeAll>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f47f af69 	bne.w	80029ae <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002adc:	4b17      	ldr	r3, [pc, #92]	; (8002b3c <xQueueReceive+0x21c>)
 8002ade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ae2:	601a      	str	r2, [r3, #0]
 8002ae4:	f3bf 8f4f 	dsb	sy
 8002ae8:	f3bf 8f6f 	isb	sy
 8002aec:	e75f      	b.n	80029ae <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002aee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002af0:	f000 f8b6 	bl	8002c60 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002af4:	f000 fb6e 	bl	80031d4 <xTaskResumeAll>
 8002af8:	e759      	b.n	80029ae <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002afa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002afc:	f000 f8b0 	bl	8002c60 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002b00:	f000 fb68 	bl	80031d4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b06:	f000 f8fd 	bl	8002d04 <prvIsQueueEmpty>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	f43f af4e 	beq.w	80029ae <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b14:	4618      	mov	r0, r3
 8002b16:	f004 faef 	bl	80070f8 <SEGGER_SYSVIEW_ShrinkId>
 8002b1a:	4604      	mov	r4, r0
 8002b1c:	2000      	movs	r0, #0
 8002b1e:	f004 faeb 	bl	80070f8 <SEGGER_SYSVIEW_ShrinkId>
 8002b22:	4602      	mov	r2, r0
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2101      	movs	r1, #1
 8002b28:	9100      	str	r1, [sp, #0]
 8002b2a:	4621      	mov	r1, r4
 8002b2c:	205c      	movs	r0, #92	; 0x5c
 8002b2e:	f003 fdcb 	bl	80066c8 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002b32:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3734      	adds	r7, #52	; 0x34
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd90      	pop	{r4, r7, pc}
 8002b3c:	e000ed04 	.word	0xe000ed04

08002b40 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b54:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d10d      	bne.n	8002b7a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d14d      	bne.n	8002c02 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f000 ff2a 	bl	80039c4 <xTaskPriorityDisinherit>
 8002b70:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	609a      	str	r2, [r3, #8]
 8002b78:	e043      	b.n	8002c02 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d119      	bne.n	8002bb4 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6858      	ldr	r0, [r3, #4]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b88:	461a      	mov	r2, r3
 8002b8a:	68b9      	ldr	r1, [r7, #8]
 8002b8c:	f004 fc78 	bl	8007480 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	685a      	ldr	r2, [r3, #4]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b98:	441a      	add	r2, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	685a      	ldr	r2, [r3, #4]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d32b      	bcc.n	8002c02 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	605a      	str	r2, [r3, #4]
 8002bb2:	e026      	b.n	8002c02 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	68d8      	ldr	r0, [r3, #12]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	68b9      	ldr	r1, [r7, #8]
 8002bc0:	f004 fc5e 	bl	8007480 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	68da      	ldr	r2, [r3, #12]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bcc:	425b      	negs	r3, r3
 8002bce:	441a      	add	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	68da      	ldr	r2, [r3, #12]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d207      	bcs.n	8002bf0 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	689a      	ldr	r2, [r3, #8]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be8:	425b      	negs	r3, r3
 8002bea:	441a      	add	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d105      	bne.n	8002c02 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d002      	beq.n	8002c02 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1c5a      	adds	r2, r3, #1
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002c0a:	697b      	ldr	r3, [r7, #20]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3718      	adds	r7, #24
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d018      	beq.n	8002c58 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	68da      	ldr	r2, [r3, #12]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2e:	441a      	add	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	68da      	ldr	r2, [r3, #12]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d303      	bcc.n	8002c48 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	68d9      	ldr	r1, [r3, #12]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c50:	461a      	mov	r2, r3
 8002c52:	6838      	ldr	r0, [r7, #0]
 8002c54:	f004 fc14 	bl	8007480 <memcpy>
    }
}
 8002c58:	bf00      	nop
 8002c5a:	3708      	adds	r7, #8
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002c68:	f001 fc64 	bl	8004534 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c72:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002c74:	e011      	b.n	8002c9a <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d012      	beq.n	8002ca4 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	3324      	adds	r3, #36	; 0x24
 8002c82:	4618      	mov	r0, r3
 8002c84:	f000 fce0 	bl	8003648 <xTaskRemoveFromEventList>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002c8e:	f000 fdbd 	bl	800380c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002c92:	7bfb      	ldrb	r3, [r7, #15]
 8002c94:	3b01      	subs	r3, #1
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002c9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	dce9      	bgt.n	8002c76 <prvUnlockQueue+0x16>
 8002ca2:	e000      	b.n	8002ca6 <prvUnlockQueue+0x46>
                        break;
 8002ca4:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	22ff      	movs	r2, #255	; 0xff
 8002caa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002cae:	f001 fc71 	bl	8004594 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002cb2:	f001 fc3f 	bl	8004534 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002cbc:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002cbe:	e011      	b.n	8002ce4 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d012      	beq.n	8002cee <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	3310      	adds	r3, #16
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f000 fcbb 	bl	8003648 <xTaskRemoveFromEventList>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002cd8:	f000 fd98 	bl	800380c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002cdc:	7bbb      	ldrb	r3, [r7, #14]
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ce4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	dce9      	bgt.n	8002cc0 <prvUnlockQueue+0x60>
 8002cec:	e000      	b.n	8002cf0 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002cee:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	22ff      	movs	r2, #255	; 0xff
 8002cf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002cf8:	f001 fc4c 	bl	8004594 <vPortExitCritical>
}
 8002cfc:	bf00      	nop
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002d0c:	f001 fc12 	bl	8004534 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d102      	bne.n	8002d1e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	60fb      	str	r3, [r7, #12]
 8002d1c:	e001      	b.n	8002d22 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002d22:	f001 fc37 	bl	8004594 <vPortExitCritical>

    return xReturn;
 8002d26:	68fb      	ldr	r3, [r7, #12]
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3710      	adds	r7, #16
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002d38:	f001 fbfc 	bl	8004534 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d102      	bne.n	8002d4e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	60fb      	str	r3, [r7, #12]
 8002d4c:	e001      	b.n	8002d52 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002d52:	f001 fc1f 	bl	8004594 <vPortExitCritical>

    return xReturn;
 8002d56:	68fb      	ldr	r3, [r7, #12]
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3710      	adds	r7, #16
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	60fb      	str	r3, [r7, #12]
 8002d6e:	e01e      	b.n	8002dae <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002d70:	4a13      	ldr	r2, [pc, #76]	; (8002dc0 <vQueueAddToRegistry+0x60>)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d115      	bne.n	8002da8 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002d7c:	4910      	ldr	r1, [pc, #64]	; (8002dc0 <vQueueAddToRegistry+0x60>)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	683a      	ldr	r2, [r7, #0]
 8002d82:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002d86:	4a0e      	ldr	r2, [pc, #56]	; (8002dc0 <vQueueAddToRegistry+0x60>)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	4413      	add	r3, r2
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f004 f9af 	bl	80070f8 <SEGGER_SYSVIEW_ShrinkId>
 8002d9a:	4601      	mov	r1, r0
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	461a      	mov	r2, r3
 8002da0:	2071      	movs	r0, #113	; 0x71
 8002da2:	f003 fbc1 	bl	8006528 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002da6:	e006      	b.n	8002db6 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	3301      	adds	r3, #1
 8002dac:	60fb      	str	r3, [r7, #12]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2b07      	cmp	r3, #7
 8002db2:	d9dd      	bls.n	8002d70 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002db4:	bf00      	nop
 8002db6:	bf00      	nop
 8002db8:	3710      	adds	r7, #16
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	200000ec 	.word	0x200000ec

08002dc4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b086      	sub	sp, #24
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002dd4:	f001 fbae 	bl	8004534 <vPortEnterCritical>
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002dde:	b25b      	sxtb	r3, r3
 8002de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de4:	d103      	bne.n	8002dee <vQueueWaitForMessageRestricted+0x2a>
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002df4:	b25b      	sxtb	r3, r3
 8002df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dfa:	d103      	bne.n	8002e04 <vQueueWaitForMessageRestricted+0x40>
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e04:	f001 fbc6 	bl	8004594 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d106      	bne.n	8002e1e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	3324      	adds	r3, #36	; 0x24
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	68b9      	ldr	r1, [r7, #8]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f000 fbe7 	bl	80035ec <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002e1e:	6978      	ldr	r0, [r7, #20]
 8002e20:	f7ff ff1e 	bl	8002c60 <prvUnlockQueue>
    }
 8002e24:	bf00      	nop
 8002e26:	3718      	adds	r7, #24
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b08c      	sub	sp, #48	; 0x30
 8002e30:	af04      	add	r7, sp, #16
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	603b      	str	r3, [r7, #0]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002e3c:	88fb      	ldrh	r3, [r7, #6]
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	4618      	mov	r0, r3
 8002e42:	f001 fca3 	bl	800478c <pvPortMalloc>
 8002e46:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00e      	beq.n	8002e6c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002e4e:	2058      	movs	r0, #88	; 0x58
 8002e50:	f001 fc9c 	bl	800478c <pvPortMalloc>
 8002e54:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d003      	beq.n	8002e64 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	697a      	ldr	r2, [r7, #20]
 8002e60:	631a      	str	r2, [r3, #48]	; 0x30
 8002e62:	e005      	b.n	8002e70 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002e64:	6978      	ldr	r0, [r7, #20]
 8002e66:	f001 fd71 	bl	800494c <vPortFree>
 8002e6a:	e001      	b.n	8002e70 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d013      	beq.n	8002e9e <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002e76:	88fa      	ldrh	r2, [r7, #6]
 8002e78:	2300      	movs	r3, #0
 8002e7a:	9303      	str	r3, [sp, #12]
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	9302      	str	r3, [sp, #8]
 8002e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e82:	9301      	str	r3, [sp, #4]
 8002e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e86:	9300      	str	r3, [sp, #0]
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	68b9      	ldr	r1, [r7, #8]
 8002e8c:	68f8      	ldr	r0, [r7, #12]
 8002e8e:	f000 f80e 	bl	8002eae <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002e92:	69f8      	ldr	r0, [r7, #28]
 8002e94:	f000 f8a2 	bl	8002fdc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	61bb      	str	r3, [r7, #24]
 8002e9c:	e002      	b.n	8002ea4 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002ea2:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002ea4:	69bb      	ldr	r3, [r7, #24]
    }
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3720      	adds	r7, #32
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b088      	sub	sp, #32
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	60f8      	str	r0, [r7, #12]
 8002eb6:	60b9      	str	r1, [r7, #8]
 8002eb8:	607a      	str	r2, [r7, #4]
 8002eba:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ebe:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	21a5      	movs	r1, #165	; 0xa5
 8002ec8:	f004 fae8 	bl	800749c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ece:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	4413      	add	r3, r2
 8002edc:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	f023 0307 	bic.w	r3, r3, #7
 8002ee4:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	f003 0307 	and.w	r3, r3, #7
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d00a      	beq.n	8002f06 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ef4:	f383 8811 	msr	BASEPRI, r3
 8002ef8:	f3bf 8f6f 	isb	sy
 8002efc:	f3bf 8f4f 	dsb	sy
 8002f00:	617b      	str	r3, [r7, #20]
    }
 8002f02:	bf00      	nop
 8002f04:	e7fe      	b.n	8002f04 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d01f      	beq.n	8002f4c <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	61fb      	str	r3, [r7, #28]
 8002f10:	e012      	b.n	8002f38 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002f12:	68ba      	ldr	r2, [r7, #8]
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	4413      	add	r3, r2
 8002f18:	7819      	ldrb	r1, [r3, #0]
 8002f1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	4413      	add	r3, r2
 8002f20:	3334      	adds	r3, #52	; 0x34
 8002f22:	460a      	mov	r2, r1
 8002f24:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002f26:	68ba      	ldr	r2, [r7, #8]
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d006      	beq.n	8002f40 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	3301      	adds	r3, #1
 8002f36:	61fb      	str	r3, [r7, #28]
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	2b09      	cmp	r3, #9
 8002f3c:	d9e9      	bls.n	8002f12 <prvInitialiseNewTask+0x64>
 8002f3e:	e000      	b.n	8002f42 <prvInitialiseNewTask+0x94>
            {
                break;
 8002f40:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002f4a:	e003      	b.n	8002f54 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f56:	2b04      	cmp	r3, #4
 8002f58:	d901      	bls.n	8002f5e <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002f5a:	2304      	movs	r3, #4
 8002f5c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f62:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f68:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f72:	3304      	adds	r3, #4
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7ff f96b 	bl	8002250 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f7c:	3318      	adds	r3, #24
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7ff f966 	bl	8002250 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f88:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f8c:	f1c3 0205 	rsb	r2, r3, #5
 8002f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f92:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f98:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f9c:	3350      	adds	r3, #80	; 0x50
 8002f9e:	2204      	movs	r2, #4
 8002fa0:	2100      	movs	r1, #0
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f004 fa7a 	bl	800749c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002faa:	3354      	adds	r3, #84	; 0x54
 8002fac:	2201      	movs	r2, #1
 8002fae:	2100      	movs	r1, #0
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f004 fa73 	bl	800749c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002fb6:	683a      	ldr	r2, [r7, #0]
 8002fb8:	68f9      	ldr	r1, [r7, #12]
 8002fba:	69b8      	ldr	r0, [r7, #24]
 8002fbc:	f001 f90c 	bl	80041d8 <pxPortInitialiseStack>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc4:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d002      	beq.n	8002fd2 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fd0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002fd2:	bf00      	nop
 8002fd4:	3720      	adds	r7, #32
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
	...

08002fdc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002fdc:	b5b0      	push	{r4, r5, r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af02      	add	r7, sp, #8
 8002fe2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002fe4:	f001 faa6 	bl	8004534 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002fe8:	4b3b      	ldr	r3, [pc, #236]	; (80030d8 <prvAddNewTaskToReadyList+0xfc>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	3301      	adds	r3, #1
 8002fee:	4a3a      	ldr	r2, [pc, #232]	; (80030d8 <prvAddNewTaskToReadyList+0xfc>)
 8002ff0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002ff2:	4b3a      	ldr	r3, [pc, #232]	; (80030dc <prvAddNewTaskToReadyList+0x100>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d109      	bne.n	800300e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002ffa:	4a38      	ldr	r2, [pc, #224]	; (80030dc <prvAddNewTaskToReadyList+0x100>)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003000:	4b35      	ldr	r3, [pc, #212]	; (80030d8 <prvAddNewTaskToReadyList+0xfc>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d110      	bne.n	800302a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003008:	f000 fc24 	bl	8003854 <prvInitialiseTaskLists>
 800300c:	e00d      	b.n	800302a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800300e:	4b34      	ldr	r3, [pc, #208]	; (80030e0 <prvAddNewTaskToReadyList+0x104>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d109      	bne.n	800302a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003016:	4b31      	ldr	r3, [pc, #196]	; (80030dc <prvAddNewTaskToReadyList+0x100>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003020:	429a      	cmp	r2, r3
 8003022:	d802      	bhi.n	800302a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003024:	4a2d      	ldr	r2, [pc, #180]	; (80030dc <prvAddNewTaskToReadyList+0x100>)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800302a:	4b2e      	ldr	r3, [pc, #184]	; (80030e4 <prvAddNewTaskToReadyList+0x108>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	3301      	adds	r3, #1
 8003030:	4a2c      	ldr	r2, [pc, #176]	; (80030e4 <prvAddNewTaskToReadyList+0x108>)
 8003032:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003034:	4b2b      	ldr	r3, [pc, #172]	; (80030e4 <prvAddNewTaskToReadyList+0x108>)
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d016      	beq.n	8003070 <prvAddNewTaskToReadyList+0x94>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4618      	mov	r0, r3
 8003046:	f003 ff31 	bl	8006eac <SEGGER_SYSVIEW_OnTaskCreate>
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305a:	461d      	mov	r5, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	461c      	mov	r4, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003066:	1ae3      	subs	r3, r4, r3
 8003068:	9300      	str	r3, [sp, #0]
 800306a:	462b      	mov	r3, r5
 800306c:	f001 fe3c 	bl	8004ce8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4618      	mov	r0, r3
 8003074:	f003 ff9e 	bl	8006fb4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307c:	2201      	movs	r2, #1
 800307e:	409a      	lsls	r2, r3
 8003080:	4b19      	ldr	r3, [pc, #100]	; (80030e8 <prvAddNewTaskToReadyList+0x10c>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4313      	orrs	r3, r2
 8003086:	4a18      	ldr	r2, [pc, #96]	; (80030e8 <prvAddNewTaskToReadyList+0x10c>)
 8003088:	6013      	str	r3, [r2, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800308e:	4613      	mov	r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	4413      	add	r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	4a15      	ldr	r2, [pc, #84]	; (80030ec <prvAddNewTaskToReadyList+0x110>)
 8003098:	441a      	add	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	3304      	adds	r3, #4
 800309e:	4619      	mov	r1, r3
 80030a0:	4610      	mov	r0, r2
 80030a2:	f7ff f8e2 	bl	800226a <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80030a6:	f001 fa75 	bl	8004594 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80030aa:	4b0d      	ldr	r3, [pc, #52]	; (80030e0 <prvAddNewTaskToReadyList+0x104>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00e      	beq.n	80030d0 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80030b2:	4b0a      	ldr	r3, [pc, #40]	; (80030dc <prvAddNewTaskToReadyList+0x100>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030bc:	429a      	cmp	r2, r3
 80030be:	d207      	bcs.n	80030d0 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80030c0:	4b0b      	ldr	r3, [pc, #44]	; (80030f0 <prvAddNewTaskToReadyList+0x114>)
 80030c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030c6:	601a      	str	r2, [r3, #0]
 80030c8:	f3bf 8f4f 	dsb	sy
 80030cc:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80030d0:	bf00      	nop
 80030d2:	3708      	adds	r7, #8
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bdb0      	pop	{r4, r5, r7, pc}
 80030d8:	20000204 	.word	0x20000204
 80030dc:	2000012c 	.word	0x2000012c
 80030e0:	20000210 	.word	0x20000210
 80030e4:	20000220 	.word	0x20000220
 80030e8:	2000020c 	.word	0x2000020c
 80030ec:	20000130 	.word	0x20000130
 80030f0:	e000ed04 	.word	0xe000ed04

080030f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b086      	sub	sp, #24
 80030f8:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80030fa:	4b27      	ldr	r3, [pc, #156]	; (8003198 <vTaskStartScheduler+0xa4>)
 80030fc:	9301      	str	r3, [sp, #4]
 80030fe:	2300      	movs	r3, #0
 8003100:	9300      	str	r3, [sp, #0]
 8003102:	2300      	movs	r3, #0
 8003104:	2282      	movs	r2, #130	; 0x82
 8003106:	4925      	ldr	r1, [pc, #148]	; (800319c <vTaskStartScheduler+0xa8>)
 8003108:	4825      	ldr	r0, [pc, #148]	; (80031a0 <vTaskStartScheduler+0xac>)
 800310a:	f7ff fe8f 	bl	8002e2c <xTaskCreate>
 800310e:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d102      	bne.n	800311c <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8003116:	f000 fd4d 	bl	8003bb4 <xTimerCreateTimerTask>
 800311a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d124      	bne.n	800316c <vTaskStartScheduler+0x78>
        __asm volatile
 8003122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003126:	f383 8811 	msr	BASEPRI, r3
 800312a:	f3bf 8f6f 	isb	sy
 800312e:	f3bf 8f4f 	dsb	sy
 8003132:	60bb      	str	r3, [r7, #8]
    }
 8003134:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8003136:	4b1b      	ldr	r3, [pc, #108]	; (80031a4 <vTaskStartScheduler+0xb0>)
 8003138:	f04f 32ff 	mov.w	r2, #4294967295
 800313c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800313e:	4b1a      	ldr	r3, [pc, #104]	; (80031a8 <vTaskStartScheduler+0xb4>)
 8003140:	2201      	movs	r2, #1
 8003142:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003144:	4b19      	ldr	r3, [pc, #100]	; (80031ac <vTaskStartScheduler+0xb8>)
 8003146:	2200      	movs	r2, #0
 8003148:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800314a:	4b19      	ldr	r3, [pc, #100]	; (80031b0 <vTaskStartScheduler+0xbc>)
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	4b12      	ldr	r3, [pc, #72]	; (8003198 <vTaskStartScheduler+0xa4>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	429a      	cmp	r2, r3
 8003154:	d102      	bne.n	800315c <vTaskStartScheduler+0x68>
 8003156:	f003 fe8d 	bl	8006e74 <SEGGER_SYSVIEW_OnIdle>
 800315a:	e004      	b.n	8003166 <vTaskStartScheduler+0x72>
 800315c:	4b14      	ldr	r3, [pc, #80]	; (80031b0 <vTaskStartScheduler+0xbc>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4618      	mov	r0, r3
 8003162:	f003 fee5 	bl	8006f30 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8003166:	f001 f8c5 	bl	80042f4 <xPortStartScheduler>
 800316a:	e00e      	b.n	800318a <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003172:	d10a      	bne.n	800318a <vTaskStartScheduler+0x96>
        __asm volatile
 8003174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003178:	f383 8811 	msr	BASEPRI, r3
 800317c:	f3bf 8f6f 	isb	sy
 8003180:	f3bf 8f4f 	dsb	sy
 8003184:	607b      	str	r3, [r7, #4]
    }
 8003186:	bf00      	nop
 8003188:	e7fe      	b.n	8003188 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800318a:	4b0a      	ldr	r3, [pc, #40]	; (80031b4 <vTaskStartScheduler+0xc0>)
 800318c:	681b      	ldr	r3, [r3, #0]
}
 800318e:	bf00      	nop
 8003190:	3710      	adds	r7, #16
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	20000228 	.word	0x20000228
 800319c:	08007e10 	.word	0x08007e10
 80031a0:	08003825 	.word	0x08003825
 80031a4:	20000224 	.word	0x20000224
 80031a8:	20000210 	.word	0x20000210
 80031ac:	20000208 	.word	0x20000208
 80031b0:	2000012c 	.word	0x2000012c
 80031b4:	2000000c 	.word	0x2000000c

080031b8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80031bc:	4b04      	ldr	r3, [pc, #16]	; (80031d0 <vTaskSuspendAll+0x18>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	3301      	adds	r3, #1
 80031c2:	4a03      	ldr	r2, [pc, #12]	; (80031d0 <vTaskSuspendAll+0x18>)
 80031c4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80031c6:	bf00      	nop
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr
 80031d0:	2000022c 	.word	0x2000022c

080031d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80031da:	2300      	movs	r3, #0
 80031dc:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80031de:	2300      	movs	r3, #0
 80031e0:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80031e2:	4b43      	ldr	r3, [pc, #268]	; (80032f0 <xTaskResumeAll+0x11c>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d10a      	bne.n	8003200 <xTaskResumeAll+0x2c>
        __asm volatile
 80031ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ee:	f383 8811 	msr	BASEPRI, r3
 80031f2:	f3bf 8f6f 	isb	sy
 80031f6:	f3bf 8f4f 	dsb	sy
 80031fa:	603b      	str	r3, [r7, #0]
    }
 80031fc:	bf00      	nop
 80031fe:	e7fe      	b.n	80031fe <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003200:	f001 f998 	bl	8004534 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003204:	4b3a      	ldr	r3, [pc, #232]	; (80032f0 <xTaskResumeAll+0x11c>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	3b01      	subs	r3, #1
 800320a:	4a39      	ldr	r2, [pc, #228]	; (80032f0 <xTaskResumeAll+0x11c>)
 800320c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800320e:	4b38      	ldr	r3, [pc, #224]	; (80032f0 <xTaskResumeAll+0x11c>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d165      	bne.n	80032e2 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003216:	4b37      	ldr	r3, [pc, #220]	; (80032f4 <xTaskResumeAll+0x120>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d061      	beq.n	80032e2 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800321e:	e032      	b.n	8003286 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003220:	4b35      	ldr	r3, [pc, #212]	; (80032f8 <xTaskResumeAll+0x124>)
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	3318      	adds	r3, #24
 800322c:	4618      	mov	r0, r3
 800322e:	f7ff f879 	bl	8002324 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	3304      	adds	r3, #4
 8003236:	4618      	mov	r0, r3
 8003238:	f7ff f874 	bl	8002324 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	4618      	mov	r0, r3
 8003240:	f003 feb8 	bl	8006fb4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003248:	2201      	movs	r2, #1
 800324a:	409a      	lsls	r2, r3
 800324c:	4b2b      	ldr	r3, [pc, #172]	; (80032fc <xTaskResumeAll+0x128>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4313      	orrs	r3, r2
 8003252:	4a2a      	ldr	r2, [pc, #168]	; (80032fc <xTaskResumeAll+0x128>)
 8003254:	6013      	str	r3, [r2, #0]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800325a:	4613      	mov	r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	4413      	add	r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	4a27      	ldr	r2, [pc, #156]	; (8003300 <xTaskResumeAll+0x12c>)
 8003264:	441a      	add	r2, r3
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	3304      	adds	r3, #4
 800326a:	4619      	mov	r1, r3
 800326c:	4610      	mov	r0, r2
 800326e:	f7fe fffc 	bl	800226a <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003276:	4b23      	ldr	r3, [pc, #140]	; (8003304 <xTaskResumeAll+0x130>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327c:	429a      	cmp	r2, r3
 800327e:	d302      	bcc.n	8003286 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8003280:	4b21      	ldr	r3, [pc, #132]	; (8003308 <xTaskResumeAll+0x134>)
 8003282:	2201      	movs	r2, #1
 8003284:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003286:	4b1c      	ldr	r3, [pc, #112]	; (80032f8 <xTaskResumeAll+0x124>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1c8      	bne.n	8003220 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d001      	beq.n	8003298 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003294:	f000 fb5c 	bl	8003950 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003298:	4b1c      	ldr	r3, [pc, #112]	; (800330c <xTaskResumeAll+0x138>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d010      	beq.n	80032c6 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80032a4:	f000 f858 	bl	8003358 <xTaskIncrementTick>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d002      	beq.n	80032b4 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 80032ae:	4b16      	ldr	r3, [pc, #88]	; (8003308 <xTaskResumeAll+0x134>)
 80032b0:	2201      	movs	r2, #1
 80032b2:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	3b01      	subs	r3, #1
 80032b8:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d1f1      	bne.n	80032a4 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 80032c0:	4b12      	ldr	r3, [pc, #72]	; (800330c <xTaskResumeAll+0x138>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80032c6:	4b10      	ldr	r3, [pc, #64]	; (8003308 <xTaskResumeAll+0x134>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d009      	beq.n	80032e2 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80032ce:	2301      	movs	r3, #1
 80032d0:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80032d2:	4b0f      	ldr	r3, [pc, #60]	; (8003310 <xTaskResumeAll+0x13c>)
 80032d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032d8:	601a      	str	r2, [r3, #0]
 80032da:	f3bf 8f4f 	dsb	sy
 80032de:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80032e2:	f001 f957 	bl	8004594 <vPortExitCritical>

    return xAlreadyYielded;
 80032e6:	68bb      	ldr	r3, [r7, #8]
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	2000022c 	.word	0x2000022c
 80032f4:	20000204 	.word	0x20000204
 80032f8:	200001c4 	.word	0x200001c4
 80032fc:	2000020c 	.word	0x2000020c
 8003300:	20000130 	.word	0x20000130
 8003304:	2000012c 	.word	0x2000012c
 8003308:	20000218 	.word	0x20000218
 800330c:	20000214 	.word	0x20000214
 8003310:	e000ed04 	.word	0xe000ed04

08003314 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800331a:	4b05      	ldr	r3, [pc, #20]	; (8003330 <xTaskGetTickCount+0x1c>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003320:	687b      	ldr	r3, [r7, #4]
}
 8003322:	4618      	mov	r0, r3
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	20000208 	.word	0x20000208

08003334 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800333a:	f001 f9e7 	bl	800470c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800333e:	2300      	movs	r3, #0
 8003340:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8003342:	4b04      	ldr	r3, [pc, #16]	; (8003354 <xTaskGetTickCountFromISR+0x20>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003348:	683b      	ldr	r3, [r7, #0]
}
 800334a:	4618      	mov	r0, r3
 800334c:	3708      	adds	r7, #8
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	20000208 	.word	0x20000208

08003358 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b086      	sub	sp, #24
 800335c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800335e:	2300      	movs	r3, #0
 8003360:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003362:	4b50      	ldr	r3, [pc, #320]	; (80034a4 <xTaskIncrementTick+0x14c>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2b00      	cmp	r3, #0
 8003368:	f040 8092 	bne.w	8003490 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800336c:	4b4e      	ldr	r3, [pc, #312]	; (80034a8 <xTaskIncrementTick+0x150>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	3301      	adds	r3, #1
 8003372:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003374:	4a4c      	ldr	r2, [pc, #304]	; (80034a8 <xTaskIncrementTick+0x150>)
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d120      	bne.n	80033c2 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003380:	4b4a      	ldr	r3, [pc, #296]	; (80034ac <xTaskIncrementTick+0x154>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00a      	beq.n	80033a0 <xTaskIncrementTick+0x48>
        __asm volatile
 800338a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800338e:	f383 8811 	msr	BASEPRI, r3
 8003392:	f3bf 8f6f 	isb	sy
 8003396:	f3bf 8f4f 	dsb	sy
 800339a:	603b      	str	r3, [r7, #0]
    }
 800339c:	bf00      	nop
 800339e:	e7fe      	b.n	800339e <xTaskIncrementTick+0x46>
 80033a0:	4b42      	ldr	r3, [pc, #264]	; (80034ac <xTaskIncrementTick+0x154>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	60fb      	str	r3, [r7, #12]
 80033a6:	4b42      	ldr	r3, [pc, #264]	; (80034b0 <xTaskIncrementTick+0x158>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a40      	ldr	r2, [pc, #256]	; (80034ac <xTaskIncrementTick+0x154>)
 80033ac:	6013      	str	r3, [r2, #0]
 80033ae:	4a40      	ldr	r2, [pc, #256]	; (80034b0 <xTaskIncrementTick+0x158>)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6013      	str	r3, [r2, #0]
 80033b4:	4b3f      	ldr	r3, [pc, #252]	; (80034b4 <xTaskIncrementTick+0x15c>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	3301      	adds	r3, #1
 80033ba:	4a3e      	ldr	r2, [pc, #248]	; (80034b4 <xTaskIncrementTick+0x15c>)
 80033bc:	6013      	str	r3, [r2, #0]
 80033be:	f000 fac7 	bl	8003950 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80033c2:	4b3d      	ldr	r3, [pc, #244]	; (80034b8 <xTaskIncrementTick+0x160>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d34c      	bcc.n	8003466 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033cc:	4b37      	ldr	r3, [pc, #220]	; (80034ac <xTaskIncrementTick+0x154>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d104      	bne.n	80033e0 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033d6:	4b38      	ldr	r3, [pc, #224]	; (80034b8 <xTaskIncrementTick+0x160>)
 80033d8:	f04f 32ff 	mov.w	r2, #4294967295
 80033dc:	601a      	str	r2, [r3, #0]
                    break;
 80033de:	e042      	b.n	8003466 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033e0:	4b32      	ldr	r3, [pc, #200]	; (80034ac <xTaskIncrementTick+0x154>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d203      	bcs.n	8003400 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80033f8:	4a2f      	ldr	r2, [pc, #188]	; (80034b8 <xTaskIncrementTick+0x160>)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80033fe:	e032      	b.n	8003466 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	3304      	adds	r3, #4
 8003404:	4618      	mov	r0, r3
 8003406:	f7fe ff8d 	bl	8002324 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800340e:	2b00      	cmp	r3, #0
 8003410:	d004      	beq.n	800341c <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	3318      	adds	r3, #24
 8003416:	4618      	mov	r0, r3
 8003418:	f7fe ff84 	bl	8002324 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	4618      	mov	r0, r3
 8003420:	f003 fdc8 	bl	8006fb4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003428:	2201      	movs	r2, #1
 800342a:	409a      	lsls	r2, r3
 800342c:	4b23      	ldr	r3, [pc, #140]	; (80034bc <xTaskIncrementTick+0x164>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4313      	orrs	r3, r2
 8003432:	4a22      	ldr	r2, [pc, #136]	; (80034bc <xTaskIncrementTick+0x164>)
 8003434:	6013      	str	r3, [r2, #0]
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800343a:	4613      	mov	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	4413      	add	r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	4a1f      	ldr	r2, [pc, #124]	; (80034c0 <xTaskIncrementTick+0x168>)
 8003444:	441a      	add	r2, r3
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	3304      	adds	r3, #4
 800344a:	4619      	mov	r1, r3
 800344c:	4610      	mov	r0, r2
 800344e:	f7fe ff0c 	bl	800226a <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003456:	4b1b      	ldr	r3, [pc, #108]	; (80034c4 <xTaskIncrementTick+0x16c>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345c:	429a      	cmp	r2, r3
 800345e:	d3b5      	bcc.n	80033cc <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8003460:	2301      	movs	r3, #1
 8003462:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003464:	e7b2      	b.n	80033cc <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003466:	4b17      	ldr	r3, [pc, #92]	; (80034c4 <xTaskIncrementTick+0x16c>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800346c:	4914      	ldr	r1, [pc, #80]	; (80034c0 <xTaskIncrementTick+0x168>)
 800346e:	4613      	mov	r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	4413      	add	r3, r2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	440b      	add	r3, r1
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d901      	bls.n	8003482 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 800347e:	2301      	movs	r3, #1
 8003480:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8003482:	4b11      	ldr	r3, [pc, #68]	; (80034c8 <xTaskIncrementTick+0x170>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d007      	beq.n	800349a <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 800348a:	2301      	movs	r3, #1
 800348c:	617b      	str	r3, [r7, #20]
 800348e:	e004      	b.n	800349a <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003490:	4b0e      	ldr	r3, [pc, #56]	; (80034cc <xTaskIncrementTick+0x174>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	3301      	adds	r3, #1
 8003496:	4a0d      	ldr	r2, [pc, #52]	; (80034cc <xTaskIncrementTick+0x174>)
 8003498:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800349a:	697b      	ldr	r3, [r7, #20]
}
 800349c:	4618      	mov	r0, r3
 800349e:	3718      	adds	r7, #24
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	2000022c 	.word	0x2000022c
 80034a8:	20000208 	.word	0x20000208
 80034ac:	200001bc 	.word	0x200001bc
 80034b0:	200001c0 	.word	0x200001c0
 80034b4:	2000021c 	.word	0x2000021c
 80034b8:	20000224 	.word	0x20000224
 80034bc:	2000020c 	.word	0x2000020c
 80034c0:	20000130 	.word	0x20000130
 80034c4:	2000012c 	.word	0x2000012c
 80034c8:	20000218 	.word	0x20000218
 80034cc:	20000214 	.word	0x20000214

080034d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b086      	sub	sp, #24
 80034d4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80034d6:	4b2d      	ldr	r3, [pc, #180]	; (800358c <vTaskSwitchContext+0xbc>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d003      	beq.n	80034e6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80034de:	4b2c      	ldr	r3, [pc, #176]	; (8003590 <vTaskSwitchContext+0xc0>)
 80034e0:	2201      	movs	r2, #1
 80034e2:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80034e4:	e04d      	b.n	8003582 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 80034e6:	4b2a      	ldr	r3, [pc, #168]	; (8003590 <vTaskSwitchContext+0xc0>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034ec:	4b29      	ldr	r3, [pc, #164]	; (8003594 <vTaskSwitchContext+0xc4>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	fab3 f383 	clz	r3, r3
 80034f8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80034fa:	7afb      	ldrb	r3, [r7, #11]
 80034fc:	f1c3 031f 	rsb	r3, r3, #31
 8003500:	617b      	str	r3, [r7, #20]
 8003502:	4925      	ldr	r1, [pc, #148]	; (8003598 <vTaskSwitchContext+0xc8>)
 8003504:	697a      	ldr	r2, [r7, #20]
 8003506:	4613      	mov	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	4413      	add	r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	440b      	add	r3, r1
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d10a      	bne.n	800352c <vTaskSwitchContext+0x5c>
        __asm volatile
 8003516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800351a:	f383 8811 	msr	BASEPRI, r3
 800351e:	f3bf 8f6f 	isb	sy
 8003522:	f3bf 8f4f 	dsb	sy
 8003526:	607b      	str	r3, [r7, #4]
    }
 8003528:	bf00      	nop
 800352a:	e7fe      	b.n	800352a <vTaskSwitchContext+0x5a>
 800352c:	697a      	ldr	r2, [r7, #20]
 800352e:	4613      	mov	r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	4413      	add	r3, r2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	4a18      	ldr	r2, [pc, #96]	; (8003598 <vTaskSwitchContext+0xc8>)
 8003538:	4413      	add	r3, r2
 800353a:	613b      	str	r3, [r7, #16]
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	685a      	ldr	r2, [r3, #4]
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	605a      	str	r2, [r3, #4]
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	685a      	ldr	r2, [r3, #4]
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	3308      	adds	r3, #8
 800354e:	429a      	cmp	r2, r3
 8003550:	d104      	bne.n	800355c <vTaskSwitchContext+0x8c>
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	685a      	ldr	r2, [r3, #4]
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	605a      	str	r2, [r3, #4]
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	4a0e      	ldr	r2, [pc, #56]	; (800359c <vTaskSwitchContext+0xcc>)
 8003564:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003566:	4b0d      	ldr	r3, [pc, #52]	; (800359c <vTaskSwitchContext+0xcc>)
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	4b0d      	ldr	r3, [pc, #52]	; (80035a0 <vTaskSwitchContext+0xd0>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	429a      	cmp	r2, r3
 8003570:	d102      	bne.n	8003578 <vTaskSwitchContext+0xa8>
 8003572:	f003 fc7f 	bl	8006e74 <SEGGER_SYSVIEW_OnIdle>
}
 8003576:	e004      	b.n	8003582 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8003578:	4b08      	ldr	r3, [pc, #32]	; (800359c <vTaskSwitchContext+0xcc>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4618      	mov	r0, r3
 800357e:	f003 fcd7 	bl	8006f30 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003582:	bf00      	nop
 8003584:	3718      	adds	r7, #24
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	2000022c 	.word	0x2000022c
 8003590:	20000218 	.word	0x20000218
 8003594:	2000020c 	.word	0x2000020c
 8003598:	20000130 	.word	0x20000130
 800359c:	2000012c 	.word	0x2000012c
 80035a0:	20000228 	.word	0x20000228

080035a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d10a      	bne.n	80035ca <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80035b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b8:	f383 8811 	msr	BASEPRI, r3
 80035bc:	f3bf 8f6f 	isb	sy
 80035c0:	f3bf 8f4f 	dsb	sy
 80035c4:	60fb      	str	r3, [r7, #12]
    }
 80035c6:	bf00      	nop
 80035c8:	e7fe      	b.n	80035c8 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80035ca:	4b07      	ldr	r3, [pc, #28]	; (80035e8 <vTaskPlaceOnEventList+0x44>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	3318      	adds	r3, #24
 80035d0:	4619      	mov	r1, r3
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f7fe fe6d 	bl	80022b2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80035d8:	2101      	movs	r1, #1
 80035da:	6838      	ldr	r0, [r7, #0]
 80035dc:	f000 fa72 	bl	8003ac4 <prvAddCurrentTaskToDelayedList>
}
 80035e0:	bf00      	nop
 80035e2:	3710      	adds	r7, #16
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	2000012c 	.word	0x2000012c

080035ec <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b086      	sub	sp, #24
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10a      	bne.n	8003614 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80035fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003602:	f383 8811 	msr	BASEPRI, r3
 8003606:	f3bf 8f6f 	isb	sy
 800360a:	f3bf 8f4f 	dsb	sy
 800360e:	617b      	str	r3, [r7, #20]
    }
 8003610:	bf00      	nop
 8003612:	e7fe      	b.n	8003612 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003614:	4b0b      	ldr	r3, [pc, #44]	; (8003644 <vTaskPlaceOnEventListRestricted+0x58>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	3318      	adds	r3, #24
 800361a:	4619      	mov	r1, r3
 800361c:	68f8      	ldr	r0, [r7, #12]
 800361e:	f7fe fe24 	bl	800226a <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d002      	beq.n	800362e <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8003628:	f04f 33ff 	mov.w	r3, #4294967295
 800362c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800362e:	2024      	movs	r0, #36	; 0x24
 8003630:	f002 ff20 	bl	8006474 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003634:	6879      	ldr	r1, [r7, #4]
 8003636:	68b8      	ldr	r0, [r7, #8]
 8003638:	f000 fa44 	bl	8003ac4 <prvAddCurrentTaskToDelayedList>
    }
 800363c:	bf00      	nop
 800363e:	3718      	adds	r7, #24
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	2000012c 	.word	0x2000012c

08003648 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b086      	sub	sp, #24
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10a      	bne.n	8003674 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800365e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003662:	f383 8811 	msr	BASEPRI, r3
 8003666:	f3bf 8f6f 	isb	sy
 800366a:	f3bf 8f4f 	dsb	sy
 800366e:	60fb      	str	r3, [r7, #12]
    }
 8003670:	bf00      	nop
 8003672:	e7fe      	b.n	8003672 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	3318      	adds	r3, #24
 8003678:	4618      	mov	r0, r3
 800367a:	f7fe fe53 	bl	8002324 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800367e:	4b1f      	ldr	r3, [pc, #124]	; (80036fc <xTaskRemoveFromEventList+0xb4>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d120      	bne.n	80036c8 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	3304      	adds	r3, #4
 800368a:	4618      	mov	r0, r3
 800368c:	f7fe fe4a 	bl	8002324 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	4618      	mov	r0, r3
 8003694:	f003 fc8e 	bl	8006fb4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369c:	2201      	movs	r2, #1
 800369e:	409a      	lsls	r2, r3
 80036a0:	4b17      	ldr	r3, [pc, #92]	; (8003700 <xTaskRemoveFromEventList+0xb8>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	4a16      	ldr	r2, [pc, #88]	; (8003700 <xTaskRemoveFromEventList+0xb8>)
 80036a8:	6013      	str	r3, [r2, #0]
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ae:	4613      	mov	r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	4413      	add	r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	4a13      	ldr	r2, [pc, #76]	; (8003704 <xTaskRemoveFromEventList+0xbc>)
 80036b8:	441a      	add	r2, r3
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	3304      	adds	r3, #4
 80036be:	4619      	mov	r1, r3
 80036c0:	4610      	mov	r0, r2
 80036c2:	f7fe fdd2 	bl	800226a <vListInsertEnd>
 80036c6:	e005      	b.n	80036d4 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	3318      	adds	r3, #24
 80036cc:	4619      	mov	r1, r3
 80036ce:	480e      	ldr	r0, [pc, #56]	; (8003708 <xTaskRemoveFromEventList+0xc0>)
 80036d0:	f7fe fdcb 	bl	800226a <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036d8:	4b0c      	ldr	r3, [pc, #48]	; (800370c <xTaskRemoveFromEventList+0xc4>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036de:	429a      	cmp	r2, r3
 80036e0:	d905      	bls.n	80036ee <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80036e2:	2301      	movs	r3, #1
 80036e4:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80036e6:	4b0a      	ldr	r3, [pc, #40]	; (8003710 <xTaskRemoveFromEventList+0xc8>)
 80036e8:	2201      	movs	r2, #1
 80036ea:	601a      	str	r2, [r3, #0]
 80036ec:	e001      	b.n	80036f2 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 80036ee:	2300      	movs	r3, #0
 80036f0:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80036f2:	697b      	ldr	r3, [r7, #20]
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3718      	adds	r7, #24
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	2000022c 	.word	0x2000022c
 8003700:	2000020c 	.word	0x2000020c
 8003704:	20000130 	.word	0x20000130
 8003708:	200001c4 	.word	0x200001c4
 800370c:	2000012c 	.word	0x2000012c
 8003710:	20000218 	.word	0x20000218

08003714 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800371c:	4b06      	ldr	r3, [pc, #24]	; (8003738 <vTaskInternalSetTimeOutState+0x24>)
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003724:	4b05      	ldr	r3, [pc, #20]	; (800373c <vTaskInternalSetTimeOutState+0x28>)
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	605a      	str	r2, [r3, #4]
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr
 8003738:	2000021c 	.word	0x2000021c
 800373c:	20000208 	.word	0x20000208

08003740 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b088      	sub	sp, #32
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d10a      	bne.n	8003766 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003754:	f383 8811 	msr	BASEPRI, r3
 8003758:	f3bf 8f6f 	isb	sy
 800375c:	f3bf 8f4f 	dsb	sy
 8003760:	613b      	str	r3, [r7, #16]
    }
 8003762:	bf00      	nop
 8003764:	e7fe      	b.n	8003764 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d10a      	bne.n	8003782 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800376c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003770:	f383 8811 	msr	BASEPRI, r3
 8003774:	f3bf 8f6f 	isb	sy
 8003778:	f3bf 8f4f 	dsb	sy
 800377c:	60fb      	str	r3, [r7, #12]
    }
 800377e:	bf00      	nop
 8003780:	e7fe      	b.n	8003780 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003782:	f000 fed7 	bl	8004534 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003786:	4b1f      	ldr	r3, [pc, #124]	; (8003804 <xTaskCheckForTimeOut+0xc4>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	69ba      	ldr	r2, [r7, #24]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800379e:	d102      	bne.n	80037a6 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80037a0:	2300      	movs	r3, #0
 80037a2:	61fb      	str	r3, [r7, #28]
 80037a4:	e026      	b.n	80037f4 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	4b17      	ldr	r3, [pc, #92]	; (8003808 <xTaskCheckForTimeOut+0xc8>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d00a      	beq.n	80037c8 <xTaskCheckForTimeOut+0x88>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	69ba      	ldr	r2, [r7, #24]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d305      	bcc.n	80037c8 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80037bc:	2301      	movs	r3, #1
 80037be:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	2200      	movs	r2, #0
 80037c4:	601a      	str	r2, [r3, #0]
 80037c6:	e015      	b.n	80037f4 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	697a      	ldr	r2, [r7, #20]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d20b      	bcs.n	80037ea <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	1ad2      	subs	r2, r2, r3
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f7ff ff98 	bl	8003714 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80037e4:	2300      	movs	r3, #0
 80037e6:	61fb      	str	r3, [r7, #28]
 80037e8:	e004      	b.n	80037f4 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	2200      	movs	r2, #0
 80037ee:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80037f0:	2301      	movs	r3, #1
 80037f2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80037f4:	f000 fece 	bl	8004594 <vPortExitCritical>

    return xReturn;
 80037f8:	69fb      	ldr	r3, [r7, #28]
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3720      	adds	r7, #32
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	20000208 	.word	0x20000208
 8003808:	2000021c 	.word	0x2000021c

0800380c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003810:	4b03      	ldr	r3, [pc, #12]	; (8003820 <vTaskMissedYield+0x14>)
 8003812:	2201      	movs	r2, #1
 8003814:	601a      	str	r2, [r3, #0]
}
 8003816:	bf00      	nop
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr
 8003820:	20000218 	.word	0x20000218

08003824 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800382c:	f000 f852 	bl	80038d4 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003830:	4b06      	ldr	r3, [pc, #24]	; (800384c <prvIdleTask+0x28>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d9f9      	bls.n	800382c <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003838:	4b05      	ldr	r3, [pc, #20]	; (8003850 <prvIdleTask+0x2c>)
 800383a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800383e:	601a      	str	r2, [r3, #0]
 8003840:	f3bf 8f4f 	dsb	sy
 8003844:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003848:	e7f0      	b.n	800382c <prvIdleTask+0x8>
 800384a:	bf00      	nop
 800384c:	20000130 	.word	0x20000130
 8003850:	e000ed04 	.word	0xe000ed04

08003854 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800385a:	2300      	movs	r3, #0
 800385c:	607b      	str	r3, [r7, #4]
 800385e:	e00c      	b.n	800387a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	4613      	mov	r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	4413      	add	r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	4a12      	ldr	r2, [pc, #72]	; (80038b4 <prvInitialiseTaskLists+0x60>)
 800386c:	4413      	add	r3, r2
 800386e:	4618      	mov	r0, r3
 8003870:	f7fe fcce 	bl	8002210 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	3301      	adds	r3, #1
 8003878:	607b      	str	r3, [r7, #4]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2b04      	cmp	r3, #4
 800387e:	d9ef      	bls.n	8003860 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003880:	480d      	ldr	r0, [pc, #52]	; (80038b8 <prvInitialiseTaskLists+0x64>)
 8003882:	f7fe fcc5 	bl	8002210 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003886:	480d      	ldr	r0, [pc, #52]	; (80038bc <prvInitialiseTaskLists+0x68>)
 8003888:	f7fe fcc2 	bl	8002210 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800388c:	480c      	ldr	r0, [pc, #48]	; (80038c0 <prvInitialiseTaskLists+0x6c>)
 800388e:	f7fe fcbf 	bl	8002210 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003892:	480c      	ldr	r0, [pc, #48]	; (80038c4 <prvInitialiseTaskLists+0x70>)
 8003894:	f7fe fcbc 	bl	8002210 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003898:	480b      	ldr	r0, [pc, #44]	; (80038c8 <prvInitialiseTaskLists+0x74>)
 800389a:	f7fe fcb9 	bl	8002210 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800389e:	4b0b      	ldr	r3, [pc, #44]	; (80038cc <prvInitialiseTaskLists+0x78>)
 80038a0:	4a05      	ldr	r2, [pc, #20]	; (80038b8 <prvInitialiseTaskLists+0x64>)
 80038a2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80038a4:	4b0a      	ldr	r3, [pc, #40]	; (80038d0 <prvInitialiseTaskLists+0x7c>)
 80038a6:	4a05      	ldr	r2, [pc, #20]	; (80038bc <prvInitialiseTaskLists+0x68>)
 80038a8:	601a      	str	r2, [r3, #0]
}
 80038aa:	bf00      	nop
 80038ac:	3708      	adds	r7, #8
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	20000130 	.word	0x20000130
 80038b8:	20000194 	.word	0x20000194
 80038bc:	200001a8 	.word	0x200001a8
 80038c0:	200001c4 	.word	0x200001c4
 80038c4:	200001d8 	.word	0x200001d8
 80038c8:	200001f0 	.word	0x200001f0
 80038cc:	200001bc 	.word	0x200001bc
 80038d0:	200001c0 	.word	0x200001c0

080038d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80038da:	e019      	b.n	8003910 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80038dc:	f000 fe2a 	bl	8004534 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038e0:	4b10      	ldr	r3, [pc, #64]	; (8003924 <prvCheckTasksWaitingTermination+0x50>)
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	3304      	adds	r3, #4
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7fe fd19 	bl	8002324 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80038f2:	4b0d      	ldr	r3, [pc, #52]	; (8003928 <prvCheckTasksWaitingTermination+0x54>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	3b01      	subs	r3, #1
 80038f8:	4a0b      	ldr	r2, [pc, #44]	; (8003928 <prvCheckTasksWaitingTermination+0x54>)
 80038fa:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80038fc:	4b0b      	ldr	r3, [pc, #44]	; (800392c <prvCheckTasksWaitingTermination+0x58>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	3b01      	subs	r3, #1
 8003902:	4a0a      	ldr	r2, [pc, #40]	; (800392c <prvCheckTasksWaitingTermination+0x58>)
 8003904:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003906:	f000 fe45 	bl	8004594 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 f810 	bl	8003930 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003910:	4b06      	ldr	r3, [pc, #24]	; (800392c <prvCheckTasksWaitingTermination+0x58>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d1e1      	bne.n	80038dc <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003918:	bf00      	nop
 800391a:	bf00      	nop
 800391c:	3708      	adds	r7, #8
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	200001d8 	.word	0x200001d8
 8003928:	20000204 	.word	0x20000204
 800392c:	200001ec 	.word	0x200001ec

08003930 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393c:	4618      	mov	r0, r3
 800393e:	f001 f805 	bl	800494c <vPortFree>
                vPortFree( pxTCB );
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f001 f802 	bl	800494c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003948:	bf00      	nop
 800394a:	3708      	adds	r7, #8
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003950:	b480      	push	{r7}
 8003952:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003954:	4b0a      	ldr	r3, [pc, #40]	; (8003980 <prvResetNextTaskUnblockTime+0x30>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d104      	bne.n	8003968 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800395e:	4b09      	ldr	r3, [pc, #36]	; (8003984 <prvResetNextTaskUnblockTime+0x34>)
 8003960:	f04f 32ff 	mov.w	r2, #4294967295
 8003964:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003966:	e005      	b.n	8003974 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003968:	4b05      	ldr	r3, [pc, #20]	; (8003980 <prvResetNextTaskUnblockTime+0x30>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a04      	ldr	r2, [pc, #16]	; (8003984 <prvResetNextTaskUnblockTime+0x34>)
 8003972:	6013      	str	r3, [r2, #0]
}
 8003974:	bf00      	nop
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	200001bc 	.word	0x200001bc
 8003984:	20000224 	.word	0x20000224

08003988 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800398e:	4b0b      	ldr	r3, [pc, #44]	; (80039bc <xTaskGetSchedulerState+0x34>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d102      	bne.n	800399c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003996:	2301      	movs	r3, #1
 8003998:	607b      	str	r3, [r7, #4]
 800399a:	e008      	b.n	80039ae <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800399c:	4b08      	ldr	r3, [pc, #32]	; (80039c0 <xTaskGetSchedulerState+0x38>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d102      	bne.n	80039aa <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80039a4:	2302      	movs	r3, #2
 80039a6:	607b      	str	r3, [r7, #4]
 80039a8:	e001      	b.n	80039ae <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80039aa:	2300      	movs	r3, #0
 80039ac:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80039ae:	687b      	ldr	r3, [r7, #4]
    }
 80039b0:	4618      	mov	r0, r3
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr
 80039bc:	20000210 	.word	0x20000210
 80039c0:	2000022c 	.word	0x2000022c

080039c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b086      	sub	sp, #24
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80039d0:	2300      	movs	r3, #0
 80039d2:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d068      	beq.n	8003aac <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80039da:	4b37      	ldr	r3, [pc, #220]	; (8003ab8 <xTaskPriorityDisinherit+0xf4>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	693a      	ldr	r2, [r7, #16]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d00a      	beq.n	80039fa <xTaskPriorityDisinherit+0x36>
        __asm volatile
 80039e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e8:	f383 8811 	msr	BASEPRI, r3
 80039ec:	f3bf 8f6f 	isb	sy
 80039f0:	f3bf 8f4f 	dsb	sy
 80039f4:	60fb      	str	r3, [r7, #12]
    }
 80039f6:	bf00      	nop
 80039f8:	e7fe      	b.n	80039f8 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d10a      	bne.n	8003a18 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8003a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a06:	f383 8811 	msr	BASEPRI, r3
 8003a0a:	f3bf 8f6f 	isb	sy
 8003a0e:	f3bf 8f4f 	dsb	sy
 8003a12:	60bb      	str	r3, [r7, #8]
    }
 8003a14:	bf00      	nop
 8003a16:	e7fe      	b.n	8003a16 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a1c:	1e5a      	subs	r2, r3, #1
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d03e      	beq.n	8003aac <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d13a      	bne.n	8003aac <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	3304      	adds	r3, #4
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7fe fc72 	bl	8002324 <uxListRemove>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d10a      	bne.n	8003a5c <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a50:	43da      	mvns	r2, r3
 8003a52:	4b1a      	ldr	r3, [pc, #104]	; (8003abc <xTaskPriorityDisinherit+0xf8>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4013      	ands	r3, r2
 8003a58:	4a18      	ldr	r2, [pc, #96]	; (8003abc <xTaskPriorityDisinherit+0xf8>)
 8003a5a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4619      	mov	r1, r3
 8003a60:	204a      	movs	r0, #74	; 0x4a
 8003a62:	f002 fd25 	bl	80064b0 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a72:	f1c3 0205 	rsb	r2, r3, #5
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7e:	2201      	movs	r2, #1
 8003a80:	409a      	lsls	r2, r3
 8003a82:	4b0e      	ldr	r3, [pc, #56]	; (8003abc <xTaskPriorityDisinherit+0xf8>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	4a0c      	ldr	r2, [pc, #48]	; (8003abc <xTaskPriorityDisinherit+0xf8>)
 8003a8a:	6013      	str	r3, [r2, #0]
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a90:	4613      	mov	r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	4413      	add	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	4a09      	ldr	r2, [pc, #36]	; (8003ac0 <xTaskPriorityDisinherit+0xfc>)
 8003a9a:	441a      	add	r2, r3
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	3304      	adds	r3, #4
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	4610      	mov	r0, r2
 8003aa4:	f7fe fbe1 	bl	800226a <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003aac:	697b      	ldr	r3, [r7, #20]
    }
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3718      	adds	r7, #24
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	2000012c 	.word	0x2000012c
 8003abc:	2000020c 	.word	0x2000020c
 8003ac0:	20000130 	.word	0x20000130

08003ac4 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003ace:	4b32      	ldr	r3, [pc, #200]	; (8003b98 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ad4:	4b31      	ldr	r3, [pc, #196]	; (8003b9c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	3304      	adds	r3, #4
 8003ada:	4618      	mov	r0, r3
 8003adc:	f7fe fc22 	bl	8002324 <uxListRemove>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d10b      	bne.n	8003afe <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003ae6:	4b2d      	ldr	r3, [pc, #180]	; (8003b9c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aec:	2201      	movs	r2, #1
 8003aee:	fa02 f303 	lsl.w	r3, r2, r3
 8003af2:	43da      	mvns	r2, r3
 8003af4:	4b2a      	ldr	r3, [pc, #168]	; (8003ba0 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4013      	ands	r3, r2
 8003afa:	4a29      	ldr	r2, [pc, #164]	; (8003ba0 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003afc:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b04:	d110      	bne.n	8003b28 <prvAddCurrentTaskToDelayedList+0x64>
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d00d      	beq.n	8003b28 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003b0c:	4b23      	ldr	r3, [pc, #140]	; (8003b9c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	211b      	movs	r1, #27
 8003b12:	4618      	mov	r0, r3
 8003b14:	f003 fa90 	bl	8007038 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b18:	4b20      	ldr	r3, [pc, #128]	; (8003b9c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	3304      	adds	r3, #4
 8003b1e:	4619      	mov	r1, r3
 8003b20:	4820      	ldr	r0, [pc, #128]	; (8003ba4 <prvAddCurrentTaskToDelayedList+0xe0>)
 8003b22:	f7fe fba2 	bl	800226a <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003b26:	e032      	b.n	8003b8e <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003b30:	4b1a      	ldr	r3, [pc, #104]	; (8003b9c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68ba      	ldr	r2, [r7, #8]
 8003b36:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003b38:	68ba      	ldr	r2, [r7, #8]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d20f      	bcs.n	8003b60 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003b40:	4b16      	ldr	r3, [pc, #88]	; (8003b9c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2104      	movs	r1, #4
 8003b46:	4618      	mov	r0, r3
 8003b48:	f003 fa76 	bl	8007038 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b4c:	4b16      	ldr	r3, [pc, #88]	; (8003ba8 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	4b12      	ldr	r3, [pc, #72]	; (8003b9c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	3304      	adds	r3, #4
 8003b56:	4619      	mov	r1, r3
 8003b58:	4610      	mov	r0, r2
 8003b5a:	f7fe fbaa 	bl	80022b2 <vListInsert>
}
 8003b5e:	e016      	b.n	8003b8e <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003b60:	4b0e      	ldr	r3, [pc, #56]	; (8003b9c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2104      	movs	r1, #4
 8003b66:	4618      	mov	r0, r3
 8003b68:	f003 fa66 	bl	8007038 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b6c:	4b0f      	ldr	r3, [pc, #60]	; (8003bac <prvAddCurrentTaskToDelayedList+0xe8>)
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	4b0a      	ldr	r3, [pc, #40]	; (8003b9c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	3304      	adds	r3, #4
 8003b76:	4619      	mov	r1, r3
 8003b78:	4610      	mov	r0, r2
 8003b7a:	f7fe fb9a 	bl	80022b2 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003b7e:	4b0c      	ldr	r3, [pc, #48]	; (8003bb0 <prvAddCurrentTaskToDelayedList+0xec>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	68ba      	ldr	r2, [r7, #8]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d202      	bcs.n	8003b8e <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8003b88:	4a09      	ldr	r2, [pc, #36]	; (8003bb0 <prvAddCurrentTaskToDelayedList+0xec>)
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	6013      	str	r3, [r2, #0]
}
 8003b8e:	bf00      	nop
 8003b90:	3710      	adds	r7, #16
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	20000208 	.word	0x20000208
 8003b9c:	2000012c 	.word	0x2000012c
 8003ba0:	2000020c 	.word	0x2000020c
 8003ba4:	200001f0 	.word	0x200001f0
 8003ba8:	200001c0 	.word	0x200001c0
 8003bac:	200001bc 	.word	0x200001bc
 8003bb0:	20000224 	.word	0x20000224

08003bb4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003bbe:	f000 fad5 	bl	800416c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003bc2:	4b11      	ldr	r3, [pc, #68]	; (8003c08 <xTimerCreateTimerTask+0x54>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00b      	beq.n	8003be2 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003bca:	4b10      	ldr	r3, [pc, #64]	; (8003c0c <xTimerCreateTimerTask+0x58>)
 8003bcc:	9301      	str	r3, [sp, #4]
 8003bce:	2302      	movs	r3, #2
 8003bd0:	9300      	str	r3, [sp, #0]
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003bd8:	490d      	ldr	r1, [pc, #52]	; (8003c10 <xTimerCreateTimerTask+0x5c>)
 8003bda:	480e      	ldr	r0, [pc, #56]	; (8003c14 <xTimerCreateTimerTask+0x60>)
 8003bdc:	f7ff f926 	bl	8002e2c <xTaskCreate>
 8003be0:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d10a      	bne.n	8003bfe <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bec:	f383 8811 	msr	BASEPRI, r3
 8003bf0:	f3bf 8f6f 	isb	sy
 8003bf4:	f3bf 8f4f 	dsb	sy
 8003bf8:	603b      	str	r3, [r7, #0]
    }
 8003bfa:	bf00      	nop
 8003bfc:	e7fe      	b.n	8003bfc <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003bfe:	687b      	ldr	r3, [r7, #4]
    }
 8003c00:	4618      	mov	r0, r3
 8003c02:	3708      	adds	r7, #8
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	20000260 	.word	0x20000260
 8003c0c:	20000264 	.word	0x20000264
 8003c10:	08007e18 	.word	0x08007e18
 8003c14:	08003d4d 	.word	0x08003d4d

08003c18 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b08a      	sub	sp, #40	; 0x28
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]
 8003c24:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003c26:	2300      	movs	r3, #0
 8003c28:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d10a      	bne.n	8003c46 <xTimerGenericCommand+0x2e>
        __asm volatile
 8003c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c34:	f383 8811 	msr	BASEPRI, r3
 8003c38:	f3bf 8f6f 	isb	sy
 8003c3c:	f3bf 8f4f 	dsb	sy
 8003c40:	623b      	str	r3, [r7, #32]
    }
 8003c42:	bf00      	nop
 8003c44:	e7fe      	b.n	8003c44 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003c46:	4b1a      	ldr	r3, [pc, #104]	; (8003cb0 <xTimerGenericCommand+0x98>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d02a      	beq.n	8003ca4 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	2b05      	cmp	r3, #5
 8003c5e:	dc18      	bgt.n	8003c92 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003c60:	f7ff fe92 	bl	8003988 <xTaskGetSchedulerState>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d109      	bne.n	8003c7e <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003c6a:	4b11      	ldr	r3, [pc, #68]	; (8003cb0 <xTimerGenericCommand+0x98>)
 8003c6c:	6818      	ldr	r0, [r3, #0]
 8003c6e:	f107 0114 	add.w	r1, r7, #20
 8003c72:	2300      	movs	r3, #0
 8003c74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c76:	f7fe fc6f 	bl	8002558 <xQueueGenericSend>
 8003c7a:	6278      	str	r0, [r7, #36]	; 0x24
 8003c7c:	e012      	b.n	8003ca4 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003c7e:	4b0c      	ldr	r3, [pc, #48]	; (8003cb0 <xTimerGenericCommand+0x98>)
 8003c80:	6818      	ldr	r0, [r3, #0]
 8003c82:	f107 0114 	add.w	r1, r7, #20
 8003c86:	2300      	movs	r3, #0
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f7fe fc65 	bl	8002558 <xQueueGenericSend>
 8003c8e:	6278      	str	r0, [r7, #36]	; 0x24
 8003c90:	e008      	b.n	8003ca4 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003c92:	4b07      	ldr	r3, [pc, #28]	; (8003cb0 <xTimerGenericCommand+0x98>)
 8003c94:	6818      	ldr	r0, [r3, #0]
 8003c96:	f107 0114 	add.w	r1, r7, #20
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	683a      	ldr	r2, [r7, #0]
 8003c9e:	f7fe fd81 	bl	80027a4 <xQueueGenericSendFromISR>
 8003ca2:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3728      	adds	r7, #40	; 0x28
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	20000260 	.word	0x20000260

08003cb4 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b088      	sub	sp, #32
 8003cb8:	af02      	add	r7, sp, #8
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cbe:	4b22      	ldr	r3, [pc, #136]	; (8003d48 <prvProcessExpiredTimer+0x94>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	3304      	adds	r3, #4
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f7fe fb29 	bl	8002324 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003cd8:	f003 0304 	and.w	r3, r3, #4
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d022      	beq.n	8003d26 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	699a      	ldr	r2, [r3, #24]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	18d1      	adds	r1, r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	683a      	ldr	r2, [r7, #0]
 8003cec:	6978      	ldr	r0, [r7, #20]
 8003cee:	f000 f8d1 	bl	8003e94 <prvInsertTimerInActiveList>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d01f      	beq.n	8003d38 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	9300      	str	r3, [sp, #0]
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	2100      	movs	r1, #0
 8003d02:	6978      	ldr	r0, [r7, #20]
 8003d04:	f7ff ff88 	bl	8003c18 <xTimerGenericCommand>
 8003d08:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d113      	bne.n	8003d38 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8003d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d14:	f383 8811 	msr	BASEPRI, r3
 8003d18:	f3bf 8f6f 	isb	sy
 8003d1c:	f3bf 8f4f 	dsb	sy
 8003d20:	60fb      	str	r3, [r7, #12]
    }
 8003d22:	bf00      	nop
 8003d24:	e7fe      	b.n	8003d24 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d2c:	f023 0301 	bic.w	r3, r3, #1
 8003d30:	b2da      	uxtb	r2, r3
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	6a1b      	ldr	r3, [r3, #32]
 8003d3c:	6978      	ldr	r0, [r7, #20]
 8003d3e:	4798      	blx	r3
    }
 8003d40:	bf00      	nop
 8003d42:	3718      	adds	r7, #24
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	20000258 	.word	0x20000258

08003d4c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003d54:	f107 0308 	add.w	r3, r7, #8
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f000 f857 	bl	8003e0c <prvGetNextExpireTime>
 8003d5e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	4619      	mov	r1, r3
 8003d64:	68f8      	ldr	r0, [r7, #12]
 8003d66:	f000 f803 	bl	8003d70 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003d6a:	f000 f8d5 	bl	8003f18 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003d6e:	e7f1      	b.n	8003d54 <prvTimerTask+0x8>

08003d70 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003d7a:	f7ff fa1d 	bl	80031b8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003d7e:	f107 0308 	add.w	r3, r7, #8
 8003d82:	4618      	mov	r0, r3
 8003d84:	f000 f866 	bl	8003e54 <prvSampleTimeNow>
 8003d88:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d130      	bne.n	8003df2 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d10a      	bne.n	8003dac <prvProcessTimerOrBlockTask+0x3c>
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d806      	bhi.n	8003dac <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003d9e:	f7ff fa19 	bl	80031d4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003da2:	68f9      	ldr	r1, [r7, #12]
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f7ff ff85 	bl	8003cb4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003daa:	e024      	b.n	8003df6 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d008      	beq.n	8003dc4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003db2:	4b13      	ldr	r3, [pc, #76]	; (8003e00 <prvProcessTimerOrBlockTask+0x90>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d101      	bne.n	8003dc0 <prvProcessTimerOrBlockTask+0x50>
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e000      	b.n	8003dc2 <prvProcessTimerOrBlockTask+0x52>
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003dc4:	4b0f      	ldr	r3, [pc, #60]	; (8003e04 <prvProcessTimerOrBlockTask+0x94>)
 8003dc6:	6818      	ldr	r0, [r3, #0]
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	683a      	ldr	r2, [r7, #0]
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	f7fe fff7 	bl	8002dc4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003dd6:	f7ff f9fd 	bl	80031d4 <xTaskResumeAll>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d10a      	bne.n	8003df6 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003de0:	4b09      	ldr	r3, [pc, #36]	; (8003e08 <prvProcessTimerOrBlockTask+0x98>)
 8003de2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003de6:	601a      	str	r2, [r3, #0]
 8003de8:	f3bf 8f4f 	dsb	sy
 8003dec:	f3bf 8f6f 	isb	sy
    }
 8003df0:	e001      	b.n	8003df6 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003df2:	f7ff f9ef 	bl	80031d4 <xTaskResumeAll>
    }
 8003df6:	bf00      	nop
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	2000025c 	.word	0x2000025c
 8003e04:	20000260 	.word	0x20000260
 8003e08:	e000ed04 	.word	0xe000ed04

08003e0c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003e0c:	b480      	push	{r7}
 8003e0e:	b085      	sub	sp, #20
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003e14:	4b0e      	ldr	r3, [pc, #56]	; (8003e50 <prvGetNextExpireTime+0x44>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d101      	bne.n	8003e22 <prvGetNextExpireTime+0x16>
 8003e1e:	2201      	movs	r2, #1
 8003e20:	e000      	b.n	8003e24 <prvGetNextExpireTime+0x18>
 8003e22:	2200      	movs	r2, #0
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d105      	bne.n	8003e3c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003e30:	4b07      	ldr	r3, [pc, #28]	; (8003e50 <prvGetNextExpireTime+0x44>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	60fb      	str	r3, [r7, #12]
 8003e3a:	e001      	b.n	8003e40 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003e40:	68fb      	ldr	r3, [r7, #12]
    }
 8003e42:	4618      	mov	r0, r3
 8003e44:	3714      	adds	r7, #20
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	20000258 	.word	0x20000258

08003e54 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003e5c:	f7ff fa5a 	bl	8003314 <xTaskGetTickCount>
 8003e60:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003e62:	4b0b      	ldr	r3, [pc, #44]	; (8003e90 <prvSampleTimeNow+0x3c>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d205      	bcs.n	8003e78 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003e6c:	f000 f91a 	bl	80040a4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	601a      	str	r2, [r3, #0]
 8003e76:	e002      	b.n	8003e7e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003e7e:	4a04      	ldr	r2, [pc, #16]	; (8003e90 <prvSampleTimeNow+0x3c>)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003e84:	68fb      	ldr	r3, [r7, #12]
    }
 8003e86:	4618      	mov	r0, r3
 8003e88:	3710      	adds	r7, #16
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	20000268 	.word	0x20000268

08003e94 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b086      	sub	sp, #24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	607a      	str	r2, [r7, #4]
 8003ea0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	68ba      	ldr	r2, [r7, #8]
 8003eaa:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003eb2:	68ba      	ldr	r2, [r7, #8]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d812      	bhi.n	8003ee0 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	1ad2      	subs	r2, r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d302      	bcc.n	8003ece <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	617b      	str	r3, [r7, #20]
 8003ecc:	e01b      	b.n	8003f06 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003ece:	4b10      	ldr	r3, [pc, #64]	; (8003f10 <prvInsertTimerInActiveList+0x7c>)
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	3304      	adds	r3, #4
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	4610      	mov	r0, r2
 8003eda:	f7fe f9ea 	bl	80022b2 <vListInsert>
 8003ede:	e012      	b.n	8003f06 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d206      	bcs.n	8003ef6 <prvInsertTimerInActiveList+0x62>
 8003ee8:	68ba      	ldr	r2, [r7, #8]
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d302      	bcc.n	8003ef6 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	617b      	str	r3, [r7, #20]
 8003ef4:	e007      	b.n	8003f06 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003ef6:	4b07      	ldr	r3, [pc, #28]	; (8003f14 <prvInsertTimerInActiveList+0x80>)
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	3304      	adds	r3, #4
 8003efe:	4619      	mov	r1, r3
 8003f00:	4610      	mov	r0, r2
 8003f02:	f7fe f9d6 	bl	80022b2 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003f06:	697b      	ldr	r3, [r7, #20]
    }
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3718      	adds	r7, #24
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	2000025c 	.word	0x2000025c
 8003f14:	20000258 	.word	0x20000258

08003f18 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b08c      	sub	sp, #48	; 0x30
 8003f1c:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003f1e:	e0ae      	b.n	800407e <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	f2c0 80aa 	blt.w	800407c <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2e:	695b      	ldr	r3, [r3, #20]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d004      	beq.n	8003f3e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f36:	3304      	adds	r3, #4
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f7fe f9f3 	bl	8002324 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003f3e:	1d3b      	adds	r3, r7, #4
 8003f40:	4618      	mov	r0, r3
 8003f42:	f7ff ff87 	bl	8003e54 <prvSampleTimeNow>
 8003f46:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	2b09      	cmp	r3, #9
 8003f4c:	f200 8097 	bhi.w	800407e <prvProcessReceivedCommands+0x166>
 8003f50:	a201      	add	r2, pc, #4	; (adr r2, 8003f58 <prvProcessReceivedCommands+0x40>)
 8003f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f56:	bf00      	nop
 8003f58:	08003f81 	.word	0x08003f81
 8003f5c:	08003f81 	.word	0x08003f81
 8003f60:	08003f81 	.word	0x08003f81
 8003f64:	08003ff5 	.word	0x08003ff5
 8003f68:	08004009 	.word	0x08004009
 8003f6c:	08004053 	.word	0x08004053
 8003f70:	08003f81 	.word	0x08003f81
 8003f74:	08003f81 	.word	0x08003f81
 8003f78:	08003ff5 	.word	0x08003ff5
 8003f7c:	08004009 	.word	0x08004009
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f86:	f043 0301 	orr.w	r3, r3, #1
 8003f8a:	b2da      	uxtb	r2, r3
 8003f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	18d1      	adds	r1, r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6a3a      	ldr	r2, [r7, #32]
 8003f9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003fa0:	f7ff ff78 	bl	8003e94 <prvInsertTimerInActiveList>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d069      	beq.n	800407e <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fac:	6a1b      	ldr	r3, [r3, #32]
 8003fae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003fb0:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fb8:	f003 0304 	and.w	r3, r3, #4
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d05e      	beq.n	800407e <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc4:	699b      	ldr	r3, [r3, #24]
 8003fc6:	441a      	add	r2, r3
 8003fc8:	2300      	movs	r3, #0
 8003fca:	9300      	str	r3, [sp, #0]
 8003fcc:	2300      	movs	r3, #0
 8003fce:	2100      	movs	r1, #0
 8003fd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003fd2:	f7ff fe21 	bl	8003c18 <xTimerGenericCommand>
 8003fd6:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d14f      	bne.n	800407e <prvProcessReceivedCommands+0x166>
        __asm volatile
 8003fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe2:	f383 8811 	msr	BASEPRI, r3
 8003fe6:	f3bf 8f6f 	isb	sy
 8003fea:	f3bf 8f4f 	dsb	sy
 8003fee:	61bb      	str	r3, [r7, #24]
    }
 8003ff0:	bf00      	nop
 8003ff2:	e7fe      	b.n	8003ff2 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ffa:	f023 0301 	bic.w	r3, r3, #1
 8003ffe:	b2da      	uxtb	r2, r3
 8004000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004002:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004006:	e03a      	b.n	800407e <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800400e:	f043 0301 	orr.w	r3, r3, #1
 8004012:	b2da      	uxtb	r2, r3
 8004014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004016:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004022:	699b      	ldr	r3, [r3, #24]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d10a      	bne.n	800403e <prvProcessReceivedCommands+0x126>
        __asm volatile
 8004028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800402c:	f383 8811 	msr	BASEPRI, r3
 8004030:	f3bf 8f6f 	isb	sy
 8004034:	f3bf 8f4f 	dsb	sy
 8004038:	617b      	str	r3, [r7, #20]
    }
 800403a:	bf00      	nop
 800403c:	e7fe      	b.n	800403c <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800403e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004040:	699a      	ldr	r2, [r3, #24]
 8004042:	6a3b      	ldr	r3, [r7, #32]
 8004044:	18d1      	adds	r1, r2, r3
 8004046:	6a3b      	ldr	r3, [r7, #32]
 8004048:	6a3a      	ldr	r2, [r7, #32]
 800404a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800404c:	f7ff ff22 	bl	8003e94 <prvInsertTimerInActiveList>
                        break;
 8004050:	e015      	b.n	800407e <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004054:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004058:	f003 0302 	and.w	r3, r3, #2
 800405c:	2b00      	cmp	r3, #0
 800405e:	d103      	bne.n	8004068 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8004060:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004062:	f000 fc73 	bl	800494c <vPortFree>
 8004066:	e00a      	b.n	800407e <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800406e:	f023 0301 	bic.w	r3, r3, #1
 8004072:	b2da      	uxtb	r2, r3
 8004074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004076:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800407a:	e000      	b.n	800407e <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 800407c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800407e:	4b08      	ldr	r3, [pc, #32]	; (80040a0 <prvProcessReceivedCommands+0x188>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f107 0108 	add.w	r1, r7, #8
 8004086:	2200      	movs	r2, #0
 8004088:	4618      	mov	r0, r3
 800408a:	f7fe fc49 	bl	8002920 <xQueueReceive>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	f47f af45 	bne.w	8003f20 <prvProcessReceivedCommands+0x8>
        }
    }
 8004096:	bf00      	nop
 8004098:	bf00      	nop
 800409a:	3728      	adds	r7, #40	; 0x28
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	20000260 	.word	0x20000260

080040a4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b088      	sub	sp, #32
 80040a8:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80040aa:	e048      	b.n	800413e <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80040ac:	4b2d      	ldr	r3, [pc, #180]	; (8004164 <prvSwitchTimerLists+0xc0>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040b6:	4b2b      	ldr	r3, [pc, #172]	; (8004164 <prvSwitchTimerLists+0xc0>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	3304      	adds	r3, #4
 80040c4:	4618      	mov	r0, r3
 80040c6:	f7fe f92d 	bl	8002324 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6a1b      	ldr	r3, [r3, #32]
 80040ce:	68f8      	ldr	r0, [r7, #12]
 80040d0:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040d8:	f003 0304 	and.w	r3, r3, #4
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d02e      	beq.n	800413e <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	699b      	ldr	r3, [r3, #24]
 80040e4:	693a      	ldr	r2, [r7, #16]
 80040e6:	4413      	add	r3, r2
 80040e8:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 80040ea:	68ba      	ldr	r2, [r7, #8]
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d90e      	bls.n	8004110 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	68ba      	ldr	r2, [r7, #8]
 80040f6:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80040fe:	4b19      	ldr	r3, [pc, #100]	; (8004164 <prvSwitchTimerLists+0xc0>)
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	3304      	adds	r3, #4
 8004106:	4619      	mov	r1, r3
 8004108:	4610      	mov	r0, r2
 800410a:	f7fe f8d2 	bl	80022b2 <vListInsert>
 800410e:	e016      	b.n	800413e <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004110:	2300      	movs	r3, #0
 8004112:	9300      	str	r3, [sp, #0]
 8004114:	2300      	movs	r3, #0
 8004116:	693a      	ldr	r2, [r7, #16]
 8004118:	2100      	movs	r1, #0
 800411a:	68f8      	ldr	r0, [r7, #12]
 800411c:	f7ff fd7c 	bl	8003c18 <xTimerGenericCommand>
 8004120:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d10a      	bne.n	800413e <prvSwitchTimerLists+0x9a>
        __asm volatile
 8004128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800412c:	f383 8811 	msr	BASEPRI, r3
 8004130:	f3bf 8f6f 	isb	sy
 8004134:	f3bf 8f4f 	dsb	sy
 8004138:	603b      	str	r3, [r7, #0]
    }
 800413a:	bf00      	nop
 800413c:	e7fe      	b.n	800413c <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800413e:	4b09      	ldr	r3, [pc, #36]	; (8004164 <prvSwitchTimerLists+0xc0>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d1b1      	bne.n	80040ac <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8004148:	4b06      	ldr	r3, [pc, #24]	; (8004164 <prvSwitchTimerLists+0xc0>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800414e:	4b06      	ldr	r3, [pc, #24]	; (8004168 <prvSwitchTimerLists+0xc4>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a04      	ldr	r2, [pc, #16]	; (8004164 <prvSwitchTimerLists+0xc0>)
 8004154:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004156:	4a04      	ldr	r2, [pc, #16]	; (8004168 <prvSwitchTimerLists+0xc4>)
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	6013      	str	r3, [r2, #0]
    }
 800415c:	bf00      	nop
 800415e:	3718      	adds	r7, #24
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	20000258 	.word	0x20000258
 8004168:	2000025c 	.word	0x2000025c

0800416c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800416c:	b580      	push	{r7, lr}
 800416e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004170:	f000 f9e0 	bl	8004534 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004174:	4b12      	ldr	r3, [pc, #72]	; (80041c0 <prvCheckForValidListAndQueue+0x54>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d11d      	bne.n	80041b8 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800417c:	4811      	ldr	r0, [pc, #68]	; (80041c4 <prvCheckForValidListAndQueue+0x58>)
 800417e:	f7fe f847 	bl	8002210 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004182:	4811      	ldr	r0, [pc, #68]	; (80041c8 <prvCheckForValidListAndQueue+0x5c>)
 8004184:	f7fe f844 	bl	8002210 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004188:	4b10      	ldr	r3, [pc, #64]	; (80041cc <prvCheckForValidListAndQueue+0x60>)
 800418a:	4a0e      	ldr	r2, [pc, #56]	; (80041c4 <prvCheckForValidListAndQueue+0x58>)
 800418c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800418e:	4b10      	ldr	r3, [pc, #64]	; (80041d0 <prvCheckForValidListAndQueue+0x64>)
 8004190:	4a0d      	ldr	r2, [pc, #52]	; (80041c8 <prvCheckForValidListAndQueue+0x5c>)
 8004192:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004194:	2200      	movs	r2, #0
 8004196:	210c      	movs	r1, #12
 8004198:	200a      	movs	r0, #10
 800419a:	f7fe f955 	bl	8002448 <xQueueGenericCreate>
 800419e:	4603      	mov	r3, r0
 80041a0:	4a07      	ldr	r2, [pc, #28]	; (80041c0 <prvCheckForValidListAndQueue+0x54>)
 80041a2:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80041a4:	4b06      	ldr	r3, [pc, #24]	; (80041c0 <prvCheckForValidListAndQueue+0x54>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d005      	beq.n	80041b8 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80041ac:	4b04      	ldr	r3, [pc, #16]	; (80041c0 <prvCheckForValidListAndQueue+0x54>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4908      	ldr	r1, [pc, #32]	; (80041d4 <prvCheckForValidListAndQueue+0x68>)
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7fe fdd4 	bl	8002d60 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80041b8:	f000 f9ec 	bl	8004594 <vPortExitCritical>
    }
 80041bc:	bf00      	nop
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	20000260 	.word	0x20000260
 80041c4:	20000230 	.word	0x20000230
 80041c8:	20000244 	.word	0x20000244
 80041cc:	20000258 	.word	0x20000258
 80041d0:	2000025c 	.word	0x2000025c
 80041d4:	08007e20 	.word	0x08007e20

080041d8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80041d8:	b480      	push	{r7}
 80041da:	b085      	sub	sp, #20
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	3b04      	subs	r3, #4
 80041e8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80041f0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	3b04      	subs	r3, #4
 80041f6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	f023 0201 	bic.w	r2, r3, #1
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	3b04      	subs	r3, #4
 8004206:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004208:	4a0c      	ldr	r2, [pc, #48]	; (800423c <pxPortInitialiseStack+0x64>)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	3b14      	subs	r3, #20
 8004212:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	3b04      	subs	r3, #4
 800421e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f06f 0202 	mvn.w	r2, #2
 8004226:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	3b20      	subs	r3, #32
 800422c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800422e:	68fb      	ldr	r3, [r7, #12]
}
 8004230:	4618      	mov	r0, r3
 8004232:	3714      	adds	r7, #20
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr
 800423c:	08004241 	.word	0x08004241

08004240 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004240:	b480      	push	{r7}
 8004242:	b085      	sub	sp, #20
 8004244:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004246:	2300      	movs	r3, #0
 8004248:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800424a:	4b12      	ldr	r3, [pc, #72]	; (8004294 <prvTaskExitError+0x54>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004252:	d00a      	beq.n	800426a <prvTaskExitError+0x2a>
        __asm volatile
 8004254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004258:	f383 8811 	msr	BASEPRI, r3
 800425c:	f3bf 8f6f 	isb	sy
 8004260:	f3bf 8f4f 	dsb	sy
 8004264:	60fb      	str	r3, [r7, #12]
    }
 8004266:	bf00      	nop
 8004268:	e7fe      	b.n	8004268 <prvTaskExitError+0x28>
        __asm volatile
 800426a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800426e:	f383 8811 	msr	BASEPRI, r3
 8004272:	f3bf 8f6f 	isb	sy
 8004276:	f3bf 8f4f 	dsb	sy
 800427a:	60bb      	str	r3, [r7, #8]
    }
 800427c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800427e:	bf00      	nop
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d0fc      	beq.n	8004280 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004286:	bf00      	nop
 8004288:	bf00      	nop
 800428a:	3714      	adds	r7, #20
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr
 8004294:	20000010 	.word	0x20000010
	...

080042a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80042a0:	4b07      	ldr	r3, [pc, #28]	; (80042c0 <pxCurrentTCBConst2>)
 80042a2:	6819      	ldr	r1, [r3, #0]
 80042a4:	6808      	ldr	r0, [r1, #0]
 80042a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042aa:	f380 8809 	msr	PSP, r0
 80042ae:	f3bf 8f6f 	isb	sy
 80042b2:	f04f 0000 	mov.w	r0, #0
 80042b6:	f380 8811 	msr	BASEPRI, r0
 80042ba:	4770      	bx	lr
 80042bc:	f3af 8000 	nop.w

080042c0 <pxCurrentTCBConst2>:
 80042c0:	2000012c 	.word	0x2000012c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80042c4:	bf00      	nop
 80042c6:	bf00      	nop

080042c8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80042c8:	4808      	ldr	r0, [pc, #32]	; (80042ec <prvPortStartFirstTask+0x24>)
 80042ca:	6800      	ldr	r0, [r0, #0]
 80042cc:	6800      	ldr	r0, [r0, #0]
 80042ce:	f380 8808 	msr	MSP, r0
 80042d2:	f04f 0000 	mov.w	r0, #0
 80042d6:	f380 8814 	msr	CONTROL, r0
 80042da:	b662      	cpsie	i
 80042dc:	b661      	cpsie	f
 80042de:	f3bf 8f4f 	dsb	sy
 80042e2:	f3bf 8f6f 	isb	sy
 80042e6:	df00      	svc	0
 80042e8:	bf00      	nop
 80042ea:	0000      	.short	0x0000
 80042ec:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80042f0:	bf00      	nop
 80042f2:	bf00      	nop

080042f4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b086      	sub	sp, #24
 80042f8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80042fa:	4b46      	ldr	r3, [pc, #280]	; (8004414 <xPortStartScheduler+0x120>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a46      	ldr	r2, [pc, #280]	; (8004418 <xPortStartScheduler+0x124>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d10a      	bne.n	800431a <xPortStartScheduler+0x26>
        __asm volatile
 8004304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004308:	f383 8811 	msr	BASEPRI, r3
 800430c:	f3bf 8f6f 	isb	sy
 8004310:	f3bf 8f4f 	dsb	sy
 8004314:	613b      	str	r3, [r7, #16]
    }
 8004316:	bf00      	nop
 8004318:	e7fe      	b.n	8004318 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800431a:	4b3e      	ldr	r3, [pc, #248]	; (8004414 <xPortStartScheduler+0x120>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a3f      	ldr	r2, [pc, #252]	; (800441c <xPortStartScheduler+0x128>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d10a      	bne.n	800433a <xPortStartScheduler+0x46>
        __asm volatile
 8004324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004328:	f383 8811 	msr	BASEPRI, r3
 800432c:	f3bf 8f6f 	isb	sy
 8004330:	f3bf 8f4f 	dsb	sy
 8004334:	60fb      	str	r3, [r7, #12]
    }
 8004336:	bf00      	nop
 8004338:	e7fe      	b.n	8004338 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800433a:	4b39      	ldr	r3, [pc, #228]	; (8004420 <xPortStartScheduler+0x12c>)
 800433c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	b2db      	uxtb	r3, r3
 8004344:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	22ff      	movs	r2, #255	; 0xff
 800434a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	b2db      	uxtb	r3, r3
 8004352:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004354:	78fb      	ldrb	r3, [r7, #3]
 8004356:	b2db      	uxtb	r3, r3
 8004358:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800435c:	b2da      	uxtb	r2, r3
 800435e:	4b31      	ldr	r3, [pc, #196]	; (8004424 <xPortStartScheduler+0x130>)
 8004360:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004362:	4b31      	ldr	r3, [pc, #196]	; (8004428 <xPortStartScheduler+0x134>)
 8004364:	2207      	movs	r2, #7
 8004366:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004368:	e009      	b.n	800437e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800436a:	4b2f      	ldr	r3, [pc, #188]	; (8004428 <xPortStartScheduler+0x134>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	3b01      	subs	r3, #1
 8004370:	4a2d      	ldr	r2, [pc, #180]	; (8004428 <xPortStartScheduler+0x134>)
 8004372:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004374:	78fb      	ldrb	r3, [r7, #3]
 8004376:	b2db      	uxtb	r3, r3
 8004378:	005b      	lsls	r3, r3, #1
 800437a:	b2db      	uxtb	r3, r3
 800437c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800437e:	78fb      	ldrb	r3, [r7, #3]
 8004380:	b2db      	uxtb	r3, r3
 8004382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004386:	2b80      	cmp	r3, #128	; 0x80
 8004388:	d0ef      	beq.n	800436a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800438a:	4b27      	ldr	r3, [pc, #156]	; (8004428 <xPortStartScheduler+0x134>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f1c3 0307 	rsb	r3, r3, #7
 8004392:	2b04      	cmp	r3, #4
 8004394:	d00a      	beq.n	80043ac <xPortStartScheduler+0xb8>
        __asm volatile
 8004396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800439a:	f383 8811 	msr	BASEPRI, r3
 800439e:	f3bf 8f6f 	isb	sy
 80043a2:	f3bf 8f4f 	dsb	sy
 80043a6:	60bb      	str	r3, [r7, #8]
    }
 80043a8:	bf00      	nop
 80043aa:	e7fe      	b.n	80043aa <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80043ac:	4b1e      	ldr	r3, [pc, #120]	; (8004428 <xPortStartScheduler+0x134>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	021b      	lsls	r3, r3, #8
 80043b2:	4a1d      	ldr	r2, [pc, #116]	; (8004428 <xPortStartScheduler+0x134>)
 80043b4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80043b6:	4b1c      	ldr	r3, [pc, #112]	; (8004428 <xPortStartScheduler+0x134>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80043be:	4a1a      	ldr	r2, [pc, #104]	; (8004428 <xPortStartScheduler+0x134>)
 80043c0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	b2da      	uxtb	r2, r3
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80043ca:	4b18      	ldr	r3, [pc, #96]	; (800442c <xPortStartScheduler+0x138>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a17      	ldr	r2, [pc, #92]	; (800442c <xPortStartScheduler+0x138>)
 80043d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043d4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80043d6:	4b15      	ldr	r3, [pc, #84]	; (800442c <xPortStartScheduler+0x138>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a14      	ldr	r2, [pc, #80]	; (800442c <xPortStartScheduler+0x138>)
 80043dc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80043e0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80043e2:	f000 f963 	bl	80046ac <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80043e6:	4b12      	ldr	r3, [pc, #72]	; (8004430 <xPortStartScheduler+0x13c>)
 80043e8:	2200      	movs	r2, #0
 80043ea:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80043ec:	f000 f982 	bl	80046f4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80043f0:	4b10      	ldr	r3, [pc, #64]	; (8004434 <xPortStartScheduler+0x140>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a0f      	ldr	r2, [pc, #60]	; (8004434 <xPortStartScheduler+0x140>)
 80043f6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80043fa:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80043fc:	f7ff ff64 	bl	80042c8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004400:	f7ff f866 	bl	80034d0 <vTaskSwitchContext>
    prvTaskExitError();
 8004404:	f7ff ff1c 	bl	8004240 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3718      	adds	r7, #24
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	e000ed00 	.word	0xe000ed00
 8004418:	410fc271 	.word	0x410fc271
 800441c:	410fc270 	.word	0x410fc270
 8004420:	e000e400 	.word	0xe000e400
 8004424:	2000026c 	.word	0x2000026c
 8004428:	20000270 	.word	0x20000270
 800442c:	e000ed20 	.word	0xe000ed20
 8004430:	20000010 	.word	0x20000010
 8004434:	e000ef34 	.word	0xe000ef34

08004438 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8004438:	b480      	push	{r7}
 800443a:	b087      	sub	sp, #28
 800443c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800443e:	4b37      	ldr	r3, [pc, #220]	; (800451c <vInitPrioGroupValue+0xe4>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a37      	ldr	r2, [pc, #220]	; (8004520 <vInitPrioGroupValue+0xe8>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d10a      	bne.n	800445e <vInitPrioGroupValue+0x26>
        __asm volatile
 8004448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800444c:	f383 8811 	msr	BASEPRI, r3
 8004450:	f3bf 8f6f 	isb	sy
 8004454:	f3bf 8f4f 	dsb	sy
 8004458:	613b      	str	r3, [r7, #16]
    }
 800445a:	bf00      	nop
 800445c:	e7fe      	b.n	800445c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800445e:	4b2f      	ldr	r3, [pc, #188]	; (800451c <vInitPrioGroupValue+0xe4>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a30      	ldr	r2, [pc, #192]	; (8004524 <vInitPrioGroupValue+0xec>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d10a      	bne.n	800447e <vInitPrioGroupValue+0x46>
        __asm volatile
 8004468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800446c:	f383 8811 	msr	BASEPRI, r3
 8004470:	f3bf 8f6f 	isb	sy
 8004474:	f3bf 8f4f 	dsb	sy
 8004478:	60fb      	str	r3, [r7, #12]
    }
 800447a:	bf00      	nop
 800447c:	e7fe      	b.n	800447c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800447e:	4b2a      	ldr	r3, [pc, #168]	; (8004528 <vInitPrioGroupValue+0xf0>)
 8004480:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	b2db      	uxtb	r3, r3
 8004488:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	22ff      	movs	r2, #255	; 0xff
 800448e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	b2db      	uxtb	r3, r3
 8004496:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004498:	78fb      	ldrb	r3, [r7, #3]
 800449a:	b2db      	uxtb	r3, r3
 800449c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80044a0:	b2da      	uxtb	r2, r3
 80044a2:	4b22      	ldr	r3, [pc, #136]	; (800452c <vInitPrioGroupValue+0xf4>)
 80044a4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80044a6:	4b22      	ldr	r3, [pc, #136]	; (8004530 <vInitPrioGroupValue+0xf8>)
 80044a8:	2207      	movs	r2, #7
 80044aa:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80044ac:	e009      	b.n	80044c2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80044ae:	4b20      	ldr	r3, [pc, #128]	; (8004530 <vInitPrioGroupValue+0xf8>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	3b01      	subs	r3, #1
 80044b4:	4a1e      	ldr	r2, [pc, #120]	; (8004530 <vInitPrioGroupValue+0xf8>)
 80044b6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80044b8:	78fb      	ldrb	r3, [r7, #3]
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	005b      	lsls	r3, r3, #1
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80044c2:	78fb      	ldrb	r3, [r7, #3]
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ca:	2b80      	cmp	r3, #128	; 0x80
 80044cc:	d0ef      	beq.n	80044ae <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80044ce:	4b18      	ldr	r3, [pc, #96]	; (8004530 <vInitPrioGroupValue+0xf8>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f1c3 0307 	rsb	r3, r3, #7
 80044d6:	2b04      	cmp	r3, #4
 80044d8:	d00a      	beq.n	80044f0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 80044da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044de:	f383 8811 	msr	BASEPRI, r3
 80044e2:	f3bf 8f6f 	isb	sy
 80044e6:	f3bf 8f4f 	dsb	sy
 80044ea:	60bb      	str	r3, [r7, #8]
    }
 80044ec:	bf00      	nop
 80044ee:	e7fe      	b.n	80044ee <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80044f0:	4b0f      	ldr	r3, [pc, #60]	; (8004530 <vInitPrioGroupValue+0xf8>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	021b      	lsls	r3, r3, #8
 80044f6:	4a0e      	ldr	r2, [pc, #56]	; (8004530 <vInitPrioGroupValue+0xf8>)
 80044f8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80044fa:	4b0d      	ldr	r3, [pc, #52]	; (8004530 <vInitPrioGroupValue+0xf8>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004502:	4a0b      	ldr	r2, [pc, #44]	; (8004530 <vInitPrioGroupValue+0xf8>)
 8004504:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	b2da      	uxtb	r2, r3
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800450e:	bf00      	nop
 8004510:	371c      	adds	r7, #28
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr
 800451a:	bf00      	nop
 800451c:	e000ed00 	.word	0xe000ed00
 8004520:	410fc271 	.word	0x410fc271
 8004524:	410fc270 	.word	0x410fc270
 8004528:	e000e400 	.word	0xe000e400
 800452c:	2000026c 	.word	0x2000026c
 8004530:	20000270 	.word	0x20000270

08004534 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
        __asm volatile
 800453a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800453e:	f383 8811 	msr	BASEPRI, r3
 8004542:	f3bf 8f6f 	isb	sy
 8004546:	f3bf 8f4f 	dsb	sy
 800454a:	607b      	str	r3, [r7, #4]
    }
 800454c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800454e:	4b0f      	ldr	r3, [pc, #60]	; (800458c <vPortEnterCritical+0x58>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	3301      	adds	r3, #1
 8004554:	4a0d      	ldr	r2, [pc, #52]	; (800458c <vPortEnterCritical+0x58>)
 8004556:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004558:	4b0c      	ldr	r3, [pc, #48]	; (800458c <vPortEnterCritical+0x58>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d10f      	bne.n	8004580 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004560:	4b0b      	ldr	r3, [pc, #44]	; (8004590 <vPortEnterCritical+0x5c>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	b2db      	uxtb	r3, r3
 8004566:	2b00      	cmp	r3, #0
 8004568:	d00a      	beq.n	8004580 <vPortEnterCritical+0x4c>
        __asm volatile
 800456a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800456e:	f383 8811 	msr	BASEPRI, r3
 8004572:	f3bf 8f6f 	isb	sy
 8004576:	f3bf 8f4f 	dsb	sy
 800457a:	603b      	str	r3, [r7, #0]
    }
 800457c:	bf00      	nop
 800457e:	e7fe      	b.n	800457e <vPortEnterCritical+0x4a>
    }
}
 8004580:	bf00      	nop
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr
 800458c:	20000010 	.word	0x20000010
 8004590:	e000ed04 	.word	0xe000ed04

08004594 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800459a:	4b12      	ldr	r3, [pc, #72]	; (80045e4 <vPortExitCritical+0x50>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d10a      	bne.n	80045b8 <vPortExitCritical+0x24>
        __asm volatile
 80045a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a6:	f383 8811 	msr	BASEPRI, r3
 80045aa:	f3bf 8f6f 	isb	sy
 80045ae:	f3bf 8f4f 	dsb	sy
 80045b2:	607b      	str	r3, [r7, #4]
    }
 80045b4:	bf00      	nop
 80045b6:	e7fe      	b.n	80045b6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80045b8:	4b0a      	ldr	r3, [pc, #40]	; (80045e4 <vPortExitCritical+0x50>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	3b01      	subs	r3, #1
 80045be:	4a09      	ldr	r2, [pc, #36]	; (80045e4 <vPortExitCritical+0x50>)
 80045c0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80045c2:	4b08      	ldr	r3, [pc, #32]	; (80045e4 <vPortExitCritical+0x50>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d105      	bne.n	80045d6 <vPortExitCritical+0x42>
 80045ca:	2300      	movs	r3, #0
 80045cc:	603b      	str	r3, [r7, #0]
        __asm volatile
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	f383 8811 	msr	BASEPRI, r3
    }
 80045d4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80045d6:	bf00      	nop
 80045d8:	370c      	adds	r7, #12
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	20000010 	.word	0x20000010
	...

080045f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80045f0:	f3ef 8009 	mrs	r0, PSP
 80045f4:	f3bf 8f6f 	isb	sy
 80045f8:	4b15      	ldr	r3, [pc, #84]	; (8004650 <pxCurrentTCBConst>)
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	f01e 0f10 	tst.w	lr, #16
 8004600:	bf08      	it	eq
 8004602:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004606:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800460a:	6010      	str	r0, [r2, #0]
 800460c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004610:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004614:	f380 8811 	msr	BASEPRI, r0
 8004618:	f3bf 8f4f 	dsb	sy
 800461c:	f3bf 8f6f 	isb	sy
 8004620:	f7fe ff56 	bl	80034d0 <vTaskSwitchContext>
 8004624:	f04f 0000 	mov.w	r0, #0
 8004628:	f380 8811 	msr	BASEPRI, r0
 800462c:	bc09      	pop	{r0, r3}
 800462e:	6819      	ldr	r1, [r3, #0]
 8004630:	6808      	ldr	r0, [r1, #0]
 8004632:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004636:	f01e 0f10 	tst.w	lr, #16
 800463a:	bf08      	it	eq
 800463c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004640:	f380 8809 	msr	PSP, r0
 8004644:	f3bf 8f6f 	isb	sy
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop
 800464c:	f3af 8000 	nop.w

08004650 <pxCurrentTCBConst>:
 8004650:	2000012c 	.word	0x2000012c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004654:	bf00      	nop
 8004656:	bf00      	nop

08004658 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
        __asm volatile
 800465e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004662:	f383 8811 	msr	BASEPRI, r3
 8004666:	f3bf 8f6f 	isb	sy
 800466a:	f3bf 8f4f 	dsb	sy
 800466e:	607b      	str	r3, [r7, #4]
    }
 8004670:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004672:	f002 fb85 	bl	8006d80 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004676:	f7fe fe6f 	bl	8003358 <xTaskIncrementTick>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d006      	beq.n	800468e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004680:	f002 fbdc 	bl	8006e3c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004684:	4b08      	ldr	r3, [pc, #32]	; (80046a8 <SysTick_Handler+0x50>)
 8004686:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800468a:	601a      	str	r2, [r3, #0]
 800468c:	e001      	b.n	8004692 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800468e:	f002 fbb9 	bl	8006e04 <SEGGER_SYSVIEW_RecordExitISR>
 8004692:	2300      	movs	r3, #0
 8004694:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	f383 8811 	msr	BASEPRI, r3
    }
 800469c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800469e:	bf00      	nop
 80046a0:	3708      	adds	r7, #8
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	e000ed04 	.word	0xe000ed04

080046ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80046ac:	b480      	push	{r7}
 80046ae:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80046b0:	4b0b      	ldr	r3, [pc, #44]	; (80046e0 <vPortSetupTimerInterrupt+0x34>)
 80046b2:	2200      	movs	r2, #0
 80046b4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80046b6:	4b0b      	ldr	r3, [pc, #44]	; (80046e4 <vPortSetupTimerInterrupt+0x38>)
 80046b8:	2200      	movs	r2, #0
 80046ba:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80046bc:	4b0a      	ldr	r3, [pc, #40]	; (80046e8 <vPortSetupTimerInterrupt+0x3c>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a0a      	ldr	r2, [pc, #40]	; (80046ec <vPortSetupTimerInterrupt+0x40>)
 80046c2:	fba2 2303 	umull	r2, r3, r2, r3
 80046c6:	099b      	lsrs	r3, r3, #6
 80046c8:	4a09      	ldr	r2, [pc, #36]	; (80046f0 <vPortSetupTimerInterrupt+0x44>)
 80046ca:	3b01      	subs	r3, #1
 80046cc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80046ce:	4b04      	ldr	r3, [pc, #16]	; (80046e0 <vPortSetupTimerInterrupt+0x34>)
 80046d0:	2207      	movs	r2, #7
 80046d2:	601a      	str	r2, [r3, #0]
}
 80046d4:	bf00      	nop
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
 80046de:	bf00      	nop
 80046e0:	e000e010 	.word	0xe000e010
 80046e4:	e000e018 	.word	0xe000e018
 80046e8:	20000000 	.word	0x20000000
 80046ec:	10624dd3 	.word	0x10624dd3
 80046f0:	e000e014 	.word	0xe000e014

080046f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80046f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004704 <vPortEnableVFP+0x10>
 80046f8:	6801      	ldr	r1, [r0, #0]
 80046fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80046fe:	6001      	str	r1, [r0, #0]
 8004700:	4770      	bx	lr
 8004702:	0000      	.short	0x0000
 8004704:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004708:	bf00      	nop
 800470a:	bf00      	nop

0800470c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800470c:	b480      	push	{r7}
 800470e:	b085      	sub	sp, #20
 8004710:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004712:	f3ef 8305 	mrs	r3, IPSR
 8004716:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2b0f      	cmp	r3, #15
 800471c:	d914      	bls.n	8004748 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800471e:	4a17      	ldr	r2, [pc, #92]	; (800477c <vPortValidateInterruptPriority+0x70>)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	4413      	add	r3, r2
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004728:	4b15      	ldr	r3, [pc, #84]	; (8004780 <vPortValidateInterruptPriority+0x74>)
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	7afa      	ldrb	r2, [r7, #11]
 800472e:	429a      	cmp	r2, r3
 8004730:	d20a      	bcs.n	8004748 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004736:	f383 8811 	msr	BASEPRI, r3
 800473a:	f3bf 8f6f 	isb	sy
 800473e:	f3bf 8f4f 	dsb	sy
 8004742:	607b      	str	r3, [r7, #4]
    }
 8004744:	bf00      	nop
 8004746:	e7fe      	b.n	8004746 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004748:	4b0e      	ldr	r3, [pc, #56]	; (8004784 <vPortValidateInterruptPriority+0x78>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004750:	4b0d      	ldr	r3, [pc, #52]	; (8004788 <vPortValidateInterruptPriority+0x7c>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	429a      	cmp	r2, r3
 8004756:	d90a      	bls.n	800476e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800475c:	f383 8811 	msr	BASEPRI, r3
 8004760:	f3bf 8f6f 	isb	sy
 8004764:	f3bf 8f4f 	dsb	sy
 8004768:	603b      	str	r3, [r7, #0]
    }
 800476a:	bf00      	nop
 800476c:	e7fe      	b.n	800476c <vPortValidateInterruptPriority+0x60>
    }
 800476e:	bf00      	nop
 8004770:	3714      	adds	r7, #20
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	e000e3f0 	.word	0xe000e3f0
 8004780:	2000026c 	.word	0x2000026c
 8004784:	e000ed0c 	.word	0xe000ed0c
 8004788:	20000270 	.word	0x20000270

0800478c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b08a      	sub	sp, #40	; 0x28
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004794:	2300      	movs	r3, #0
 8004796:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004798:	f7fe fd0e 	bl	80031b8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800479c:	4b65      	ldr	r3, [pc, #404]	; (8004934 <pvPortMalloc+0x1a8>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d101      	bne.n	80047a8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80047a4:	f000 f934 	bl	8004a10 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80047a8:	4b63      	ldr	r3, [pc, #396]	; (8004938 <pvPortMalloc+0x1ac>)
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4013      	ands	r3, r2
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	f040 80a7 	bne.w	8004904 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d02d      	beq.n	8004818 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80047bc:	2208      	movs	r2, #8
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d227      	bcs.n	8004818 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80047c8:	2208      	movs	r2, #8
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4413      	add	r3, r2
 80047ce:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f003 0307 	and.w	r3, r3, #7
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d021      	beq.n	800481e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f023 0307 	bic.w	r3, r3, #7
 80047e0:	3308      	adds	r3, #8
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d214      	bcs.n	8004812 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f023 0307 	bic.w	r3, r3, #7
 80047ee:	3308      	adds	r3, #8
 80047f0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f003 0307 	and.w	r3, r3, #7
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d010      	beq.n	800481e <pvPortMalloc+0x92>
        __asm volatile
 80047fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004800:	f383 8811 	msr	BASEPRI, r3
 8004804:	f3bf 8f6f 	isb	sy
 8004808:	f3bf 8f4f 	dsb	sy
 800480c:	617b      	str	r3, [r7, #20]
    }
 800480e:	bf00      	nop
 8004810:	e7fe      	b.n	8004810 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004812:	2300      	movs	r3, #0
 8004814:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004816:	e002      	b.n	800481e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004818:	2300      	movs	r3, #0
 800481a:	607b      	str	r3, [r7, #4]
 800481c:	e000      	b.n	8004820 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800481e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d06e      	beq.n	8004904 <pvPortMalloc+0x178>
 8004826:	4b45      	ldr	r3, [pc, #276]	; (800493c <pvPortMalloc+0x1b0>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	429a      	cmp	r2, r3
 800482e:	d869      	bhi.n	8004904 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004830:	4b43      	ldr	r3, [pc, #268]	; (8004940 <pvPortMalloc+0x1b4>)
 8004832:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004834:	4b42      	ldr	r3, [pc, #264]	; (8004940 <pvPortMalloc+0x1b4>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800483a:	e004      	b.n	8004846 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800483c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	429a      	cmp	r2, r3
 800484e:	d903      	bls.n	8004858 <pvPortMalloc+0xcc>
 8004850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d1f1      	bne.n	800483c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004858:	4b36      	ldr	r3, [pc, #216]	; (8004934 <pvPortMalloc+0x1a8>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800485e:	429a      	cmp	r2, r3
 8004860:	d050      	beq.n	8004904 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004862:	6a3b      	ldr	r3, [r7, #32]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2208      	movs	r2, #8
 8004868:	4413      	add	r3, r2
 800486a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800486c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	6a3b      	ldr	r3, [r7, #32]
 8004872:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004876:	685a      	ldr	r2, [r3, #4]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	1ad2      	subs	r2, r2, r3
 800487c:	2308      	movs	r3, #8
 800487e:	005b      	lsls	r3, r3, #1
 8004880:	429a      	cmp	r2, r3
 8004882:	d91f      	bls.n	80048c4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4413      	add	r3, r2
 800488a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	f003 0307 	and.w	r3, r3, #7
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00a      	beq.n	80048ac <pvPortMalloc+0x120>
        __asm volatile
 8004896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800489a:	f383 8811 	msr	BASEPRI, r3
 800489e:	f3bf 8f6f 	isb	sy
 80048a2:	f3bf 8f4f 	dsb	sy
 80048a6:	613b      	str	r3, [r7, #16]
    }
 80048a8:	bf00      	nop
 80048aa:	e7fe      	b.n	80048aa <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80048ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ae:	685a      	ldr	r2, [r3, #4]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	1ad2      	subs	r2, r2, r3
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80048b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80048be:	69b8      	ldr	r0, [r7, #24]
 80048c0:	f000 f908 	bl	8004ad4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80048c4:	4b1d      	ldr	r3, [pc, #116]	; (800493c <pvPortMalloc+0x1b0>)
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	4a1b      	ldr	r2, [pc, #108]	; (800493c <pvPortMalloc+0x1b0>)
 80048d0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80048d2:	4b1a      	ldr	r3, [pc, #104]	; (800493c <pvPortMalloc+0x1b0>)
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	4b1b      	ldr	r3, [pc, #108]	; (8004944 <pvPortMalloc+0x1b8>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d203      	bcs.n	80048e6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80048de:	4b17      	ldr	r3, [pc, #92]	; (800493c <pvPortMalloc+0x1b0>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a18      	ldr	r2, [pc, #96]	; (8004944 <pvPortMalloc+0x1b8>)
 80048e4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80048e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e8:	685a      	ldr	r2, [r3, #4]
 80048ea:	4b13      	ldr	r3, [pc, #76]	; (8004938 <pvPortMalloc+0x1ac>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	431a      	orrs	r2, r3
 80048f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80048f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f6:	2200      	movs	r2, #0
 80048f8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80048fa:	4b13      	ldr	r3, [pc, #76]	; (8004948 <pvPortMalloc+0x1bc>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	3301      	adds	r3, #1
 8004900:	4a11      	ldr	r2, [pc, #68]	; (8004948 <pvPortMalloc+0x1bc>)
 8004902:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004904:	f7fe fc66 	bl	80031d4 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	f003 0307 	and.w	r3, r3, #7
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00a      	beq.n	8004928 <pvPortMalloc+0x19c>
        __asm volatile
 8004912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004916:	f383 8811 	msr	BASEPRI, r3
 800491a:	f3bf 8f6f 	isb	sy
 800491e:	f3bf 8f4f 	dsb	sy
 8004922:	60fb      	str	r3, [r7, #12]
    }
 8004924:	bf00      	nop
 8004926:	e7fe      	b.n	8004926 <pvPortMalloc+0x19a>
    return pvReturn;
 8004928:	69fb      	ldr	r3, [r7, #28]
}
 800492a:	4618      	mov	r0, r3
 800492c:	3728      	adds	r7, #40	; 0x28
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	20012e7c 	.word	0x20012e7c
 8004938:	20012e90 	.word	0x20012e90
 800493c:	20012e80 	.word	0x20012e80
 8004940:	20012e74 	.word	0x20012e74
 8004944:	20012e84 	.word	0x20012e84
 8004948:	20012e88 	.word	0x20012e88

0800494c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b086      	sub	sp, #24
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d04d      	beq.n	80049fa <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800495e:	2308      	movs	r3, #8
 8004960:	425b      	negs	r3, r3
 8004962:	697a      	ldr	r2, [r7, #20]
 8004964:	4413      	add	r3, r2
 8004966:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	685a      	ldr	r2, [r3, #4]
 8004970:	4b24      	ldr	r3, [pc, #144]	; (8004a04 <vPortFree+0xb8>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4013      	ands	r3, r2
 8004976:	2b00      	cmp	r3, #0
 8004978:	d10a      	bne.n	8004990 <vPortFree+0x44>
        __asm volatile
 800497a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800497e:	f383 8811 	msr	BASEPRI, r3
 8004982:	f3bf 8f6f 	isb	sy
 8004986:	f3bf 8f4f 	dsb	sy
 800498a:	60fb      	str	r3, [r7, #12]
    }
 800498c:	bf00      	nop
 800498e:	e7fe      	b.n	800498e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d00a      	beq.n	80049ae <vPortFree+0x62>
        __asm volatile
 8004998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800499c:	f383 8811 	msr	BASEPRI, r3
 80049a0:	f3bf 8f6f 	isb	sy
 80049a4:	f3bf 8f4f 	dsb	sy
 80049a8:	60bb      	str	r3, [r7, #8]
    }
 80049aa:	bf00      	nop
 80049ac:	e7fe      	b.n	80049ac <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	685a      	ldr	r2, [r3, #4]
 80049b2:	4b14      	ldr	r3, [pc, #80]	; (8004a04 <vPortFree+0xb8>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4013      	ands	r3, r2
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d01e      	beq.n	80049fa <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d11a      	bne.n	80049fa <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	685a      	ldr	r2, [r3, #4]
 80049c8:	4b0e      	ldr	r3, [pc, #56]	; (8004a04 <vPortFree+0xb8>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	43db      	mvns	r3, r3
 80049ce:	401a      	ands	r2, r3
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80049d4:	f7fe fbf0 	bl	80031b8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	685a      	ldr	r2, [r3, #4]
 80049dc:	4b0a      	ldr	r3, [pc, #40]	; (8004a08 <vPortFree+0xbc>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4413      	add	r3, r2
 80049e2:	4a09      	ldr	r2, [pc, #36]	; (8004a08 <vPortFree+0xbc>)
 80049e4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80049e6:	6938      	ldr	r0, [r7, #16]
 80049e8:	f000 f874 	bl	8004ad4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80049ec:	4b07      	ldr	r3, [pc, #28]	; (8004a0c <vPortFree+0xc0>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	3301      	adds	r3, #1
 80049f2:	4a06      	ldr	r2, [pc, #24]	; (8004a0c <vPortFree+0xc0>)
 80049f4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80049f6:	f7fe fbed 	bl	80031d4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80049fa:	bf00      	nop
 80049fc:	3718      	adds	r7, #24
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	20012e90 	.word	0x20012e90
 8004a08:	20012e80 	.word	0x20012e80
 8004a0c:	20012e8c 	.word	0x20012e8c

08004a10 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004a10:	b480      	push	{r7}
 8004a12:	b085      	sub	sp, #20
 8004a14:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004a16:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004a1a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004a1c:	4b27      	ldr	r3, [pc, #156]	; (8004abc <prvHeapInit+0xac>)
 8004a1e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f003 0307 	and.w	r3, r3, #7
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00c      	beq.n	8004a44 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	3307      	adds	r3, #7
 8004a2e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f023 0307 	bic.w	r3, r3, #7
 8004a36:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004a38:	68ba      	ldr	r2, [r7, #8]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	4a1f      	ldr	r2, [pc, #124]	; (8004abc <prvHeapInit+0xac>)
 8004a40:	4413      	add	r3, r2
 8004a42:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004a48:	4a1d      	ldr	r2, [pc, #116]	; (8004ac0 <prvHeapInit+0xb0>)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004a4e:	4b1c      	ldr	r3, [pc, #112]	; (8004ac0 <prvHeapInit+0xb0>)
 8004a50:	2200      	movs	r2, #0
 8004a52:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	68ba      	ldr	r2, [r7, #8]
 8004a58:	4413      	add	r3, r2
 8004a5a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004a5c:	2208      	movs	r2, #8
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	1a9b      	subs	r3, r3, r2
 8004a62:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f023 0307 	bic.w	r3, r3, #7
 8004a6a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	4a15      	ldr	r2, [pc, #84]	; (8004ac4 <prvHeapInit+0xb4>)
 8004a70:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004a72:	4b14      	ldr	r3, [pc, #80]	; (8004ac4 <prvHeapInit+0xb4>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2200      	movs	r2, #0
 8004a78:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004a7a:	4b12      	ldr	r3, [pc, #72]	; (8004ac4 <prvHeapInit+0xb4>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	68fa      	ldr	r2, [r7, #12]
 8004a8a:	1ad2      	subs	r2, r2, r3
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004a90:	4b0c      	ldr	r3, [pc, #48]	; (8004ac4 <prvHeapInit+0xb4>)
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	4a0a      	ldr	r2, [pc, #40]	; (8004ac8 <prvHeapInit+0xb8>)
 8004a9e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	4a09      	ldr	r2, [pc, #36]	; (8004acc <prvHeapInit+0xbc>)
 8004aa6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004aa8:	4b09      	ldr	r3, [pc, #36]	; (8004ad0 <prvHeapInit+0xc0>)
 8004aaa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004aae:	601a      	str	r2, [r3, #0]
}
 8004ab0:	bf00      	nop
 8004ab2:	3714      	adds	r7, #20
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr
 8004abc:	20000274 	.word	0x20000274
 8004ac0:	20012e74 	.word	0x20012e74
 8004ac4:	20012e7c 	.word	0x20012e7c
 8004ac8:	20012e84 	.word	0x20012e84
 8004acc:	20012e80 	.word	0x20012e80
 8004ad0:	20012e90 	.word	0x20012e90

08004ad4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b085      	sub	sp, #20
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004adc:	4b28      	ldr	r3, [pc, #160]	; (8004b80 <prvInsertBlockIntoFreeList+0xac>)
 8004ade:	60fb      	str	r3, [r7, #12]
 8004ae0:	e002      	b.n	8004ae8 <prvInsertBlockIntoFreeList+0x14>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	60fb      	str	r3, [r7, #12]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d8f7      	bhi.n	8004ae2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	68ba      	ldr	r2, [r7, #8]
 8004afc:	4413      	add	r3, r2
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d108      	bne.n	8004b16 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	685a      	ldr	r2, [r3, #4]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	441a      	add	r2, r3
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	68ba      	ldr	r2, [r7, #8]
 8004b20:	441a      	add	r2, r3
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d118      	bne.n	8004b5c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	4b15      	ldr	r3, [pc, #84]	; (8004b84 <prvInsertBlockIntoFreeList+0xb0>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d00d      	beq.n	8004b52 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	685a      	ldr	r2, [r3, #4]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	441a      	add	r2, r3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	601a      	str	r2, [r3, #0]
 8004b50:	e008      	b.n	8004b64 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004b52:	4b0c      	ldr	r3, [pc, #48]	; (8004b84 <prvInsertBlockIntoFreeList+0xb0>)
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	601a      	str	r2, [r3, #0]
 8004b5a:	e003      	b.n	8004b64 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004b64:	68fa      	ldr	r2, [r7, #12]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d002      	beq.n	8004b72 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004b72:	bf00      	nop
 8004b74:	3714      	adds	r7, #20
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop
 8004b80:	20012e74 	.word	0x20012e74
 8004b84:	20012e7c 	.word	0x20012e7c

08004b88 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004b8c:	4803      	ldr	r0, [pc, #12]	; (8004b9c <_cbSendSystemDesc+0x14>)
 8004b8e:	f002 f8a1 	bl	8006cd4 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004b92:	4803      	ldr	r0, [pc, #12]	; (8004ba0 <_cbSendSystemDesc+0x18>)
 8004b94:	f002 f89e 	bl	8006cd4 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004b98:	bf00      	nop
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	08007e28 	.word	0x08007e28
 8004ba0:	08007e68 	.word	0x08007e68

08004ba4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004ba8:	4b06      	ldr	r3, [pc, #24]	; (8004bc4 <SEGGER_SYSVIEW_Conf+0x20>)
 8004baa:	6818      	ldr	r0, [r3, #0]
 8004bac:	4b05      	ldr	r3, [pc, #20]	; (8004bc4 <SEGGER_SYSVIEW_Conf+0x20>)
 8004bae:	6819      	ldr	r1, [r3, #0]
 8004bb0:	4b05      	ldr	r3, [pc, #20]	; (8004bc8 <SEGGER_SYSVIEW_Conf+0x24>)
 8004bb2:	4a06      	ldr	r2, [pc, #24]	; (8004bcc <SEGGER_SYSVIEW_Conf+0x28>)
 8004bb4:	f001 fc0a 	bl	80063cc <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004bb8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004bbc:	f001 fc4a 	bl	8006454 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004bc0:	bf00      	nop
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	20000000 	.word	0x20000000
 8004bc8:	08004b89 	.word	0x08004b89
 8004bcc:	08007f08 	.word	0x08007f08

08004bd0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	607b      	str	r3, [r7, #4]
 8004bda:	e033      	b.n	8004c44 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004bdc:	491e      	ldr	r1, [pc, #120]	; (8004c58 <_cbSendTaskList+0x88>)
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	4613      	mov	r3, r2
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	4413      	add	r3, r2
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	440b      	add	r3, r1
 8004bea:	6818      	ldr	r0, [r3, #0]
 8004bec:	491a      	ldr	r1, [pc, #104]	; (8004c58 <_cbSendTaskList+0x88>)
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	4413      	add	r3, r2
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	440b      	add	r3, r1
 8004bfa:	3304      	adds	r3, #4
 8004bfc:	6819      	ldr	r1, [r3, #0]
 8004bfe:	4c16      	ldr	r4, [pc, #88]	; (8004c58 <_cbSendTaskList+0x88>)
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	4613      	mov	r3, r2
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	4413      	add	r3, r2
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	4423      	add	r3, r4
 8004c0c:	3308      	adds	r3, #8
 8004c0e:	681c      	ldr	r4, [r3, #0]
 8004c10:	4d11      	ldr	r5, [pc, #68]	; (8004c58 <_cbSendTaskList+0x88>)
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	4613      	mov	r3, r2
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	4413      	add	r3, r2
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	442b      	add	r3, r5
 8004c1e:	330c      	adds	r3, #12
 8004c20:	681d      	ldr	r5, [r3, #0]
 8004c22:	4e0d      	ldr	r6, [pc, #52]	; (8004c58 <_cbSendTaskList+0x88>)
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	4613      	mov	r3, r2
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	4413      	add	r3, r2
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	4433      	add	r3, r6
 8004c30:	3310      	adds	r3, #16
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	9300      	str	r3, [sp, #0]
 8004c36:	462b      	mov	r3, r5
 8004c38:	4622      	mov	r2, r4
 8004c3a:	f000 f8bd 	bl	8004db8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	3301      	adds	r3, #1
 8004c42:	607b      	str	r3, [r7, #4]
 8004c44:	4b05      	ldr	r3, [pc, #20]	; (8004c5c <_cbSendTaskList+0x8c>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d3c6      	bcc.n	8004bdc <_cbSendTaskList+0xc>
  }
}
 8004c4e:	bf00      	nop
 8004c50:	bf00      	nop
 8004c52:	370c      	adds	r7, #12
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c58:	20012e94 	.word	0x20012e94
 8004c5c:	20012f34 	.word	0x20012f34

08004c60 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004c60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c64:	b082      	sub	sp, #8
 8004c66:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004c68:	f7fe fb64 	bl	8003334 <xTaskGetTickCountFromISR>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2200      	movs	r2, #0
 8004c70:	469a      	mov	sl, r3
 8004c72:	4693      	mov	fp, r2
 8004c74:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004c78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	460b      	mov	r3, r1
 8004c80:	f04f 0a00 	mov.w	sl, #0
 8004c84:	f04f 0b00 	mov.w	fp, #0
 8004c88:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004c8c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004c90:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004c94:	4652      	mov	r2, sl
 8004c96:	465b      	mov	r3, fp
 8004c98:	1a14      	subs	r4, r2, r0
 8004c9a:	eb63 0501 	sbc.w	r5, r3, r1
 8004c9e:	f04f 0200 	mov.w	r2, #0
 8004ca2:	f04f 0300 	mov.w	r3, #0
 8004ca6:	00ab      	lsls	r3, r5, #2
 8004ca8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004cac:	00a2      	lsls	r2, r4, #2
 8004cae:	4614      	mov	r4, r2
 8004cb0:	461d      	mov	r5, r3
 8004cb2:	eb14 0800 	adds.w	r8, r4, r0
 8004cb6:	eb45 0901 	adc.w	r9, r5, r1
 8004cba:	f04f 0200 	mov.w	r2, #0
 8004cbe:	f04f 0300 	mov.w	r3, #0
 8004cc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004cc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004cca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cce:	4690      	mov	r8, r2
 8004cd0:	4699      	mov	r9, r3
 8004cd2:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004cd6:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004cda:	4610      	mov	r0, r2
 8004cdc:	4619      	mov	r1, r3
 8004cde:	3708      	adds	r7, #8
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004ce8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b086      	sub	sp, #24
 8004cec:	af02      	add	r7, sp, #8
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	607a      	str	r2, [r7, #4]
 8004cf4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004cf6:	2205      	movs	r2, #5
 8004cf8:	492b      	ldr	r1, [pc, #172]	; (8004da8 <SYSVIEW_AddTask+0xc0>)
 8004cfa:	68b8      	ldr	r0, [r7, #8]
 8004cfc:	f002 fbb0 	bl	8007460 <memcmp>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d04b      	beq.n	8004d9e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004d06:	4b29      	ldr	r3, [pc, #164]	; (8004dac <SYSVIEW_AddTask+0xc4>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2b07      	cmp	r3, #7
 8004d0c:	d903      	bls.n	8004d16 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004d0e:	4828      	ldr	r0, [pc, #160]	; (8004db0 <SYSVIEW_AddTask+0xc8>)
 8004d10:	f002 faf2 	bl	80072f8 <SEGGER_SYSVIEW_Warn>
    return;
 8004d14:	e044      	b.n	8004da0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004d16:	4b25      	ldr	r3, [pc, #148]	; (8004dac <SYSVIEW_AddTask+0xc4>)
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	4926      	ldr	r1, [pc, #152]	; (8004db4 <SYSVIEW_AddTask+0xcc>)
 8004d1c:	4613      	mov	r3, r2
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	4413      	add	r3, r2
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	440b      	add	r3, r1
 8004d26:	68fa      	ldr	r2, [r7, #12]
 8004d28:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004d2a:	4b20      	ldr	r3, [pc, #128]	; (8004dac <SYSVIEW_AddTask+0xc4>)
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	4921      	ldr	r1, [pc, #132]	; (8004db4 <SYSVIEW_AddTask+0xcc>)
 8004d30:	4613      	mov	r3, r2
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	4413      	add	r3, r2
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	440b      	add	r3, r1
 8004d3a:	3304      	adds	r3, #4
 8004d3c:	68ba      	ldr	r2, [r7, #8]
 8004d3e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004d40:	4b1a      	ldr	r3, [pc, #104]	; (8004dac <SYSVIEW_AddTask+0xc4>)
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	491b      	ldr	r1, [pc, #108]	; (8004db4 <SYSVIEW_AddTask+0xcc>)
 8004d46:	4613      	mov	r3, r2
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	4413      	add	r3, r2
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	440b      	add	r3, r1
 8004d50:	3308      	adds	r3, #8
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004d56:	4b15      	ldr	r3, [pc, #84]	; (8004dac <SYSVIEW_AddTask+0xc4>)
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	4916      	ldr	r1, [pc, #88]	; (8004db4 <SYSVIEW_AddTask+0xcc>)
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	4413      	add	r3, r2
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	440b      	add	r3, r1
 8004d66:	330c      	adds	r3, #12
 8004d68:	683a      	ldr	r2, [r7, #0]
 8004d6a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004d6c:	4b0f      	ldr	r3, [pc, #60]	; (8004dac <SYSVIEW_AddTask+0xc4>)
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	4910      	ldr	r1, [pc, #64]	; (8004db4 <SYSVIEW_AddTask+0xcc>)
 8004d72:	4613      	mov	r3, r2
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	4413      	add	r3, r2
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	440b      	add	r3, r1
 8004d7c:	3310      	adds	r3, #16
 8004d7e:	69ba      	ldr	r2, [r7, #24]
 8004d80:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004d82:	4b0a      	ldr	r3, [pc, #40]	; (8004dac <SYSVIEW_AddTask+0xc4>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	3301      	adds	r3, #1
 8004d88:	4a08      	ldr	r2, [pc, #32]	; (8004dac <SYSVIEW_AddTask+0xc4>)
 8004d8a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004d8c:	69bb      	ldr	r3, [r7, #24]
 8004d8e:	9300      	str	r3, [sp, #0]
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	68b9      	ldr	r1, [r7, #8]
 8004d96:	68f8      	ldr	r0, [r7, #12]
 8004d98:	f000 f80e 	bl	8004db8 <SYSVIEW_SendTaskInfo>
 8004d9c:	e000      	b.n	8004da0 <SYSVIEW_AddTask+0xb8>
    return;
 8004d9e:	bf00      	nop

}
 8004da0:	3710      	adds	r7, #16
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	08007e78 	.word	0x08007e78
 8004dac:	20012f34 	.word	0x20012f34
 8004db0:	08007e80 	.word	0x08007e80
 8004db4:	20012e94 	.word	0x20012e94

08004db8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b08a      	sub	sp, #40	; 0x28
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	60f8      	str	r0, [r7, #12]
 8004dc0:	60b9      	str	r1, [r7, #8]
 8004dc2:	607a      	str	r2, [r7, #4]
 8004dc4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004dc6:	f107 0314 	add.w	r3, r7, #20
 8004dca:	2214      	movs	r2, #20
 8004dcc:	2100      	movs	r1, #0
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f002 fb64 	bl	800749c <memset>
  TaskInfo.TaskID     = TaskID;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004de8:	f107 0314 	add.w	r3, r7, #20
 8004dec:	4618      	mov	r0, r3
 8004dee:	f001 fe79 	bl	8006ae4 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004df2:	bf00      	nop
 8004df4:	3728      	adds	r7, #40	; 0x28
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
	...

08004dfc <__NVIC_EnableIRQ>:
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	4603      	mov	r3, r0
 8004e04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	db0b      	blt.n	8004e26 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e0e:	79fb      	ldrb	r3, [r7, #7]
 8004e10:	f003 021f 	and.w	r2, r3, #31
 8004e14:	4907      	ldr	r1, [pc, #28]	; (8004e34 <__NVIC_EnableIRQ+0x38>)
 8004e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e1a:	095b      	lsrs	r3, r3, #5
 8004e1c:	2001      	movs	r0, #1
 8004e1e:	fa00 f202 	lsl.w	r2, r0, r2
 8004e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004e26:	bf00      	nop
 8004e28:	370c      	adds	r7, #12
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	e000e100 	.word	0xe000e100

08004e38 <__NVIC_SetPriority>:
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	4603      	mov	r3, r0
 8004e40:	6039      	str	r1, [r7, #0]
 8004e42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	db0a      	blt.n	8004e62 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	b2da      	uxtb	r2, r3
 8004e50:	490c      	ldr	r1, [pc, #48]	; (8004e84 <__NVIC_SetPriority+0x4c>)
 8004e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e56:	0112      	lsls	r2, r2, #4
 8004e58:	b2d2      	uxtb	r2, r2
 8004e5a:	440b      	add	r3, r1
 8004e5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004e60:	e00a      	b.n	8004e78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	b2da      	uxtb	r2, r3
 8004e66:	4908      	ldr	r1, [pc, #32]	; (8004e88 <__NVIC_SetPriority+0x50>)
 8004e68:	79fb      	ldrb	r3, [r7, #7]
 8004e6a:	f003 030f 	and.w	r3, r3, #15
 8004e6e:	3b04      	subs	r3, #4
 8004e70:	0112      	lsls	r2, r2, #4
 8004e72:	b2d2      	uxtb	r2, r2
 8004e74:	440b      	add	r3, r1
 8004e76:	761a      	strb	r2, [r3, #24]
}
 8004e78:	bf00      	nop
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr
 8004e84:	e000e100 	.word	0xe000e100
 8004e88:	e000ed00 	.word	0xe000ed00

08004e8c <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b082      	sub	sp, #8
 8004e90:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8004e92:	f002 fa8d 	bl	80073b0 <SEGGER_SYSVIEW_IsStarted>
 8004e96:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d101      	bne.n	8004ea2 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8004e9e:	f001 fca5 	bl	80067ec <SEGGER_SYSVIEW_Start>
  }
}
 8004ea2:	bf00      	nop
 8004ea4:	3708      	adds	r7, #8
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
	...

08004eac <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b082      	sub	sp, #8
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8004eb6:	4b0c      	ldr	r3, [pc, #48]	; (8004ee8 <_cbOnUARTRx+0x3c>)
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	2b03      	cmp	r3, #3
 8004ebc:	d806      	bhi.n	8004ecc <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8004ebe:	4b0a      	ldr	r3, [pc, #40]	; (8004ee8 <_cbOnUARTRx+0x3c>)
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	b2da      	uxtb	r2, r3
 8004ec6:	4b08      	ldr	r3, [pc, #32]	; (8004ee8 <_cbOnUARTRx+0x3c>)
 8004ec8:	701a      	strb	r2, [r3, #0]
    goto Done;
 8004eca:	e009      	b.n	8004ee0 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8004ecc:	f7ff ffde 	bl	8004e8c <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8004ed0:	4b05      	ldr	r3, [pc, #20]	; (8004ee8 <_cbOnUARTRx+0x3c>)
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	1dfb      	adds	r3, r7, #7
 8004ed8:	2201      	movs	r2, #1
 8004eda:	4619      	mov	r1, r3
 8004edc:	f000 fb9a 	bl	8005614 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8004ee0:	bf00      	nop
}
 8004ee2:	3708      	adds	r7, #8
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	20000014 	.word	0x20000014

08004eec <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8004ef4:	4b14      	ldr	r3, [pc, #80]	; (8004f48 <_cbOnUARTTx+0x5c>)
 8004ef6:	785b      	ldrb	r3, [r3, #1]
 8004ef8:	2b03      	cmp	r3, #3
 8004efa:	d80f      	bhi.n	8004f1c <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8004efc:	4b12      	ldr	r3, [pc, #72]	; (8004f48 <_cbOnUARTTx+0x5c>)
 8004efe:	785b      	ldrb	r3, [r3, #1]
 8004f00:	461a      	mov	r2, r3
 8004f02:	4b12      	ldr	r3, [pc, #72]	; (8004f4c <_cbOnUARTTx+0x60>)
 8004f04:	5c9a      	ldrb	r2, [r3, r2]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8004f0a:	4b0f      	ldr	r3, [pc, #60]	; (8004f48 <_cbOnUARTTx+0x5c>)
 8004f0c:	785b      	ldrb	r3, [r3, #1]
 8004f0e:	3301      	adds	r3, #1
 8004f10:	b2da      	uxtb	r2, r3
 8004f12:	4b0d      	ldr	r3, [pc, #52]	; (8004f48 <_cbOnUARTTx+0x5c>)
 8004f14:	705a      	strb	r2, [r3, #1]
    r = 1;
 8004f16:	2301      	movs	r3, #1
 8004f18:	60fb      	str	r3, [r7, #12]
    goto Done;
 8004f1a:	e00f      	b.n	8004f3c <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8004f1c:	4b0a      	ldr	r3, [pc, #40]	; (8004f48 <_cbOnUARTTx+0x5c>)
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	2201      	movs	r2, #1
 8004f22:	6879      	ldr	r1, [r7, #4]
 8004f24:	4618      	mov	r0, r3
 8004f26:	f000 fa19 	bl	800535c <SEGGER_RTT_ReadUpBufferNoLock>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	da02      	bge.n	8004f3a <_cbOnUARTTx+0x4e>
    r = 0;
 8004f34:	2300      	movs	r3, #0
 8004f36:	60fb      	str	r3, [r7, #12]
 8004f38:	e000      	b.n	8004f3c <_cbOnUARTTx+0x50>
  }
Done:
 8004f3a:	bf00      	nop
  return r;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3710      	adds	r7, #16
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	20000014 	.word	0x20000014
 8004f4c:	08007f10 	.word	0x08007f10

08004f50 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8004f58:	4a04      	ldr	r2, [pc, #16]	; (8004f6c <SEGGER_UART_init+0x1c>)
 8004f5a:	4905      	ldr	r1, [pc, #20]	; (8004f70 <SEGGER_UART_init+0x20>)
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 f863 	bl	8005028 <HIF_UART_Init>
}
 8004f62:	bf00      	nop
 8004f64:	3708      	adds	r7, #8
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	08004ead 	.word	0x08004ead
 8004f70:	08004eed 	.word	0x08004eed

08004f74 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8004f7a:	4b1e      	ldr	r3, [pc, #120]	; (8004ff4 <USART2_IRQHandler+0x80>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f003 0320 	and.w	r3, r3, #32
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d011      	beq.n	8004fae <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8004f8a:	4b1b      	ldr	r3, [pc, #108]	; (8004ff8 <USART2_IRQHandler+0x84>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f003 030b 	and.w	r3, r3, #11
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d108      	bne.n	8004fae <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8004f9c:	4b17      	ldr	r3, [pc, #92]	; (8004ffc <USART2_IRQHandler+0x88>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d004      	beq.n	8004fae <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8004fa4:	4b15      	ldr	r3, [pc, #84]	; (8004ffc <USART2_IRQHandler+0x88>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	79fa      	ldrb	r2, [r7, #7]
 8004faa:	4610      	mov	r0, r2
 8004fac:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d01a      	beq.n	8004fee <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8004fb8:	4b11      	ldr	r3, [pc, #68]	; (8005000 <USART2_IRQHandler+0x8c>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d015      	beq.n	8004fec <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8004fc0:	4b0f      	ldr	r3, [pc, #60]	; (8005000 <USART2_IRQHandler+0x8c>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	1dfa      	adds	r2, r7, #7
 8004fc6:	4610      	mov	r0, r2
 8004fc8:	4798      	blx	r3
 8004fca:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d106      	bne.n	8004fe0 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8004fd2:	4b0c      	ldr	r3, [pc, #48]	; (8005004 <USART2_IRQHandler+0x90>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a0b      	ldr	r2, [pc, #44]	; (8005004 <USART2_IRQHandler+0x90>)
 8004fd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fdc:	6013      	str	r3, [r2, #0]
 8004fde:	e006      	b.n	8004fee <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8004fe0:	4b04      	ldr	r3, [pc, #16]	; (8004ff4 <USART2_IRQHandler+0x80>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8004fe4:	79fa      	ldrb	r2, [r7, #7]
 8004fe6:	4b04      	ldr	r3, [pc, #16]	; (8004ff8 <USART2_IRQHandler+0x84>)
 8004fe8:	601a      	str	r2, [r3, #0]
 8004fea:	e000      	b.n	8004fee <USART2_IRQHandler+0x7a>
      return;
 8004fec:	bf00      	nop
    }
  }
}
 8004fee:	3710      	adds	r7, #16
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	40004400 	.word	0x40004400
 8004ff8:	40004404 	.word	0x40004404
 8004ffc:	20012f38 	.word	0x20012f38
 8005000:	20012f3c 	.word	0x20012f3c
 8005004:	4000440c 	.word	0x4000440c

08005008 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8005008:	b480      	push	{r7}
 800500a:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 800500c:	4b05      	ldr	r3, [pc, #20]	; (8005024 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a04      	ldr	r2, [pc, #16]	; (8005024 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8005012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005016:	6013      	str	r3, [r2, #0]
}
 8005018:	bf00      	nop
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop
 8005024:	4000440c 	.word	0x4000440c

08005028 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8005028:	b580      	push	{r7, lr}
 800502a:	b086      	sub	sp, #24
 800502c:	af00      	add	r7, sp, #0
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	60b9      	str	r1, [r7, #8]
 8005032:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8005034:	4b2e      	ldr	r3, [pc, #184]	; (80050f0 <HIF_UART_Init+0xc8>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a2d      	ldr	r2, [pc, #180]	; (80050f0 <HIF_UART_Init+0xc8>)
 800503a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800503e:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8005040:	4b2c      	ldr	r3, [pc, #176]	; (80050f4 <HIF_UART_Init+0xcc>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a2b      	ldr	r2, [pc, #172]	; (80050f4 <HIF_UART_Init+0xcc>)
 8005046:	f043 0301 	orr.w	r3, r3, #1
 800504a:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 800504c:	4b2a      	ldr	r3, [pc, #168]	; (80050f8 <HIF_UART_Init+0xd0>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005058:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8005060:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8005062:	4a25      	ldr	r2, [pc, #148]	; (80050f8 <HIF_UART_Init+0xd0>)
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8005068:	4b24      	ldr	r3, [pc, #144]	; (80050fc <HIF_UART_Init+0xd4>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005074:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800507c:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 800507e:	4a1f      	ldr	r2, [pc, #124]	; (80050fc <HIF_UART_Init+0xd4>)
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8005084:	4b1e      	ldr	r3, [pc, #120]	; (8005100 <HIF_UART_Init+0xd8>)
 8005086:	f24a 022c 	movw	r2, #41004	; 0xa02c
 800508a:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 800508c:	4b1d      	ldr	r3, [pc, #116]	; (8005104 <HIF_UART_Init+0xdc>)
 800508e:	2200      	movs	r2, #0
 8005090:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8005092:	4b1d      	ldr	r3, [pc, #116]	; (8005108 <HIF_UART_Init+0xe0>)
 8005094:	2280      	movs	r2, #128	; 0x80
 8005096:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	00db      	lsls	r3, r3, #3
 800509c:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 800509e:	4a1b      	ldr	r2, [pc, #108]	; (800510c <HIF_UART_Init+0xe4>)
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050a6:	3301      	adds	r3, #1
 80050a8:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	085b      	lsrs	r3, r3, #1
 80050ae:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050b6:	d302      	bcc.n	80050be <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 80050b8:	f640 73ff 	movw	r3, #4095	; 0xfff
 80050bc:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d004      	beq.n	80050ce <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	011b      	lsls	r3, r3, #4
 80050c8:	4a11      	ldr	r2, [pc, #68]	; (8005110 <HIF_UART_Init+0xe8>)
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 80050ce:	4a11      	ldr	r2, [pc, #68]	; (8005114 <HIF_UART_Init+0xec>)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 80050d4:	4a10      	ldr	r2, [pc, #64]	; (8005118 <HIF_UART_Init+0xf0>)
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 80050da:	2106      	movs	r1, #6
 80050dc:	2026      	movs	r0, #38	; 0x26
 80050de:	f7ff feab 	bl	8004e38 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 80050e2:	2026      	movs	r0, #38	; 0x26
 80050e4:	f7ff fe8a 	bl	8004dfc <__NVIC_EnableIRQ>
}
 80050e8:	bf00      	nop
 80050ea:	3718      	adds	r7, #24
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	40023840 	.word	0x40023840
 80050f4:	40023830 	.word	0x40023830
 80050f8:	40020020 	.word	0x40020020
 80050fc:	40020000 	.word	0x40020000
 8005100:	4000440c 	.word	0x4000440c
 8005104:	40004410 	.word	0x40004410
 8005108:	40004414 	.word	0x40004414
 800510c:	0501bd00 	.word	0x0501bd00
 8005110:	40004408 	.word	0x40004408
 8005114:	20012f38 	.word	0x20012f38
 8005118:	20012f3c 	.word	0x20012f3c

0800511c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005122:	4b24      	ldr	r3, [pc, #144]	; (80051b4 <_DoInit+0x98>)
 8005124:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2203      	movs	r2, #3
 800512a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2203      	movs	r2, #3
 8005130:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a20      	ldr	r2, [pc, #128]	; (80051b8 <_DoInit+0x9c>)
 8005136:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a20      	ldr	r2, [pc, #128]	; (80051bc <_DoInit+0xa0>)
 800513c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005144:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a17      	ldr	r2, [pc, #92]	; (80051b8 <_DoInit+0x9c>)
 800515c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a17      	ldr	r2, [pc, #92]	; (80051c0 <_DoInit+0xa4>)
 8005162:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2210      	movs	r2, #16
 8005168:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	3307      	adds	r3, #7
 8005180:	4a10      	ldr	r2, [pc, #64]	; (80051c4 <_DoInit+0xa8>)
 8005182:	6810      	ldr	r0, [r2, #0]
 8005184:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005186:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a0e      	ldr	r2, [pc, #56]	; (80051c8 <_DoInit+0xac>)
 800518e:	6810      	ldr	r0, [r2, #0]
 8005190:	6018      	str	r0, [r3, #0]
 8005192:	8891      	ldrh	r1, [r2, #4]
 8005194:	7992      	ldrb	r2, [r2, #6]
 8005196:	8099      	strh	r1, [r3, #4]
 8005198:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800519a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2220      	movs	r2, #32
 80051a2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80051a4:	f3bf 8f5f 	dmb	sy
}
 80051a8:	bf00      	nop
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr
 80051b4:	20012f40 	.word	0x20012f40
 80051b8:	08007ed0 	.word	0x08007ed0
 80051bc:	20012fe8 	.word	0x20012fe8
 80051c0:	200133e8 	.word	0x200133e8
 80051c4:	08007edc 	.word	0x08007edc
 80051c8:	08007ee0 	.word	0x08007ee0

080051cc <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b08a      	sub	sp, #40	; 0x28
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80051d8:	2300      	movs	r3, #0
 80051da:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80051e8:	69ba      	ldr	r2, [r7, #24]
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d905      	bls.n	80051fc <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80051f0:	69ba      	ldr	r2, [r7, #24]
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	3b01      	subs	r3, #1
 80051f8:	627b      	str	r3, [r7, #36]	; 0x24
 80051fa:	e007      	b.n	800520c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	689a      	ldr	r2, [r3, #8]
 8005200:	69b9      	ldr	r1, [r7, #24]
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	1acb      	subs	r3, r1, r3
 8005206:	4413      	add	r3, r2
 8005208:	3b01      	subs	r3, #1
 800520a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	689a      	ldr	r2, [r3, #8]
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005216:	4293      	cmp	r3, r2
 8005218:	bf28      	it	cs
 800521a:	4613      	movcs	r3, r2
 800521c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800521e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4293      	cmp	r3, r2
 8005224:	bf28      	it	cs
 8005226:	4613      	movcs	r3, r2
 8005228:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	685a      	ldr	r2, [r3, #4]
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	4413      	add	r3, r2
 8005232:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8005234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005236:	68b9      	ldr	r1, [r7, #8]
 8005238:	6978      	ldr	r0, [r7, #20]
 800523a:	f002 f921 	bl	8007480 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800523e:	6a3a      	ldr	r2, [r7, #32]
 8005240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005242:	4413      	add	r3, r2
 8005244:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8005246:	68ba      	ldr	r2, [r7, #8]
 8005248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524a:	4413      	add	r3, r2
 800524c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8005256:	69fa      	ldr	r2, [r7, #28]
 8005258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525a:	4413      	add	r3, r2
 800525c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	69fa      	ldr	r2, [r7, #28]
 8005264:	429a      	cmp	r2, r3
 8005266:	d101      	bne.n	800526c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8005268:	2300      	movs	r3, #0
 800526a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800526c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	69fa      	ldr	r2, [r7, #28]
 8005274:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d1b2      	bne.n	80051e2 <_WriteBlocking+0x16>
  return NumBytesWritten;
 800527c:	6a3b      	ldr	r3, [r7, #32]
}
 800527e:	4618      	mov	r0, r3
 8005280:	3728      	adds	r7, #40	; 0x28
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}

08005286 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8005286:	b580      	push	{r7, lr}
 8005288:	b088      	sub	sp, #32
 800528a:	af00      	add	r7, sp, #0
 800528c:	60f8      	str	r0, [r7, #12]
 800528e:	60b9      	str	r1, [r7, #8]
 8005290:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	689a      	ldr	r2, [r3, #8]
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	1ad3      	subs	r3, r2, r3
 80052a0:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80052a2:	69ba      	ldr	r2, [r7, #24]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d911      	bls.n	80052ce <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	685a      	ldr	r2, [r3, #4]
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	4413      	add	r3, r2
 80052b2:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	68b9      	ldr	r1, [r7, #8]
 80052b8:	6938      	ldr	r0, [r7, #16]
 80052ba:	f002 f8e1 	bl	8007480 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80052be:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80052c2:	69fa      	ldr	r2, [r7, #28]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	441a      	add	r2, r3
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80052cc:	e01f      	b.n	800530e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	685a      	ldr	r2, [r3, #4]
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	4413      	add	r3, r2
 80052da:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80052dc:	697a      	ldr	r2, [r7, #20]
 80052de:	68b9      	ldr	r1, [r7, #8]
 80052e0:	6938      	ldr	r0, [r7, #16]
 80052e2:	f002 f8cd 	bl	8007480 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80052f4:	68ba      	ldr	r2, [r7, #8]
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	4413      	add	r3, r2
 80052fa:	697a      	ldr	r2, [r7, #20]
 80052fc:	4619      	mov	r1, r3
 80052fe:	6938      	ldr	r0, [r7, #16]
 8005300:	f002 f8be 	bl	8007480 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005304:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	60da      	str	r2, [r3, #12]
}
 800530e:	bf00      	nop
 8005310:	3720      	adds	r7, #32
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}

08005316 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8005316:	b480      	push	{r7}
 8005318:	b087      	sub	sp, #28
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800532a:	693a      	ldr	r2, [r7, #16]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	429a      	cmp	r2, r3
 8005330:	d808      	bhi.n	8005344 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	689a      	ldr	r2, [r3, #8]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	1ad2      	subs	r2, r2, r3
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	4413      	add	r3, r2
 800533e:	3b01      	subs	r3, #1
 8005340:	617b      	str	r3, [r7, #20]
 8005342:	e004      	b.n	800534e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8005344:	693a      	ldr	r2, [r7, #16]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	3b01      	subs	r3, #1
 800534c:	617b      	str	r3, [r7, #20]
  }
  return r;
 800534e:	697b      	ldr	r3, [r7, #20]
}
 8005350:	4618      	mov	r0, r3
 8005352:	371c      	adds	r7, #28
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800535c:	b580      	push	{r7, lr}
 800535e:	b08c      	sub	sp, #48	; 0x30
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8005368:	4b3e      	ldr	r3, [pc, #248]	; (8005464 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 800536a:	623b      	str	r3, [r7, #32]
 800536c:	6a3b      	ldr	r3, [r7, #32]
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	b2db      	uxtb	r3, r3
 8005372:	2b00      	cmp	r3, #0
 8005374:	d101      	bne.n	800537a <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8005376:	f7ff fed1 	bl	800511c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	1c5a      	adds	r2, r3, #1
 800537e:	4613      	mov	r3, r2
 8005380:	005b      	lsls	r3, r3, #1
 8005382:	4413      	add	r3, r2
 8005384:	00db      	lsls	r3, r3, #3
 8005386:	4a37      	ldr	r2, [pc, #220]	; (8005464 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005388:	4413      	add	r3, r2
 800538a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800539c:	2300      	movs	r3, #0
 800539e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80053a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d92b      	bls.n	8005400 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80053a8:	69fb      	ldr	r3, [r7, #28]
 80053aa:	689a      	ldr	r2, [r3, #8]
 80053ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80053b2:	697a      	ldr	r2, [r7, #20]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4293      	cmp	r3, r2
 80053b8:	bf28      	it	cs
 80053ba:	4613      	movcs	r3, r2
 80053bc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	685a      	ldr	r2, [r3, #4]
 80053c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c4:	4413      	add	r3, r2
 80053c6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80053c8:	697a      	ldr	r2, [r7, #20]
 80053ca:	6939      	ldr	r1, [r7, #16]
 80053cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80053ce:	f002 f857 	bl	8007480 <memcpy>
    NumBytesRead += NumBytesRem;
 80053d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	4413      	add	r3, r2
 80053d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80053da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	4413      	add	r3, r2
 80053e0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80053ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	4413      	add	r3, r2
 80053f0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d101      	bne.n	8005400 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 80053fc:	2300      	movs	r3, #0
 80053fe:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005400:	69ba      	ldr	r2, [r7, #24]
 8005402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005408:	697a      	ldr	r2, [r7, #20]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4293      	cmp	r3, r2
 800540e:	bf28      	it	cs
 8005410:	4613      	movcs	r3, r2
 8005412:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d019      	beq.n	800544e <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	685a      	ldr	r2, [r3, #4]
 800541e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005420:	4413      	add	r3, r2
 8005422:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005424:	697a      	ldr	r2, [r7, #20]
 8005426:	6939      	ldr	r1, [r7, #16]
 8005428:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800542a:	f002 f829 	bl	8007480 <memcpy>
    NumBytesRead += NumBytesRem;
 800542e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	4413      	add	r3, r2
 8005434:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005436:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	4413      	add	r3, r2
 800543c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005446:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	4413      	add	r3, r2
 800544c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 800544e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005450:	2b00      	cmp	r3, #0
 8005452:	d002      	beq.n	800545a <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005458:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800545a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800545c:	4618      	mov	r0, r3
 800545e:	3730      	adds	r7, #48	; 0x30
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}
 8005464:	20012f40 	.word	0x20012f40

08005468 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005468:	b580      	push	{r7, lr}
 800546a:	b08c      	sub	sp, #48	; 0x30
 800546c:	af00      	add	r7, sp, #0
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005474:	4b3e      	ldr	r3, [pc, #248]	; (8005570 <SEGGER_RTT_ReadNoLock+0x108>)
 8005476:	623b      	str	r3, [r7, #32]
 8005478:	6a3b      	ldr	r3, [r7, #32]
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	b2db      	uxtb	r3, r3
 800547e:	2b00      	cmp	r3, #0
 8005480:	d101      	bne.n	8005486 <SEGGER_RTT_ReadNoLock+0x1e>
 8005482:	f7ff fe4b 	bl	800511c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	4613      	mov	r3, r2
 800548a:	005b      	lsls	r3, r3, #1
 800548c:	4413      	add	r3, r2
 800548e:	00db      	lsls	r3, r3, #3
 8005490:	3360      	adds	r3, #96	; 0x60
 8005492:	4a37      	ldr	r2, [pc, #220]	; (8005570 <SEGGER_RTT_ReadNoLock+0x108>)
 8005494:	4413      	add	r3, r2
 8005496:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80054a8:	2300      	movs	r3, #0
 80054aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80054ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d92b      	bls.n	800550c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	689a      	ldr	r2, [r3, #8]
 80054b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ba:	1ad3      	subs	r3, r2, r3
 80054bc:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80054be:	697a      	ldr	r2, [r7, #20]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4293      	cmp	r3, r2
 80054c4:	bf28      	it	cs
 80054c6:	4613      	movcs	r3, r2
 80054c8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	685a      	ldr	r2, [r3, #4]
 80054ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d0:	4413      	add	r3, r2
 80054d2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80054d4:	697a      	ldr	r2, [r7, #20]
 80054d6:	6939      	ldr	r1, [r7, #16]
 80054d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80054da:	f001 ffd1 	bl	8007480 <memcpy>
    NumBytesRead += NumBytesRem;
 80054de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	4413      	add	r3, r2
 80054e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80054e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	4413      	add	r3, r2
 80054ec:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80054f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	4413      	add	r3, r2
 80054fc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005504:	429a      	cmp	r2, r3
 8005506:	d101      	bne.n	800550c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005508:	2300      	movs	r3, #0
 800550a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800550c:	69ba      	ldr	r2, [r7, #24]
 800550e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005514:	697a      	ldr	r2, [r7, #20]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4293      	cmp	r3, r2
 800551a:	bf28      	it	cs
 800551c:	4613      	movcs	r3, r2
 800551e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d019      	beq.n	800555a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	685a      	ldr	r2, [r3, #4]
 800552a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800552c:	4413      	add	r3, r2
 800552e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005530:	697a      	ldr	r2, [r7, #20]
 8005532:	6939      	ldr	r1, [r7, #16]
 8005534:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005536:	f001 ffa3 	bl	8007480 <memcpy>
    NumBytesRead += NumBytesRem;
 800553a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	4413      	add	r3, r2
 8005540:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	4413      	add	r3, r2
 8005548:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005552:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	4413      	add	r3, r2
 8005558:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800555a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800555c:	2b00      	cmp	r3, #0
 800555e:	d002      	beq.n	8005566 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005564:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005568:	4618      	mov	r0, r3
 800556a:	3730      	adds	r7, #48	; 0x30
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}
 8005570:	20012f40 	.word	0x20012f40

08005574 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005574:	b580      	push	{r7, lr}
 8005576:	b088      	sub	sp, #32
 8005578:	af00      	add	r7, sp, #0
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005584:	68fa      	ldr	r2, [r7, #12]
 8005586:	4613      	mov	r3, r2
 8005588:	005b      	lsls	r3, r3, #1
 800558a:	4413      	add	r3, r2
 800558c:	00db      	lsls	r3, r3, #3
 800558e:	3360      	adds	r3, #96	; 0x60
 8005590:	4a1f      	ldr	r2, [pc, #124]	; (8005610 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8005592:	4413      	add	r3, r2
 8005594:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	695b      	ldr	r3, [r3, #20]
 800559a:	2b02      	cmp	r3, #2
 800559c:	d029      	beq.n	80055f2 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d82e      	bhi.n	8005600 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d002      	beq.n	80055ac <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d013      	beq.n	80055d2 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 80055aa:	e029      	b.n	8005600 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80055ac:	6978      	ldr	r0, [r7, #20]
 80055ae:	f7ff feb2 	bl	8005316 <_GetAvailWriteSpace>
 80055b2:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80055b4:	693a      	ldr	r2, [r7, #16]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d202      	bcs.n	80055c2 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 80055bc:	2300      	movs	r3, #0
 80055be:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80055c0:	e021      	b.n	8005606 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	69b9      	ldr	r1, [r7, #24]
 80055ca:	6978      	ldr	r0, [r7, #20]
 80055cc:	f7ff fe5b 	bl	8005286 <_WriteNoCheck>
    break;
 80055d0:	e019      	b.n	8005606 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80055d2:	6978      	ldr	r0, [r7, #20]
 80055d4:	f7ff fe9f 	bl	8005316 <_GetAvailWriteSpace>
 80055d8:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	4293      	cmp	r3, r2
 80055e0:	bf28      	it	cs
 80055e2:	4613      	movcs	r3, r2
 80055e4:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80055e6:	69fa      	ldr	r2, [r7, #28]
 80055e8:	69b9      	ldr	r1, [r7, #24]
 80055ea:	6978      	ldr	r0, [r7, #20]
 80055ec:	f7ff fe4b 	bl	8005286 <_WriteNoCheck>
    break;
 80055f0:	e009      	b.n	8005606 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	69b9      	ldr	r1, [r7, #24]
 80055f6:	6978      	ldr	r0, [r7, #20]
 80055f8:	f7ff fde8 	bl	80051cc <_WriteBlocking>
 80055fc:	61f8      	str	r0, [r7, #28]
    break;
 80055fe:	e002      	b.n	8005606 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8005600:	2300      	movs	r3, #0
 8005602:	61fb      	str	r3, [r7, #28]
    break;
 8005604:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8005606:	69fb      	ldr	r3, [r7, #28]
}
 8005608:	4618      	mov	r0, r3
 800560a:	3720      	adds	r7, #32
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}
 8005610:	20012f40 	.word	0x20012f40

08005614 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005614:	b580      	push	{r7, lr}
 8005616:	b088      	sub	sp, #32
 8005618:	af00      	add	r7, sp, #0
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005620:	4b0e      	ldr	r3, [pc, #56]	; (800565c <SEGGER_RTT_WriteDownBuffer+0x48>)
 8005622:	61fb      	str	r3, [r7, #28]
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	b2db      	uxtb	r3, r3
 800562a:	2b00      	cmp	r3, #0
 800562c:	d101      	bne.n	8005632 <SEGGER_RTT_WriteDownBuffer+0x1e>
 800562e:	f7ff fd75 	bl	800511c <_DoInit>
  SEGGER_RTT_LOCK();
 8005632:	f3ef 8311 	mrs	r3, BASEPRI
 8005636:	f04f 0120 	mov.w	r1, #32
 800563a:	f381 8811 	msr	BASEPRI, r1
 800563e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	68b9      	ldr	r1, [r7, #8]
 8005644:	68f8      	ldr	r0, [r7, #12]
 8005646:	f7ff ff95 	bl	8005574 <SEGGER_RTT_WriteDownBufferNoLock>
 800564a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005652:	697b      	ldr	r3, [r7, #20]
}
 8005654:	4618      	mov	r0, r3
 8005656:	3720      	adds	r7, #32
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}
 800565c:	20012f40 	.word	0x20012f40

08005660 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005660:	b580      	push	{r7, lr}
 8005662:	b088      	sub	sp, #32
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	607a      	str	r2, [r7, #4]
 800566c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800566e:	4b3d      	ldr	r3, [pc, #244]	; (8005764 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005670:	61bb      	str	r3, [r7, #24]
 8005672:	69bb      	ldr	r3, [r7, #24]
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	b2db      	uxtb	r3, r3
 8005678:	2b00      	cmp	r3, #0
 800567a:	d101      	bne.n	8005680 <SEGGER_RTT_AllocUpBuffer+0x20>
 800567c:	f7ff fd4e 	bl	800511c <_DoInit>
  SEGGER_RTT_LOCK();
 8005680:	f3ef 8311 	mrs	r3, BASEPRI
 8005684:	f04f 0120 	mov.w	r1, #32
 8005688:	f381 8811 	msr	BASEPRI, r1
 800568c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800568e:	4b35      	ldr	r3, [pc, #212]	; (8005764 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005690:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005692:	2300      	movs	r3, #0
 8005694:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005696:	6939      	ldr	r1, [r7, #16]
 8005698:	69fb      	ldr	r3, [r7, #28]
 800569a:	1c5a      	adds	r2, r3, #1
 800569c:	4613      	mov	r3, r2
 800569e:	005b      	lsls	r3, r3, #1
 80056a0:	4413      	add	r3, r2
 80056a2:	00db      	lsls	r3, r3, #3
 80056a4:	440b      	add	r3, r1
 80056a6:	3304      	adds	r3, #4
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d008      	beq.n	80056c0 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	3301      	adds	r3, #1
 80056b2:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	69fa      	ldr	r2, [r7, #28]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	dbeb      	blt.n	8005696 <SEGGER_RTT_AllocUpBuffer+0x36>
 80056be:	e000      	b.n	80056c2 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80056c0:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	69fa      	ldr	r2, [r7, #28]
 80056c8:	429a      	cmp	r2, r3
 80056ca:	da3f      	bge.n	800574c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80056cc:	6939      	ldr	r1, [r7, #16]
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	1c5a      	adds	r2, r3, #1
 80056d2:	4613      	mov	r3, r2
 80056d4:	005b      	lsls	r3, r3, #1
 80056d6:	4413      	add	r3, r2
 80056d8:	00db      	lsls	r3, r3, #3
 80056da:	440b      	add	r3, r1
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80056e0:	6939      	ldr	r1, [r7, #16]
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	1c5a      	adds	r2, r3, #1
 80056e6:	4613      	mov	r3, r2
 80056e8:	005b      	lsls	r3, r3, #1
 80056ea:	4413      	add	r3, r2
 80056ec:	00db      	lsls	r3, r3, #3
 80056ee:	440b      	add	r3, r1
 80056f0:	3304      	adds	r3, #4
 80056f2:	68ba      	ldr	r2, [r7, #8]
 80056f4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80056f6:	6939      	ldr	r1, [r7, #16]
 80056f8:	69fa      	ldr	r2, [r7, #28]
 80056fa:	4613      	mov	r3, r2
 80056fc:	005b      	lsls	r3, r3, #1
 80056fe:	4413      	add	r3, r2
 8005700:	00db      	lsls	r3, r3, #3
 8005702:	440b      	add	r3, r1
 8005704:	3320      	adds	r3, #32
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800570a:	6939      	ldr	r1, [r7, #16]
 800570c:	69fa      	ldr	r2, [r7, #28]
 800570e:	4613      	mov	r3, r2
 8005710:	005b      	lsls	r3, r3, #1
 8005712:	4413      	add	r3, r2
 8005714:	00db      	lsls	r3, r3, #3
 8005716:	440b      	add	r3, r1
 8005718:	3328      	adds	r3, #40	; 0x28
 800571a:	2200      	movs	r2, #0
 800571c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800571e:	6939      	ldr	r1, [r7, #16]
 8005720:	69fa      	ldr	r2, [r7, #28]
 8005722:	4613      	mov	r3, r2
 8005724:	005b      	lsls	r3, r3, #1
 8005726:	4413      	add	r3, r2
 8005728:	00db      	lsls	r3, r3, #3
 800572a:	440b      	add	r3, r1
 800572c:	3324      	adds	r3, #36	; 0x24
 800572e:	2200      	movs	r2, #0
 8005730:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005732:	6939      	ldr	r1, [r7, #16]
 8005734:	69fa      	ldr	r2, [r7, #28]
 8005736:	4613      	mov	r3, r2
 8005738:	005b      	lsls	r3, r3, #1
 800573a:	4413      	add	r3, r2
 800573c:	00db      	lsls	r3, r3, #3
 800573e:	440b      	add	r3, r1
 8005740:	332c      	adds	r3, #44	; 0x2c
 8005742:	683a      	ldr	r2, [r7, #0]
 8005744:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005746:	f3bf 8f5f 	dmb	sy
 800574a:	e002      	b.n	8005752 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800574c:	f04f 33ff 	mov.w	r3, #4294967295
 8005750:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005758:	69fb      	ldr	r3, [r7, #28]
}
 800575a:	4618      	mov	r0, r3
 800575c:	3720      	adds	r7, #32
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	20012f40 	.word	0x20012f40

08005768 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005768:	b580      	push	{r7, lr}
 800576a:	b088      	sub	sp, #32
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	607a      	str	r2, [r7, #4]
 8005774:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005776:	4b33      	ldr	r3, [pc, #204]	; (8005844 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005778:	61bb      	str	r3, [r7, #24]
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	b2db      	uxtb	r3, r3
 8005780:	2b00      	cmp	r3, #0
 8005782:	d101      	bne.n	8005788 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005784:	f7ff fcca 	bl	800511c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005788:	4b2e      	ldr	r3, [pc, #184]	; (8005844 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 800578a:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	695b      	ldr	r3, [r3, #20]
 8005790:	461a      	mov	r2, r3
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	4293      	cmp	r3, r2
 8005796:	d24d      	bcs.n	8005834 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8005798:	f3ef 8311 	mrs	r3, BASEPRI
 800579c:	f04f 0120 	mov.w	r1, #32
 80057a0:	f381 8811 	msr	BASEPRI, r1
 80057a4:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d031      	beq.n	8005810 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 80057ac:	6979      	ldr	r1, [r7, #20]
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	4613      	mov	r3, r2
 80057b2:	005b      	lsls	r3, r3, #1
 80057b4:	4413      	add	r3, r2
 80057b6:	00db      	lsls	r3, r3, #3
 80057b8:	440b      	add	r3, r1
 80057ba:	3360      	adds	r3, #96	; 0x60
 80057bc:	68ba      	ldr	r2, [r7, #8]
 80057be:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 80057c0:	6979      	ldr	r1, [r7, #20]
 80057c2:	68fa      	ldr	r2, [r7, #12]
 80057c4:	4613      	mov	r3, r2
 80057c6:	005b      	lsls	r3, r3, #1
 80057c8:	4413      	add	r3, r2
 80057ca:	00db      	lsls	r3, r3, #3
 80057cc:	440b      	add	r3, r1
 80057ce:	3364      	adds	r3, #100	; 0x64
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 80057d4:	6979      	ldr	r1, [r7, #20]
 80057d6:	68fa      	ldr	r2, [r7, #12]
 80057d8:	4613      	mov	r3, r2
 80057da:	005b      	lsls	r3, r3, #1
 80057dc:	4413      	add	r3, r2
 80057de:	00db      	lsls	r3, r3, #3
 80057e0:	440b      	add	r3, r1
 80057e2:	3368      	adds	r3, #104	; 0x68
 80057e4:	683a      	ldr	r2, [r7, #0]
 80057e6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 80057e8:	6979      	ldr	r1, [r7, #20]
 80057ea:	68fa      	ldr	r2, [r7, #12]
 80057ec:	4613      	mov	r3, r2
 80057ee:	005b      	lsls	r3, r3, #1
 80057f0:	4413      	add	r3, r2
 80057f2:	00db      	lsls	r3, r3, #3
 80057f4:	440b      	add	r3, r1
 80057f6:	3370      	adds	r3, #112	; 0x70
 80057f8:	2200      	movs	r2, #0
 80057fa:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 80057fc:	6979      	ldr	r1, [r7, #20]
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	4613      	mov	r3, r2
 8005802:	005b      	lsls	r3, r3, #1
 8005804:	4413      	add	r3, r2
 8005806:	00db      	lsls	r3, r3, #3
 8005808:	440b      	add	r3, r1
 800580a:	336c      	adds	r3, #108	; 0x6c
 800580c:	2200      	movs	r2, #0
 800580e:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8005810:	6979      	ldr	r1, [r7, #20]
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	4613      	mov	r3, r2
 8005816:	005b      	lsls	r3, r3, #1
 8005818:	4413      	add	r3, r2
 800581a:	00db      	lsls	r3, r3, #3
 800581c:	440b      	add	r3, r1
 800581e:	3374      	adds	r3, #116	; 0x74
 8005820:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005822:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005824:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800582e:	2300      	movs	r3, #0
 8005830:	61fb      	str	r3, [r7, #28]
 8005832:	e002      	b.n	800583a <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8005834:	f04f 33ff 	mov.w	r3, #4294967295
 8005838:	61fb      	str	r3, [r7, #28]
  }
  return r;
 800583a:	69fb      	ldr	r3, [r7, #28]
}
 800583c:	4618      	mov	r0, r3
 800583e:	3720      	adds	r7, #32
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}
 8005844:	20012f40 	.word	0x20012f40

08005848 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005848:	b480      	push	{r7}
 800584a:	b087      	sub	sp, #28
 800584c:	af00      	add	r7, sp, #0
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005854:	2300      	movs	r3, #0
 8005856:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005858:	e002      	b.n	8005860 <_EncodeStr+0x18>
    Len++;
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	3301      	adds	r3, #1
 800585e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005860:	68ba      	ldr	r2, [r7, #8]
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	4413      	add	r3, r2
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d1f6      	bne.n	800585a <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 800586c:	693a      	ldr	r2, [r7, #16]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	429a      	cmp	r2, r3
 8005872:	d901      	bls.n	8005878 <_EncodeStr+0x30>
    Len = Limit;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	2bfe      	cmp	r3, #254	; 0xfe
 800587c:	d806      	bhi.n	800588c <_EncodeStr+0x44>
    *pPayload++ = Len; 
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	1c5a      	adds	r2, r3, #1
 8005882:	60fa      	str	r2, [r7, #12]
 8005884:	693a      	ldr	r2, [r7, #16]
 8005886:	b2d2      	uxtb	r2, r2
 8005888:	701a      	strb	r2, [r3, #0]
 800588a:	e011      	b.n	80058b0 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	1c5a      	adds	r2, r3, #1
 8005890:	60fa      	str	r2, [r7, #12]
 8005892:	22ff      	movs	r2, #255	; 0xff
 8005894:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	1c5a      	adds	r2, r3, #1
 800589a:	60fa      	str	r2, [r7, #12]
 800589c:	693a      	ldr	r2, [r7, #16]
 800589e:	b2d2      	uxtb	r2, r2
 80058a0:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	0a19      	lsrs	r1, r3, #8
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	1c5a      	adds	r2, r3, #1
 80058aa:	60fa      	str	r2, [r7, #12]
 80058ac:	b2ca      	uxtb	r2, r1
 80058ae:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80058b0:	2300      	movs	r3, #0
 80058b2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80058b4:	e00a      	b.n	80058cc <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 80058b6:	68ba      	ldr	r2, [r7, #8]
 80058b8:	1c53      	adds	r3, r2, #1
 80058ba:	60bb      	str	r3, [r7, #8]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	1c59      	adds	r1, r3, #1
 80058c0:	60f9      	str	r1, [r7, #12]
 80058c2:	7812      	ldrb	r2, [r2, #0]
 80058c4:	701a      	strb	r2, [r3, #0]
    n++;
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	3301      	adds	r3, #1
 80058ca:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80058cc:	697a      	ldr	r2, [r7, #20]
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d3f0      	bcc.n	80058b6 <_EncodeStr+0x6e>
  }
  return pPayload;
 80058d4:	68fb      	ldr	r3, [r7, #12]
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	371c      	adds	r7, #28
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr

080058e2 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80058e2:	b480      	push	{r7}
 80058e4:	b083      	sub	sp, #12
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	3304      	adds	r3, #4
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	370c      	adds	r7, #12
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr
	...

080058fc <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b082      	sub	sp, #8
 8005900:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005902:	4b36      	ldr	r3, [pc, #216]	; (80059dc <_HandleIncomingPacket+0xe0>)
 8005904:	7e1b      	ldrb	r3, [r3, #24]
 8005906:	4618      	mov	r0, r3
 8005908:	1cfb      	adds	r3, r7, #3
 800590a:	2201      	movs	r2, #1
 800590c:	4619      	mov	r1, r3
 800590e:	f7ff fdab 	bl	8005468 <SEGGER_RTT_ReadNoLock>
 8005912:	4603      	mov	r3, r0
 8005914:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2b00      	cmp	r3, #0
 800591a:	dd54      	ble.n	80059c6 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 800591c:	78fb      	ldrb	r3, [r7, #3]
 800591e:	2b80      	cmp	r3, #128	; 0x80
 8005920:	d032      	beq.n	8005988 <_HandleIncomingPacket+0x8c>
 8005922:	2b80      	cmp	r3, #128	; 0x80
 8005924:	dc42      	bgt.n	80059ac <_HandleIncomingPacket+0xb0>
 8005926:	2b07      	cmp	r3, #7
 8005928:	dc16      	bgt.n	8005958 <_HandleIncomingPacket+0x5c>
 800592a:	2b00      	cmp	r3, #0
 800592c:	dd3e      	ble.n	80059ac <_HandleIncomingPacket+0xb0>
 800592e:	3b01      	subs	r3, #1
 8005930:	2b06      	cmp	r3, #6
 8005932:	d83b      	bhi.n	80059ac <_HandleIncomingPacket+0xb0>
 8005934:	a201      	add	r2, pc, #4	; (adr r2, 800593c <_HandleIncomingPacket+0x40>)
 8005936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800593a:	bf00      	nop
 800593c:	0800595f 	.word	0x0800595f
 8005940:	08005965 	.word	0x08005965
 8005944:	0800596b 	.word	0x0800596b
 8005948:	08005971 	.word	0x08005971
 800594c:	08005977 	.word	0x08005977
 8005950:	0800597d 	.word	0x0800597d
 8005954:	08005983 	.word	0x08005983
 8005958:	2b7f      	cmp	r3, #127	; 0x7f
 800595a:	d036      	beq.n	80059ca <_HandleIncomingPacket+0xce>
 800595c:	e026      	b.n	80059ac <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800595e:	f000 ff45 	bl	80067ec <SEGGER_SYSVIEW_Start>
      break;
 8005962:	e037      	b.n	80059d4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005964:	f000 fffe 	bl	8006964 <SEGGER_SYSVIEW_Stop>
      break;
 8005968:	e034      	b.n	80059d4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800596a:	f001 f9d7 	bl	8006d1c <SEGGER_SYSVIEW_RecordSystime>
      break;
 800596e:	e031      	b.n	80059d4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005970:	f001 f99c 	bl	8006cac <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005974:	e02e      	b.n	80059d4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005976:	f001 f81b 	bl	80069b0 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800597a:	e02b      	b.n	80059d4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800597c:	f001 fc6a 	bl	8007254 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005980:	e028      	b.n	80059d4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005982:	f001 fc49 	bl	8007218 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005986:	e025      	b.n	80059d4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005988:	4b14      	ldr	r3, [pc, #80]	; (80059dc <_HandleIncomingPacket+0xe0>)
 800598a:	7e1b      	ldrb	r3, [r3, #24]
 800598c:	4618      	mov	r0, r3
 800598e:	1cfb      	adds	r3, r7, #3
 8005990:	2201      	movs	r2, #1
 8005992:	4619      	mov	r1, r3
 8005994:	f7ff fd68 	bl	8005468 <SEGGER_RTT_ReadNoLock>
 8005998:	4603      	mov	r3, r0
 800599a:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	dd15      	ble.n	80059ce <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80059a2:	78fb      	ldrb	r3, [r7, #3]
 80059a4:	4618      	mov	r0, r3
 80059a6:	f001 fbb7 	bl	8007118 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80059aa:	e010      	b.n	80059ce <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80059ac:	78fb      	ldrb	r3, [r7, #3]
 80059ae:	b25b      	sxtb	r3, r3
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	da0e      	bge.n	80059d2 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80059b4:	4b09      	ldr	r3, [pc, #36]	; (80059dc <_HandleIncomingPacket+0xe0>)
 80059b6:	7e1b      	ldrb	r3, [r3, #24]
 80059b8:	4618      	mov	r0, r3
 80059ba:	1cfb      	adds	r3, r7, #3
 80059bc:	2201      	movs	r2, #1
 80059be:	4619      	mov	r1, r3
 80059c0:	f7ff fd52 	bl	8005468 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80059c4:	e005      	b.n	80059d2 <_HandleIncomingPacket+0xd6>
    }
  }
 80059c6:	bf00      	nop
 80059c8:	e004      	b.n	80059d4 <_HandleIncomingPacket+0xd8>
      break;
 80059ca:	bf00      	nop
 80059cc:	e002      	b.n	80059d4 <_HandleIncomingPacket+0xd8>
      break;
 80059ce:	bf00      	nop
 80059d0:	e000      	b.n	80059d4 <_HandleIncomingPacket+0xd8>
      break;
 80059d2:	bf00      	nop
}
 80059d4:	bf00      	nop
 80059d6:	3708      	adds	r7, #8
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}
 80059dc:	20014400 	.word	0x20014400

080059e0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b08c      	sub	sp, #48	; 0x30
 80059e4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80059e6:	2301      	movs	r3, #1
 80059e8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80059ea:	1d3b      	adds	r3, r7, #4
 80059ec:	3301      	adds	r3, #1
 80059ee:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059f4:	4b32      	ldr	r3, [pc, #200]	; (8005ac0 <_TrySendOverflowPacket+0xe0>)
 80059f6:	695b      	ldr	r3, [r3, #20]
 80059f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80059fa:	e00b      	b.n	8005a14 <_TrySendOverflowPacket+0x34>
 80059fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059fe:	b2da      	uxtb	r2, r3
 8005a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a02:	1c59      	adds	r1, r3, #1
 8005a04:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005a06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a0a:	b2d2      	uxtb	r2, r2
 8005a0c:	701a      	strb	r2, [r3, #0]
 8005a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a10:	09db      	lsrs	r3, r3, #7
 8005a12:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a16:	2b7f      	cmp	r3, #127	; 0x7f
 8005a18:	d8f0      	bhi.n	80059fc <_TrySendOverflowPacket+0x1c>
 8005a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a1c:	1c5a      	adds	r2, r3, #1
 8005a1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a22:	b2d2      	uxtb	r2, r2
 8005a24:	701a      	strb	r2, [r3, #0]
 8005a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a28:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005a2a:	4b26      	ldr	r3, [pc, #152]	; (8005ac4 <_TrySendOverflowPacket+0xe4>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005a30:	4b23      	ldr	r3, [pc, #140]	; (8005ac0 <_TrySendOverflowPacket+0xe0>)
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	69ba      	ldr	r2, [r7, #24]
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	627b      	str	r3, [r7, #36]	; 0x24
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	623b      	str	r3, [r7, #32]
 8005a42:	e00b      	b.n	8005a5c <_TrySendOverflowPacket+0x7c>
 8005a44:	6a3b      	ldr	r3, [r7, #32]
 8005a46:	b2da      	uxtb	r2, r3
 8005a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4a:	1c59      	adds	r1, r3, #1
 8005a4c:	6279      	str	r1, [r7, #36]	; 0x24
 8005a4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a52:	b2d2      	uxtb	r2, r2
 8005a54:	701a      	strb	r2, [r3, #0]
 8005a56:	6a3b      	ldr	r3, [r7, #32]
 8005a58:	09db      	lsrs	r3, r3, #7
 8005a5a:	623b      	str	r3, [r7, #32]
 8005a5c:	6a3b      	ldr	r3, [r7, #32]
 8005a5e:	2b7f      	cmp	r3, #127	; 0x7f
 8005a60:	d8f0      	bhi.n	8005a44 <_TrySendOverflowPacket+0x64>
 8005a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a64:	1c5a      	adds	r2, r3, #1
 8005a66:	627a      	str	r2, [r7, #36]	; 0x24
 8005a68:	6a3a      	ldr	r2, [r7, #32]
 8005a6a:	b2d2      	uxtb	r2, r2
 8005a6c:	701a      	strb	r2, [r3, #0]
 8005a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a70:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8005a72:	4b13      	ldr	r3, [pc, #76]	; (8005ac0 <_TrySendOverflowPacket+0xe0>)
 8005a74:	785b      	ldrb	r3, [r3, #1]
 8005a76:	4618      	mov	r0, r3
 8005a78:	1d3b      	adds	r3, r7, #4
 8005a7a:	69fa      	ldr	r2, [r7, #28]
 8005a7c:	1ad3      	subs	r3, r2, r3
 8005a7e:	461a      	mov	r2, r3
 8005a80:	1d3b      	adds	r3, r7, #4
 8005a82:	4619      	mov	r1, r3
 8005a84:	f7fa fba4 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8005a8c:	f7ff fabc 	bl	8005008 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d009      	beq.n	8005aaa <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005a96:	4a0a      	ldr	r2, [pc, #40]	; (8005ac0 <_TrySendOverflowPacket+0xe0>)
 8005a98:	69bb      	ldr	r3, [r7, #24]
 8005a9a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005a9c:	4b08      	ldr	r3, [pc, #32]	; (8005ac0 <_TrySendOverflowPacket+0xe0>)
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	3b01      	subs	r3, #1
 8005aa2:	b2da      	uxtb	r2, r3
 8005aa4:	4b06      	ldr	r3, [pc, #24]	; (8005ac0 <_TrySendOverflowPacket+0xe0>)
 8005aa6:	701a      	strb	r2, [r3, #0]
 8005aa8:	e004      	b.n	8005ab4 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005aaa:	4b05      	ldr	r3, [pc, #20]	; (8005ac0 <_TrySendOverflowPacket+0xe0>)
 8005aac:	695b      	ldr	r3, [r3, #20]
 8005aae:	3301      	adds	r3, #1
 8005ab0:	4a03      	ldr	r2, [pc, #12]	; (8005ac0 <_TrySendOverflowPacket+0xe0>)
 8005ab2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005ab4:	693b      	ldr	r3, [r7, #16]
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3730      	adds	r7, #48	; 0x30
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
 8005abe:	bf00      	nop
 8005ac0:	20014400 	.word	0x20014400
 8005ac4:	e0001004 	.word	0xe0001004

08005ac8 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b08a      	sub	sp, #40	; 0x28
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	60b9      	str	r1, [r7, #8]
 8005ad2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005ad4:	4b6d      	ldr	r3, [pc, #436]	; (8005c8c <_SendPacket+0x1c4>)
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d010      	beq.n	8005afe <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005adc:	4b6b      	ldr	r3, [pc, #428]	; (8005c8c <_SendPacket+0x1c4>)
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	f000 80a5 	beq.w	8005c30 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005ae6:	4b69      	ldr	r3, [pc, #420]	; (8005c8c <_SendPacket+0x1c4>)
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	2b02      	cmp	r3, #2
 8005aec:	d109      	bne.n	8005b02 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005aee:	f7ff ff77 	bl	80059e0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005af2:	4b66      	ldr	r3, [pc, #408]	; (8005c8c <_SendPacket+0x1c4>)
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	f040 809c 	bne.w	8005c34 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8005afc:	e001      	b.n	8005b02 <_SendPacket+0x3a>
    goto Send;
 8005afe:	bf00      	nop
 8005b00:	e000      	b.n	8005b04 <_SendPacket+0x3c>
Send:
 8005b02:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2b1f      	cmp	r3, #31
 8005b08:	d809      	bhi.n	8005b1e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005b0a:	4b60      	ldr	r3, [pc, #384]	; (8005c8c <_SendPacket+0x1c4>)
 8005b0c:	69da      	ldr	r2, [r3, #28]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	fa22 f303 	lsr.w	r3, r2, r3
 8005b14:	f003 0301 	and.w	r3, r3, #1
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	f040 808d 	bne.w	8005c38 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2b17      	cmp	r3, #23
 8005b22:	d807      	bhi.n	8005b34 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	3b01      	subs	r3, #1
 8005b28:	60fb      	str	r3, [r7, #12]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	b2da      	uxtb	r2, r3
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	701a      	strb	r2, [r3, #0]
 8005b32:	e03d      	b.n	8005bb0 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005b34:	68ba      	ldr	r2, [r7, #8]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	2b7f      	cmp	r3, #127	; 0x7f
 8005b40:	d912      	bls.n	8005b68 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	09da      	lsrs	r2, r3, #7
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	3b01      	subs	r3, #1
 8005b4a:	60fb      	str	r3, [r7, #12]
 8005b4c:	b2d2      	uxtb	r2, r2
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	3a01      	subs	r2, #1
 8005b5a:	60fa      	str	r2, [r7, #12]
 8005b5c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005b60:	b2da      	uxtb	r2, r3
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	701a      	strb	r2, [r3, #0]
 8005b66:	e006      	b.n	8005b76 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	3b01      	subs	r3, #1
 8005b6c:	60fb      	str	r3, [r7, #12]
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	b2da      	uxtb	r2, r3
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2b7f      	cmp	r3, #127	; 0x7f
 8005b7a:	d912      	bls.n	8005ba2 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	09da      	lsrs	r2, r3, #7
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	3b01      	subs	r3, #1
 8005b84:	60fb      	str	r3, [r7, #12]
 8005b86:	b2d2      	uxtb	r2, r2
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	68fa      	ldr	r2, [r7, #12]
 8005b92:	3a01      	subs	r2, #1
 8005b94:	60fa      	str	r2, [r7, #12]
 8005b96:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005b9a:	b2da      	uxtb	r2, r3
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	701a      	strb	r2, [r3, #0]
 8005ba0:	e006      	b.n	8005bb0 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	3b01      	subs	r3, #1
 8005ba6:	60fb      	str	r3, [r7, #12]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	b2da      	uxtb	r2, r3
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005bb0:	4b37      	ldr	r3, [pc, #220]	; (8005c90 <_SendPacket+0x1c8>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005bb6:	4b35      	ldr	r3, [pc, #212]	; (8005c8c <_SendPacket+0x1c4>)
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	69ba      	ldr	r2, [r7, #24]
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	627b      	str	r3, [r7, #36]	; 0x24
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	623b      	str	r3, [r7, #32]
 8005bc8:	e00b      	b.n	8005be2 <_SendPacket+0x11a>
 8005bca:	6a3b      	ldr	r3, [r7, #32]
 8005bcc:	b2da      	uxtb	r2, r3
 8005bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd0:	1c59      	adds	r1, r3, #1
 8005bd2:	6279      	str	r1, [r7, #36]	; 0x24
 8005bd4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bd8:	b2d2      	uxtb	r2, r2
 8005bda:	701a      	strb	r2, [r3, #0]
 8005bdc:	6a3b      	ldr	r3, [r7, #32]
 8005bde:	09db      	lsrs	r3, r3, #7
 8005be0:	623b      	str	r3, [r7, #32]
 8005be2:	6a3b      	ldr	r3, [r7, #32]
 8005be4:	2b7f      	cmp	r3, #127	; 0x7f
 8005be6:	d8f0      	bhi.n	8005bca <_SendPacket+0x102>
 8005be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bea:	1c5a      	adds	r2, r3, #1
 8005bec:	627a      	str	r2, [r7, #36]	; 0x24
 8005bee:	6a3a      	ldr	r2, [r7, #32]
 8005bf0:	b2d2      	uxtb	r2, r2
 8005bf2:	701a      	strb	r2, [r3, #0]
 8005bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf6:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005bf8:	4b24      	ldr	r3, [pc, #144]	; (8005c8c <_SendPacket+0x1c4>)
 8005bfa:	785b      	ldrb	r3, [r3, #1]
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	68ba      	ldr	r2, [r7, #8]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	1ad3      	subs	r3, r2, r3
 8005c04:	461a      	mov	r2, r3
 8005c06:	68f9      	ldr	r1, [r7, #12]
 8005c08:	f7fa fae2 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8005c10:	f7ff f9fa 	bl	8005008 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d003      	beq.n	8005c22 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005c1a:	4a1c      	ldr	r2, [pc, #112]	; (8005c8c <_SendPacket+0x1c4>)
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	60d3      	str	r3, [r2, #12]
 8005c20:	e00b      	b.n	8005c3a <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005c22:	4b1a      	ldr	r3, [pc, #104]	; (8005c8c <_SendPacket+0x1c4>)
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	3301      	adds	r3, #1
 8005c28:	b2da      	uxtb	r2, r3
 8005c2a:	4b18      	ldr	r3, [pc, #96]	; (8005c8c <_SendPacket+0x1c4>)
 8005c2c:	701a      	strb	r2, [r3, #0]
 8005c2e:	e004      	b.n	8005c3a <_SendPacket+0x172>
    goto SendDone;
 8005c30:	bf00      	nop
 8005c32:	e002      	b.n	8005c3a <_SendPacket+0x172>
      goto SendDone;
 8005c34:	bf00      	nop
 8005c36:	e000      	b.n	8005c3a <_SendPacket+0x172>
      goto SendDone;
 8005c38:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005c3a:	4b14      	ldr	r3, [pc, #80]	; (8005c8c <_SendPacket+0x1c4>)
 8005c3c:	7e1b      	ldrb	r3, [r3, #24]
 8005c3e:	4619      	mov	r1, r3
 8005c40:	4a14      	ldr	r2, [pc, #80]	; (8005c94 <_SendPacket+0x1cc>)
 8005c42:	460b      	mov	r3, r1
 8005c44:	005b      	lsls	r3, r3, #1
 8005c46:	440b      	add	r3, r1
 8005c48:	00db      	lsls	r3, r3, #3
 8005c4a:	4413      	add	r3, r2
 8005c4c:	336c      	adds	r3, #108	; 0x6c
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	4b0e      	ldr	r3, [pc, #56]	; (8005c8c <_SendPacket+0x1c4>)
 8005c52:	7e1b      	ldrb	r3, [r3, #24]
 8005c54:	4618      	mov	r0, r3
 8005c56:	490f      	ldr	r1, [pc, #60]	; (8005c94 <_SendPacket+0x1cc>)
 8005c58:	4603      	mov	r3, r0
 8005c5a:	005b      	lsls	r3, r3, #1
 8005c5c:	4403      	add	r3, r0
 8005c5e:	00db      	lsls	r3, r3, #3
 8005c60:	440b      	add	r3, r1
 8005c62:	3370      	adds	r3, #112	; 0x70
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d00b      	beq.n	8005c82 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005c6a:	4b08      	ldr	r3, [pc, #32]	; (8005c8c <_SendPacket+0x1c4>)
 8005c6c:	789b      	ldrb	r3, [r3, #2]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d107      	bne.n	8005c82 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005c72:	4b06      	ldr	r3, [pc, #24]	; (8005c8c <_SendPacket+0x1c4>)
 8005c74:	2201      	movs	r2, #1
 8005c76:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005c78:	f7ff fe40 	bl	80058fc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005c7c:	4b03      	ldr	r3, [pc, #12]	; (8005c8c <_SendPacket+0x1c4>)
 8005c7e:	2200      	movs	r2, #0
 8005c80:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005c82:	bf00      	nop
 8005c84:	3728      	adds	r7, #40	; 0x28
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}
 8005c8a:	bf00      	nop
 8005c8c:	20014400 	.word	0x20014400
 8005c90:	e0001004 	.word	0xe0001004
 8005c94:	20012f40 	.word	0x20012f40

08005c98 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b08a      	sub	sp, #40	; 0x28
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	460b      	mov	r3, r1
 8005ca2:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	691b      	ldr	r3, [r3, #16]
 8005ca8:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	3301      	adds	r3, #1
 8005cae:	2b80      	cmp	r3, #128	; 0x80
 8005cb0:	d80a      	bhi.n	8005cc8 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	1c59      	adds	r1, r3, #1
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	6051      	str	r1, [r2, #4]
 8005cbc:	78fa      	ldrb	r2, [r7, #3]
 8005cbe:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	1c5a      	adds	r2, r3, #1
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	691b      	ldr	r3, [r3, #16]
 8005ccc:	2b80      	cmp	r3, #128	; 0x80
 8005cce:	d15a      	bne.n	8005d86 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	691a      	ldr	r2, [r3, #16]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	b2d2      	uxtb	r2, r2
 8005cda:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	627b      	str	r3, [r7, #36]	; 0x24
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	623b      	str	r3, [r7, #32]
 8005cf0:	e00b      	b.n	8005d0a <_StoreChar+0x72>
 8005cf2:	6a3b      	ldr	r3, [r7, #32]
 8005cf4:	b2da      	uxtb	r2, r3
 8005cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf8:	1c59      	adds	r1, r3, #1
 8005cfa:	6279      	str	r1, [r7, #36]	; 0x24
 8005cfc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d00:	b2d2      	uxtb	r2, r2
 8005d02:	701a      	strb	r2, [r3, #0]
 8005d04:	6a3b      	ldr	r3, [r7, #32]
 8005d06:	09db      	lsrs	r3, r3, #7
 8005d08:	623b      	str	r3, [r7, #32]
 8005d0a:	6a3b      	ldr	r3, [r7, #32]
 8005d0c:	2b7f      	cmp	r3, #127	; 0x7f
 8005d0e:	d8f0      	bhi.n	8005cf2 <_StoreChar+0x5a>
 8005d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d12:	1c5a      	adds	r2, r3, #1
 8005d14:	627a      	str	r2, [r7, #36]	; 0x24
 8005d16:	6a3a      	ldr	r2, [r7, #32]
 8005d18:	b2d2      	uxtb	r2, r2
 8005d1a:	701a      	strb	r2, [r3, #0]
 8005d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1e:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	61fb      	str	r3, [r7, #28]
 8005d24:	2300      	movs	r3, #0
 8005d26:	61bb      	str	r3, [r7, #24]
 8005d28:	e00b      	b.n	8005d42 <_StoreChar+0xaa>
 8005d2a:	69bb      	ldr	r3, [r7, #24]
 8005d2c:	b2da      	uxtb	r2, r3
 8005d2e:	69fb      	ldr	r3, [r7, #28]
 8005d30:	1c59      	adds	r1, r3, #1
 8005d32:	61f9      	str	r1, [r7, #28]
 8005d34:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d38:	b2d2      	uxtb	r2, r2
 8005d3a:	701a      	strb	r2, [r3, #0]
 8005d3c:	69bb      	ldr	r3, [r7, #24]
 8005d3e:	09db      	lsrs	r3, r3, #7
 8005d40:	61bb      	str	r3, [r7, #24]
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	2b7f      	cmp	r3, #127	; 0x7f
 8005d46:	d8f0      	bhi.n	8005d2a <_StoreChar+0x92>
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	1c5a      	adds	r2, r3, #1
 8005d4c:	61fa      	str	r2, [r7, #28]
 8005d4e:	69ba      	ldr	r2, [r7, #24]
 8005d50:	b2d2      	uxtb	r2, r2
 8005d52:	701a      	strb	r2, [r3, #0]
 8005d54:	69fb      	ldr	r3, [r7, #28]
 8005d56:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	221a      	movs	r2, #26
 8005d5e:	6939      	ldr	r1, [r7, #16]
 8005d60:	4618      	mov	r0, r3
 8005d62:	f7ff feb1 	bl	8005ac8 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f7ff fdb9 	bl	80058e2 <_PreparePacket>
 8005d70:	4602      	mov	r2, r0
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	1c5a      	adds	r2, r3, #1
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	611a      	str	r2, [r3, #16]
  }
}
 8005d86:	bf00      	nop
 8005d88:	3728      	adds	r7, #40	; 0x28
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
	...

08005d90 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b08a      	sub	sp, #40	; 0x28
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	607a      	str	r2, [r7, #4]
 8005d9c:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8005da2:	2301      	movs	r3, #1
 8005da4:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8005da6:	2301      	movs	r3, #1
 8005da8:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005daa:	e007      	b.n	8005dbc <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005dac:	6a3a      	ldr	r2, [r7, #32]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005db4:	623b      	str	r3, [r7, #32]
    Width++;
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	3301      	adds	r3, #1
 8005dba:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005dbc:	6a3a      	ldr	r2, [r7, #32]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d2f3      	bcs.n	8005dac <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005dc4:	683a      	ldr	r2, [r7, #0]
 8005dc6:	69fb      	ldr	r3, [r7, #28]
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d901      	bls.n	8005dd0 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dd2:	f003 0301 	and.w	r3, r3, #1
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d11f      	bne.n	8005e1a <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8005dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d01c      	beq.n	8005e1a <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005de2:	f003 0302 	and.w	r3, r3, #2
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d005      	beq.n	8005df6 <_PrintUnsigned+0x66>
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d102      	bne.n	8005df6 <_PrintUnsigned+0x66>
        c = '0';
 8005df0:	2330      	movs	r3, #48	; 0x30
 8005df2:	76fb      	strb	r3, [r7, #27]
 8005df4:	e001      	b.n	8005dfa <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8005df6:	2320      	movs	r3, #32
 8005df8:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005dfa:	e007      	b.n	8005e0c <_PrintUnsigned+0x7c>
        FieldWidth--;
 8005dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfe:	3b01      	subs	r3, #1
 8005e00:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8005e02:	7efb      	ldrb	r3, [r7, #27]
 8005e04:	4619      	mov	r1, r3
 8005e06:	68f8      	ldr	r0, [r7, #12]
 8005e08:	f7ff ff46 	bl	8005c98 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d003      	beq.n	8005e1a <_PrintUnsigned+0x8a>
 8005e12:	69fa      	ldr	r2, [r7, #28]
 8005e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d3f0      	bcc.n	8005dfc <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d903      	bls.n	8005e28 <_PrintUnsigned+0x98>
      NumDigits--;
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	3b01      	subs	r3, #1
 8005e24:	603b      	str	r3, [r7, #0]
 8005e26:	e009      	b.n	8005e3c <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8005e28:	68ba      	ldr	r2, [r7, #8]
 8005e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e30:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8005e32:	697a      	ldr	r2, [r7, #20]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d200      	bcs.n	8005e3c <_PrintUnsigned+0xac>
        break;
 8005e3a:	e005      	b.n	8005e48 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8005e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	fb02 f303 	mul.w	r3, r2, r3
 8005e44:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005e46:	e7e8      	b.n	8005e1a <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8005e48:	68ba      	ldr	r2, [r7, #8]
 8005e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e50:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e56:	fb02 f303 	mul.w	r3, r2, r3
 8005e5a:	68ba      	ldr	r2, [r7, #8]
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8005e60:	4a15      	ldr	r2, [pc, #84]	; (8005eb8 <_PrintUnsigned+0x128>)
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	4413      	add	r3, r2
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	4619      	mov	r1, r3
 8005e6a:	68f8      	ldr	r0, [r7, #12]
 8005e6c:	f7ff ff14 	bl	8005c98 <_StoreChar>
    Digit /= Base;
 8005e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e78:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8005e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d1e3      	bne.n	8005e48 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8005e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e82:	f003 0301 	and.w	r3, r3, #1
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d011      	beq.n	8005eae <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8005e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d00e      	beq.n	8005eae <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005e90:	e006      	b.n	8005ea0 <_PrintUnsigned+0x110>
        FieldWidth--;
 8005e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e94:	3b01      	subs	r3, #1
 8005e96:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8005e98:	2120      	movs	r1, #32
 8005e9a:	68f8      	ldr	r0, [r7, #12]
 8005e9c:	f7ff fefc 	bl	8005c98 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d003      	beq.n	8005eae <_PrintUnsigned+0x11e>
 8005ea6:	69fa      	ldr	r2, [r7, #28]
 8005ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d3f1      	bcc.n	8005e92 <_PrintUnsigned+0x102>
      }
    }
  }
}
 8005eae:	bf00      	nop
 8005eb0:	3728      	adds	r7, #40	; 0x28
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	08007f20 	.word	0x08007f20

08005ebc <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b088      	sub	sp, #32
 8005ec0:	af02      	add	r7, sp, #8
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	60b9      	str	r1, [r7, #8]
 8005ec6:	607a      	str	r2, [r7, #4]
 8005ec8:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	bfb8      	it	lt
 8005ed0:	425b      	neglt	r3, r3
 8005ed2:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005ed8:	e007      	b.n	8005eea <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	693a      	ldr	r2, [r7, #16]
 8005ede:	fb92 f3f3 	sdiv	r3, r2, r3
 8005ee2:	613b      	str	r3, [r7, #16]
    Width++;
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	3301      	adds	r3, #1
 8005ee8:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	693a      	ldr	r2, [r7, #16]
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	daf3      	bge.n	8005eda <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8005ef2:	683a      	ldr	r2, [r7, #0]
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d901      	bls.n	8005efe <_PrintInt+0x42>
    Width = NumDigits;
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8005efe:	6a3b      	ldr	r3, [r7, #32]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d00a      	beq.n	8005f1a <_PrintInt+0x5e>
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	db04      	blt.n	8005f14 <_PrintInt+0x58>
 8005f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0c:	f003 0304 	and.w	r3, r3, #4
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d002      	beq.n	8005f1a <_PrintInt+0x5e>
    FieldWidth--;
 8005f14:	6a3b      	ldr	r3, [r7, #32]
 8005f16:	3b01      	subs	r3, #1
 8005f18:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8005f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1c:	f003 0302 	and.w	r3, r3, #2
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d002      	beq.n	8005f2a <_PrintInt+0x6e>
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d016      	beq.n	8005f58 <_PrintInt+0x9c>
 8005f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2c:	f003 0301 	and.w	r3, r3, #1
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d111      	bne.n	8005f58 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005f34:	6a3b      	ldr	r3, [r7, #32]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d00e      	beq.n	8005f58 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005f3a:	e006      	b.n	8005f4a <_PrintInt+0x8e>
        FieldWidth--;
 8005f3c:	6a3b      	ldr	r3, [r7, #32]
 8005f3e:	3b01      	subs	r3, #1
 8005f40:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005f42:	2120      	movs	r1, #32
 8005f44:	68f8      	ldr	r0, [r7, #12]
 8005f46:	f7ff fea7 	bl	8005c98 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005f4a:	6a3b      	ldr	r3, [r7, #32]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d003      	beq.n	8005f58 <_PrintInt+0x9c>
 8005f50:	697a      	ldr	r2, [r7, #20]
 8005f52:	6a3b      	ldr	r3, [r7, #32]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d3f1      	bcc.n	8005f3c <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	da07      	bge.n	8005f6e <_PrintInt+0xb2>
    v = -v;
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	425b      	negs	r3, r3
 8005f62:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005f64:	212d      	movs	r1, #45	; 0x2d
 8005f66:	68f8      	ldr	r0, [r7, #12]
 8005f68:	f7ff fe96 	bl	8005c98 <_StoreChar>
 8005f6c:	e008      	b.n	8005f80 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8005f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f70:	f003 0304 	and.w	r3, r3, #4
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d003      	beq.n	8005f80 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005f78:	212b      	movs	r1, #43	; 0x2b
 8005f7a:	68f8      	ldr	r0, [r7, #12]
 8005f7c:	f7ff fe8c 	bl	8005c98 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f82:	f003 0302 	and.w	r3, r3, #2
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d019      	beq.n	8005fbe <_PrintInt+0x102>
 8005f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8c:	f003 0301 	and.w	r3, r3, #1
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d114      	bne.n	8005fbe <_PrintInt+0x102>
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d111      	bne.n	8005fbe <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005f9a:	6a3b      	ldr	r3, [r7, #32]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d00e      	beq.n	8005fbe <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005fa0:	e006      	b.n	8005fb0 <_PrintInt+0xf4>
        FieldWidth--;
 8005fa2:	6a3b      	ldr	r3, [r7, #32]
 8005fa4:	3b01      	subs	r3, #1
 8005fa6:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005fa8:	2130      	movs	r1, #48	; 0x30
 8005faa:	68f8      	ldr	r0, [r7, #12]
 8005fac:	f7ff fe74 	bl	8005c98 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005fb0:	6a3b      	ldr	r3, [r7, #32]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d003      	beq.n	8005fbe <_PrintInt+0x102>
 8005fb6:	697a      	ldr	r2, [r7, #20]
 8005fb8:	6a3b      	ldr	r3, [r7, #32]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d3f1      	bcc.n	8005fa2 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005fbe:	68b9      	ldr	r1, [r7, #8]
 8005fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc2:	9301      	str	r3, [sp, #4]
 8005fc4:	6a3b      	ldr	r3, [r7, #32]
 8005fc6:	9300      	str	r3, [sp, #0]
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	68f8      	ldr	r0, [r7, #12]
 8005fce:	f7ff fedf 	bl	8005d90 <_PrintUnsigned>
}
 8005fd2:	bf00      	nop
 8005fd4:	3718      	adds	r7, #24
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
	...

08005fdc <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b098      	sub	sp, #96	; 0x60
 8005fe0:	af02      	add	r7, sp, #8
 8005fe2:	60f8      	str	r0, [r7, #12]
 8005fe4:	60b9      	str	r1, [r7, #8]
 8005fe6:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005fe8:	f3ef 8311 	mrs	r3, BASEPRI
 8005fec:	f04f 0120 	mov.w	r1, #32
 8005ff0:	f381 8811 	msr	BASEPRI, r1
 8005ff4:	633b      	str	r3, [r7, #48]	; 0x30
 8005ff6:	48b7      	ldr	r0, [pc, #732]	; (80062d4 <_VPrintTarget+0x2f8>)
 8005ff8:	f7ff fc73 	bl	80058e2 <_PreparePacket>
 8005ffc:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005ffe:	4bb5      	ldr	r3, [pc, #724]	; (80062d4 <_VPrintTarget+0x2f8>)
 8006000:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8006002:	2300      	movs	r3, #0
 8006004:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8006006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006008:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	3301      	adds	r3, #1
 800600e:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	3301      	adds	r3, #1
 8006020:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8006022:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006026:	2b00      	cmp	r3, #0
 8006028:	f000 8183 	beq.w	8006332 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 800602c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006030:	2b25      	cmp	r3, #37	; 0x25
 8006032:	f040 8170 	bne.w	8006316 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8006036:	2300      	movs	r3, #0
 8006038:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 800603a:	2301      	movs	r3, #1
 800603c:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8006046:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800604a:	3b23      	subs	r3, #35	; 0x23
 800604c:	2b0d      	cmp	r3, #13
 800604e:	d83f      	bhi.n	80060d0 <_VPrintTarget+0xf4>
 8006050:	a201      	add	r2, pc, #4	; (adr r2, 8006058 <_VPrintTarget+0x7c>)
 8006052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006056:	bf00      	nop
 8006058:	080060c1 	.word	0x080060c1
 800605c:	080060d1 	.word	0x080060d1
 8006060:	080060d1 	.word	0x080060d1
 8006064:	080060d1 	.word	0x080060d1
 8006068:	080060d1 	.word	0x080060d1
 800606c:	080060d1 	.word	0x080060d1
 8006070:	080060d1 	.word	0x080060d1
 8006074:	080060d1 	.word	0x080060d1
 8006078:	080060b1 	.word	0x080060b1
 800607c:	080060d1 	.word	0x080060d1
 8006080:	08006091 	.word	0x08006091
 8006084:	080060d1 	.word	0x080060d1
 8006088:	080060d1 	.word	0x080060d1
 800608c:	080060a1 	.word	0x080060a1
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8006090:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006092:	f043 0301 	orr.w	r3, r3, #1
 8006096:	64bb      	str	r3, [r7, #72]	; 0x48
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	3301      	adds	r3, #1
 800609c:	60fb      	str	r3, [r7, #12]
 800609e:	e01a      	b.n	80060d6 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 80060a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060a2:	f043 0302 	orr.w	r3, r3, #2
 80060a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	3301      	adds	r3, #1
 80060ac:	60fb      	str	r3, [r7, #12]
 80060ae:	e012      	b.n	80060d6 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80060b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060b2:	f043 0304 	orr.w	r3, r3, #4
 80060b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	3301      	adds	r3, #1
 80060bc:	60fb      	str	r3, [r7, #12]
 80060be:	e00a      	b.n	80060d6 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80060c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060c2:	f043 0308 	orr.w	r3, r3, #8
 80060c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	3301      	adds	r3, #1
 80060cc:	60fb      	str	r3, [r7, #12]
 80060ce:	e002      	b.n	80060d6 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 80060d0:	2300      	movs	r3, #0
 80060d2:	653b      	str	r3, [r7, #80]	; 0x50
 80060d4:	bf00      	nop
        }
      } while (v);
 80060d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d1b0      	bne.n	800603e <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 80060dc:	2300      	movs	r3, #0
 80060de:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	781b      	ldrb	r3, [r3, #0]
 80060e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 80060e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80060ec:	2b2f      	cmp	r3, #47	; 0x2f
 80060ee:	d912      	bls.n	8006116 <_VPrintTarget+0x13a>
 80060f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80060f4:	2b39      	cmp	r3, #57	; 0x39
 80060f6:	d80e      	bhi.n	8006116 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	3301      	adds	r3, #1
 80060fc:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 80060fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006100:	4613      	mov	r3, r2
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	4413      	add	r3, r2
 8006106:	005b      	lsls	r3, r3, #1
 8006108:	461a      	mov	r2, r3
 800610a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800610e:	4413      	add	r3, r2
 8006110:	3b30      	subs	r3, #48	; 0x30
 8006112:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8006114:	e7e4      	b.n	80060e0 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8006116:	2300      	movs	r3, #0
 8006118:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8006122:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006126:	2b2e      	cmp	r3, #46	; 0x2e
 8006128:	d11d      	bne.n	8006166 <_VPrintTarget+0x18a>
        sFormat++;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	3301      	adds	r3, #1
 800612e:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8006138:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800613c:	2b2f      	cmp	r3, #47	; 0x2f
 800613e:	d912      	bls.n	8006166 <_VPrintTarget+0x18a>
 8006140:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006144:	2b39      	cmp	r3, #57	; 0x39
 8006146:	d80e      	bhi.n	8006166 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	3301      	adds	r3, #1
 800614c:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 800614e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006150:	4613      	mov	r3, r2
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	4413      	add	r3, r2
 8006156:	005b      	lsls	r3, r3, #1
 8006158:	461a      	mov	r2, r3
 800615a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800615e:	4413      	add	r3, r2
 8006160:	3b30      	subs	r3, #48	; 0x30
 8006162:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8006164:	e7e4      	b.n	8006130 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 800616e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006172:	2b6c      	cmp	r3, #108	; 0x6c
 8006174:	d003      	beq.n	800617e <_VPrintTarget+0x1a2>
 8006176:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800617a:	2b68      	cmp	r3, #104	; 0x68
 800617c:	d107      	bne.n	800618e <_VPrintTarget+0x1b2>
          c = *sFormat;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	3301      	adds	r3, #1
 800618a:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 800618c:	e7ef      	b.n	800616e <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 800618e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006192:	2b25      	cmp	r3, #37	; 0x25
 8006194:	f000 80b3 	beq.w	80062fe <_VPrintTarget+0x322>
 8006198:	2b25      	cmp	r3, #37	; 0x25
 800619a:	f2c0 80b7 	blt.w	800630c <_VPrintTarget+0x330>
 800619e:	2b78      	cmp	r3, #120	; 0x78
 80061a0:	f300 80b4 	bgt.w	800630c <_VPrintTarget+0x330>
 80061a4:	2b58      	cmp	r3, #88	; 0x58
 80061a6:	f2c0 80b1 	blt.w	800630c <_VPrintTarget+0x330>
 80061aa:	3b58      	subs	r3, #88	; 0x58
 80061ac:	2b20      	cmp	r3, #32
 80061ae:	f200 80ad 	bhi.w	800630c <_VPrintTarget+0x330>
 80061b2:	a201      	add	r2, pc, #4	; (adr r2, 80061b8 <_VPrintTarget+0x1dc>)
 80061b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b8:	080062af 	.word	0x080062af
 80061bc:	0800630d 	.word	0x0800630d
 80061c0:	0800630d 	.word	0x0800630d
 80061c4:	0800630d 	.word	0x0800630d
 80061c8:	0800630d 	.word	0x0800630d
 80061cc:	0800630d 	.word	0x0800630d
 80061d0:	0800630d 	.word	0x0800630d
 80061d4:	0800630d 	.word	0x0800630d
 80061d8:	0800630d 	.word	0x0800630d
 80061dc:	0800630d 	.word	0x0800630d
 80061e0:	0800630d 	.word	0x0800630d
 80061e4:	0800623d 	.word	0x0800623d
 80061e8:	08006263 	.word	0x08006263
 80061ec:	0800630d 	.word	0x0800630d
 80061f0:	0800630d 	.word	0x0800630d
 80061f4:	0800630d 	.word	0x0800630d
 80061f8:	0800630d 	.word	0x0800630d
 80061fc:	0800630d 	.word	0x0800630d
 8006200:	0800630d 	.word	0x0800630d
 8006204:	0800630d 	.word	0x0800630d
 8006208:	0800630d 	.word	0x0800630d
 800620c:	0800630d 	.word	0x0800630d
 8006210:	0800630d 	.word	0x0800630d
 8006214:	0800630d 	.word	0x0800630d
 8006218:	080062d9 	.word	0x080062d9
 800621c:	0800630d 	.word	0x0800630d
 8006220:	0800630d 	.word	0x0800630d
 8006224:	0800630d 	.word	0x0800630d
 8006228:	0800630d 	.word	0x0800630d
 800622c:	08006289 	.word	0x08006289
 8006230:	0800630d 	.word	0x0800630d
 8006234:	0800630d 	.word	0x0800630d
 8006238:	080062af 	.word	0x080062af
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	1d19      	adds	r1, r3, #4
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	6011      	str	r1, [r2, #0]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 800624a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800624c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8006250:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8006254:	f107 0314 	add.w	r3, r7, #20
 8006258:	4611      	mov	r1, r2
 800625a:	4618      	mov	r0, r3
 800625c:	f7ff fd1c 	bl	8005c98 <_StoreChar>
        break;
 8006260:	e055      	b.n	800630e <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	1d19      	adds	r1, r3, #4
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	6011      	str	r1, [r2, #0]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006270:	f107 0014 	add.w	r0, r7, #20
 8006274:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006276:	9301      	str	r3, [sp, #4]
 8006278:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800627a:	9300      	str	r3, [sp, #0]
 800627c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800627e:	220a      	movs	r2, #10
 8006280:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006282:	f7ff fe1b 	bl	8005ebc <_PrintInt>
        break;
 8006286:	e042      	b.n	800630e <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	1d19      	adds	r1, r3, #4
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	6011      	str	r1, [r2, #0]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006296:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006298:	f107 0014 	add.w	r0, r7, #20
 800629c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800629e:	9301      	str	r3, [sp, #4]
 80062a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062a2:	9300      	str	r3, [sp, #0]
 80062a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062a6:	220a      	movs	r2, #10
 80062a8:	f7ff fd72 	bl	8005d90 <_PrintUnsigned>
        break;
 80062ac:	e02f      	b.n	800630e <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	1d19      	adds	r1, r3, #4
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	6011      	str	r1, [r2, #0]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 80062bc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80062be:	f107 0014 	add.w	r0, r7, #20
 80062c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062c4:	9301      	str	r3, [sp, #4]
 80062c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062c8:	9300      	str	r3, [sp, #0]
 80062ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062cc:	2210      	movs	r2, #16
 80062ce:	f7ff fd5f 	bl	8005d90 <_PrintUnsigned>
        break;
 80062d2:	e01c      	b.n	800630e <_VPrintTarget+0x332>
 80062d4:	20014430 	.word	0x20014430
      case 'p':
        v = va_arg(*pParamList, int);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	1d19      	adds	r1, r3, #4
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	6011      	str	r1, [r2, #0]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 80062e6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80062e8:	f107 0014 	add.w	r0, r7, #20
 80062ec:	2300      	movs	r3, #0
 80062ee:	9301      	str	r3, [sp, #4]
 80062f0:	2308      	movs	r3, #8
 80062f2:	9300      	str	r3, [sp, #0]
 80062f4:	2308      	movs	r3, #8
 80062f6:	2210      	movs	r2, #16
 80062f8:	f7ff fd4a 	bl	8005d90 <_PrintUnsigned>
        break;
 80062fc:	e007      	b.n	800630e <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 80062fe:	f107 0314 	add.w	r3, r7, #20
 8006302:	2125      	movs	r1, #37	; 0x25
 8006304:	4618      	mov	r0, r3
 8006306:	f7ff fcc7 	bl	8005c98 <_StoreChar>
        break;
 800630a:	e000      	b.n	800630e <_VPrintTarget+0x332>
      default:
        break;
 800630c:	bf00      	nop
      }
      sFormat++;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	3301      	adds	r3, #1
 8006312:	60fb      	str	r3, [r7, #12]
 8006314:	e007      	b.n	8006326 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8006316:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800631a:	f107 0314 	add.w	r3, r7, #20
 800631e:	4611      	mov	r1, r2
 8006320:	4618      	mov	r0, r3
 8006322:	f7ff fcb9 	bl	8005c98 <_StoreChar>
    }
  } while (*sFormat);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	2b00      	cmp	r3, #0
 800632c:	f47f ae72 	bne.w	8006014 <_VPrintTarget+0x38>
 8006330:	e000      	b.n	8006334 <_VPrintTarget+0x358>
      break;
 8006332:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8006334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006336:	2b00      	cmp	r3, #0
 8006338:	d041      	beq.n	80063be <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 800633a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	b2d2      	uxtb	r2, r2
 8006340:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	643b      	str	r3, [r7, #64]	; 0x40
 8006346:	6a3b      	ldr	r3, [r7, #32]
 8006348:	63fb      	str	r3, [r7, #60]	; 0x3c
 800634a:	e00b      	b.n	8006364 <_VPrintTarget+0x388>
 800634c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800634e:	b2da      	uxtb	r2, r3
 8006350:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006352:	1c59      	adds	r1, r3, #1
 8006354:	6439      	str	r1, [r7, #64]	; 0x40
 8006356:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800635a:	b2d2      	uxtb	r2, r2
 800635c:	701a      	strb	r2, [r3, #0]
 800635e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006360:	09db      	lsrs	r3, r3, #7
 8006362:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006366:	2b7f      	cmp	r3, #127	; 0x7f
 8006368:	d8f0      	bhi.n	800634c <_VPrintTarget+0x370>
 800636a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800636c:	1c5a      	adds	r2, r3, #1
 800636e:	643a      	str	r2, [r7, #64]	; 0x40
 8006370:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006372:	b2d2      	uxtb	r2, r2
 8006374:	701a      	strb	r2, [r3, #0]
 8006376:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006378:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	63bb      	str	r3, [r7, #56]	; 0x38
 800637e:	2300      	movs	r3, #0
 8006380:	637b      	str	r3, [r7, #52]	; 0x34
 8006382:	e00b      	b.n	800639c <_VPrintTarget+0x3c0>
 8006384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006386:	b2da      	uxtb	r2, r3
 8006388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800638a:	1c59      	adds	r1, r3, #1
 800638c:	63b9      	str	r1, [r7, #56]	; 0x38
 800638e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006392:	b2d2      	uxtb	r2, r2
 8006394:	701a      	strb	r2, [r3, #0]
 8006396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006398:	09db      	lsrs	r3, r3, #7
 800639a:	637b      	str	r3, [r7, #52]	; 0x34
 800639c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800639e:	2b7f      	cmp	r3, #127	; 0x7f
 80063a0:	d8f0      	bhi.n	8006384 <_VPrintTarget+0x3a8>
 80063a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a4:	1c5a      	adds	r2, r3, #1
 80063a6:	63ba      	str	r2, [r7, #56]	; 0x38
 80063a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063aa:	b2d2      	uxtb	r2, r2
 80063ac:	701a      	strb	r2, [r3, #0]
 80063ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b0:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80063b2:	69fb      	ldr	r3, [r7, #28]
 80063b4:	69b9      	ldr	r1, [r7, #24]
 80063b6:	221a      	movs	r2, #26
 80063b8:	4618      	mov	r0, r3
 80063ba:	f7ff fb85 	bl	8005ac8 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80063be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c0:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80063c4:	bf00      	nop
 80063c6:	3758      	adds	r7, #88	; 0x58
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b086      	sub	sp, #24
 80063d0:	af02      	add	r7, sp, #8
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	607a      	str	r2, [r7, #4]
 80063d8:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80063da:	2300      	movs	r3, #0
 80063dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80063e0:	4917      	ldr	r1, [pc, #92]	; (8006440 <SEGGER_SYSVIEW_Init+0x74>)
 80063e2:	4818      	ldr	r0, [pc, #96]	; (8006444 <SEGGER_SYSVIEW_Init+0x78>)
 80063e4:	f7ff f93c 	bl	8005660 <SEGGER_RTT_AllocUpBuffer>
 80063e8:	4603      	mov	r3, r0
 80063ea:	b2da      	uxtb	r2, r3
 80063ec:	4b16      	ldr	r3, [pc, #88]	; (8006448 <SEGGER_SYSVIEW_Init+0x7c>)
 80063ee:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80063f0:	4b15      	ldr	r3, [pc, #84]	; (8006448 <SEGGER_SYSVIEW_Init+0x7c>)
 80063f2:	785a      	ldrb	r2, [r3, #1]
 80063f4:	4b14      	ldr	r3, [pc, #80]	; (8006448 <SEGGER_SYSVIEW_Init+0x7c>)
 80063f6:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80063f8:	4b13      	ldr	r3, [pc, #76]	; (8006448 <SEGGER_SYSVIEW_Init+0x7c>)
 80063fa:	7e1b      	ldrb	r3, [r3, #24]
 80063fc:	4618      	mov	r0, r3
 80063fe:	2300      	movs	r3, #0
 8006400:	9300      	str	r3, [sp, #0]
 8006402:	2308      	movs	r3, #8
 8006404:	4a11      	ldr	r2, [pc, #68]	; (800644c <SEGGER_SYSVIEW_Init+0x80>)
 8006406:	490f      	ldr	r1, [pc, #60]	; (8006444 <SEGGER_SYSVIEW_Init+0x78>)
 8006408:	f7ff f9ae 	bl	8005768 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800640c:	4b0e      	ldr	r3, [pc, #56]	; (8006448 <SEGGER_SYSVIEW_Init+0x7c>)
 800640e:	2200      	movs	r2, #0
 8006410:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006412:	4b0f      	ldr	r3, [pc, #60]	; (8006450 <SEGGER_SYSVIEW_Init+0x84>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a0c      	ldr	r2, [pc, #48]	; (8006448 <SEGGER_SYSVIEW_Init+0x7c>)
 8006418:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800641a:	4a0b      	ldr	r2, [pc, #44]	; (8006448 <SEGGER_SYSVIEW_Init+0x7c>)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006420:	4a09      	ldr	r2, [pc, #36]	; (8006448 <SEGGER_SYSVIEW_Init+0x7c>)
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8006426:	4a08      	ldr	r2, [pc, #32]	; (8006448 <SEGGER_SYSVIEW_Init+0x7c>)
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800642c:	4a06      	ldr	r2, [pc, #24]	; (8006448 <SEGGER_SYSVIEW_Init+0x7c>)
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8006432:	4b05      	ldr	r3, [pc, #20]	; (8006448 <SEGGER_SYSVIEW_Init+0x7c>)
 8006434:	2200      	movs	r2, #0
 8006436:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006438:	bf00      	nop
 800643a:	3710      	adds	r7, #16
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}
 8006440:	200133f8 	.word	0x200133f8
 8006444:	08007ee8 	.word	0x08007ee8
 8006448:	20014400 	.word	0x20014400
 800644c:	200143f8 	.word	0x200143f8
 8006450:	e0001004 	.word	0xe0001004

08006454 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006454:	b480      	push	{r7}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800645c:	4a04      	ldr	r2, [pc, #16]	; (8006470 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6113      	str	r3, [r2, #16]
}
 8006462:	bf00      	nop
 8006464:	370c      	adds	r7, #12
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr
 800646e:	bf00      	nop
 8006470:	20014400 	.word	0x20014400

08006474 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006474:	b580      	push	{r7, lr}
 8006476:	b084      	sub	sp, #16
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800647c:	f3ef 8311 	mrs	r3, BASEPRI
 8006480:	f04f 0120 	mov.w	r1, #32
 8006484:	f381 8811 	msr	BASEPRI, r1
 8006488:	60fb      	str	r3, [r7, #12]
 800648a:	4808      	ldr	r0, [pc, #32]	; (80064ac <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800648c:	f7ff fa29 	bl	80058e2 <_PreparePacket>
 8006490:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8006492:	687a      	ldr	r2, [r7, #4]
 8006494:	68b9      	ldr	r1, [r7, #8]
 8006496:	68b8      	ldr	r0, [r7, #8]
 8006498:	f7ff fb16 	bl	8005ac8 <_SendPacket>
  RECORD_END();
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f383 8811 	msr	BASEPRI, r3
}
 80064a2:	bf00      	nop
 80064a4:	3710      	adds	r7, #16
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	20014430 	.word	0x20014430

080064b0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b088      	sub	sp, #32
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80064ba:	f3ef 8311 	mrs	r3, BASEPRI
 80064be:	f04f 0120 	mov.w	r1, #32
 80064c2:	f381 8811 	msr	BASEPRI, r1
 80064c6:	617b      	str	r3, [r7, #20]
 80064c8:	4816      	ldr	r0, [pc, #88]	; (8006524 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80064ca:	f7ff fa0a 	bl	80058e2 <_PreparePacket>
 80064ce:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	61fb      	str	r3, [r7, #28]
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	61bb      	str	r3, [r7, #24]
 80064dc:	e00b      	b.n	80064f6 <SEGGER_SYSVIEW_RecordU32+0x46>
 80064de:	69bb      	ldr	r3, [r7, #24]
 80064e0:	b2da      	uxtb	r2, r3
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	1c59      	adds	r1, r3, #1
 80064e6:	61f9      	str	r1, [r7, #28]
 80064e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064ec:	b2d2      	uxtb	r2, r2
 80064ee:	701a      	strb	r2, [r3, #0]
 80064f0:	69bb      	ldr	r3, [r7, #24]
 80064f2:	09db      	lsrs	r3, r3, #7
 80064f4:	61bb      	str	r3, [r7, #24]
 80064f6:	69bb      	ldr	r3, [r7, #24]
 80064f8:	2b7f      	cmp	r3, #127	; 0x7f
 80064fa:	d8f0      	bhi.n	80064de <SEGGER_SYSVIEW_RecordU32+0x2e>
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	1c5a      	adds	r2, r3, #1
 8006500:	61fa      	str	r2, [r7, #28]
 8006502:	69ba      	ldr	r2, [r7, #24]
 8006504:	b2d2      	uxtb	r2, r2
 8006506:	701a      	strb	r2, [r3, #0]
 8006508:	69fb      	ldr	r3, [r7, #28]
 800650a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	68f9      	ldr	r1, [r7, #12]
 8006510:	6938      	ldr	r0, [r7, #16]
 8006512:	f7ff fad9 	bl	8005ac8 <_SendPacket>
  RECORD_END();
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	f383 8811 	msr	BASEPRI, r3
}
 800651c:	bf00      	nop
 800651e:	3720      	adds	r7, #32
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}
 8006524:	20014430 	.word	0x20014430

08006528 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006528:	b580      	push	{r7, lr}
 800652a:	b08c      	sub	sp, #48	; 0x30
 800652c:	af00      	add	r7, sp, #0
 800652e:	60f8      	str	r0, [r7, #12]
 8006530:	60b9      	str	r1, [r7, #8]
 8006532:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006534:	f3ef 8311 	mrs	r3, BASEPRI
 8006538:	f04f 0120 	mov.w	r1, #32
 800653c:	f381 8811 	msr	BASEPRI, r1
 8006540:	61fb      	str	r3, [r7, #28]
 8006542:	4825      	ldr	r0, [pc, #148]	; (80065d8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006544:	f7ff f9cd 	bl	80058e2 <_PreparePacket>
 8006548:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800654a:	69bb      	ldr	r3, [r7, #24]
 800654c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	62bb      	str	r3, [r7, #40]	; 0x28
 8006556:	e00b      	b.n	8006570 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800655a:	b2da      	uxtb	r2, r3
 800655c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800655e:	1c59      	adds	r1, r3, #1
 8006560:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006562:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006566:	b2d2      	uxtb	r2, r2
 8006568:	701a      	strb	r2, [r3, #0]
 800656a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800656c:	09db      	lsrs	r3, r3, #7
 800656e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006572:	2b7f      	cmp	r3, #127	; 0x7f
 8006574:	d8f0      	bhi.n	8006558 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006578:	1c5a      	adds	r2, r3, #1
 800657a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800657c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800657e:	b2d2      	uxtb	r2, r2
 8006580:	701a      	strb	r2, [r3, #0]
 8006582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006584:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	627b      	str	r3, [r7, #36]	; 0x24
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	623b      	str	r3, [r7, #32]
 800658e:	e00b      	b.n	80065a8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006590:	6a3b      	ldr	r3, [r7, #32]
 8006592:	b2da      	uxtb	r2, r3
 8006594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006596:	1c59      	adds	r1, r3, #1
 8006598:	6279      	str	r1, [r7, #36]	; 0x24
 800659a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800659e:	b2d2      	uxtb	r2, r2
 80065a0:	701a      	strb	r2, [r3, #0]
 80065a2:	6a3b      	ldr	r3, [r7, #32]
 80065a4:	09db      	lsrs	r3, r3, #7
 80065a6:	623b      	str	r3, [r7, #32]
 80065a8:	6a3b      	ldr	r3, [r7, #32]
 80065aa:	2b7f      	cmp	r3, #127	; 0x7f
 80065ac:	d8f0      	bhi.n	8006590 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80065ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b0:	1c5a      	adds	r2, r3, #1
 80065b2:	627a      	str	r2, [r7, #36]	; 0x24
 80065b4:	6a3a      	ldr	r2, [r7, #32]
 80065b6:	b2d2      	uxtb	r2, r2
 80065b8:	701a      	strb	r2, [r3, #0]
 80065ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065bc:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80065be:	68fa      	ldr	r2, [r7, #12]
 80065c0:	6979      	ldr	r1, [r7, #20]
 80065c2:	69b8      	ldr	r0, [r7, #24]
 80065c4:	f7ff fa80 	bl	8005ac8 <_SendPacket>
  RECORD_END();
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	f383 8811 	msr	BASEPRI, r3
}
 80065ce:	bf00      	nop
 80065d0:	3730      	adds	r7, #48	; 0x30
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	bf00      	nop
 80065d8:	20014430 	.word	0x20014430

080065dc <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80065dc:	b580      	push	{r7, lr}
 80065de:	b08e      	sub	sp, #56	; 0x38
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	60f8      	str	r0, [r7, #12]
 80065e4:	60b9      	str	r1, [r7, #8]
 80065e6:	607a      	str	r2, [r7, #4]
 80065e8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80065ea:	f3ef 8311 	mrs	r3, BASEPRI
 80065ee:	f04f 0120 	mov.w	r1, #32
 80065f2:	f381 8811 	msr	BASEPRI, r1
 80065f6:	61fb      	str	r3, [r7, #28]
 80065f8:	4832      	ldr	r0, [pc, #200]	; (80066c4 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80065fa:	f7ff f972 	bl	80058e2 <_PreparePacket>
 80065fe:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006600:	69bb      	ldr	r3, [r7, #24]
 8006602:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	637b      	str	r3, [r7, #52]	; 0x34
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	633b      	str	r3, [r7, #48]	; 0x30
 800660c:	e00b      	b.n	8006626 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800660e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006610:	b2da      	uxtb	r2, r3
 8006612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006614:	1c59      	adds	r1, r3, #1
 8006616:	6379      	str	r1, [r7, #52]	; 0x34
 8006618:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800661c:	b2d2      	uxtb	r2, r2
 800661e:	701a      	strb	r2, [r3, #0]
 8006620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006622:	09db      	lsrs	r3, r3, #7
 8006624:	633b      	str	r3, [r7, #48]	; 0x30
 8006626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006628:	2b7f      	cmp	r3, #127	; 0x7f
 800662a:	d8f0      	bhi.n	800660e <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800662c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800662e:	1c5a      	adds	r2, r3, #1
 8006630:	637a      	str	r2, [r7, #52]	; 0x34
 8006632:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006634:	b2d2      	uxtb	r2, r2
 8006636:	701a      	strb	r2, [r3, #0]
 8006638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800663a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	62bb      	str	r3, [r7, #40]	; 0x28
 8006644:	e00b      	b.n	800665e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8006646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006648:	b2da      	uxtb	r2, r3
 800664a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800664c:	1c59      	adds	r1, r3, #1
 800664e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006650:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006654:	b2d2      	uxtb	r2, r2
 8006656:	701a      	strb	r2, [r3, #0]
 8006658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800665a:	09db      	lsrs	r3, r3, #7
 800665c:	62bb      	str	r3, [r7, #40]	; 0x28
 800665e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006660:	2b7f      	cmp	r3, #127	; 0x7f
 8006662:	d8f0      	bhi.n	8006646 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8006664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006666:	1c5a      	adds	r2, r3, #1
 8006668:	62fa      	str	r2, [r7, #44]	; 0x2c
 800666a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800666c:	b2d2      	uxtb	r2, r2
 800666e:	701a      	strb	r2, [r3, #0]
 8006670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006672:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	627b      	str	r3, [r7, #36]	; 0x24
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	623b      	str	r3, [r7, #32]
 800667c:	e00b      	b.n	8006696 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800667e:	6a3b      	ldr	r3, [r7, #32]
 8006680:	b2da      	uxtb	r2, r3
 8006682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006684:	1c59      	adds	r1, r3, #1
 8006686:	6279      	str	r1, [r7, #36]	; 0x24
 8006688:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800668c:	b2d2      	uxtb	r2, r2
 800668e:	701a      	strb	r2, [r3, #0]
 8006690:	6a3b      	ldr	r3, [r7, #32]
 8006692:	09db      	lsrs	r3, r3, #7
 8006694:	623b      	str	r3, [r7, #32]
 8006696:	6a3b      	ldr	r3, [r7, #32]
 8006698:	2b7f      	cmp	r3, #127	; 0x7f
 800669a:	d8f0      	bhi.n	800667e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800669c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669e:	1c5a      	adds	r2, r3, #1
 80066a0:	627a      	str	r2, [r7, #36]	; 0x24
 80066a2:	6a3a      	ldr	r2, [r7, #32]
 80066a4:	b2d2      	uxtb	r2, r2
 80066a6:	701a      	strb	r2, [r3, #0]
 80066a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066aa:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	6979      	ldr	r1, [r7, #20]
 80066b0:	69b8      	ldr	r0, [r7, #24]
 80066b2:	f7ff fa09 	bl	8005ac8 <_SendPacket>
  RECORD_END();
 80066b6:	69fb      	ldr	r3, [r7, #28]
 80066b8:	f383 8811 	msr	BASEPRI, r3
}
 80066bc:	bf00      	nop
 80066be:	3738      	adds	r7, #56	; 0x38
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}
 80066c4:	20014430 	.word	0x20014430

080066c8 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b090      	sub	sp, #64	; 0x40
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	60f8      	str	r0, [r7, #12]
 80066d0:	60b9      	str	r1, [r7, #8]
 80066d2:	607a      	str	r2, [r7, #4]
 80066d4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80066d6:	f3ef 8311 	mrs	r3, BASEPRI
 80066da:	f04f 0120 	mov.w	r1, #32
 80066de:	f381 8811 	msr	BASEPRI, r1
 80066e2:	61fb      	str	r3, [r7, #28]
 80066e4:	4840      	ldr	r0, [pc, #256]	; (80067e8 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80066e6:	f7ff f8fc 	bl	80058e2 <_PreparePacket>
 80066ea:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80066ec:	69bb      	ldr	r3, [r7, #24]
 80066ee:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80066f8:	e00b      	b.n	8006712 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80066fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066fc:	b2da      	uxtb	r2, r3
 80066fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006700:	1c59      	adds	r1, r3, #1
 8006702:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006704:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006708:	b2d2      	uxtb	r2, r2
 800670a:	701a      	strb	r2, [r3, #0]
 800670c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800670e:	09db      	lsrs	r3, r3, #7
 8006710:	63bb      	str	r3, [r7, #56]	; 0x38
 8006712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006714:	2b7f      	cmp	r3, #127	; 0x7f
 8006716:	d8f0      	bhi.n	80066fa <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800671a:	1c5a      	adds	r2, r3, #1
 800671c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800671e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006720:	b2d2      	uxtb	r2, r2
 8006722:	701a      	strb	r2, [r3, #0]
 8006724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006726:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	637b      	str	r3, [r7, #52]	; 0x34
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	633b      	str	r3, [r7, #48]	; 0x30
 8006730:	e00b      	b.n	800674a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8006732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006734:	b2da      	uxtb	r2, r3
 8006736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006738:	1c59      	adds	r1, r3, #1
 800673a:	6379      	str	r1, [r7, #52]	; 0x34
 800673c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006740:	b2d2      	uxtb	r2, r2
 8006742:	701a      	strb	r2, [r3, #0]
 8006744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006746:	09db      	lsrs	r3, r3, #7
 8006748:	633b      	str	r3, [r7, #48]	; 0x30
 800674a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800674c:	2b7f      	cmp	r3, #127	; 0x7f
 800674e:	d8f0      	bhi.n	8006732 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006752:	1c5a      	adds	r2, r3, #1
 8006754:	637a      	str	r2, [r7, #52]	; 0x34
 8006756:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006758:	b2d2      	uxtb	r2, r2
 800675a:	701a      	strb	r2, [r3, #0]
 800675c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800675e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	62bb      	str	r3, [r7, #40]	; 0x28
 8006768:	e00b      	b.n	8006782 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800676a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800676c:	b2da      	uxtb	r2, r3
 800676e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006770:	1c59      	adds	r1, r3, #1
 8006772:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006774:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006778:	b2d2      	uxtb	r2, r2
 800677a:	701a      	strb	r2, [r3, #0]
 800677c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800677e:	09db      	lsrs	r3, r3, #7
 8006780:	62bb      	str	r3, [r7, #40]	; 0x28
 8006782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006784:	2b7f      	cmp	r3, #127	; 0x7f
 8006786:	d8f0      	bhi.n	800676a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800678a:	1c5a      	adds	r2, r3, #1
 800678c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800678e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006790:	b2d2      	uxtb	r2, r2
 8006792:	701a      	strb	r2, [r3, #0]
 8006794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006796:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	627b      	str	r3, [r7, #36]	; 0x24
 800679c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800679e:	623b      	str	r3, [r7, #32]
 80067a0:	e00b      	b.n	80067ba <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80067a2:	6a3b      	ldr	r3, [r7, #32]
 80067a4:	b2da      	uxtb	r2, r3
 80067a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a8:	1c59      	adds	r1, r3, #1
 80067aa:	6279      	str	r1, [r7, #36]	; 0x24
 80067ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067b0:	b2d2      	uxtb	r2, r2
 80067b2:	701a      	strb	r2, [r3, #0]
 80067b4:	6a3b      	ldr	r3, [r7, #32]
 80067b6:	09db      	lsrs	r3, r3, #7
 80067b8:	623b      	str	r3, [r7, #32]
 80067ba:	6a3b      	ldr	r3, [r7, #32]
 80067bc:	2b7f      	cmp	r3, #127	; 0x7f
 80067be:	d8f0      	bhi.n	80067a2 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80067c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c2:	1c5a      	adds	r2, r3, #1
 80067c4:	627a      	str	r2, [r7, #36]	; 0x24
 80067c6:	6a3a      	ldr	r2, [r7, #32]
 80067c8:	b2d2      	uxtb	r2, r2
 80067ca:	701a      	strb	r2, [r3, #0]
 80067cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ce:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80067d0:	68fa      	ldr	r2, [r7, #12]
 80067d2:	6979      	ldr	r1, [r7, #20]
 80067d4:	69b8      	ldr	r0, [r7, #24]
 80067d6:	f7ff f977 	bl	8005ac8 <_SendPacket>
  RECORD_END();
 80067da:	69fb      	ldr	r3, [r7, #28]
 80067dc:	f383 8811 	msr	BASEPRI, r3
}
 80067e0:	bf00      	nop
 80067e2:	3740      	adds	r7, #64	; 0x40
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}
 80067e8:	20014430 	.word	0x20014430

080067ec <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b08c      	sub	sp, #48	; 0x30
 80067f0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80067f2:	4b59      	ldr	r3, [pc, #356]	; (8006958 <SEGGER_SYSVIEW_Start+0x16c>)
 80067f4:	2201      	movs	r2, #1
 80067f6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80067f8:	f3ef 8311 	mrs	r3, BASEPRI
 80067fc:	f04f 0120 	mov.w	r1, #32
 8006800:	f381 8811 	msr	BASEPRI, r1
 8006804:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006806:	4b54      	ldr	r3, [pc, #336]	; (8006958 <SEGGER_SYSVIEW_Start+0x16c>)
 8006808:	785b      	ldrb	r3, [r3, #1]
 800680a:	220a      	movs	r2, #10
 800680c:	4953      	ldr	r1, [pc, #332]	; (800695c <SEGGER_SYSVIEW_Start+0x170>)
 800680e:	4618      	mov	r0, r3
 8006810:	f7f9 fcde 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 800681a:	f7fe fbf5 	bl	8005008 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800681e:	200a      	movs	r0, #10
 8006820:	f7ff fe28 	bl	8006474 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006824:	f3ef 8311 	mrs	r3, BASEPRI
 8006828:	f04f 0120 	mov.w	r1, #32
 800682c:	f381 8811 	msr	BASEPRI, r1
 8006830:	60bb      	str	r3, [r7, #8]
 8006832:	484b      	ldr	r0, [pc, #300]	; (8006960 <SEGGER_SYSVIEW_Start+0x174>)
 8006834:	f7ff f855 	bl	80058e2 <_PreparePacket>
 8006838:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006842:	4b45      	ldr	r3, [pc, #276]	; (8006958 <SEGGER_SYSVIEW_Start+0x16c>)
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	62bb      	str	r3, [r7, #40]	; 0x28
 8006848:	e00b      	b.n	8006862 <SEGGER_SYSVIEW_Start+0x76>
 800684a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800684c:	b2da      	uxtb	r2, r3
 800684e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006850:	1c59      	adds	r1, r3, #1
 8006852:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006854:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006858:	b2d2      	uxtb	r2, r2
 800685a:	701a      	strb	r2, [r3, #0]
 800685c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800685e:	09db      	lsrs	r3, r3, #7
 8006860:	62bb      	str	r3, [r7, #40]	; 0x28
 8006862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006864:	2b7f      	cmp	r3, #127	; 0x7f
 8006866:	d8f0      	bhi.n	800684a <SEGGER_SYSVIEW_Start+0x5e>
 8006868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800686a:	1c5a      	adds	r2, r3, #1
 800686c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800686e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006870:	b2d2      	uxtb	r2, r2
 8006872:	701a      	strb	r2, [r3, #0]
 8006874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006876:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	627b      	str	r3, [r7, #36]	; 0x24
 800687c:	4b36      	ldr	r3, [pc, #216]	; (8006958 <SEGGER_SYSVIEW_Start+0x16c>)
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	623b      	str	r3, [r7, #32]
 8006882:	e00b      	b.n	800689c <SEGGER_SYSVIEW_Start+0xb0>
 8006884:	6a3b      	ldr	r3, [r7, #32]
 8006886:	b2da      	uxtb	r2, r3
 8006888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688a:	1c59      	adds	r1, r3, #1
 800688c:	6279      	str	r1, [r7, #36]	; 0x24
 800688e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006892:	b2d2      	uxtb	r2, r2
 8006894:	701a      	strb	r2, [r3, #0]
 8006896:	6a3b      	ldr	r3, [r7, #32]
 8006898:	09db      	lsrs	r3, r3, #7
 800689a:	623b      	str	r3, [r7, #32]
 800689c:	6a3b      	ldr	r3, [r7, #32]
 800689e:	2b7f      	cmp	r3, #127	; 0x7f
 80068a0:	d8f0      	bhi.n	8006884 <SEGGER_SYSVIEW_Start+0x98>
 80068a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a4:	1c5a      	adds	r2, r3, #1
 80068a6:	627a      	str	r2, [r7, #36]	; 0x24
 80068a8:	6a3a      	ldr	r2, [r7, #32]
 80068aa:	b2d2      	uxtb	r2, r2
 80068ac:	701a      	strb	r2, [r3, #0]
 80068ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	61fb      	str	r3, [r7, #28]
 80068b6:	4b28      	ldr	r3, [pc, #160]	; (8006958 <SEGGER_SYSVIEW_Start+0x16c>)
 80068b8:	691b      	ldr	r3, [r3, #16]
 80068ba:	61bb      	str	r3, [r7, #24]
 80068bc:	e00b      	b.n	80068d6 <SEGGER_SYSVIEW_Start+0xea>
 80068be:	69bb      	ldr	r3, [r7, #24]
 80068c0:	b2da      	uxtb	r2, r3
 80068c2:	69fb      	ldr	r3, [r7, #28]
 80068c4:	1c59      	adds	r1, r3, #1
 80068c6:	61f9      	str	r1, [r7, #28]
 80068c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068cc:	b2d2      	uxtb	r2, r2
 80068ce:	701a      	strb	r2, [r3, #0]
 80068d0:	69bb      	ldr	r3, [r7, #24]
 80068d2:	09db      	lsrs	r3, r3, #7
 80068d4:	61bb      	str	r3, [r7, #24]
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	2b7f      	cmp	r3, #127	; 0x7f
 80068da:	d8f0      	bhi.n	80068be <SEGGER_SYSVIEW_Start+0xd2>
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	1c5a      	adds	r2, r3, #1
 80068e0:	61fa      	str	r2, [r7, #28]
 80068e2:	69ba      	ldr	r2, [r7, #24]
 80068e4:	b2d2      	uxtb	r2, r2
 80068e6:	701a      	strb	r2, [r3, #0]
 80068e8:	69fb      	ldr	r3, [r7, #28]
 80068ea:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	617b      	str	r3, [r7, #20]
 80068f0:	2300      	movs	r3, #0
 80068f2:	613b      	str	r3, [r7, #16]
 80068f4:	e00b      	b.n	800690e <SEGGER_SYSVIEW_Start+0x122>
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	b2da      	uxtb	r2, r3
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	1c59      	adds	r1, r3, #1
 80068fe:	6179      	str	r1, [r7, #20]
 8006900:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006904:	b2d2      	uxtb	r2, r2
 8006906:	701a      	strb	r2, [r3, #0]
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	09db      	lsrs	r3, r3, #7
 800690c:	613b      	str	r3, [r7, #16]
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	2b7f      	cmp	r3, #127	; 0x7f
 8006912:	d8f0      	bhi.n	80068f6 <SEGGER_SYSVIEW_Start+0x10a>
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	1c5a      	adds	r2, r3, #1
 8006918:	617a      	str	r2, [r7, #20]
 800691a:	693a      	ldr	r2, [r7, #16]
 800691c:	b2d2      	uxtb	r2, r2
 800691e:	701a      	strb	r2, [r3, #0]
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006924:	2218      	movs	r2, #24
 8006926:	6839      	ldr	r1, [r7, #0]
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f7ff f8cd 	bl	8005ac8 <_SendPacket>
      RECORD_END();
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006934:	4b08      	ldr	r3, [pc, #32]	; (8006958 <SEGGER_SYSVIEW_Start+0x16c>)
 8006936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006938:	2b00      	cmp	r3, #0
 800693a:	d002      	beq.n	8006942 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 800693c:	4b06      	ldr	r3, [pc, #24]	; (8006958 <SEGGER_SYSVIEW_Start+0x16c>)
 800693e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006940:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006942:	f000 f9eb 	bl	8006d1c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006946:	f000 f9b1 	bl	8006cac <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800694a:	f000 fc83 	bl	8007254 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800694e:	bf00      	nop
 8006950:	3730      	adds	r7, #48	; 0x30
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	20014400 	.word	0x20014400
 800695c:	08007f14 	.word	0x08007f14
 8006960:	20014430 	.word	0x20014430

08006964 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006964:	b580      	push	{r7, lr}
 8006966:	b082      	sub	sp, #8
 8006968:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800696a:	f3ef 8311 	mrs	r3, BASEPRI
 800696e:	f04f 0120 	mov.w	r1, #32
 8006972:	f381 8811 	msr	BASEPRI, r1
 8006976:	607b      	str	r3, [r7, #4]
 8006978:	480b      	ldr	r0, [pc, #44]	; (80069a8 <SEGGER_SYSVIEW_Stop+0x44>)
 800697a:	f7fe ffb2 	bl	80058e2 <_PreparePacket>
 800697e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006980:	4b0a      	ldr	r3, [pc, #40]	; (80069ac <SEGGER_SYSVIEW_Stop+0x48>)
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d007      	beq.n	8006998 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006988:	220b      	movs	r2, #11
 800698a:	6839      	ldr	r1, [r7, #0]
 800698c:	6838      	ldr	r0, [r7, #0]
 800698e:	f7ff f89b 	bl	8005ac8 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006992:	4b06      	ldr	r3, [pc, #24]	; (80069ac <SEGGER_SYSVIEW_Stop+0x48>)
 8006994:	2200      	movs	r2, #0
 8006996:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f383 8811 	msr	BASEPRI, r3
}
 800699e:	bf00      	nop
 80069a0:	3708      	adds	r7, #8
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	bf00      	nop
 80069a8:	20014430 	.word	0x20014430
 80069ac:	20014400 	.word	0x20014400

080069b0 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b08c      	sub	sp, #48	; 0x30
 80069b4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80069b6:	f3ef 8311 	mrs	r3, BASEPRI
 80069ba:	f04f 0120 	mov.w	r1, #32
 80069be:	f381 8811 	msr	BASEPRI, r1
 80069c2:	60fb      	str	r3, [r7, #12]
 80069c4:	4845      	ldr	r0, [pc, #276]	; (8006adc <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80069c6:	f7fe ff8c 	bl	80058e2 <_PreparePacket>
 80069ca:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069d4:	4b42      	ldr	r3, [pc, #264]	; (8006ae0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80069da:	e00b      	b.n	80069f4 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80069dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069de:	b2da      	uxtb	r2, r3
 80069e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069e2:	1c59      	adds	r1, r3, #1
 80069e4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80069e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069ea:	b2d2      	uxtb	r2, r2
 80069ec:	701a      	strb	r2, [r3, #0]
 80069ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f0:	09db      	lsrs	r3, r3, #7
 80069f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80069f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f6:	2b7f      	cmp	r3, #127	; 0x7f
 80069f8:	d8f0      	bhi.n	80069dc <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80069fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069fc:	1c5a      	adds	r2, r3, #1
 80069fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a02:	b2d2      	uxtb	r2, r2
 8006a04:	701a      	strb	r2, [r3, #0]
 8006a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a08:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	627b      	str	r3, [r7, #36]	; 0x24
 8006a0e:	4b34      	ldr	r3, [pc, #208]	; (8006ae0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	623b      	str	r3, [r7, #32]
 8006a14:	e00b      	b.n	8006a2e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006a16:	6a3b      	ldr	r3, [r7, #32]
 8006a18:	b2da      	uxtb	r2, r3
 8006a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1c:	1c59      	adds	r1, r3, #1
 8006a1e:	6279      	str	r1, [r7, #36]	; 0x24
 8006a20:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a24:	b2d2      	uxtb	r2, r2
 8006a26:	701a      	strb	r2, [r3, #0]
 8006a28:	6a3b      	ldr	r3, [r7, #32]
 8006a2a:	09db      	lsrs	r3, r3, #7
 8006a2c:	623b      	str	r3, [r7, #32]
 8006a2e:	6a3b      	ldr	r3, [r7, #32]
 8006a30:	2b7f      	cmp	r3, #127	; 0x7f
 8006a32:	d8f0      	bhi.n	8006a16 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a36:	1c5a      	adds	r2, r3, #1
 8006a38:	627a      	str	r2, [r7, #36]	; 0x24
 8006a3a:	6a3a      	ldr	r2, [r7, #32]
 8006a3c:	b2d2      	uxtb	r2, r2
 8006a3e:	701a      	strb	r2, [r3, #0]
 8006a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a42:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	61fb      	str	r3, [r7, #28]
 8006a48:	4b25      	ldr	r3, [pc, #148]	; (8006ae0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006a4a:	691b      	ldr	r3, [r3, #16]
 8006a4c:	61bb      	str	r3, [r7, #24]
 8006a4e:	e00b      	b.n	8006a68 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006a50:	69bb      	ldr	r3, [r7, #24]
 8006a52:	b2da      	uxtb	r2, r3
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	1c59      	adds	r1, r3, #1
 8006a58:	61f9      	str	r1, [r7, #28]
 8006a5a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a5e:	b2d2      	uxtb	r2, r2
 8006a60:	701a      	strb	r2, [r3, #0]
 8006a62:	69bb      	ldr	r3, [r7, #24]
 8006a64:	09db      	lsrs	r3, r3, #7
 8006a66:	61bb      	str	r3, [r7, #24]
 8006a68:	69bb      	ldr	r3, [r7, #24]
 8006a6a:	2b7f      	cmp	r3, #127	; 0x7f
 8006a6c:	d8f0      	bhi.n	8006a50 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006a6e:	69fb      	ldr	r3, [r7, #28]
 8006a70:	1c5a      	adds	r2, r3, #1
 8006a72:	61fa      	str	r2, [r7, #28]
 8006a74:	69ba      	ldr	r2, [r7, #24]
 8006a76:	b2d2      	uxtb	r2, r2
 8006a78:	701a      	strb	r2, [r3, #0]
 8006a7a:	69fb      	ldr	r3, [r7, #28]
 8006a7c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	617b      	str	r3, [r7, #20]
 8006a82:	2300      	movs	r3, #0
 8006a84:	613b      	str	r3, [r7, #16]
 8006a86:	e00b      	b.n	8006aa0 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	b2da      	uxtb	r2, r3
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	1c59      	adds	r1, r3, #1
 8006a90:	6179      	str	r1, [r7, #20]
 8006a92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a96:	b2d2      	uxtb	r2, r2
 8006a98:	701a      	strb	r2, [r3, #0]
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	09db      	lsrs	r3, r3, #7
 8006a9e:	613b      	str	r3, [r7, #16]
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	2b7f      	cmp	r3, #127	; 0x7f
 8006aa4:	d8f0      	bhi.n	8006a88 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	1c5a      	adds	r2, r3, #1
 8006aaa:	617a      	str	r2, [r7, #20]
 8006aac:	693a      	ldr	r2, [r7, #16]
 8006aae:	b2d2      	uxtb	r2, r2
 8006ab0:	701a      	strb	r2, [r3, #0]
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006ab6:	2218      	movs	r2, #24
 8006ab8:	6879      	ldr	r1, [r7, #4]
 8006aba:	68b8      	ldr	r0, [r7, #8]
 8006abc:	f7ff f804 	bl	8005ac8 <_SendPacket>
  RECORD_END();
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006ac6:	4b06      	ldr	r3, [pc, #24]	; (8006ae0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d002      	beq.n	8006ad4 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006ace:	4b04      	ldr	r3, [pc, #16]	; (8006ae0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad2:	4798      	blx	r3
  }
}
 8006ad4:	bf00      	nop
 8006ad6:	3730      	adds	r7, #48	; 0x30
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	20014430 	.word	0x20014430
 8006ae0:	20014400 	.word	0x20014400

08006ae4 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b092      	sub	sp, #72	; 0x48
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006aec:	f3ef 8311 	mrs	r3, BASEPRI
 8006af0:	f04f 0120 	mov.w	r1, #32
 8006af4:	f381 8811 	msr	BASEPRI, r1
 8006af8:	617b      	str	r3, [r7, #20]
 8006afa:	486a      	ldr	r0, [pc, #424]	; (8006ca4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006afc:	f7fe fef1 	bl	80058e2 <_PreparePacket>
 8006b00:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	647b      	str	r3, [r7, #68]	; 0x44
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	4b66      	ldr	r3, [pc, #408]	; (8006ca8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006b10:	691b      	ldr	r3, [r3, #16]
 8006b12:	1ad3      	subs	r3, r2, r3
 8006b14:	643b      	str	r3, [r7, #64]	; 0x40
 8006b16:	e00b      	b.n	8006b30 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006b18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b1a:	b2da      	uxtb	r2, r3
 8006b1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b1e:	1c59      	adds	r1, r3, #1
 8006b20:	6479      	str	r1, [r7, #68]	; 0x44
 8006b22:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b26:	b2d2      	uxtb	r2, r2
 8006b28:	701a      	strb	r2, [r3, #0]
 8006b2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b2c:	09db      	lsrs	r3, r3, #7
 8006b2e:	643b      	str	r3, [r7, #64]	; 0x40
 8006b30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b32:	2b7f      	cmp	r3, #127	; 0x7f
 8006b34:	d8f0      	bhi.n	8006b18 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006b36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b38:	1c5a      	adds	r2, r3, #1
 8006b3a:	647a      	str	r2, [r7, #68]	; 0x44
 8006b3c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b3e:	b2d2      	uxtb	r2, r2
 8006b40:	701a      	strb	r2, [r3, #0]
 8006b42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b44:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b50:	e00b      	b.n	8006b6a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b54:	b2da      	uxtb	r2, r3
 8006b56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b58:	1c59      	adds	r1, r3, #1
 8006b5a:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006b5c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b60:	b2d2      	uxtb	r2, r2
 8006b62:	701a      	strb	r2, [r3, #0]
 8006b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b66:	09db      	lsrs	r3, r3, #7
 8006b68:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b6c:	2b7f      	cmp	r3, #127	; 0x7f
 8006b6e:	d8f0      	bhi.n	8006b52 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006b70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b72:	1c5a      	adds	r2, r3, #1
 8006b74:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006b76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b78:	b2d2      	uxtb	r2, r2
 8006b7a:	701a      	strb	r2, [r3, #0]
 8006b7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b7e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	2220      	movs	r2, #32
 8006b86:	4619      	mov	r1, r3
 8006b88:	68f8      	ldr	r0, [r7, #12]
 8006b8a:	f7fe fe5d 	bl	8005848 <_EncodeStr>
 8006b8e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006b90:	2209      	movs	r2, #9
 8006b92:	68f9      	ldr	r1, [r7, #12]
 8006b94:	6938      	ldr	r0, [r7, #16]
 8006b96:	f7fe ff97 	bl	8005ac8 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	637b      	str	r3, [r7, #52]	; 0x34
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681a      	ldr	r2, [r3, #0]
 8006ba6:	4b40      	ldr	r3, [pc, #256]	; (8006ca8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006ba8:	691b      	ldr	r3, [r3, #16]
 8006baa:	1ad3      	subs	r3, r2, r3
 8006bac:	633b      	str	r3, [r7, #48]	; 0x30
 8006bae:	e00b      	b.n	8006bc8 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb2:	b2da      	uxtb	r2, r3
 8006bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bb6:	1c59      	adds	r1, r3, #1
 8006bb8:	6379      	str	r1, [r7, #52]	; 0x34
 8006bba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bbe:	b2d2      	uxtb	r2, r2
 8006bc0:	701a      	strb	r2, [r3, #0]
 8006bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc4:	09db      	lsrs	r3, r3, #7
 8006bc6:	633b      	str	r3, [r7, #48]	; 0x30
 8006bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bca:	2b7f      	cmp	r3, #127	; 0x7f
 8006bcc:	d8f0      	bhi.n	8006bb0 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bd0:	1c5a      	adds	r2, r3, #1
 8006bd2:	637a      	str	r2, [r7, #52]	; 0x34
 8006bd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bd6:	b2d2      	uxtb	r2, r2
 8006bd8:	701a      	strb	r2, [r3, #0]
 8006bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bdc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	68db      	ldr	r3, [r3, #12]
 8006be6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006be8:	e00b      	b.n	8006c02 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bec:	b2da      	uxtb	r2, r3
 8006bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf0:	1c59      	adds	r1, r3, #1
 8006bf2:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006bf4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bf8:	b2d2      	uxtb	r2, r2
 8006bfa:	701a      	strb	r2, [r3, #0]
 8006bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bfe:	09db      	lsrs	r3, r3, #7
 8006c00:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c04:	2b7f      	cmp	r3, #127	; 0x7f
 8006c06:	d8f0      	bhi.n	8006bea <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c0a:	1c5a      	adds	r2, r3, #1
 8006c0c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c10:	b2d2      	uxtb	r2, r2
 8006c12:	701a      	strb	r2, [r3, #0]
 8006c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c16:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	627b      	str	r3, [r7, #36]	; 0x24
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	691b      	ldr	r3, [r3, #16]
 8006c20:	623b      	str	r3, [r7, #32]
 8006c22:	e00b      	b.n	8006c3c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006c24:	6a3b      	ldr	r3, [r7, #32]
 8006c26:	b2da      	uxtb	r2, r3
 8006c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2a:	1c59      	adds	r1, r3, #1
 8006c2c:	6279      	str	r1, [r7, #36]	; 0x24
 8006c2e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c32:	b2d2      	uxtb	r2, r2
 8006c34:	701a      	strb	r2, [r3, #0]
 8006c36:	6a3b      	ldr	r3, [r7, #32]
 8006c38:	09db      	lsrs	r3, r3, #7
 8006c3a:	623b      	str	r3, [r7, #32]
 8006c3c:	6a3b      	ldr	r3, [r7, #32]
 8006c3e:	2b7f      	cmp	r3, #127	; 0x7f
 8006c40:	d8f0      	bhi.n	8006c24 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c44:	1c5a      	adds	r2, r3, #1
 8006c46:	627a      	str	r2, [r7, #36]	; 0x24
 8006c48:	6a3a      	ldr	r2, [r7, #32]
 8006c4a:	b2d2      	uxtb	r2, r2
 8006c4c:	701a      	strb	r2, [r3, #0]
 8006c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c50:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	61fb      	str	r3, [r7, #28]
 8006c56:	2300      	movs	r3, #0
 8006c58:	61bb      	str	r3, [r7, #24]
 8006c5a:	e00b      	b.n	8006c74 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006c5c:	69bb      	ldr	r3, [r7, #24]
 8006c5e:	b2da      	uxtb	r2, r3
 8006c60:	69fb      	ldr	r3, [r7, #28]
 8006c62:	1c59      	adds	r1, r3, #1
 8006c64:	61f9      	str	r1, [r7, #28]
 8006c66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c6a:	b2d2      	uxtb	r2, r2
 8006c6c:	701a      	strb	r2, [r3, #0]
 8006c6e:	69bb      	ldr	r3, [r7, #24]
 8006c70:	09db      	lsrs	r3, r3, #7
 8006c72:	61bb      	str	r3, [r7, #24]
 8006c74:	69bb      	ldr	r3, [r7, #24]
 8006c76:	2b7f      	cmp	r3, #127	; 0x7f
 8006c78:	d8f0      	bhi.n	8006c5c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006c7a:	69fb      	ldr	r3, [r7, #28]
 8006c7c:	1c5a      	adds	r2, r3, #1
 8006c7e:	61fa      	str	r2, [r7, #28]
 8006c80:	69ba      	ldr	r2, [r7, #24]
 8006c82:	b2d2      	uxtb	r2, r2
 8006c84:	701a      	strb	r2, [r3, #0]
 8006c86:	69fb      	ldr	r3, [r7, #28]
 8006c88:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006c8a:	2215      	movs	r2, #21
 8006c8c:	68f9      	ldr	r1, [r7, #12]
 8006c8e:	6938      	ldr	r0, [r7, #16]
 8006c90:	f7fe ff1a 	bl	8005ac8 <_SendPacket>
  RECORD_END();
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	f383 8811 	msr	BASEPRI, r3
}
 8006c9a:	bf00      	nop
 8006c9c:	3748      	adds	r7, #72	; 0x48
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	bf00      	nop
 8006ca4:	20014430 	.word	0x20014430
 8006ca8:	20014400 	.word	0x20014400

08006cac <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006cac:	b580      	push	{r7, lr}
 8006cae:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006cb0:	4b07      	ldr	r3, [pc, #28]	; (8006cd0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006cb2:	6a1b      	ldr	r3, [r3, #32]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d008      	beq.n	8006cca <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006cb8:	4b05      	ldr	r3, [pc, #20]	; (8006cd0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006cba:	6a1b      	ldr	r3, [r3, #32]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d003      	beq.n	8006cca <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006cc2:	4b03      	ldr	r3, [pc, #12]	; (8006cd0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006cc4:	6a1b      	ldr	r3, [r3, #32]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	4798      	blx	r3
  }
}
 8006cca:	bf00      	nop
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop
 8006cd0:	20014400 	.word	0x20014400

08006cd4 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b086      	sub	sp, #24
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006cdc:	f3ef 8311 	mrs	r3, BASEPRI
 8006ce0:	f04f 0120 	mov.w	r1, #32
 8006ce4:	f381 8811 	msr	BASEPRI, r1
 8006ce8:	617b      	str	r3, [r7, #20]
 8006cea:	480b      	ldr	r0, [pc, #44]	; (8006d18 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006cec:	f7fe fdf9 	bl	80058e2 <_PreparePacket>
 8006cf0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006cf2:	2280      	movs	r2, #128	; 0x80
 8006cf4:	6879      	ldr	r1, [r7, #4]
 8006cf6:	6938      	ldr	r0, [r7, #16]
 8006cf8:	f7fe fda6 	bl	8005848 <_EncodeStr>
 8006cfc:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006cfe:	220e      	movs	r2, #14
 8006d00:	68f9      	ldr	r1, [r7, #12]
 8006d02:	6938      	ldr	r0, [r7, #16]
 8006d04:	f7fe fee0 	bl	8005ac8 <_SendPacket>
  RECORD_END();
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	f383 8811 	msr	BASEPRI, r3
}
 8006d0e:	bf00      	nop
 8006d10:	3718      	adds	r7, #24
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}
 8006d16:	bf00      	nop
 8006d18:	20014430 	.word	0x20014430

08006d1c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006d1c:	b590      	push	{r4, r7, lr}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006d22:	4b15      	ldr	r3, [pc, #84]	; (8006d78 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006d24:	6a1b      	ldr	r3, [r3, #32]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d01a      	beq.n	8006d60 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006d2a:	4b13      	ldr	r3, [pc, #76]	; (8006d78 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006d2c:	6a1b      	ldr	r3, [r3, #32]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d015      	beq.n	8006d60 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006d34:	4b10      	ldr	r3, [pc, #64]	; (8006d78 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006d36:	6a1b      	ldr	r3, [r3, #32]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4798      	blx	r3
 8006d3c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006d40:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006d42:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d46:	f04f 0200 	mov.w	r2, #0
 8006d4a:	f04f 0300 	mov.w	r3, #0
 8006d4e:	000a      	movs	r2, r1
 8006d50:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006d52:	4613      	mov	r3, r2
 8006d54:	461a      	mov	r2, r3
 8006d56:	4621      	mov	r1, r4
 8006d58:	200d      	movs	r0, #13
 8006d5a:	f7ff fbe5 	bl	8006528 <SEGGER_SYSVIEW_RecordU32x2>
 8006d5e:	e006      	b.n	8006d6e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006d60:	4b06      	ldr	r3, [pc, #24]	; (8006d7c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4619      	mov	r1, r3
 8006d66:	200c      	movs	r0, #12
 8006d68:	f7ff fba2 	bl	80064b0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006d6c:	bf00      	nop
 8006d6e:	bf00      	nop
 8006d70:	370c      	adds	r7, #12
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd90      	pop	{r4, r7, pc}
 8006d76:	bf00      	nop
 8006d78:	20014400 	.word	0x20014400
 8006d7c:	e0001004 	.word	0xe0001004

08006d80 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b086      	sub	sp, #24
 8006d84:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006d86:	f3ef 8311 	mrs	r3, BASEPRI
 8006d8a:	f04f 0120 	mov.w	r1, #32
 8006d8e:	f381 8811 	msr	BASEPRI, r1
 8006d92:	60fb      	str	r3, [r7, #12]
 8006d94:	4819      	ldr	r0, [pc, #100]	; (8006dfc <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006d96:	f7fe fda4 	bl	80058e2 <_PreparePacket>
 8006d9a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006da0:	4b17      	ldr	r3, [pc, #92]	; (8006e00 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006da8:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	617b      	str	r3, [r7, #20]
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	613b      	str	r3, [r7, #16]
 8006db2:	e00b      	b.n	8006dcc <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	b2da      	uxtb	r2, r3
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	1c59      	adds	r1, r3, #1
 8006dbc:	6179      	str	r1, [r7, #20]
 8006dbe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006dc2:	b2d2      	uxtb	r2, r2
 8006dc4:	701a      	strb	r2, [r3, #0]
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	09db      	lsrs	r3, r3, #7
 8006dca:	613b      	str	r3, [r7, #16]
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	2b7f      	cmp	r3, #127	; 0x7f
 8006dd0:	d8f0      	bhi.n	8006db4 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	1c5a      	adds	r2, r3, #1
 8006dd6:	617a      	str	r2, [r7, #20]
 8006dd8:	693a      	ldr	r2, [r7, #16]
 8006dda:	b2d2      	uxtb	r2, r2
 8006ddc:	701a      	strb	r2, [r3, #0]
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006de2:	2202      	movs	r2, #2
 8006de4:	6879      	ldr	r1, [r7, #4]
 8006de6:	68b8      	ldr	r0, [r7, #8]
 8006de8:	f7fe fe6e 	bl	8005ac8 <_SendPacket>
  RECORD_END();
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f383 8811 	msr	BASEPRI, r3
}
 8006df2:	bf00      	nop
 8006df4:	3718      	adds	r7, #24
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	20014430 	.word	0x20014430
 8006e00:	e000ed04 	.word	0xe000ed04

08006e04 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b082      	sub	sp, #8
 8006e08:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006e0a:	f3ef 8311 	mrs	r3, BASEPRI
 8006e0e:	f04f 0120 	mov.w	r1, #32
 8006e12:	f381 8811 	msr	BASEPRI, r1
 8006e16:	607b      	str	r3, [r7, #4]
 8006e18:	4807      	ldr	r0, [pc, #28]	; (8006e38 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006e1a:	f7fe fd62 	bl	80058e2 <_PreparePacket>
 8006e1e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006e20:	2203      	movs	r2, #3
 8006e22:	6839      	ldr	r1, [r7, #0]
 8006e24:	6838      	ldr	r0, [r7, #0]
 8006e26:	f7fe fe4f 	bl	8005ac8 <_SendPacket>
  RECORD_END();
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f383 8811 	msr	BASEPRI, r3
}
 8006e30:	bf00      	nop
 8006e32:	3708      	adds	r7, #8
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}
 8006e38:	20014430 	.word	0x20014430

08006e3c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b082      	sub	sp, #8
 8006e40:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006e42:	f3ef 8311 	mrs	r3, BASEPRI
 8006e46:	f04f 0120 	mov.w	r1, #32
 8006e4a:	f381 8811 	msr	BASEPRI, r1
 8006e4e:	607b      	str	r3, [r7, #4]
 8006e50:	4807      	ldr	r0, [pc, #28]	; (8006e70 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006e52:	f7fe fd46 	bl	80058e2 <_PreparePacket>
 8006e56:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006e58:	2212      	movs	r2, #18
 8006e5a:	6839      	ldr	r1, [r7, #0]
 8006e5c:	6838      	ldr	r0, [r7, #0]
 8006e5e:	f7fe fe33 	bl	8005ac8 <_SendPacket>
  RECORD_END();
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f383 8811 	msr	BASEPRI, r3
}
 8006e68:	bf00      	nop
 8006e6a:	3708      	adds	r7, #8
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}
 8006e70:	20014430 	.word	0x20014430

08006e74 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b082      	sub	sp, #8
 8006e78:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006e7a:	f3ef 8311 	mrs	r3, BASEPRI
 8006e7e:	f04f 0120 	mov.w	r1, #32
 8006e82:	f381 8811 	msr	BASEPRI, r1
 8006e86:	607b      	str	r3, [r7, #4]
 8006e88:	4807      	ldr	r0, [pc, #28]	; (8006ea8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006e8a:	f7fe fd2a 	bl	80058e2 <_PreparePacket>
 8006e8e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006e90:	2211      	movs	r2, #17
 8006e92:	6839      	ldr	r1, [r7, #0]
 8006e94:	6838      	ldr	r0, [r7, #0]
 8006e96:	f7fe fe17 	bl	8005ac8 <_SendPacket>
  RECORD_END();
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f383 8811 	msr	BASEPRI, r3
}
 8006ea0:	bf00      	nop
 8006ea2:	3708      	adds	r7, #8
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}
 8006ea8:	20014430 	.word	0x20014430

08006eac <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b088      	sub	sp, #32
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006eb4:	f3ef 8311 	mrs	r3, BASEPRI
 8006eb8:	f04f 0120 	mov.w	r1, #32
 8006ebc:	f381 8811 	msr	BASEPRI, r1
 8006ec0:	617b      	str	r3, [r7, #20]
 8006ec2:	4819      	ldr	r0, [pc, #100]	; (8006f28 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006ec4:	f7fe fd0d 	bl	80058e2 <_PreparePacket>
 8006ec8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006ece:	4b17      	ldr	r3, [pc, #92]	; (8006f2c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006ed0:	691b      	ldr	r3, [r3, #16]
 8006ed2:	687a      	ldr	r2, [r7, #4]
 8006ed4:	1ad3      	subs	r3, r2, r3
 8006ed6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	61fb      	str	r3, [r7, #28]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	61bb      	str	r3, [r7, #24]
 8006ee0:	e00b      	b.n	8006efa <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006ee2:	69bb      	ldr	r3, [r7, #24]
 8006ee4:	b2da      	uxtb	r2, r3
 8006ee6:	69fb      	ldr	r3, [r7, #28]
 8006ee8:	1c59      	adds	r1, r3, #1
 8006eea:	61f9      	str	r1, [r7, #28]
 8006eec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ef0:	b2d2      	uxtb	r2, r2
 8006ef2:	701a      	strb	r2, [r3, #0]
 8006ef4:	69bb      	ldr	r3, [r7, #24]
 8006ef6:	09db      	lsrs	r3, r3, #7
 8006ef8:	61bb      	str	r3, [r7, #24]
 8006efa:	69bb      	ldr	r3, [r7, #24]
 8006efc:	2b7f      	cmp	r3, #127	; 0x7f
 8006efe:	d8f0      	bhi.n	8006ee2 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006f00:	69fb      	ldr	r3, [r7, #28]
 8006f02:	1c5a      	adds	r2, r3, #1
 8006f04:	61fa      	str	r2, [r7, #28]
 8006f06:	69ba      	ldr	r2, [r7, #24]
 8006f08:	b2d2      	uxtb	r2, r2
 8006f0a:	701a      	strb	r2, [r3, #0]
 8006f0c:	69fb      	ldr	r3, [r7, #28]
 8006f0e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006f10:	2208      	movs	r2, #8
 8006f12:	68f9      	ldr	r1, [r7, #12]
 8006f14:	6938      	ldr	r0, [r7, #16]
 8006f16:	f7fe fdd7 	bl	8005ac8 <_SendPacket>
  RECORD_END();
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	f383 8811 	msr	BASEPRI, r3
}
 8006f20:	bf00      	nop
 8006f22:	3720      	adds	r7, #32
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}
 8006f28:	20014430 	.word	0x20014430
 8006f2c:	20014400 	.word	0x20014400

08006f30 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b088      	sub	sp, #32
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006f38:	f3ef 8311 	mrs	r3, BASEPRI
 8006f3c:	f04f 0120 	mov.w	r1, #32
 8006f40:	f381 8811 	msr	BASEPRI, r1
 8006f44:	617b      	str	r3, [r7, #20]
 8006f46:	4819      	ldr	r0, [pc, #100]	; (8006fac <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006f48:	f7fe fccb 	bl	80058e2 <_PreparePacket>
 8006f4c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006f52:	4b17      	ldr	r3, [pc, #92]	; (8006fb0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006f54:	691b      	ldr	r3, [r3, #16]
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	1ad3      	subs	r3, r2, r3
 8006f5a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	61fb      	str	r3, [r7, #28]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	61bb      	str	r3, [r7, #24]
 8006f64:	e00b      	b.n	8006f7e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006f66:	69bb      	ldr	r3, [r7, #24]
 8006f68:	b2da      	uxtb	r2, r3
 8006f6a:	69fb      	ldr	r3, [r7, #28]
 8006f6c:	1c59      	adds	r1, r3, #1
 8006f6e:	61f9      	str	r1, [r7, #28]
 8006f70:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f74:	b2d2      	uxtb	r2, r2
 8006f76:	701a      	strb	r2, [r3, #0]
 8006f78:	69bb      	ldr	r3, [r7, #24]
 8006f7a:	09db      	lsrs	r3, r3, #7
 8006f7c:	61bb      	str	r3, [r7, #24]
 8006f7e:	69bb      	ldr	r3, [r7, #24]
 8006f80:	2b7f      	cmp	r3, #127	; 0x7f
 8006f82:	d8f0      	bhi.n	8006f66 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006f84:	69fb      	ldr	r3, [r7, #28]
 8006f86:	1c5a      	adds	r2, r3, #1
 8006f88:	61fa      	str	r2, [r7, #28]
 8006f8a:	69ba      	ldr	r2, [r7, #24]
 8006f8c:	b2d2      	uxtb	r2, r2
 8006f8e:	701a      	strb	r2, [r3, #0]
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006f94:	2204      	movs	r2, #4
 8006f96:	68f9      	ldr	r1, [r7, #12]
 8006f98:	6938      	ldr	r0, [r7, #16]
 8006f9a:	f7fe fd95 	bl	8005ac8 <_SendPacket>
  RECORD_END();
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	f383 8811 	msr	BASEPRI, r3
}
 8006fa4:	bf00      	nop
 8006fa6:	3720      	adds	r7, #32
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}
 8006fac:	20014430 	.word	0x20014430
 8006fb0:	20014400 	.word	0x20014400

08006fb4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b088      	sub	sp, #32
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006fbc:	f3ef 8311 	mrs	r3, BASEPRI
 8006fc0:	f04f 0120 	mov.w	r1, #32
 8006fc4:	f381 8811 	msr	BASEPRI, r1
 8006fc8:	617b      	str	r3, [r7, #20]
 8006fca:	4819      	ldr	r0, [pc, #100]	; (8007030 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006fcc:	f7fe fc89 	bl	80058e2 <_PreparePacket>
 8006fd0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006fd6:	4b17      	ldr	r3, [pc, #92]	; (8007034 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006fd8:	691b      	ldr	r3, [r3, #16]
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	1ad3      	subs	r3, r2, r3
 8006fde:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	61fb      	str	r3, [r7, #28]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	61bb      	str	r3, [r7, #24]
 8006fe8:	e00b      	b.n	8007002 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006fea:	69bb      	ldr	r3, [r7, #24]
 8006fec:	b2da      	uxtb	r2, r3
 8006fee:	69fb      	ldr	r3, [r7, #28]
 8006ff0:	1c59      	adds	r1, r3, #1
 8006ff2:	61f9      	str	r1, [r7, #28]
 8006ff4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ff8:	b2d2      	uxtb	r2, r2
 8006ffa:	701a      	strb	r2, [r3, #0]
 8006ffc:	69bb      	ldr	r3, [r7, #24]
 8006ffe:	09db      	lsrs	r3, r3, #7
 8007000:	61bb      	str	r3, [r7, #24]
 8007002:	69bb      	ldr	r3, [r7, #24]
 8007004:	2b7f      	cmp	r3, #127	; 0x7f
 8007006:	d8f0      	bhi.n	8006fea <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8007008:	69fb      	ldr	r3, [r7, #28]
 800700a:	1c5a      	adds	r2, r3, #1
 800700c:	61fa      	str	r2, [r7, #28]
 800700e:	69ba      	ldr	r2, [r7, #24]
 8007010:	b2d2      	uxtb	r2, r2
 8007012:	701a      	strb	r2, [r3, #0]
 8007014:	69fb      	ldr	r3, [r7, #28]
 8007016:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8007018:	2206      	movs	r2, #6
 800701a:	68f9      	ldr	r1, [r7, #12]
 800701c:	6938      	ldr	r0, [r7, #16]
 800701e:	f7fe fd53 	bl	8005ac8 <_SendPacket>
  RECORD_END();
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	f383 8811 	msr	BASEPRI, r3
}
 8007028:	bf00      	nop
 800702a:	3720      	adds	r7, #32
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}
 8007030:	20014430 	.word	0x20014430
 8007034:	20014400 	.word	0x20014400

08007038 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8007038:	b580      	push	{r7, lr}
 800703a:	b08a      	sub	sp, #40	; 0x28
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8007042:	f3ef 8311 	mrs	r3, BASEPRI
 8007046:	f04f 0120 	mov.w	r1, #32
 800704a:	f381 8811 	msr	BASEPRI, r1
 800704e:	617b      	str	r3, [r7, #20]
 8007050:	4827      	ldr	r0, [pc, #156]	; (80070f0 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8007052:	f7fe fc46 	bl	80058e2 <_PreparePacket>
 8007056:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800705c:	4b25      	ldr	r3, [pc, #148]	; (80070f4 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800705e:	691b      	ldr	r3, [r3, #16]
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	1ad3      	subs	r3, r2, r3
 8007064:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	627b      	str	r3, [r7, #36]	; 0x24
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	623b      	str	r3, [r7, #32]
 800706e:	e00b      	b.n	8007088 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8007070:	6a3b      	ldr	r3, [r7, #32]
 8007072:	b2da      	uxtb	r2, r3
 8007074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007076:	1c59      	adds	r1, r3, #1
 8007078:	6279      	str	r1, [r7, #36]	; 0x24
 800707a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800707e:	b2d2      	uxtb	r2, r2
 8007080:	701a      	strb	r2, [r3, #0]
 8007082:	6a3b      	ldr	r3, [r7, #32]
 8007084:	09db      	lsrs	r3, r3, #7
 8007086:	623b      	str	r3, [r7, #32]
 8007088:	6a3b      	ldr	r3, [r7, #32]
 800708a:	2b7f      	cmp	r3, #127	; 0x7f
 800708c:	d8f0      	bhi.n	8007070 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800708e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007090:	1c5a      	adds	r2, r3, #1
 8007092:	627a      	str	r2, [r7, #36]	; 0x24
 8007094:	6a3a      	ldr	r2, [r7, #32]
 8007096:	b2d2      	uxtb	r2, r2
 8007098:	701a      	strb	r2, [r3, #0]
 800709a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	61fb      	str	r3, [r7, #28]
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	61bb      	str	r3, [r7, #24]
 80070a6:	e00b      	b.n	80070c0 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80070a8:	69bb      	ldr	r3, [r7, #24]
 80070aa:	b2da      	uxtb	r2, r3
 80070ac:	69fb      	ldr	r3, [r7, #28]
 80070ae:	1c59      	adds	r1, r3, #1
 80070b0:	61f9      	str	r1, [r7, #28]
 80070b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80070b6:	b2d2      	uxtb	r2, r2
 80070b8:	701a      	strb	r2, [r3, #0]
 80070ba:	69bb      	ldr	r3, [r7, #24]
 80070bc:	09db      	lsrs	r3, r3, #7
 80070be:	61bb      	str	r3, [r7, #24]
 80070c0:	69bb      	ldr	r3, [r7, #24]
 80070c2:	2b7f      	cmp	r3, #127	; 0x7f
 80070c4:	d8f0      	bhi.n	80070a8 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80070c6:	69fb      	ldr	r3, [r7, #28]
 80070c8:	1c5a      	adds	r2, r3, #1
 80070ca:	61fa      	str	r2, [r7, #28]
 80070cc:	69ba      	ldr	r2, [r7, #24]
 80070ce:	b2d2      	uxtb	r2, r2
 80070d0:	701a      	strb	r2, [r3, #0]
 80070d2:	69fb      	ldr	r3, [r7, #28]
 80070d4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80070d6:	2207      	movs	r2, #7
 80070d8:	68f9      	ldr	r1, [r7, #12]
 80070da:	6938      	ldr	r0, [r7, #16]
 80070dc:	f7fe fcf4 	bl	8005ac8 <_SendPacket>
  RECORD_END();
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	f383 8811 	msr	BASEPRI, r3
}
 80070e6:	bf00      	nop
 80070e8:	3728      	adds	r7, #40	; 0x28
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}
 80070ee:	bf00      	nop
 80070f0:	20014430 	.word	0x20014430
 80070f4:	20014400 	.word	0x20014400

080070f8 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80070f8:	b480      	push	{r7}
 80070fa:	b083      	sub	sp, #12
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8007100:	4b04      	ldr	r3, [pc, #16]	; (8007114 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8007102:	691b      	ldr	r3, [r3, #16]
 8007104:	687a      	ldr	r2, [r7, #4]
 8007106:	1ad3      	subs	r3, r2, r3
}
 8007108:	4618      	mov	r0, r3
 800710a:	370c      	adds	r7, #12
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr
 8007114:	20014400 	.word	0x20014400

08007118 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8007118:	b580      	push	{r7, lr}
 800711a:	b08c      	sub	sp, #48	; 0x30
 800711c:	af00      	add	r7, sp, #0
 800711e:	4603      	mov	r3, r0
 8007120:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8007122:	4b3b      	ldr	r3, [pc, #236]	; (8007210 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d06d      	beq.n	8007206 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800712a:	4b39      	ldr	r3, [pc, #228]	; (8007210 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8007130:	2300      	movs	r3, #0
 8007132:	62bb      	str	r3, [r7, #40]	; 0x28
 8007134:	e008      	b.n	8007148 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8007136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007138:	691b      	ldr	r3, [r3, #16]
 800713a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800713c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800713e:	2b00      	cmp	r3, #0
 8007140:	d007      	beq.n	8007152 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8007142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007144:	3301      	adds	r3, #1
 8007146:	62bb      	str	r3, [r7, #40]	; 0x28
 8007148:	79fb      	ldrb	r3, [r7, #7]
 800714a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800714c:	429a      	cmp	r2, r3
 800714e:	d3f2      	bcc.n	8007136 <SEGGER_SYSVIEW_SendModule+0x1e>
 8007150:	e000      	b.n	8007154 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8007152:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8007154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007156:	2b00      	cmp	r3, #0
 8007158:	d055      	beq.n	8007206 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800715a:	f3ef 8311 	mrs	r3, BASEPRI
 800715e:	f04f 0120 	mov.w	r1, #32
 8007162:	f381 8811 	msr	BASEPRI, r1
 8007166:	617b      	str	r3, [r7, #20]
 8007168:	482a      	ldr	r0, [pc, #168]	; (8007214 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800716a:	f7fe fbba 	bl	80058e2 <_PreparePacket>
 800716e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	627b      	str	r3, [r7, #36]	; 0x24
 8007178:	79fb      	ldrb	r3, [r7, #7]
 800717a:	623b      	str	r3, [r7, #32]
 800717c:	e00b      	b.n	8007196 <SEGGER_SYSVIEW_SendModule+0x7e>
 800717e:	6a3b      	ldr	r3, [r7, #32]
 8007180:	b2da      	uxtb	r2, r3
 8007182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007184:	1c59      	adds	r1, r3, #1
 8007186:	6279      	str	r1, [r7, #36]	; 0x24
 8007188:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800718c:	b2d2      	uxtb	r2, r2
 800718e:	701a      	strb	r2, [r3, #0]
 8007190:	6a3b      	ldr	r3, [r7, #32]
 8007192:	09db      	lsrs	r3, r3, #7
 8007194:	623b      	str	r3, [r7, #32]
 8007196:	6a3b      	ldr	r3, [r7, #32]
 8007198:	2b7f      	cmp	r3, #127	; 0x7f
 800719a:	d8f0      	bhi.n	800717e <SEGGER_SYSVIEW_SendModule+0x66>
 800719c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719e:	1c5a      	adds	r2, r3, #1
 80071a0:	627a      	str	r2, [r7, #36]	; 0x24
 80071a2:	6a3a      	ldr	r2, [r7, #32]
 80071a4:	b2d2      	uxtb	r2, r2
 80071a6:	701a      	strb	r2, [r3, #0]
 80071a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071aa:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	61fb      	str	r3, [r7, #28]
 80071b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	61bb      	str	r3, [r7, #24]
 80071b6:	e00b      	b.n	80071d0 <SEGGER_SYSVIEW_SendModule+0xb8>
 80071b8:	69bb      	ldr	r3, [r7, #24]
 80071ba:	b2da      	uxtb	r2, r3
 80071bc:	69fb      	ldr	r3, [r7, #28]
 80071be:	1c59      	adds	r1, r3, #1
 80071c0:	61f9      	str	r1, [r7, #28]
 80071c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80071c6:	b2d2      	uxtb	r2, r2
 80071c8:	701a      	strb	r2, [r3, #0]
 80071ca:	69bb      	ldr	r3, [r7, #24]
 80071cc:	09db      	lsrs	r3, r3, #7
 80071ce:	61bb      	str	r3, [r7, #24]
 80071d0:	69bb      	ldr	r3, [r7, #24]
 80071d2:	2b7f      	cmp	r3, #127	; 0x7f
 80071d4:	d8f0      	bhi.n	80071b8 <SEGGER_SYSVIEW_SendModule+0xa0>
 80071d6:	69fb      	ldr	r3, [r7, #28]
 80071d8:	1c5a      	adds	r2, r3, #1
 80071da:	61fa      	str	r2, [r7, #28]
 80071dc:	69ba      	ldr	r2, [r7, #24]
 80071de:	b2d2      	uxtb	r2, r2
 80071e0:	701a      	strb	r2, [r3, #0]
 80071e2:	69fb      	ldr	r3, [r7, #28]
 80071e4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80071e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	2280      	movs	r2, #128	; 0x80
 80071ec:	4619      	mov	r1, r3
 80071ee:	68f8      	ldr	r0, [r7, #12]
 80071f0:	f7fe fb2a 	bl	8005848 <_EncodeStr>
 80071f4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80071f6:	2216      	movs	r2, #22
 80071f8:	68f9      	ldr	r1, [r7, #12]
 80071fa:	6938      	ldr	r0, [r7, #16]
 80071fc:	f7fe fc64 	bl	8005ac8 <_SendPacket>
      RECORD_END();
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8007206:	bf00      	nop
 8007208:	3730      	adds	r7, #48	; 0x30
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
 800720e:	bf00      	nop
 8007210:	20014428 	.word	0x20014428
 8007214:	20014430 	.word	0x20014430

08007218 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8007218:	b580      	push	{r7, lr}
 800721a:	b082      	sub	sp, #8
 800721c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800721e:	4b0c      	ldr	r3, [pc, #48]	; (8007250 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d00f      	beq.n	8007246 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8007226:	4b0a      	ldr	r3, [pc, #40]	; (8007250 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	68db      	ldr	r3, [r3, #12]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d002      	beq.n	800723a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	68db      	ldr	r3, [r3, #12]
 8007238:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	691b      	ldr	r3, [r3, #16]
 800723e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d1f2      	bne.n	800722c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8007246:	bf00      	nop
 8007248:	3708      	adds	r7, #8
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
 800724e:	bf00      	nop
 8007250:	20014428 	.word	0x20014428

08007254 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8007254:	b580      	push	{r7, lr}
 8007256:	b086      	sub	sp, #24
 8007258:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800725a:	f3ef 8311 	mrs	r3, BASEPRI
 800725e:	f04f 0120 	mov.w	r1, #32
 8007262:	f381 8811 	msr	BASEPRI, r1
 8007266:	60fb      	str	r3, [r7, #12]
 8007268:	4817      	ldr	r0, [pc, #92]	; (80072c8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800726a:	f7fe fb3a 	bl	80058e2 <_PreparePacket>
 800726e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	617b      	str	r3, [r7, #20]
 8007278:	4b14      	ldr	r3, [pc, #80]	; (80072cc <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	613b      	str	r3, [r7, #16]
 800727e:	e00b      	b.n	8007298 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	b2da      	uxtb	r2, r3
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	1c59      	adds	r1, r3, #1
 8007288:	6179      	str	r1, [r7, #20]
 800728a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800728e:	b2d2      	uxtb	r2, r2
 8007290:	701a      	strb	r2, [r3, #0]
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	09db      	lsrs	r3, r3, #7
 8007296:	613b      	str	r3, [r7, #16]
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	2b7f      	cmp	r3, #127	; 0x7f
 800729c:	d8f0      	bhi.n	8007280 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	1c5a      	adds	r2, r3, #1
 80072a2:	617a      	str	r2, [r7, #20]
 80072a4:	693a      	ldr	r2, [r7, #16]
 80072a6:	b2d2      	uxtb	r2, r2
 80072a8:	701a      	strb	r2, [r3, #0]
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80072ae:	221b      	movs	r2, #27
 80072b0:	6879      	ldr	r1, [r7, #4]
 80072b2:	68b8      	ldr	r0, [r7, #8]
 80072b4:	f7fe fc08 	bl	8005ac8 <_SendPacket>
  RECORD_END();
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f383 8811 	msr	BASEPRI, r3
}
 80072be:	bf00      	nop
 80072c0:	3718      	adds	r7, #24
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}
 80072c6:	bf00      	nop
 80072c8:	20014430 	.word	0x20014430
 80072cc:	2001442c 	.word	0x2001442c

080072d0 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 80072d0:	b40f      	push	{r0, r1, r2, r3}
 80072d2:	b580      	push	{r7, lr}
 80072d4:	b082      	sub	sp, #8
 80072d6:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 80072d8:	f107 0314 	add.w	r3, r7, #20
 80072dc:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80072de:	1d3b      	adds	r3, r7, #4
 80072e0:	461a      	mov	r2, r3
 80072e2:	2100      	movs	r1, #0
 80072e4:	6938      	ldr	r0, [r7, #16]
 80072e6:	f7fe fe79 	bl	8005fdc <_VPrintTarget>
  va_end(ParamList);
}
 80072ea:	bf00      	nop
 80072ec:	3708      	adds	r7, #8
 80072ee:	46bd      	mov	sp, r7
 80072f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80072f4:	b004      	add	sp, #16
 80072f6:	4770      	bx	lr

080072f8 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b08a      	sub	sp, #40	; 0x28
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007300:	f3ef 8311 	mrs	r3, BASEPRI
 8007304:	f04f 0120 	mov.w	r1, #32
 8007308:	f381 8811 	msr	BASEPRI, r1
 800730c:	617b      	str	r3, [r7, #20]
 800730e:	4827      	ldr	r0, [pc, #156]	; (80073ac <SEGGER_SYSVIEW_Warn+0xb4>)
 8007310:	f7fe fae7 	bl	80058e2 <_PreparePacket>
 8007314:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007316:	2280      	movs	r2, #128	; 0x80
 8007318:	6879      	ldr	r1, [r7, #4]
 800731a:	6938      	ldr	r0, [r7, #16]
 800731c:	f7fe fa94 	bl	8005848 <_EncodeStr>
 8007320:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	627b      	str	r3, [r7, #36]	; 0x24
 8007326:	2301      	movs	r3, #1
 8007328:	623b      	str	r3, [r7, #32]
 800732a:	e00b      	b.n	8007344 <SEGGER_SYSVIEW_Warn+0x4c>
 800732c:	6a3b      	ldr	r3, [r7, #32]
 800732e:	b2da      	uxtb	r2, r3
 8007330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007332:	1c59      	adds	r1, r3, #1
 8007334:	6279      	str	r1, [r7, #36]	; 0x24
 8007336:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800733a:	b2d2      	uxtb	r2, r2
 800733c:	701a      	strb	r2, [r3, #0]
 800733e:	6a3b      	ldr	r3, [r7, #32]
 8007340:	09db      	lsrs	r3, r3, #7
 8007342:	623b      	str	r3, [r7, #32]
 8007344:	6a3b      	ldr	r3, [r7, #32]
 8007346:	2b7f      	cmp	r3, #127	; 0x7f
 8007348:	d8f0      	bhi.n	800732c <SEGGER_SYSVIEW_Warn+0x34>
 800734a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800734c:	1c5a      	adds	r2, r3, #1
 800734e:	627a      	str	r2, [r7, #36]	; 0x24
 8007350:	6a3a      	ldr	r2, [r7, #32]
 8007352:	b2d2      	uxtb	r2, r2
 8007354:	701a      	strb	r2, [r3, #0]
 8007356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007358:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	61fb      	str	r3, [r7, #28]
 800735e:	2300      	movs	r3, #0
 8007360:	61bb      	str	r3, [r7, #24]
 8007362:	e00b      	b.n	800737c <SEGGER_SYSVIEW_Warn+0x84>
 8007364:	69bb      	ldr	r3, [r7, #24]
 8007366:	b2da      	uxtb	r2, r3
 8007368:	69fb      	ldr	r3, [r7, #28]
 800736a:	1c59      	adds	r1, r3, #1
 800736c:	61f9      	str	r1, [r7, #28]
 800736e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007372:	b2d2      	uxtb	r2, r2
 8007374:	701a      	strb	r2, [r3, #0]
 8007376:	69bb      	ldr	r3, [r7, #24]
 8007378:	09db      	lsrs	r3, r3, #7
 800737a:	61bb      	str	r3, [r7, #24]
 800737c:	69bb      	ldr	r3, [r7, #24]
 800737e:	2b7f      	cmp	r3, #127	; 0x7f
 8007380:	d8f0      	bhi.n	8007364 <SEGGER_SYSVIEW_Warn+0x6c>
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	1c5a      	adds	r2, r3, #1
 8007386:	61fa      	str	r2, [r7, #28]
 8007388:	69ba      	ldr	r2, [r7, #24]
 800738a:	b2d2      	uxtb	r2, r2
 800738c:	701a      	strb	r2, [r3, #0]
 800738e:	69fb      	ldr	r3, [r7, #28]
 8007390:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8007392:	221a      	movs	r2, #26
 8007394:	68f9      	ldr	r1, [r7, #12]
 8007396:	6938      	ldr	r0, [r7, #16]
 8007398:	f7fe fb96 	bl	8005ac8 <_SendPacket>
  RECORD_END();
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	f383 8811 	msr	BASEPRI, r3
}
 80073a2:	bf00      	nop
 80073a4:	3728      	adds	r7, #40	; 0x28
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop
 80073ac:	20014430 	.word	0x20014430

080073b0 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 80073b0:	b580      	push	{r7, lr}
 80073b2:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80073b4:	4b13      	ldr	r3, [pc, #76]	; (8007404 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80073b6:	7e1b      	ldrb	r3, [r3, #24]
 80073b8:	4619      	mov	r1, r3
 80073ba:	4a13      	ldr	r2, [pc, #76]	; (8007408 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80073bc:	460b      	mov	r3, r1
 80073be:	005b      	lsls	r3, r3, #1
 80073c0:	440b      	add	r3, r1
 80073c2:	00db      	lsls	r3, r3, #3
 80073c4:	4413      	add	r3, r2
 80073c6:	336c      	adds	r3, #108	; 0x6c
 80073c8:	681a      	ldr	r2, [r3, #0]
 80073ca:	4b0e      	ldr	r3, [pc, #56]	; (8007404 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80073cc:	7e1b      	ldrb	r3, [r3, #24]
 80073ce:	4618      	mov	r0, r3
 80073d0:	490d      	ldr	r1, [pc, #52]	; (8007408 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80073d2:	4603      	mov	r3, r0
 80073d4:	005b      	lsls	r3, r3, #1
 80073d6:	4403      	add	r3, r0
 80073d8:	00db      	lsls	r3, r3, #3
 80073da:	440b      	add	r3, r1
 80073dc:	3370      	adds	r3, #112	; 0x70
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d00b      	beq.n	80073fc <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80073e4:	4b07      	ldr	r3, [pc, #28]	; (8007404 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80073e6:	789b      	ldrb	r3, [r3, #2]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d107      	bne.n	80073fc <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80073ec:	4b05      	ldr	r3, [pc, #20]	; (8007404 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80073ee:	2201      	movs	r2, #1
 80073f0:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80073f2:	f7fe fa83 	bl	80058fc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80073f6:	4b03      	ldr	r3, [pc, #12]	; (8007404 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80073f8:	2200      	movs	r2, #0
 80073fa:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 80073fc:	4b01      	ldr	r3, [pc, #4]	; (8007404 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80073fe:	781b      	ldrb	r3, [r3, #0]
}
 8007400:	4618      	mov	r0, r3
 8007402:	bd80      	pop	{r7, pc}
 8007404:	20014400 	.word	0x20014400
 8007408:	20012f40 	.word	0x20012f40

0800740c <__errno>:
 800740c:	4b01      	ldr	r3, [pc, #4]	; (8007414 <__errno+0x8>)
 800740e:	6818      	ldr	r0, [r3, #0]
 8007410:	4770      	bx	lr
 8007412:	bf00      	nop
 8007414:	2000001c 	.word	0x2000001c

08007418 <__libc_init_array>:
 8007418:	b570      	push	{r4, r5, r6, lr}
 800741a:	4d0d      	ldr	r5, [pc, #52]	; (8007450 <__libc_init_array+0x38>)
 800741c:	4c0d      	ldr	r4, [pc, #52]	; (8007454 <__libc_init_array+0x3c>)
 800741e:	1b64      	subs	r4, r4, r5
 8007420:	10a4      	asrs	r4, r4, #2
 8007422:	2600      	movs	r6, #0
 8007424:	42a6      	cmp	r6, r4
 8007426:	d109      	bne.n	800743c <__libc_init_array+0x24>
 8007428:	4d0b      	ldr	r5, [pc, #44]	; (8007458 <__libc_init_array+0x40>)
 800742a:	4c0c      	ldr	r4, [pc, #48]	; (800745c <__libc_init_array+0x44>)
 800742c:	f000 fcb2 	bl	8007d94 <_init>
 8007430:	1b64      	subs	r4, r4, r5
 8007432:	10a4      	asrs	r4, r4, #2
 8007434:	2600      	movs	r6, #0
 8007436:	42a6      	cmp	r6, r4
 8007438:	d105      	bne.n	8007446 <__libc_init_array+0x2e>
 800743a:	bd70      	pop	{r4, r5, r6, pc}
 800743c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007440:	4798      	blx	r3
 8007442:	3601      	adds	r6, #1
 8007444:	e7ee      	b.n	8007424 <__libc_init_array+0xc>
 8007446:	f855 3b04 	ldr.w	r3, [r5], #4
 800744a:	4798      	blx	r3
 800744c:	3601      	adds	r6, #1
 800744e:	e7f2      	b.n	8007436 <__libc_init_array+0x1e>
 8007450:	08007f6c 	.word	0x08007f6c
 8007454:	08007f6c 	.word	0x08007f6c
 8007458:	08007f6c 	.word	0x08007f6c
 800745c:	08007f70 	.word	0x08007f70

08007460 <memcmp>:
 8007460:	b510      	push	{r4, lr}
 8007462:	3901      	subs	r1, #1
 8007464:	4402      	add	r2, r0
 8007466:	4290      	cmp	r0, r2
 8007468:	d101      	bne.n	800746e <memcmp+0xe>
 800746a:	2000      	movs	r0, #0
 800746c:	e005      	b.n	800747a <memcmp+0x1a>
 800746e:	7803      	ldrb	r3, [r0, #0]
 8007470:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007474:	42a3      	cmp	r3, r4
 8007476:	d001      	beq.n	800747c <memcmp+0x1c>
 8007478:	1b18      	subs	r0, r3, r4
 800747a:	bd10      	pop	{r4, pc}
 800747c:	3001      	adds	r0, #1
 800747e:	e7f2      	b.n	8007466 <memcmp+0x6>

08007480 <memcpy>:
 8007480:	440a      	add	r2, r1
 8007482:	4291      	cmp	r1, r2
 8007484:	f100 33ff 	add.w	r3, r0, #4294967295
 8007488:	d100      	bne.n	800748c <memcpy+0xc>
 800748a:	4770      	bx	lr
 800748c:	b510      	push	{r4, lr}
 800748e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007492:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007496:	4291      	cmp	r1, r2
 8007498:	d1f9      	bne.n	800748e <memcpy+0xe>
 800749a:	bd10      	pop	{r4, pc}

0800749c <memset>:
 800749c:	4402      	add	r2, r0
 800749e:	4603      	mov	r3, r0
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d100      	bne.n	80074a6 <memset+0xa>
 80074a4:	4770      	bx	lr
 80074a6:	f803 1b01 	strb.w	r1, [r3], #1
 80074aa:	e7f9      	b.n	80074a0 <memset+0x4>

080074ac <sniprintf>:
 80074ac:	b40c      	push	{r2, r3}
 80074ae:	b530      	push	{r4, r5, lr}
 80074b0:	4b17      	ldr	r3, [pc, #92]	; (8007510 <sniprintf+0x64>)
 80074b2:	1e0c      	subs	r4, r1, #0
 80074b4:	681d      	ldr	r5, [r3, #0]
 80074b6:	b09d      	sub	sp, #116	; 0x74
 80074b8:	da08      	bge.n	80074cc <sniprintf+0x20>
 80074ba:	238b      	movs	r3, #139	; 0x8b
 80074bc:	602b      	str	r3, [r5, #0]
 80074be:	f04f 30ff 	mov.w	r0, #4294967295
 80074c2:	b01d      	add	sp, #116	; 0x74
 80074c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80074c8:	b002      	add	sp, #8
 80074ca:	4770      	bx	lr
 80074cc:	f44f 7302 	mov.w	r3, #520	; 0x208
 80074d0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80074d4:	bf14      	ite	ne
 80074d6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80074da:	4623      	moveq	r3, r4
 80074dc:	9304      	str	r3, [sp, #16]
 80074de:	9307      	str	r3, [sp, #28]
 80074e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80074e4:	9002      	str	r0, [sp, #8]
 80074e6:	9006      	str	r0, [sp, #24]
 80074e8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80074ec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80074ee:	ab21      	add	r3, sp, #132	; 0x84
 80074f0:	a902      	add	r1, sp, #8
 80074f2:	4628      	mov	r0, r5
 80074f4:	9301      	str	r3, [sp, #4]
 80074f6:	f000 f869 	bl	80075cc <_svfiprintf_r>
 80074fa:	1c43      	adds	r3, r0, #1
 80074fc:	bfbc      	itt	lt
 80074fe:	238b      	movlt	r3, #139	; 0x8b
 8007500:	602b      	strlt	r3, [r5, #0]
 8007502:	2c00      	cmp	r4, #0
 8007504:	d0dd      	beq.n	80074c2 <sniprintf+0x16>
 8007506:	9b02      	ldr	r3, [sp, #8]
 8007508:	2200      	movs	r2, #0
 800750a:	701a      	strb	r2, [r3, #0]
 800750c:	e7d9      	b.n	80074c2 <sniprintf+0x16>
 800750e:	bf00      	nop
 8007510:	2000001c 	.word	0x2000001c

08007514 <__ssputs_r>:
 8007514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007518:	688e      	ldr	r6, [r1, #8]
 800751a:	429e      	cmp	r6, r3
 800751c:	4682      	mov	sl, r0
 800751e:	460c      	mov	r4, r1
 8007520:	4690      	mov	r8, r2
 8007522:	461f      	mov	r7, r3
 8007524:	d838      	bhi.n	8007598 <__ssputs_r+0x84>
 8007526:	898a      	ldrh	r2, [r1, #12]
 8007528:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800752c:	d032      	beq.n	8007594 <__ssputs_r+0x80>
 800752e:	6825      	ldr	r5, [r4, #0]
 8007530:	6909      	ldr	r1, [r1, #16]
 8007532:	eba5 0901 	sub.w	r9, r5, r1
 8007536:	6965      	ldr	r5, [r4, #20]
 8007538:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800753c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007540:	3301      	adds	r3, #1
 8007542:	444b      	add	r3, r9
 8007544:	106d      	asrs	r5, r5, #1
 8007546:	429d      	cmp	r5, r3
 8007548:	bf38      	it	cc
 800754a:	461d      	movcc	r5, r3
 800754c:	0553      	lsls	r3, r2, #21
 800754e:	d531      	bpl.n	80075b4 <__ssputs_r+0xa0>
 8007550:	4629      	mov	r1, r5
 8007552:	f000 fb55 	bl	8007c00 <_malloc_r>
 8007556:	4606      	mov	r6, r0
 8007558:	b950      	cbnz	r0, 8007570 <__ssputs_r+0x5c>
 800755a:	230c      	movs	r3, #12
 800755c:	f8ca 3000 	str.w	r3, [sl]
 8007560:	89a3      	ldrh	r3, [r4, #12]
 8007562:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007566:	81a3      	strh	r3, [r4, #12]
 8007568:	f04f 30ff 	mov.w	r0, #4294967295
 800756c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007570:	6921      	ldr	r1, [r4, #16]
 8007572:	464a      	mov	r2, r9
 8007574:	f7ff ff84 	bl	8007480 <memcpy>
 8007578:	89a3      	ldrh	r3, [r4, #12]
 800757a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800757e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007582:	81a3      	strh	r3, [r4, #12]
 8007584:	6126      	str	r6, [r4, #16]
 8007586:	6165      	str	r5, [r4, #20]
 8007588:	444e      	add	r6, r9
 800758a:	eba5 0509 	sub.w	r5, r5, r9
 800758e:	6026      	str	r6, [r4, #0]
 8007590:	60a5      	str	r5, [r4, #8]
 8007592:	463e      	mov	r6, r7
 8007594:	42be      	cmp	r6, r7
 8007596:	d900      	bls.n	800759a <__ssputs_r+0x86>
 8007598:	463e      	mov	r6, r7
 800759a:	6820      	ldr	r0, [r4, #0]
 800759c:	4632      	mov	r2, r6
 800759e:	4641      	mov	r1, r8
 80075a0:	f000 faa8 	bl	8007af4 <memmove>
 80075a4:	68a3      	ldr	r3, [r4, #8]
 80075a6:	1b9b      	subs	r3, r3, r6
 80075a8:	60a3      	str	r3, [r4, #8]
 80075aa:	6823      	ldr	r3, [r4, #0]
 80075ac:	4433      	add	r3, r6
 80075ae:	6023      	str	r3, [r4, #0]
 80075b0:	2000      	movs	r0, #0
 80075b2:	e7db      	b.n	800756c <__ssputs_r+0x58>
 80075b4:	462a      	mov	r2, r5
 80075b6:	f000 fb97 	bl	8007ce8 <_realloc_r>
 80075ba:	4606      	mov	r6, r0
 80075bc:	2800      	cmp	r0, #0
 80075be:	d1e1      	bne.n	8007584 <__ssputs_r+0x70>
 80075c0:	6921      	ldr	r1, [r4, #16]
 80075c2:	4650      	mov	r0, sl
 80075c4:	f000 fab0 	bl	8007b28 <_free_r>
 80075c8:	e7c7      	b.n	800755a <__ssputs_r+0x46>
	...

080075cc <_svfiprintf_r>:
 80075cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075d0:	4698      	mov	r8, r3
 80075d2:	898b      	ldrh	r3, [r1, #12]
 80075d4:	061b      	lsls	r3, r3, #24
 80075d6:	b09d      	sub	sp, #116	; 0x74
 80075d8:	4607      	mov	r7, r0
 80075da:	460d      	mov	r5, r1
 80075dc:	4614      	mov	r4, r2
 80075de:	d50e      	bpl.n	80075fe <_svfiprintf_r+0x32>
 80075e0:	690b      	ldr	r3, [r1, #16]
 80075e2:	b963      	cbnz	r3, 80075fe <_svfiprintf_r+0x32>
 80075e4:	2140      	movs	r1, #64	; 0x40
 80075e6:	f000 fb0b 	bl	8007c00 <_malloc_r>
 80075ea:	6028      	str	r0, [r5, #0]
 80075ec:	6128      	str	r0, [r5, #16]
 80075ee:	b920      	cbnz	r0, 80075fa <_svfiprintf_r+0x2e>
 80075f0:	230c      	movs	r3, #12
 80075f2:	603b      	str	r3, [r7, #0]
 80075f4:	f04f 30ff 	mov.w	r0, #4294967295
 80075f8:	e0d1      	b.n	800779e <_svfiprintf_r+0x1d2>
 80075fa:	2340      	movs	r3, #64	; 0x40
 80075fc:	616b      	str	r3, [r5, #20]
 80075fe:	2300      	movs	r3, #0
 8007600:	9309      	str	r3, [sp, #36]	; 0x24
 8007602:	2320      	movs	r3, #32
 8007604:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007608:	f8cd 800c 	str.w	r8, [sp, #12]
 800760c:	2330      	movs	r3, #48	; 0x30
 800760e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80077b8 <_svfiprintf_r+0x1ec>
 8007612:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007616:	f04f 0901 	mov.w	r9, #1
 800761a:	4623      	mov	r3, r4
 800761c:	469a      	mov	sl, r3
 800761e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007622:	b10a      	cbz	r2, 8007628 <_svfiprintf_r+0x5c>
 8007624:	2a25      	cmp	r2, #37	; 0x25
 8007626:	d1f9      	bne.n	800761c <_svfiprintf_r+0x50>
 8007628:	ebba 0b04 	subs.w	fp, sl, r4
 800762c:	d00b      	beq.n	8007646 <_svfiprintf_r+0x7a>
 800762e:	465b      	mov	r3, fp
 8007630:	4622      	mov	r2, r4
 8007632:	4629      	mov	r1, r5
 8007634:	4638      	mov	r0, r7
 8007636:	f7ff ff6d 	bl	8007514 <__ssputs_r>
 800763a:	3001      	adds	r0, #1
 800763c:	f000 80aa 	beq.w	8007794 <_svfiprintf_r+0x1c8>
 8007640:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007642:	445a      	add	r2, fp
 8007644:	9209      	str	r2, [sp, #36]	; 0x24
 8007646:	f89a 3000 	ldrb.w	r3, [sl]
 800764a:	2b00      	cmp	r3, #0
 800764c:	f000 80a2 	beq.w	8007794 <_svfiprintf_r+0x1c8>
 8007650:	2300      	movs	r3, #0
 8007652:	f04f 32ff 	mov.w	r2, #4294967295
 8007656:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800765a:	f10a 0a01 	add.w	sl, sl, #1
 800765e:	9304      	str	r3, [sp, #16]
 8007660:	9307      	str	r3, [sp, #28]
 8007662:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007666:	931a      	str	r3, [sp, #104]	; 0x68
 8007668:	4654      	mov	r4, sl
 800766a:	2205      	movs	r2, #5
 800766c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007670:	4851      	ldr	r0, [pc, #324]	; (80077b8 <_svfiprintf_r+0x1ec>)
 8007672:	f7f8 fdfd 	bl	8000270 <memchr>
 8007676:	9a04      	ldr	r2, [sp, #16]
 8007678:	b9d8      	cbnz	r0, 80076b2 <_svfiprintf_r+0xe6>
 800767a:	06d0      	lsls	r0, r2, #27
 800767c:	bf44      	itt	mi
 800767e:	2320      	movmi	r3, #32
 8007680:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007684:	0711      	lsls	r1, r2, #28
 8007686:	bf44      	itt	mi
 8007688:	232b      	movmi	r3, #43	; 0x2b
 800768a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800768e:	f89a 3000 	ldrb.w	r3, [sl]
 8007692:	2b2a      	cmp	r3, #42	; 0x2a
 8007694:	d015      	beq.n	80076c2 <_svfiprintf_r+0xf6>
 8007696:	9a07      	ldr	r2, [sp, #28]
 8007698:	4654      	mov	r4, sl
 800769a:	2000      	movs	r0, #0
 800769c:	f04f 0c0a 	mov.w	ip, #10
 80076a0:	4621      	mov	r1, r4
 80076a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80076a6:	3b30      	subs	r3, #48	; 0x30
 80076a8:	2b09      	cmp	r3, #9
 80076aa:	d94e      	bls.n	800774a <_svfiprintf_r+0x17e>
 80076ac:	b1b0      	cbz	r0, 80076dc <_svfiprintf_r+0x110>
 80076ae:	9207      	str	r2, [sp, #28]
 80076b0:	e014      	b.n	80076dc <_svfiprintf_r+0x110>
 80076b2:	eba0 0308 	sub.w	r3, r0, r8
 80076b6:	fa09 f303 	lsl.w	r3, r9, r3
 80076ba:	4313      	orrs	r3, r2
 80076bc:	9304      	str	r3, [sp, #16]
 80076be:	46a2      	mov	sl, r4
 80076c0:	e7d2      	b.n	8007668 <_svfiprintf_r+0x9c>
 80076c2:	9b03      	ldr	r3, [sp, #12]
 80076c4:	1d19      	adds	r1, r3, #4
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	9103      	str	r1, [sp, #12]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	bfbb      	ittet	lt
 80076ce:	425b      	neglt	r3, r3
 80076d0:	f042 0202 	orrlt.w	r2, r2, #2
 80076d4:	9307      	strge	r3, [sp, #28]
 80076d6:	9307      	strlt	r3, [sp, #28]
 80076d8:	bfb8      	it	lt
 80076da:	9204      	strlt	r2, [sp, #16]
 80076dc:	7823      	ldrb	r3, [r4, #0]
 80076de:	2b2e      	cmp	r3, #46	; 0x2e
 80076e0:	d10c      	bne.n	80076fc <_svfiprintf_r+0x130>
 80076e2:	7863      	ldrb	r3, [r4, #1]
 80076e4:	2b2a      	cmp	r3, #42	; 0x2a
 80076e6:	d135      	bne.n	8007754 <_svfiprintf_r+0x188>
 80076e8:	9b03      	ldr	r3, [sp, #12]
 80076ea:	1d1a      	adds	r2, r3, #4
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	9203      	str	r2, [sp, #12]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	bfb8      	it	lt
 80076f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80076f8:	3402      	adds	r4, #2
 80076fa:	9305      	str	r3, [sp, #20]
 80076fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80077c8 <_svfiprintf_r+0x1fc>
 8007700:	7821      	ldrb	r1, [r4, #0]
 8007702:	2203      	movs	r2, #3
 8007704:	4650      	mov	r0, sl
 8007706:	f7f8 fdb3 	bl	8000270 <memchr>
 800770a:	b140      	cbz	r0, 800771e <_svfiprintf_r+0x152>
 800770c:	2340      	movs	r3, #64	; 0x40
 800770e:	eba0 000a 	sub.w	r0, r0, sl
 8007712:	fa03 f000 	lsl.w	r0, r3, r0
 8007716:	9b04      	ldr	r3, [sp, #16]
 8007718:	4303      	orrs	r3, r0
 800771a:	3401      	adds	r4, #1
 800771c:	9304      	str	r3, [sp, #16]
 800771e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007722:	4826      	ldr	r0, [pc, #152]	; (80077bc <_svfiprintf_r+0x1f0>)
 8007724:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007728:	2206      	movs	r2, #6
 800772a:	f7f8 fda1 	bl	8000270 <memchr>
 800772e:	2800      	cmp	r0, #0
 8007730:	d038      	beq.n	80077a4 <_svfiprintf_r+0x1d8>
 8007732:	4b23      	ldr	r3, [pc, #140]	; (80077c0 <_svfiprintf_r+0x1f4>)
 8007734:	bb1b      	cbnz	r3, 800777e <_svfiprintf_r+0x1b2>
 8007736:	9b03      	ldr	r3, [sp, #12]
 8007738:	3307      	adds	r3, #7
 800773a:	f023 0307 	bic.w	r3, r3, #7
 800773e:	3308      	adds	r3, #8
 8007740:	9303      	str	r3, [sp, #12]
 8007742:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007744:	4433      	add	r3, r6
 8007746:	9309      	str	r3, [sp, #36]	; 0x24
 8007748:	e767      	b.n	800761a <_svfiprintf_r+0x4e>
 800774a:	fb0c 3202 	mla	r2, ip, r2, r3
 800774e:	460c      	mov	r4, r1
 8007750:	2001      	movs	r0, #1
 8007752:	e7a5      	b.n	80076a0 <_svfiprintf_r+0xd4>
 8007754:	2300      	movs	r3, #0
 8007756:	3401      	adds	r4, #1
 8007758:	9305      	str	r3, [sp, #20]
 800775a:	4619      	mov	r1, r3
 800775c:	f04f 0c0a 	mov.w	ip, #10
 8007760:	4620      	mov	r0, r4
 8007762:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007766:	3a30      	subs	r2, #48	; 0x30
 8007768:	2a09      	cmp	r2, #9
 800776a:	d903      	bls.n	8007774 <_svfiprintf_r+0x1a8>
 800776c:	2b00      	cmp	r3, #0
 800776e:	d0c5      	beq.n	80076fc <_svfiprintf_r+0x130>
 8007770:	9105      	str	r1, [sp, #20]
 8007772:	e7c3      	b.n	80076fc <_svfiprintf_r+0x130>
 8007774:	fb0c 2101 	mla	r1, ip, r1, r2
 8007778:	4604      	mov	r4, r0
 800777a:	2301      	movs	r3, #1
 800777c:	e7f0      	b.n	8007760 <_svfiprintf_r+0x194>
 800777e:	ab03      	add	r3, sp, #12
 8007780:	9300      	str	r3, [sp, #0]
 8007782:	462a      	mov	r2, r5
 8007784:	4b0f      	ldr	r3, [pc, #60]	; (80077c4 <_svfiprintf_r+0x1f8>)
 8007786:	a904      	add	r1, sp, #16
 8007788:	4638      	mov	r0, r7
 800778a:	f3af 8000 	nop.w
 800778e:	1c42      	adds	r2, r0, #1
 8007790:	4606      	mov	r6, r0
 8007792:	d1d6      	bne.n	8007742 <_svfiprintf_r+0x176>
 8007794:	89ab      	ldrh	r3, [r5, #12]
 8007796:	065b      	lsls	r3, r3, #25
 8007798:	f53f af2c 	bmi.w	80075f4 <_svfiprintf_r+0x28>
 800779c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800779e:	b01d      	add	sp, #116	; 0x74
 80077a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077a4:	ab03      	add	r3, sp, #12
 80077a6:	9300      	str	r3, [sp, #0]
 80077a8:	462a      	mov	r2, r5
 80077aa:	4b06      	ldr	r3, [pc, #24]	; (80077c4 <_svfiprintf_r+0x1f8>)
 80077ac:	a904      	add	r1, sp, #16
 80077ae:	4638      	mov	r0, r7
 80077b0:	f000 f87a 	bl	80078a8 <_printf_i>
 80077b4:	e7eb      	b.n	800778e <_svfiprintf_r+0x1c2>
 80077b6:	bf00      	nop
 80077b8:	08007f30 	.word	0x08007f30
 80077bc:	08007f3a 	.word	0x08007f3a
 80077c0:	00000000 	.word	0x00000000
 80077c4:	08007515 	.word	0x08007515
 80077c8:	08007f36 	.word	0x08007f36

080077cc <_printf_common>:
 80077cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077d0:	4616      	mov	r6, r2
 80077d2:	4699      	mov	r9, r3
 80077d4:	688a      	ldr	r2, [r1, #8]
 80077d6:	690b      	ldr	r3, [r1, #16]
 80077d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80077dc:	4293      	cmp	r3, r2
 80077de:	bfb8      	it	lt
 80077e0:	4613      	movlt	r3, r2
 80077e2:	6033      	str	r3, [r6, #0]
 80077e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80077e8:	4607      	mov	r7, r0
 80077ea:	460c      	mov	r4, r1
 80077ec:	b10a      	cbz	r2, 80077f2 <_printf_common+0x26>
 80077ee:	3301      	adds	r3, #1
 80077f0:	6033      	str	r3, [r6, #0]
 80077f2:	6823      	ldr	r3, [r4, #0]
 80077f4:	0699      	lsls	r1, r3, #26
 80077f6:	bf42      	ittt	mi
 80077f8:	6833      	ldrmi	r3, [r6, #0]
 80077fa:	3302      	addmi	r3, #2
 80077fc:	6033      	strmi	r3, [r6, #0]
 80077fe:	6825      	ldr	r5, [r4, #0]
 8007800:	f015 0506 	ands.w	r5, r5, #6
 8007804:	d106      	bne.n	8007814 <_printf_common+0x48>
 8007806:	f104 0a19 	add.w	sl, r4, #25
 800780a:	68e3      	ldr	r3, [r4, #12]
 800780c:	6832      	ldr	r2, [r6, #0]
 800780e:	1a9b      	subs	r3, r3, r2
 8007810:	42ab      	cmp	r3, r5
 8007812:	dc26      	bgt.n	8007862 <_printf_common+0x96>
 8007814:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007818:	1e13      	subs	r3, r2, #0
 800781a:	6822      	ldr	r2, [r4, #0]
 800781c:	bf18      	it	ne
 800781e:	2301      	movne	r3, #1
 8007820:	0692      	lsls	r2, r2, #26
 8007822:	d42b      	bmi.n	800787c <_printf_common+0xb0>
 8007824:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007828:	4649      	mov	r1, r9
 800782a:	4638      	mov	r0, r7
 800782c:	47c0      	blx	r8
 800782e:	3001      	adds	r0, #1
 8007830:	d01e      	beq.n	8007870 <_printf_common+0xa4>
 8007832:	6823      	ldr	r3, [r4, #0]
 8007834:	68e5      	ldr	r5, [r4, #12]
 8007836:	6832      	ldr	r2, [r6, #0]
 8007838:	f003 0306 	and.w	r3, r3, #6
 800783c:	2b04      	cmp	r3, #4
 800783e:	bf08      	it	eq
 8007840:	1aad      	subeq	r5, r5, r2
 8007842:	68a3      	ldr	r3, [r4, #8]
 8007844:	6922      	ldr	r2, [r4, #16]
 8007846:	bf0c      	ite	eq
 8007848:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800784c:	2500      	movne	r5, #0
 800784e:	4293      	cmp	r3, r2
 8007850:	bfc4      	itt	gt
 8007852:	1a9b      	subgt	r3, r3, r2
 8007854:	18ed      	addgt	r5, r5, r3
 8007856:	2600      	movs	r6, #0
 8007858:	341a      	adds	r4, #26
 800785a:	42b5      	cmp	r5, r6
 800785c:	d11a      	bne.n	8007894 <_printf_common+0xc8>
 800785e:	2000      	movs	r0, #0
 8007860:	e008      	b.n	8007874 <_printf_common+0xa8>
 8007862:	2301      	movs	r3, #1
 8007864:	4652      	mov	r2, sl
 8007866:	4649      	mov	r1, r9
 8007868:	4638      	mov	r0, r7
 800786a:	47c0      	blx	r8
 800786c:	3001      	adds	r0, #1
 800786e:	d103      	bne.n	8007878 <_printf_common+0xac>
 8007870:	f04f 30ff 	mov.w	r0, #4294967295
 8007874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007878:	3501      	adds	r5, #1
 800787a:	e7c6      	b.n	800780a <_printf_common+0x3e>
 800787c:	18e1      	adds	r1, r4, r3
 800787e:	1c5a      	adds	r2, r3, #1
 8007880:	2030      	movs	r0, #48	; 0x30
 8007882:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007886:	4422      	add	r2, r4
 8007888:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800788c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007890:	3302      	adds	r3, #2
 8007892:	e7c7      	b.n	8007824 <_printf_common+0x58>
 8007894:	2301      	movs	r3, #1
 8007896:	4622      	mov	r2, r4
 8007898:	4649      	mov	r1, r9
 800789a:	4638      	mov	r0, r7
 800789c:	47c0      	blx	r8
 800789e:	3001      	adds	r0, #1
 80078a0:	d0e6      	beq.n	8007870 <_printf_common+0xa4>
 80078a2:	3601      	adds	r6, #1
 80078a4:	e7d9      	b.n	800785a <_printf_common+0x8e>
	...

080078a8 <_printf_i>:
 80078a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80078ac:	7e0f      	ldrb	r7, [r1, #24]
 80078ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80078b0:	2f78      	cmp	r7, #120	; 0x78
 80078b2:	4691      	mov	r9, r2
 80078b4:	4680      	mov	r8, r0
 80078b6:	460c      	mov	r4, r1
 80078b8:	469a      	mov	sl, r3
 80078ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80078be:	d807      	bhi.n	80078d0 <_printf_i+0x28>
 80078c0:	2f62      	cmp	r7, #98	; 0x62
 80078c2:	d80a      	bhi.n	80078da <_printf_i+0x32>
 80078c4:	2f00      	cmp	r7, #0
 80078c6:	f000 80d8 	beq.w	8007a7a <_printf_i+0x1d2>
 80078ca:	2f58      	cmp	r7, #88	; 0x58
 80078cc:	f000 80a3 	beq.w	8007a16 <_printf_i+0x16e>
 80078d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80078d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80078d8:	e03a      	b.n	8007950 <_printf_i+0xa8>
 80078da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80078de:	2b15      	cmp	r3, #21
 80078e0:	d8f6      	bhi.n	80078d0 <_printf_i+0x28>
 80078e2:	a101      	add	r1, pc, #4	; (adr r1, 80078e8 <_printf_i+0x40>)
 80078e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80078e8:	08007941 	.word	0x08007941
 80078ec:	08007955 	.word	0x08007955
 80078f0:	080078d1 	.word	0x080078d1
 80078f4:	080078d1 	.word	0x080078d1
 80078f8:	080078d1 	.word	0x080078d1
 80078fc:	080078d1 	.word	0x080078d1
 8007900:	08007955 	.word	0x08007955
 8007904:	080078d1 	.word	0x080078d1
 8007908:	080078d1 	.word	0x080078d1
 800790c:	080078d1 	.word	0x080078d1
 8007910:	080078d1 	.word	0x080078d1
 8007914:	08007a61 	.word	0x08007a61
 8007918:	08007985 	.word	0x08007985
 800791c:	08007a43 	.word	0x08007a43
 8007920:	080078d1 	.word	0x080078d1
 8007924:	080078d1 	.word	0x080078d1
 8007928:	08007a83 	.word	0x08007a83
 800792c:	080078d1 	.word	0x080078d1
 8007930:	08007985 	.word	0x08007985
 8007934:	080078d1 	.word	0x080078d1
 8007938:	080078d1 	.word	0x080078d1
 800793c:	08007a4b 	.word	0x08007a4b
 8007940:	682b      	ldr	r3, [r5, #0]
 8007942:	1d1a      	adds	r2, r3, #4
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	602a      	str	r2, [r5, #0]
 8007948:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800794c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007950:	2301      	movs	r3, #1
 8007952:	e0a3      	b.n	8007a9c <_printf_i+0x1f4>
 8007954:	6820      	ldr	r0, [r4, #0]
 8007956:	6829      	ldr	r1, [r5, #0]
 8007958:	0606      	lsls	r6, r0, #24
 800795a:	f101 0304 	add.w	r3, r1, #4
 800795e:	d50a      	bpl.n	8007976 <_printf_i+0xce>
 8007960:	680e      	ldr	r6, [r1, #0]
 8007962:	602b      	str	r3, [r5, #0]
 8007964:	2e00      	cmp	r6, #0
 8007966:	da03      	bge.n	8007970 <_printf_i+0xc8>
 8007968:	232d      	movs	r3, #45	; 0x2d
 800796a:	4276      	negs	r6, r6
 800796c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007970:	485e      	ldr	r0, [pc, #376]	; (8007aec <_printf_i+0x244>)
 8007972:	230a      	movs	r3, #10
 8007974:	e019      	b.n	80079aa <_printf_i+0x102>
 8007976:	680e      	ldr	r6, [r1, #0]
 8007978:	602b      	str	r3, [r5, #0]
 800797a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800797e:	bf18      	it	ne
 8007980:	b236      	sxthne	r6, r6
 8007982:	e7ef      	b.n	8007964 <_printf_i+0xbc>
 8007984:	682b      	ldr	r3, [r5, #0]
 8007986:	6820      	ldr	r0, [r4, #0]
 8007988:	1d19      	adds	r1, r3, #4
 800798a:	6029      	str	r1, [r5, #0]
 800798c:	0601      	lsls	r1, r0, #24
 800798e:	d501      	bpl.n	8007994 <_printf_i+0xec>
 8007990:	681e      	ldr	r6, [r3, #0]
 8007992:	e002      	b.n	800799a <_printf_i+0xf2>
 8007994:	0646      	lsls	r6, r0, #25
 8007996:	d5fb      	bpl.n	8007990 <_printf_i+0xe8>
 8007998:	881e      	ldrh	r6, [r3, #0]
 800799a:	4854      	ldr	r0, [pc, #336]	; (8007aec <_printf_i+0x244>)
 800799c:	2f6f      	cmp	r7, #111	; 0x6f
 800799e:	bf0c      	ite	eq
 80079a0:	2308      	moveq	r3, #8
 80079a2:	230a      	movne	r3, #10
 80079a4:	2100      	movs	r1, #0
 80079a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80079aa:	6865      	ldr	r5, [r4, #4]
 80079ac:	60a5      	str	r5, [r4, #8]
 80079ae:	2d00      	cmp	r5, #0
 80079b0:	bfa2      	ittt	ge
 80079b2:	6821      	ldrge	r1, [r4, #0]
 80079b4:	f021 0104 	bicge.w	r1, r1, #4
 80079b8:	6021      	strge	r1, [r4, #0]
 80079ba:	b90e      	cbnz	r6, 80079c0 <_printf_i+0x118>
 80079bc:	2d00      	cmp	r5, #0
 80079be:	d04d      	beq.n	8007a5c <_printf_i+0x1b4>
 80079c0:	4615      	mov	r5, r2
 80079c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80079c6:	fb03 6711 	mls	r7, r3, r1, r6
 80079ca:	5dc7      	ldrb	r7, [r0, r7]
 80079cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80079d0:	4637      	mov	r7, r6
 80079d2:	42bb      	cmp	r3, r7
 80079d4:	460e      	mov	r6, r1
 80079d6:	d9f4      	bls.n	80079c2 <_printf_i+0x11a>
 80079d8:	2b08      	cmp	r3, #8
 80079da:	d10b      	bne.n	80079f4 <_printf_i+0x14c>
 80079dc:	6823      	ldr	r3, [r4, #0]
 80079de:	07de      	lsls	r6, r3, #31
 80079e0:	d508      	bpl.n	80079f4 <_printf_i+0x14c>
 80079e2:	6923      	ldr	r3, [r4, #16]
 80079e4:	6861      	ldr	r1, [r4, #4]
 80079e6:	4299      	cmp	r1, r3
 80079e8:	bfde      	ittt	le
 80079ea:	2330      	movle	r3, #48	; 0x30
 80079ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80079f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80079f4:	1b52      	subs	r2, r2, r5
 80079f6:	6122      	str	r2, [r4, #16]
 80079f8:	f8cd a000 	str.w	sl, [sp]
 80079fc:	464b      	mov	r3, r9
 80079fe:	aa03      	add	r2, sp, #12
 8007a00:	4621      	mov	r1, r4
 8007a02:	4640      	mov	r0, r8
 8007a04:	f7ff fee2 	bl	80077cc <_printf_common>
 8007a08:	3001      	adds	r0, #1
 8007a0a:	d14c      	bne.n	8007aa6 <_printf_i+0x1fe>
 8007a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a10:	b004      	add	sp, #16
 8007a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a16:	4835      	ldr	r0, [pc, #212]	; (8007aec <_printf_i+0x244>)
 8007a18:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007a1c:	6829      	ldr	r1, [r5, #0]
 8007a1e:	6823      	ldr	r3, [r4, #0]
 8007a20:	f851 6b04 	ldr.w	r6, [r1], #4
 8007a24:	6029      	str	r1, [r5, #0]
 8007a26:	061d      	lsls	r5, r3, #24
 8007a28:	d514      	bpl.n	8007a54 <_printf_i+0x1ac>
 8007a2a:	07df      	lsls	r7, r3, #31
 8007a2c:	bf44      	itt	mi
 8007a2e:	f043 0320 	orrmi.w	r3, r3, #32
 8007a32:	6023      	strmi	r3, [r4, #0]
 8007a34:	b91e      	cbnz	r6, 8007a3e <_printf_i+0x196>
 8007a36:	6823      	ldr	r3, [r4, #0]
 8007a38:	f023 0320 	bic.w	r3, r3, #32
 8007a3c:	6023      	str	r3, [r4, #0]
 8007a3e:	2310      	movs	r3, #16
 8007a40:	e7b0      	b.n	80079a4 <_printf_i+0xfc>
 8007a42:	6823      	ldr	r3, [r4, #0]
 8007a44:	f043 0320 	orr.w	r3, r3, #32
 8007a48:	6023      	str	r3, [r4, #0]
 8007a4a:	2378      	movs	r3, #120	; 0x78
 8007a4c:	4828      	ldr	r0, [pc, #160]	; (8007af0 <_printf_i+0x248>)
 8007a4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007a52:	e7e3      	b.n	8007a1c <_printf_i+0x174>
 8007a54:	0659      	lsls	r1, r3, #25
 8007a56:	bf48      	it	mi
 8007a58:	b2b6      	uxthmi	r6, r6
 8007a5a:	e7e6      	b.n	8007a2a <_printf_i+0x182>
 8007a5c:	4615      	mov	r5, r2
 8007a5e:	e7bb      	b.n	80079d8 <_printf_i+0x130>
 8007a60:	682b      	ldr	r3, [r5, #0]
 8007a62:	6826      	ldr	r6, [r4, #0]
 8007a64:	6961      	ldr	r1, [r4, #20]
 8007a66:	1d18      	adds	r0, r3, #4
 8007a68:	6028      	str	r0, [r5, #0]
 8007a6a:	0635      	lsls	r5, r6, #24
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	d501      	bpl.n	8007a74 <_printf_i+0x1cc>
 8007a70:	6019      	str	r1, [r3, #0]
 8007a72:	e002      	b.n	8007a7a <_printf_i+0x1d2>
 8007a74:	0670      	lsls	r0, r6, #25
 8007a76:	d5fb      	bpl.n	8007a70 <_printf_i+0x1c8>
 8007a78:	8019      	strh	r1, [r3, #0]
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	6123      	str	r3, [r4, #16]
 8007a7e:	4615      	mov	r5, r2
 8007a80:	e7ba      	b.n	80079f8 <_printf_i+0x150>
 8007a82:	682b      	ldr	r3, [r5, #0]
 8007a84:	1d1a      	adds	r2, r3, #4
 8007a86:	602a      	str	r2, [r5, #0]
 8007a88:	681d      	ldr	r5, [r3, #0]
 8007a8a:	6862      	ldr	r2, [r4, #4]
 8007a8c:	2100      	movs	r1, #0
 8007a8e:	4628      	mov	r0, r5
 8007a90:	f7f8 fbee 	bl	8000270 <memchr>
 8007a94:	b108      	cbz	r0, 8007a9a <_printf_i+0x1f2>
 8007a96:	1b40      	subs	r0, r0, r5
 8007a98:	6060      	str	r0, [r4, #4]
 8007a9a:	6863      	ldr	r3, [r4, #4]
 8007a9c:	6123      	str	r3, [r4, #16]
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007aa4:	e7a8      	b.n	80079f8 <_printf_i+0x150>
 8007aa6:	6923      	ldr	r3, [r4, #16]
 8007aa8:	462a      	mov	r2, r5
 8007aaa:	4649      	mov	r1, r9
 8007aac:	4640      	mov	r0, r8
 8007aae:	47d0      	blx	sl
 8007ab0:	3001      	adds	r0, #1
 8007ab2:	d0ab      	beq.n	8007a0c <_printf_i+0x164>
 8007ab4:	6823      	ldr	r3, [r4, #0]
 8007ab6:	079b      	lsls	r3, r3, #30
 8007ab8:	d413      	bmi.n	8007ae2 <_printf_i+0x23a>
 8007aba:	68e0      	ldr	r0, [r4, #12]
 8007abc:	9b03      	ldr	r3, [sp, #12]
 8007abe:	4298      	cmp	r0, r3
 8007ac0:	bfb8      	it	lt
 8007ac2:	4618      	movlt	r0, r3
 8007ac4:	e7a4      	b.n	8007a10 <_printf_i+0x168>
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	4632      	mov	r2, r6
 8007aca:	4649      	mov	r1, r9
 8007acc:	4640      	mov	r0, r8
 8007ace:	47d0      	blx	sl
 8007ad0:	3001      	adds	r0, #1
 8007ad2:	d09b      	beq.n	8007a0c <_printf_i+0x164>
 8007ad4:	3501      	adds	r5, #1
 8007ad6:	68e3      	ldr	r3, [r4, #12]
 8007ad8:	9903      	ldr	r1, [sp, #12]
 8007ada:	1a5b      	subs	r3, r3, r1
 8007adc:	42ab      	cmp	r3, r5
 8007ade:	dcf2      	bgt.n	8007ac6 <_printf_i+0x21e>
 8007ae0:	e7eb      	b.n	8007aba <_printf_i+0x212>
 8007ae2:	2500      	movs	r5, #0
 8007ae4:	f104 0619 	add.w	r6, r4, #25
 8007ae8:	e7f5      	b.n	8007ad6 <_printf_i+0x22e>
 8007aea:	bf00      	nop
 8007aec:	08007f41 	.word	0x08007f41
 8007af0:	08007f52 	.word	0x08007f52

08007af4 <memmove>:
 8007af4:	4288      	cmp	r0, r1
 8007af6:	b510      	push	{r4, lr}
 8007af8:	eb01 0402 	add.w	r4, r1, r2
 8007afc:	d902      	bls.n	8007b04 <memmove+0x10>
 8007afe:	4284      	cmp	r4, r0
 8007b00:	4623      	mov	r3, r4
 8007b02:	d807      	bhi.n	8007b14 <memmove+0x20>
 8007b04:	1e43      	subs	r3, r0, #1
 8007b06:	42a1      	cmp	r1, r4
 8007b08:	d008      	beq.n	8007b1c <memmove+0x28>
 8007b0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007b12:	e7f8      	b.n	8007b06 <memmove+0x12>
 8007b14:	4402      	add	r2, r0
 8007b16:	4601      	mov	r1, r0
 8007b18:	428a      	cmp	r2, r1
 8007b1a:	d100      	bne.n	8007b1e <memmove+0x2a>
 8007b1c:	bd10      	pop	{r4, pc}
 8007b1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007b22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007b26:	e7f7      	b.n	8007b18 <memmove+0x24>

08007b28 <_free_r>:
 8007b28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b2a:	2900      	cmp	r1, #0
 8007b2c:	d044      	beq.n	8007bb8 <_free_r+0x90>
 8007b2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b32:	9001      	str	r0, [sp, #4]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	f1a1 0404 	sub.w	r4, r1, #4
 8007b3a:	bfb8      	it	lt
 8007b3c:	18e4      	addlt	r4, r4, r3
 8007b3e:	f000 f913 	bl	8007d68 <__malloc_lock>
 8007b42:	4a1e      	ldr	r2, [pc, #120]	; (8007bbc <_free_r+0x94>)
 8007b44:	9801      	ldr	r0, [sp, #4]
 8007b46:	6813      	ldr	r3, [r2, #0]
 8007b48:	b933      	cbnz	r3, 8007b58 <_free_r+0x30>
 8007b4a:	6063      	str	r3, [r4, #4]
 8007b4c:	6014      	str	r4, [r2, #0]
 8007b4e:	b003      	add	sp, #12
 8007b50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b54:	f000 b90e 	b.w	8007d74 <__malloc_unlock>
 8007b58:	42a3      	cmp	r3, r4
 8007b5a:	d908      	bls.n	8007b6e <_free_r+0x46>
 8007b5c:	6825      	ldr	r5, [r4, #0]
 8007b5e:	1961      	adds	r1, r4, r5
 8007b60:	428b      	cmp	r3, r1
 8007b62:	bf01      	itttt	eq
 8007b64:	6819      	ldreq	r1, [r3, #0]
 8007b66:	685b      	ldreq	r3, [r3, #4]
 8007b68:	1949      	addeq	r1, r1, r5
 8007b6a:	6021      	streq	r1, [r4, #0]
 8007b6c:	e7ed      	b.n	8007b4a <_free_r+0x22>
 8007b6e:	461a      	mov	r2, r3
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	b10b      	cbz	r3, 8007b78 <_free_r+0x50>
 8007b74:	42a3      	cmp	r3, r4
 8007b76:	d9fa      	bls.n	8007b6e <_free_r+0x46>
 8007b78:	6811      	ldr	r1, [r2, #0]
 8007b7a:	1855      	adds	r5, r2, r1
 8007b7c:	42a5      	cmp	r5, r4
 8007b7e:	d10b      	bne.n	8007b98 <_free_r+0x70>
 8007b80:	6824      	ldr	r4, [r4, #0]
 8007b82:	4421      	add	r1, r4
 8007b84:	1854      	adds	r4, r2, r1
 8007b86:	42a3      	cmp	r3, r4
 8007b88:	6011      	str	r1, [r2, #0]
 8007b8a:	d1e0      	bne.n	8007b4e <_free_r+0x26>
 8007b8c:	681c      	ldr	r4, [r3, #0]
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	6053      	str	r3, [r2, #4]
 8007b92:	4421      	add	r1, r4
 8007b94:	6011      	str	r1, [r2, #0]
 8007b96:	e7da      	b.n	8007b4e <_free_r+0x26>
 8007b98:	d902      	bls.n	8007ba0 <_free_r+0x78>
 8007b9a:	230c      	movs	r3, #12
 8007b9c:	6003      	str	r3, [r0, #0]
 8007b9e:	e7d6      	b.n	8007b4e <_free_r+0x26>
 8007ba0:	6825      	ldr	r5, [r4, #0]
 8007ba2:	1961      	adds	r1, r4, r5
 8007ba4:	428b      	cmp	r3, r1
 8007ba6:	bf04      	itt	eq
 8007ba8:	6819      	ldreq	r1, [r3, #0]
 8007baa:	685b      	ldreq	r3, [r3, #4]
 8007bac:	6063      	str	r3, [r4, #4]
 8007bae:	bf04      	itt	eq
 8007bb0:	1949      	addeq	r1, r1, r5
 8007bb2:	6021      	streq	r1, [r4, #0]
 8007bb4:	6054      	str	r4, [r2, #4]
 8007bb6:	e7ca      	b.n	8007b4e <_free_r+0x26>
 8007bb8:	b003      	add	sp, #12
 8007bba:	bd30      	pop	{r4, r5, pc}
 8007bbc:	20014514 	.word	0x20014514

08007bc0 <sbrk_aligned>:
 8007bc0:	b570      	push	{r4, r5, r6, lr}
 8007bc2:	4e0e      	ldr	r6, [pc, #56]	; (8007bfc <sbrk_aligned+0x3c>)
 8007bc4:	460c      	mov	r4, r1
 8007bc6:	6831      	ldr	r1, [r6, #0]
 8007bc8:	4605      	mov	r5, r0
 8007bca:	b911      	cbnz	r1, 8007bd2 <sbrk_aligned+0x12>
 8007bcc:	f000 f8bc 	bl	8007d48 <_sbrk_r>
 8007bd0:	6030      	str	r0, [r6, #0]
 8007bd2:	4621      	mov	r1, r4
 8007bd4:	4628      	mov	r0, r5
 8007bd6:	f000 f8b7 	bl	8007d48 <_sbrk_r>
 8007bda:	1c43      	adds	r3, r0, #1
 8007bdc:	d00a      	beq.n	8007bf4 <sbrk_aligned+0x34>
 8007bde:	1cc4      	adds	r4, r0, #3
 8007be0:	f024 0403 	bic.w	r4, r4, #3
 8007be4:	42a0      	cmp	r0, r4
 8007be6:	d007      	beq.n	8007bf8 <sbrk_aligned+0x38>
 8007be8:	1a21      	subs	r1, r4, r0
 8007bea:	4628      	mov	r0, r5
 8007bec:	f000 f8ac 	bl	8007d48 <_sbrk_r>
 8007bf0:	3001      	adds	r0, #1
 8007bf2:	d101      	bne.n	8007bf8 <sbrk_aligned+0x38>
 8007bf4:	f04f 34ff 	mov.w	r4, #4294967295
 8007bf8:	4620      	mov	r0, r4
 8007bfa:	bd70      	pop	{r4, r5, r6, pc}
 8007bfc:	20014518 	.word	0x20014518

08007c00 <_malloc_r>:
 8007c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c04:	1ccd      	adds	r5, r1, #3
 8007c06:	f025 0503 	bic.w	r5, r5, #3
 8007c0a:	3508      	adds	r5, #8
 8007c0c:	2d0c      	cmp	r5, #12
 8007c0e:	bf38      	it	cc
 8007c10:	250c      	movcc	r5, #12
 8007c12:	2d00      	cmp	r5, #0
 8007c14:	4607      	mov	r7, r0
 8007c16:	db01      	blt.n	8007c1c <_malloc_r+0x1c>
 8007c18:	42a9      	cmp	r1, r5
 8007c1a:	d905      	bls.n	8007c28 <_malloc_r+0x28>
 8007c1c:	230c      	movs	r3, #12
 8007c1e:	603b      	str	r3, [r7, #0]
 8007c20:	2600      	movs	r6, #0
 8007c22:	4630      	mov	r0, r6
 8007c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c28:	4e2e      	ldr	r6, [pc, #184]	; (8007ce4 <_malloc_r+0xe4>)
 8007c2a:	f000 f89d 	bl	8007d68 <__malloc_lock>
 8007c2e:	6833      	ldr	r3, [r6, #0]
 8007c30:	461c      	mov	r4, r3
 8007c32:	bb34      	cbnz	r4, 8007c82 <_malloc_r+0x82>
 8007c34:	4629      	mov	r1, r5
 8007c36:	4638      	mov	r0, r7
 8007c38:	f7ff ffc2 	bl	8007bc0 <sbrk_aligned>
 8007c3c:	1c43      	adds	r3, r0, #1
 8007c3e:	4604      	mov	r4, r0
 8007c40:	d14d      	bne.n	8007cde <_malloc_r+0xde>
 8007c42:	6834      	ldr	r4, [r6, #0]
 8007c44:	4626      	mov	r6, r4
 8007c46:	2e00      	cmp	r6, #0
 8007c48:	d140      	bne.n	8007ccc <_malloc_r+0xcc>
 8007c4a:	6823      	ldr	r3, [r4, #0]
 8007c4c:	4631      	mov	r1, r6
 8007c4e:	4638      	mov	r0, r7
 8007c50:	eb04 0803 	add.w	r8, r4, r3
 8007c54:	f000 f878 	bl	8007d48 <_sbrk_r>
 8007c58:	4580      	cmp	r8, r0
 8007c5a:	d13a      	bne.n	8007cd2 <_malloc_r+0xd2>
 8007c5c:	6821      	ldr	r1, [r4, #0]
 8007c5e:	3503      	adds	r5, #3
 8007c60:	1a6d      	subs	r5, r5, r1
 8007c62:	f025 0503 	bic.w	r5, r5, #3
 8007c66:	3508      	adds	r5, #8
 8007c68:	2d0c      	cmp	r5, #12
 8007c6a:	bf38      	it	cc
 8007c6c:	250c      	movcc	r5, #12
 8007c6e:	4629      	mov	r1, r5
 8007c70:	4638      	mov	r0, r7
 8007c72:	f7ff ffa5 	bl	8007bc0 <sbrk_aligned>
 8007c76:	3001      	adds	r0, #1
 8007c78:	d02b      	beq.n	8007cd2 <_malloc_r+0xd2>
 8007c7a:	6823      	ldr	r3, [r4, #0]
 8007c7c:	442b      	add	r3, r5
 8007c7e:	6023      	str	r3, [r4, #0]
 8007c80:	e00e      	b.n	8007ca0 <_malloc_r+0xa0>
 8007c82:	6822      	ldr	r2, [r4, #0]
 8007c84:	1b52      	subs	r2, r2, r5
 8007c86:	d41e      	bmi.n	8007cc6 <_malloc_r+0xc6>
 8007c88:	2a0b      	cmp	r2, #11
 8007c8a:	d916      	bls.n	8007cba <_malloc_r+0xba>
 8007c8c:	1961      	adds	r1, r4, r5
 8007c8e:	42a3      	cmp	r3, r4
 8007c90:	6025      	str	r5, [r4, #0]
 8007c92:	bf18      	it	ne
 8007c94:	6059      	strne	r1, [r3, #4]
 8007c96:	6863      	ldr	r3, [r4, #4]
 8007c98:	bf08      	it	eq
 8007c9a:	6031      	streq	r1, [r6, #0]
 8007c9c:	5162      	str	r2, [r4, r5]
 8007c9e:	604b      	str	r3, [r1, #4]
 8007ca0:	4638      	mov	r0, r7
 8007ca2:	f104 060b 	add.w	r6, r4, #11
 8007ca6:	f000 f865 	bl	8007d74 <__malloc_unlock>
 8007caa:	f026 0607 	bic.w	r6, r6, #7
 8007cae:	1d23      	adds	r3, r4, #4
 8007cb0:	1af2      	subs	r2, r6, r3
 8007cb2:	d0b6      	beq.n	8007c22 <_malloc_r+0x22>
 8007cb4:	1b9b      	subs	r3, r3, r6
 8007cb6:	50a3      	str	r3, [r4, r2]
 8007cb8:	e7b3      	b.n	8007c22 <_malloc_r+0x22>
 8007cba:	6862      	ldr	r2, [r4, #4]
 8007cbc:	42a3      	cmp	r3, r4
 8007cbe:	bf0c      	ite	eq
 8007cc0:	6032      	streq	r2, [r6, #0]
 8007cc2:	605a      	strne	r2, [r3, #4]
 8007cc4:	e7ec      	b.n	8007ca0 <_malloc_r+0xa0>
 8007cc6:	4623      	mov	r3, r4
 8007cc8:	6864      	ldr	r4, [r4, #4]
 8007cca:	e7b2      	b.n	8007c32 <_malloc_r+0x32>
 8007ccc:	4634      	mov	r4, r6
 8007cce:	6876      	ldr	r6, [r6, #4]
 8007cd0:	e7b9      	b.n	8007c46 <_malloc_r+0x46>
 8007cd2:	230c      	movs	r3, #12
 8007cd4:	603b      	str	r3, [r7, #0]
 8007cd6:	4638      	mov	r0, r7
 8007cd8:	f000 f84c 	bl	8007d74 <__malloc_unlock>
 8007cdc:	e7a1      	b.n	8007c22 <_malloc_r+0x22>
 8007cde:	6025      	str	r5, [r4, #0]
 8007ce0:	e7de      	b.n	8007ca0 <_malloc_r+0xa0>
 8007ce2:	bf00      	nop
 8007ce4:	20014514 	.word	0x20014514

08007ce8 <_realloc_r>:
 8007ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cec:	4680      	mov	r8, r0
 8007cee:	4614      	mov	r4, r2
 8007cf0:	460e      	mov	r6, r1
 8007cf2:	b921      	cbnz	r1, 8007cfe <_realloc_r+0x16>
 8007cf4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007cf8:	4611      	mov	r1, r2
 8007cfa:	f7ff bf81 	b.w	8007c00 <_malloc_r>
 8007cfe:	b92a      	cbnz	r2, 8007d0c <_realloc_r+0x24>
 8007d00:	f7ff ff12 	bl	8007b28 <_free_r>
 8007d04:	4625      	mov	r5, r4
 8007d06:	4628      	mov	r0, r5
 8007d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d0c:	f000 f838 	bl	8007d80 <_malloc_usable_size_r>
 8007d10:	4284      	cmp	r4, r0
 8007d12:	4607      	mov	r7, r0
 8007d14:	d802      	bhi.n	8007d1c <_realloc_r+0x34>
 8007d16:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007d1a:	d812      	bhi.n	8007d42 <_realloc_r+0x5a>
 8007d1c:	4621      	mov	r1, r4
 8007d1e:	4640      	mov	r0, r8
 8007d20:	f7ff ff6e 	bl	8007c00 <_malloc_r>
 8007d24:	4605      	mov	r5, r0
 8007d26:	2800      	cmp	r0, #0
 8007d28:	d0ed      	beq.n	8007d06 <_realloc_r+0x1e>
 8007d2a:	42bc      	cmp	r4, r7
 8007d2c:	4622      	mov	r2, r4
 8007d2e:	4631      	mov	r1, r6
 8007d30:	bf28      	it	cs
 8007d32:	463a      	movcs	r2, r7
 8007d34:	f7ff fba4 	bl	8007480 <memcpy>
 8007d38:	4631      	mov	r1, r6
 8007d3a:	4640      	mov	r0, r8
 8007d3c:	f7ff fef4 	bl	8007b28 <_free_r>
 8007d40:	e7e1      	b.n	8007d06 <_realloc_r+0x1e>
 8007d42:	4635      	mov	r5, r6
 8007d44:	e7df      	b.n	8007d06 <_realloc_r+0x1e>
	...

08007d48 <_sbrk_r>:
 8007d48:	b538      	push	{r3, r4, r5, lr}
 8007d4a:	4d06      	ldr	r5, [pc, #24]	; (8007d64 <_sbrk_r+0x1c>)
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	4604      	mov	r4, r0
 8007d50:	4608      	mov	r0, r1
 8007d52:	602b      	str	r3, [r5, #0]
 8007d54:	f7f8 ff88 	bl	8000c68 <_sbrk>
 8007d58:	1c43      	adds	r3, r0, #1
 8007d5a:	d102      	bne.n	8007d62 <_sbrk_r+0x1a>
 8007d5c:	682b      	ldr	r3, [r5, #0]
 8007d5e:	b103      	cbz	r3, 8007d62 <_sbrk_r+0x1a>
 8007d60:	6023      	str	r3, [r4, #0]
 8007d62:	bd38      	pop	{r3, r4, r5, pc}
 8007d64:	2001451c 	.word	0x2001451c

08007d68 <__malloc_lock>:
 8007d68:	4801      	ldr	r0, [pc, #4]	; (8007d70 <__malloc_lock+0x8>)
 8007d6a:	f000 b811 	b.w	8007d90 <__retarget_lock_acquire_recursive>
 8007d6e:	bf00      	nop
 8007d70:	20014520 	.word	0x20014520

08007d74 <__malloc_unlock>:
 8007d74:	4801      	ldr	r0, [pc, #4]	; (8007d7c <__malloc_unlock+0x8>)
 8007d76:	f000 b80c 	b.w	8007d92 <__retarget_lock_release_recursive>
 8007d7a:	bf00      	nop
 8007d7c:	20014520 	.word	0x20014520

08007d80 <_malloc_usable_size_r>:
 8007d80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d84:	1f18      	subs	r0, r3, #4
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	bfbc      	itt	lt
 8007d8a:	580b      	ldrlt	r3, [r1, r0]
 8007d8c:	18c0      	addlt	r0, r0, r3
 8007d8e:	4770      	bx	lr

08007d90 <__retarget_lock_acquire_recursive>:
 8007d90:	4770      	bx	lr

08007d92 <__retarget_lock_release_recursive>:
 8007d92:	4770      	bx	lr

08007d94 <_init>:
 8007d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d96:	bf00      	nop
 8007d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d9a:	bc08      	pop	{r3}
 8007d9c:	469e      	mov	lr, r3
 8007d9e:	4770      	bx	lr

08007da0 <_fini>:
 8007da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007da2:	bf00      	nop
 8007da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007da6:	bc08      	pop	{r3}
 8007da8:	469e      	mov	lr, r3
 8007daa:	4770      	bx	lr
