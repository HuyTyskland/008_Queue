
008Queue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008130  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000400  080082c0  080082c0  000182c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086c0  080086c0  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  080086c0  080086c0  000186c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086c8  080086c8  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086c8  080086c8  000186c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086cc  080086cc  000186cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  080086d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002008c  2**0
                  CONTENTS
 10 .bss          00012f14  2000008c  2000008c  0002008c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20012fa0  20012fa0  0002008c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016fe4  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000036e7  00000000  00000000  000370a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013b8  00000000  00000000  0003a788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001250  00000000  00000000  0003bb40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024a16  00000000  00000000  0003cd90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018a64  00000000  00000000  000617a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da95a  00000000  00000000  0007a20a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00154b64  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005554  00000000  00000000  00154bb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080082a8 	.word	0x080082a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000090 	.word	0x20000090
 80001cc:	080082a8 	.word	0x080082a8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <led_effect_stop>:
 */

#include "main.h"

void led_effect_stop(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af02      	add	r7, sp, #8
	for(int i = 0; i < 4; i++)
 80005aa:	2300      	movs	r3, #0
 80005ac:	607b      	str	r3, [r7, #4]
 80005ae:	e00e      	b.n	80005ce <led_effect_stop+0x2a>
	{
		xTimerStop(handle_led_timer[i], portMAX_DELAY);
 80005b0:	4a0b      	ldr	r2, [pc, #44]	; (80005e0 <led_effect_stop+0x3c>)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80005b8:	f04f 33ff 	mov.w	r3, #4294967295
 80005bc:	9300      	str	r3, [sp, #0]
 80005be:	2300      	movs	r3, #0
 80005c0:	2200      	movs	r2, #0
 80005c2:	2103      	movs	r1, #3
 80005c4:	f006 fa04 	bl	80069d0 <xTimerGenericCommand>
	for(int i = 0; i < 4; i++)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	3301      	adds	r3, #1
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	2b03      	cmp	r3, #3
 80005d2:	dded      	ble.n	80005b0 <led_effect_stop+0xc>
	}
}
 80005d4:	bf00      	nop
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	20000134 	.word	0x20000134

080005e4 <led_effect>:

void led_effect(int n)
{
 80005e4:	b590      	push	{r4, r7, lr}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af02      	add	r7, sp, #8
 80005ea:	6078      	str	r0, [r7, #4]
	led_effect_stop();
 80005ec:	f7ff ffda 	bl	80005a4 <led_effect_stop>
	xTimerStart(handle_led_timer[n-1], portMAX_DELAY);
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	3b01      	subs	r3, #1
 80005f4:	4a08      	ldr	r2, [pc, #32]	; (8000618 <led_effect+0x34>)
 80005f6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80005fa:	f005 faeb 	bl	8005bd4 <xTaskGetTickCount>
 80005fe:	4602      	mov	r2, r0
 8000600:	f04f 33ff 	mov.w	r3, #4294967295
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	2300      	movs	r3, #0
 8000608:	2101      	movs	r1, #1
 800060a:	4620      	mov	r0, r4
 800060c:	f006 f9e0 	bl	80069d0 <xTimerGenericCommand>
}
 8000610:	bf00      	nop
 8000612:	370c      	adds	r7, #12
 8000614:	46bd      	mov	sp, r7
 8000616:	bd90      	pop	{r4, r7, pc}
 8000618:	20000134 	.word	0x20000134

0800061c <turn_off_all_leds>:

void turn_off_all_leds(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000620:	2200      	movs	r2, #0
 8000622:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000626:	480b      	ldr	r0, [pc, #44]	; (8000654 <turn_off_all_leds+0x38>)
 8000628:	f001 fe40 	bl	80022ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 800062c:	2200      	movs	r2, #0
 800062e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000632:	4808      	ldr	r0, [pc, #32]	; (8000654 <turn_off_all_leds+0x38>)
 8000634:	f001 fe3a 	bl	80022ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 8000638:	2200      	movs	r2, #0
 800063a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800063e:	4805      	ldr	r0, [pc, #20]	; (8000654 <turn_off_all_leds+0x38>)
 8000640:	f001 fe34 	bl	80022ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 8000644:	2200      	movs	r2, #0
 8000646:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800064a:	4802      	ldr	r0, [pc, #8]	; (8000654 <turn_off_all_leds+0x38>)
 800064c:	f001 fe2e 	bl	80022ac <HAL_GPIO_WritePin>
}
 8000650:	bf00      	nop
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40020c00 	.word	0x40020c00

08000658 <turn_on_all_leds>:

void turn_on_all_leds(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 800065c:	2201      	movs	r2, #1
 800065e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000662:	480b      	ldr	r0, [pc, #44]	; (8000690 <turn_on_all_leds+0x38>)
 8000664:	f001 fe22 	bl	80022ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 8000668:	2201      	movs	r2, #1
 800066a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800066e:	4808      	ldr	r0, [pc, #32]	; (8000690 <turn_on_all_leds+0x38>)
 8000670:	f001 fe1c 	bl	80022ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD5_Pin, GPIO_PIN_SET);
 8000674:	2201      	movs	r2, #1
 8000676:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800067a:	4805      	ldr	r0, [pc, #20]	; (8000690 <turn_on_all_leds+0x38>)
 800067c:	f001 fe16 	bl	80022ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD6_Pin, GPIO_PIN_SET);
 8000680:	2201      	movs	r2, #1
 8000682:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000686:	4802      	ldr	r0, [pc, #8]	; (8000690 <turn_on_all_leds+0x38>)
 8000688:	f001 fe10 	bl	80022ac <HAL_GPIO_WritePin>
}
 800068c:	bf00      	nop
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40020c00 	.word	0x40020c00

08000694 <LED_effect1>:

void LED_effect1(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
	static int flag = 1;
	(flag ^= 1) ? turn_off_all_leds() : turn_on_all_leds();
 8000698:	4b08      	ldr	r3, [pc, #32]	; (80006bc <LED_effect1+0x28>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f083 0301 	eor.w	r3, r3, #1
 80006a0:	4a06      	ldr	r2, [pc, #24]	; (80006bc <LED_effect1+0x28>)
 80006a2:	6013      	str	r3, [r2, #0]
 80006a4:	4b05      	ldr	r3, [pc, #20]	; (80006bc <LED_effect1+0x28>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d002      	beq.n	80006b2 <LED_effect1+0x1e>
 80006ac:	f7ff ffb6 	bl	800061c <turn_off_all_leds>
}
 80006b0:	e001      	b.n	80006b6 <LED_effect1+0x22>
	(flag ^= 1) ? turn_off_all_leds() : turn_on_all_leds();
 80006b2:	f7ff ffd1 	bl	8000658 <turn_on_all_leds>
}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	20000000 	.word	0x20000000

080006c0 <turn_on_even_leds>:

void turn_on_even_leds(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80006c4:	2200      	movs	r2, #0
 80006c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006ca:	480b      	ldr	r0, [pc, #44]	; (80006f8 <turn_on_even_leds+0x38>)
 80006cc:	f001 fdee 	bl	80022ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 80006d0:	2201      	movs	r2, #1
 80006d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006d6:	4808      	ldr	r0, [pc, #32]	; (80006f8 <turn_on_even_leds+0x38>)
 80006d8:	f001 fde8 	bl	80022ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 80006dc:	2200      	movs	r2, #0
 80006de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006e2:	4805      	ldr	r0, [pc, #20]	; (80006f8 <turn_on_even_leds+0x38>)
 80006e4:	f001 fde2 	bl	80022ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD6_Pin, GPIO_PIN_SET);
 80006e8:	2201      	movs	r2, #1
 80006ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006ee:	4802      	ldr	r0, [pc, #8]	; (80006f8 <turn_on_even_leds+0x38>)
 80006f0:	f001 fddc 	bl	80022ac <HAL_GPIO_WritePin>
}
 80006f4:	bf00      	nop
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40020c00 	.word	0x40020c00

080006fc <turn_on_odd_leds>:

void turn_on_odd_leds(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000700:	2201      	movs	r2, #1
 8000702:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000706:	480b      	ldr	r0, [pc, #44]	; (8000734 <turn_on_odd_leds+0x38>)
 8000708:	f001 fdd0 	bl	80022ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 800070c:	2200      	movs	r2, #0
 800070e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000712:	4808      	ldr	r0, [pc, #32]	; (8000734 <turn_on_odd_leds+0x38>)
 8000714:	f001 fdca 	bl	80022ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD5_Pin, GPIO_PIN_SET);
 8000718:	2201      	movs	r2, #1
 800071a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800071e:	4805      	ldr	r0, [pc, #20]	; (8000734 <turn_on_odd_leds+0x38>)
 8000720:	f001 fdc4 	bl	80022ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 8000724:	2200      	movs	r2, #0
 8000726:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800072a:	4802      	ldr	r0, [pc, #8]	; (8000734 <turn_on_odd_leds+0x38>)
 800072c:	f001 fdbe 	bl	80022ac <HAL_GPIO_WritePin>
}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40020c00 	.word	0x40020c00

08000738 <LED_effect2>:

void LED_effect2(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	static int flag = 1;
	(flag ^= 1) ? turn_on_even_leds() : turn_on_odd_leds();
 800073c:	4b08      	ldr	r3, [pc, #32]	; (8000760 <LED_effect2+0x28>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f083 0301 	eor.w	r3, r3, #1
 8000744:	4a06      	ldr	r2, [pc, #24]	; (8000760 <LED_effect2+0x28>)
 8000746:	6013      	str	r3, [r2, #0]
 8000748:	4b05      	ldr	r3, [pc, #20]	; (8000760 <LED_effect2+0x28>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d002      	beq.n	8000756 <LED_effect2+0x1e>
 8000750:	f7ff ffb6 	bl	80006c0 <turn_on_even_leds>
}
 8000754:	e001      	b.n	800075a <LED_effect2+0x22>
	(flag ^= 1) ? turn_on_even_leds() : turn_on_odd_leds();
 8000756:	f7ff ffd1 	bl	80006fc <turn_on_odd_leds>
}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20000004 	.word	0x20000004

08000764 <LED_control>:

void LED_control(int value)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < 4; i++)
 800076c:	2300      	movs	r3, #0
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	e014      	b.n	800079c <LED_control+0x38>
		HAL_GPIO_WritePin(LD3_GPIO_Port, (LED1 << i), ((value >> i)& 0x1));
 8000772:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	fa02 f303 	lsl.w	r3, r2, r3
 800077c:	b299      	uxth	r1, r3
 800077e:	687a      	ldr	r2, [r7, #4]
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	fa42 f303 	asr.w	r3, r2, r3
 8000786:	b2db      	uxtb	r3, r3
 8000788:	f003 0301 	and.w	r3, r3, #1
 800078c:	b2db      	uxtb	r3, r3
 800078e:	461a      	mov	r2, r3
 8000790:	4806      	ldr	r0, [pc, #24]	; (80007ac <LED_control+0x48>)
 8000792:	f001 fd8b 	bl	80022ac <HAL_GPIO_WritePin>
	for(int i = 0; i < 4; i++)
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	3301      	adds	r3, #1
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	2b03      	cmp	r3, #3
 80007a0:	dde7      	ble.n	8000772 <LED_control+0xe>
}
 80007a2:	bf00      	nop
 80007a4:	bf00      	nop
 80007a6:	3710      	adds	r7, #16
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	40020c00 	.word	0x40020c00

080007b0 <LED_effect3>:

void LED_effect3(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
	static int i = 0;
	LED_control( 0x1 << (i++ % 4));
 80007b4:	4b09      	ldr	r3, [pc, #36]	; (80007dc <LED_effect3+0x2c>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	1c5a      	adds	r2, r3, #1
 80007ba:	4908      	ldr	r1, [pc, #32]	; (80007dc <LED_effect3+0x2c>)
 80007bc:	600a      	str	r2, [r1, #0]
 80007be:	425a      	negs	r2, r3
 80007c0:	f003 0303 	and.w	r3, r3, #3
 80007c4:	f002 0203 	and.w	r2, r2, #3
 80007c8:	bf58      	it	pl
 80007ca:	4253      	negpl	r3, r2
 80007cc:	2201      	movs	r2, #1
 80007ce:	fa02 f303 	lsl.w	r3, r2, r3
 80007d2:	4618      	mov	r0, r3
 80007d4:	f7ff ffc6 	bl	8000764 <LED_control>
}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	200000a8 	.word	0x200000a8

080007e0 <LED_effect4>:

void LED_effect4(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
	static int i = 0;
	LED_control( 0x08 >> (i++ % 4));
 80007e4:	4b09      	ldr	r3, [pc, #36]	; (800080c <LED_effect4+0x2c>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	1c5a      	adds	r2, r3, #1
 80007ea:	4908      	ldr	r1, [pc, #32]	; (800080c <LED_effect4+0x2c>)
 80007ec:	600a      	str	r2, [r1, #0]
 80007ee:	425a      	negs	r2, r3
 80007f0:	f003 0303 	and.w	r3, r3, #3
 80007f4:	f002 0203 	and.w	r2, r2, #3
 80007f8:	bf58      	it	pl
 80007fa:	4253      	negpl	r3, r2
 80007fc:	2208      	movs	r2, #8
 80007fe:	fa42 f303 	asr.w	r3, r2, r3
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff ffae 	bl	8000764 <LED_control>
}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	200000ac 	.word	0x200000ac

08000810 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08c      	sub	sp, #48	; 0x30
 8000814:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000816:	f001 f9f7 	bl	8001c08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800081a:	f000 f907 	bl	8000a2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800081e:	f000 f9c1 	bl	8000ba4 <MX_GPIO_Init>
  MX_RTC_Init();
 8000822:	f000 f96f 	bl	8000b04 <MX_RTC_Init>
  MX_USART2_UART_Init();
 8000826:	f000 f993 	bl	8000b50 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  DWT_CTRL |= (1 << 0);
 800082a:	4b69      	ldr	r3, [pc, #420]	; (80009d0 <main+0x1c0>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4a68      	ldr	r2, [pc, #416]	; (80009d0 <main+0x1c0>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6013      	str	r3, [r2, #0]

  status = xTaskCreate(menu_task, "MENU", 250, NULL, 2, &menu_task_handle);
 8000836:	4b67      	ldr	r3, [pc, #412]	; (80009d4 <main+0x1c4>)
 8000838:	9301      	str	r3, [sp, #4]
 800083a:	2302      	movs	r3, #2
 800083c:	9300      	str	r3, [sp, #0]
 800083e:	2300      	movs	r3, #0
 8000840:	22fa      	movs	r2, #250	; 0xfa
 8000842:	4965      	ldr	r1, [pc, #404]	; (80009d8 <main+0x1c8>)
 8000844:	4865      	ldr	r0, [pc, #404]	; (80009dc <main+0x1cc>)
 8000846:	f004 ff83 	bl	8005750 <xTaskCreate>
 800084a:	6238      	str	r0, [r7, #32]
	configASSERT(status == pdPASS);
 800084c:	6a3b      	ldr	r3, [r7, #32]
 800084e:	2b01      	cmp	r3, #1
 8000850:	d00a      	beq.n	8000868 <main+0x58>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000856:	f383 8811 	msr	BASEPRI, r3
 800085a:	f3bf 8f6f 	isb	sy
 800085e:	f3bf 8f4f 	dsb	sy
 8000862:	61fb      	str	r3, [r7, #28]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000864:	bf00      	nop
 8000866:	e7fe      	b.n	8000866 <main+0x56>

	status = xTaskCreate(led_task, "LED", 250, NULL, 2, &led_task_handle);
 8000868:	4b5d      	ldr	r3, [pc, #372]	; (80009e0 <main+0x1d0>)
 800086a:	9301      	str	r3, [sp, #4]
 800086c:	2302      	movs	r3, #2
 800086e:	9300      	str	r3, [sp, #0]
 8000870:	2300      	movs	r3, #0
 8000872:	22fa      	movs	r2, #250	; 0xfa
 8000874:	495b      	ldr	r1, [pc, #364]	; (80009e4 <main+0x1d4>)
 8000876:	485c      	ldr	r0, [pc, #368]	; (80009e8 <main+0x1d8>)
 8000878:	f004 ff6a 	bl	8005750 <xTaskCreate>
 800087c:	6238      	str	r0, [r7, #32]
	configASSERT(status == pdPASS);
 800087e:	6a3b      	ldr	r3, [r7, #32]
 8000880:	2b01      	cmp	r3, #1
 8000882:	d00a      	beq.n	800089a <main+0x8a>
        __asm volatile
 8000884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000888:	f383 8811 	msr	BASEPRI, r3
 800088c:	f3bf 8f6f 	isb	sy
 8000890:	f3bf 8f4f 	dsb	sy
 8000894:	61bb      	str	r3, [r7, #24]
    }
 8000896:	bf00      	nop
 8000898:	e7fe      	b.n	8000898 <main+0x88>

	status = xTaskCreate(rtc_task, "RTC", 250, NULL, 2, &rtc_task_handle);
 800089a:	4b54      	ldr	r3, [pc, #336]	; (80009ec <main+0x1dc>)
 800089c:	9301      	str	r3, [sp, #4]
 800089e:	2302      	movs	r3, #2
 80008a0:	9300      	str	r3, [sp, #0]
 80008a2:	2300      	movs	r3, #0
 80008a4:	22fa      	movs	r2, #250	; 0xfa
 80008a6:	4952      	ldr	r1, [pc, #328]	; (80009f0 <main+0x1e0>)
 80008a8:	4852      	ldr	r0, [pc, #328]	; (80009f4 <main+0x1e4>)
 80008aa:	f004 ff51 	bl	8005750 <xTaskCreate>
 80008ae:	6238      	str	r0, [r7, #32]
	configASSERT(status == pdPASS);
 80008b0:	6a3b      	ldr	r3, [r7, #32]
 80008b2:	2b01      	cmp	r3, #1
 80008b4:	d00a      	beq.n	80008cc <main+0xbc>
        __asm volatile
 80008b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008ba:	f383 8811 	msr	BASEPRI, r3
 80008be:	f3bf 8f6f 	isb	sy
 80008c2:	f3bf 8f4f 	dsb	sy
 80008c6:	617b      	str	r3, [r7, #20]
    }
 80008c8:	bf00      	nop
 80008ca:	e7fe      	b.n	80008ca <main+0xba>

	status = xTaskCreate(print_task, "PRINT", 250, NULL, 2, &print_task_handle);
 80008cc:	4b4a      	ldr	r3, [pc, #296]	; (80009f8 <main+0x1e8>)
 80008ce:	9301      	str	r3, [sp, #4]
 80008d0:	2302      	movs	r3, #2
 80008d2:	9300      	str	r3, [sp, #0]
 80008d4:	2300      	movs	r3, #0
 80008d6:	22fa      	movs	r2, #250	; 0xfa
 80008d8:	4948      	ldr	r1, [pc, #288]	; (80009fc <main+0x1ec>)
 80008da:	4849      	ldr	r0, [pc, #292]	; (8000a00 <main+0x1f0>)
 80008dc:	f004 ff38 	bl	8005750 <xTaskCreate>
 80008e0:	6238      	str	r0, [r7, #32]
	configASSERT(status == pdPASS);
 80008e2:	6a3b      	ldr	r3, [r7, #32]
 80008e4:	2b01      	cmp	r3, #1
 80008e6:	d00a      	beq.n	80008fe <main+0xee>
        __asm volatile
 80008e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008ec:	f383 8811 	msr	BASEPRI, r3
 80008f0:	f3bf 8f6f 	isb	sy
 80008f4:	f3bf 8f4f 	dsb	sy
 80008f8:	613b      	str	r3, [r7, #16]
    }
 80008fa:	bf00      	nop
 80008fc:	e7fe      	b.n	80008fc <main+0xec>

	status = xTaskCreate(command_handling_task, "COMMAND", 250, NULL, 2, &command_handling_task_handle);
 80008fe:	4b41      	ldr	r3, [pc, #260]	; (8000a04 <main+0x1f4>)
 8000900:	9301      	str	r3, [sp, #4]
 8000902:	2302      	movs	r3, #2
 8000904:	9300      	str	r3, [sp, #0]
 8000906:	2300      	movs	r3, #0
 8000908:	22fa      	movs	r2, #250	; 0xfa
 800090a:	493f      	ldr	r1, [pc, #252]	; (8000a08 <main+0x1f8>)
 800090c:	483f      	ldr	r0, [pc, #252]	; (8000a0c <main+0x1fc>)
 800090e:	f004 ff1f 	bl	8005750 <xTaskCreate>
 8000912:	6238      	str	r0, [r7, #32]
	configASSERT(status == pdPASS);
 8000914:	6a3b      	ldr	r3, [r7, #32]
 8000916:	2b01      	cmp	r3, #1
 8000918:	d00a      	beq.n	8000930 <main+0x120>
        __asm volatile
 800091a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800091e:	f383 8811 	msr	BASEPRI, r3
 8000922:	f3bf 8f6f 	isb	sy
 8000926:	f3bf 8f4f 	dsb	sy
 800092a:	60fb      	str	r3, [r7, #12]
    }
 800092c:	bf00      	nop
 800092e:	e7fe      	b.n	800092e <main+0x11e>

	input_data_queue_handle = xQueueCreate(10, sizeof(char));
 8000930:	2200      	movs	r2, #0
 8000932:	2101      	movs	r1, #1
 8000934:	200a      	movs	r0, #10
 8000936:	f004 f9bf 	bl	8004cb8 <xQueueGenericCreate>
 800093a:	4603      	mov	r3, r0
 800093c:	4a34      	ldr	r2, [pc, #208]	; (8000a10 <main+0x200>)
 800093e:	6013      	str	r3, [r2, #0]
	configASSERT(input_data_queue_handle != NULL);
 8000940:	4b33      	ldr	r3, [pc, #204]	; (8000a10 <main+0x200>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d10a      	bne.n	800095e <main+0x14e>
        __asm volatile
 8000948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800094c:	f383 8811 	msr	BASEPRI, r3
 8000950:	f3bf 8f6f 	isb	sy
 8000954:	f3bf 8f4f 	dsb	sy
 8000958:	60bb      	str	r3, [r7, #8]
    }
 800095a:	bf00      	nop
 800095c:	e7fe      	b.n	800095c <main+0x14c>
	print_queue_handle = xQueueCreate(10, sizeof(size_t));
 800095e:	2200      	movs	r2, #0
 8000960:	2104      	movs	r1, #4
 8000962:	200a      	movs	r0, #10
 8000964:	f004 f9a8 	bl	8004cb8 <xQueueGenericCreate>
 8000968:	4603      	mov	r3, r0
 800096a:	4a2a      	ldr	r2, [pc, #168]	; (8000a14 <main+0x204>)
 800096c:	6013      	str	r3, [r2, #0]
	configASSERT(print_queue_handle != NULL);
 800096e:	4b29      	ldr	r3, [pc, #164]	; (8000a14 <main+0x204>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d10a      	bne.n	800098c <main+0x17c>
        __asm volatile
 8000976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800097a:	f383 8811 	msr	BASEPRI, r3
 800097e:	f3bf 8f6f 	isb	sy
 8000982:	f3bf 8f4f 	dsb	sy
 8000986:	607b      	str	r3, [r7, #4]
    }
 8000988:	bf00      	nop
 800098a:	e7fe      	b.n	800098a <main+0x17a>

	// Create software timer for led effect
	for(int i = 0; i < 4; i++)
 800098c:	2300      	movs	r3, #0
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
 8000990:	e013      	b.n	80009ba <main+0x1aa>
	{
		handle_led_timer[i] = xTimerCreate("led_timer", pdMS_TO_TICKS(500), pdTRUE, (void*)(i+1), led_effect_callback);
 8000992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000994:	3301      	adds	r3, #1
 8000996:	461a      	mov	r2, r3
 8000998:	4b1f      	ldr	r3, [pc, #124]	; (8000a18 <main+0x208>)
 800099a:	9300      	str	r3, [sp, #0]
 800099c:	4613      	mov	r3, r2
 800099e:	2201      	movs	r2, #1
 80009a0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80009a4:	481d      	ldr	r0, [pc, #116]	; (8000a1c <main+0x20c>)
 80009a6:	f005 ffb7 	bl	8006918 <xTimerCreate>
 80009aa:	4602      	mov	r2, r0
 80009ac:	491c      	ldr	r1, [pc, #112]	; (8000a20 <main+0x210>)
 80009ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < 4; i++)
 80009b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009b6:	3301      	adds	r3, #1
 80009b8:	627b      	str	r3, [r7, #36]	; 0x24
 80009ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009bc:	2b03      	cmp	r3, #3
 80009be:	dde8      	ble.n	8000992 <main+0x182>
	}

	// UART Handle
	HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 80009c0:	2201      	movs	r2, #1
 80009c2:	4918      	ldr	r1, [pc, #96]	; (8000a24 <main+0x214>)
 80009c4:	4818      	ldr	r0, [pc, #96]	; (8000a28 <main+0x218>)
 80009c6:	f003 f8c2 	bl	8003b4e <HAL_UART_Receive_IT>

  vTaskStartScheduler();
 80009ca:	f005 f807 	bl	80059dc <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009ce:	e7fe      	b.n	80009ce <main+0x1be>
 80009d0:	e0001000 	.word	0xe0001000
 80009d4:	20000114 	.word	0x20000114
 80009d8:	080082c0 	.word	0x080082c0
 80009dc:	08001415 	.word	0x08001415
 80009e0:	20000118 	.word	0x20000118
 80009e4:	080082c8 	.word	0x080082c8
 80009e8:	080014f5 	.word	0x080014f5
 80009ec:	2000011c 	.word	0x2000011c
 80009f0:	080082cc 	.word	0x080082cc
 80009f4:	08001669 	.word	0x08001669
 80009f8:	20000120 	.word	0x20000120
 80009fc:	080082d0 	.word	0x080082d0
 8000a00:	08001a59 	.word	0x08001a59
 8000a04:	20000124 	.word	0x20000124
 8000a08:	080082d8 	.word	0x080082d8
 8000a0c:	08001a99 	.word	0x08001a99
 8000a10:	20000128 	.word	0x20000128
 8000a14:	2000012c 	.word	0x2000012c
 8000a18:	08000e61 	.word	0x08000e61
 8000a1c:	080082e0 	.word	0x080082e0
 8000a20:	20000134 	.word	0x20000134
 8000a24:	20000130 	.word	0x20000130
 8000a28:	200000d0 	.word	0x200000d0

08000a2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b094      	sub	sp, #80	; 0x50
 8000a30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a32:	f107 0320 	add.w	r3, r7, #32
 8000a36:	2230      	movs	r2, #48	; 0x30
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f006 ffcc 	bl	80079d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a40:	f107 030c 	add.w	r3, r7, #12
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a50:	2300      	movs	r3, #0
 8000a52:	60bb      	str	r3, [r7, #8]
 8000a54:	4b29      	ldr	r3, [pc, #164]	; (8000afc <SystemClock_Config+0xd0>)
 8000a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a58:	4a28      	ldr	r2, [pc, #160]	; (8000afc <SystemClock_Config+0xd0>)
 8000a5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a60:	4b26      	ldr	r3, [pc, #152]	; (8000afc <SystemClock_Config+0xd0>)
 8000a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a68:	60bb      	str	r3, [r7, #8]
 8000a6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	4b23      	ldr	r3, [pc, #140]	; (8000b00 <SystemClock_Config+0xd4>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a22      	ldr	r2, [pc, #136]	; (8000b00 <SystemClock_Config+0xd4>)
 8000a76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a7a:	6013      	str	r3, [r2, #0]
 8000a7c:	4b20      	ldr	r3, [pc, #128]	; (8000b00 <SystemClock_Config+0xd4>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a84:	607b      	str	r3, [r7, #4]
 8000a86:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000a88:	230a      	movs	r3, #10
 8000a8a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a90:	2310      	movs	r3, #16
 8000a92:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a94:	2301      	movs	r3, #1
 8000a96:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000aa0:	2308      	movs	r3, #8
 8000aa2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000aa4:	23a8      	movs	r3, #168	; 0xa8
 8000aa6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000aac:	2307      	movs	r3, #7
 8000aae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab0:	f107 0320 	add.w	r3, r7, #32
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f001 fc13 	bl	80022e0 <HAL_RCC_OscConfig>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ac0:	f000 fa52 	bl	8000f68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac4:	230f      	movs	r3, #15
 8000ac6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000acc:	2300      	movs	r3, #0
 8000ace:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ad0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ad4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ad6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ada:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000adc:	f107 030c 	add.w	r3, r7, #12
 8000ae0:	2105      	movs	r1, #5
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f001 fe74 	bl	80027d0 <HAL_RCC_ClockConfig>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000aee:	f000 fa3b 	bl	8000f68 <Error_Handler>
  }
}
 8000af2:	bf00      	nop
 8000af4:	3750      	adds	r7, #80	; 0x50
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40023800 	.word	0x40023800
 8000b00:	40007000 	.word	0x40007000

08000b04 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b08:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <MX_RTC_Init+0x44>)
 8000b0a:	4a10      	ldr	r2, [pc, #64]	; (8000b4c <MX_RTC_Init+0x48>)
 8000b0c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <MX_RTC_Init+0x44>)
 8000b10:	2240      	movs	r2, #64	; 0x40
 8000b12:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b14:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <MX_RTC_Init+0x44>)
 8000b16:	227f      	movs	r2, #127	; 0x7f
 8000b18:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b1a:	4b0b      	ldr	r3, [pc, #44]	; (8000b48 <MX_RTC_Init+0x44>)
 8000b1c:	22ff      	movs	r2, #255	; 0xff
 8000b1e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b20:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <MX_RTC_Init+0x44>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b26:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <MX_RTC_Init+0x44>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b2c:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <MX_RTC_Init+0x44>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b32:	4805      	ldr	r0, [pc, #20]	; (8000b48 <MX_RTC_Init+0x44>)
 8000b34:	f002 f980 	bl	8002e38 <HAL_RTC_Init>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000b3e:	f000 fa13 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	200000b0 	.word	0x200000b0
 8000b4c:	40002800 	.word	0x40002800

08000b50 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b54:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <MX_USART2_UART_Init+0x4c>)
 8000b56:	4a12      	ldr	r2, [pc, #72]	; (8000ba0 <MX_USART2_UART_Init+0x50>)
 8000b58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b5a:	4b10      	ldr	r3, [pc, #64]	; (8000b9c <MX_USART2_UART_Init+0x4c>)
 8000b5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b62:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <MX_USART2_UART_Init+0x4c>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b68:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <MX_USART2_UART_Init+0x4c>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b6e:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <MX_USART2_UART_Init+0x4c>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b74:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <MX_USART2_UART_Init+0x4c>)
 8000b76:	220c      	movs	r2, #12
 8000b78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b7a:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <MX_USART2_UART_Init+0x4c>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <MX_USART2_UART_Init+0x4c>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b86:	4805      	ldr	r0, [pc, #20]	; (8000b9c <MX_USART2_UART_Init+0x4c>)
 8000b88:	f002 ff02 	bl	8003990 <HAL_UART_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b92:	f000 f9e9 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	200000d0 	.word	0x200000d0
 8000ba0:	40004400 	.word	0x40004400

08000ba4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08c      	sub	sp, #48	; 0x30
 8000ba8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000baa:	f107 031c 	add.w	r3, r7, #28
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	609a      	str	r2, [r3, #8]
 8000bb6:	60da      	str	r2, [r3, #12]
 8000bb8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	61bb      	str	r3, [r7, #24]
 8000bbe:	4ba2      	ldr	r3, [pc, #648]	; (8000e48 <MX_GPIO_Init+0x2a4>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	4aa1      	ldr	r2, [pc, #644]	; (8000e48 <MX_GPIO_Init+0x2a4>)
 8000bc4:	f043 0310 	orr.w	r3, r3, #16
 8000bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bca:	4b9f      	ldr	r3, [pc, #636]	; (8000e48 <MX_GPIO_Init+0x2a4>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	f003 0310 	and.w	r3, r3, #16
 8000bd2:	61bb      	str	r3, [r7, #24]
 8000bd4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	617b      	str	r3, [r7, #20]
 8000bda:	4b9b      	ldr	r3, [pc, #620]	; (8000e48 <MX_GPIO_Init+0x2a4>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	4a9a      	ldr	r2, [pc, #616]	; (8000e48 <MX_GPIO_Init+0x2a4>)
 8000be0:	f043 0304 	orr.w	r3, r3, #4
 8000be4:	6313      	str	r3, [r2, #48]	; 0x30
 8000be6:	4b98      	ldr	r3, [pc, #608]	; (8000e48 <MX_GPIO_Init+0x2a4>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	f003 0304 	and.w	r3, r3, #4
 8000bee:	617b      	str	r3, [r7, #20]
 8000bf0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	613b      	str	r3, [r7, #16]
 8000bf6:	4b94      	ldr	r3, [pc, #592]	; (8000e48 <MX_GPIO_Init+0x2a4>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	4a93      	ldr	r2, [pc, #588]	; (8000e48 <MX_GPIO_Init+0x2a4>)
 8000bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c00:	6313      	str	r3, [r2, #48]	; 0x30
 8000c02:	4b91      	ldr	r3, [pc, #580]	; (8000e48 <MX_GPIO_Init+0x2a4>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c0a:	613b      	str	r3, [r7, #16]
 8000c0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	4b8d      	ldr	r3, [pc, #564]	; (8000e48 <MX_GPIO_Init+0x2a4>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	4a8c      	ldr	r2, [pc, #560]	; (8000e48 <MX_GPIO_Init+0x2a4>)
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1e:	4b8a      	ldr	r3, [pc, #552]	; (8000e48 <MX_GPIO_Init+0x2a4>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	60bb      	str	r3, [r7, #8]
 8000c2e:	4b86      	ldr	r3, [pc, #536]	; (8000e48 <MX_GPIO_Init+0x2a4>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a85      	ldr	r2, [pc, #532]	; (8000e48 <MX_GPIO_Init+0x2a4>)
 8000c34:	f043 0302 	orr.w	r3, r3, #2
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b83      	ldr	r3, [pc, #524]	; (8000e48 <MX_GPIO_Init+0x2a4>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f003 0302 	and.w	r3, r3, #2
 8000c42:	60bb      	str	r3, [r7, #8]
 8000c44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	607b      	str	r3, [r7, #4]
 8000c4a:	4b7f      	ldr	r3, [pc, #508]	; (8000e48 <MX_GPIO_Init+0x2a4>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	4a7e      	ldr	r2, [pc, #504]	; (8000e48 <MX_GPIO_Init+0x2a4>)
 8000c50:	f043 0308 	orr.w	r3, r3, #8
 8000c54:	6313      	str	r3, [r2, #48]	; 0x30
 8000c56:	4b7c      	ldr	r3, [pc, #496]	; (8000e48 <MX_GPIO_Init+0x2a4>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	f003 0308 	and.w	r3, r3, #8
 8000c5e:	607b      	str	r3, [r7, #4]
 8000c60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000c62:	2200      	movs	r2, #0
 8000c64:	2108      	movs	r1, #8
 8000c66:	4879      	ldr	r0, [pc, #484]	; (8000e4c <MX_GPIO_Init+0x2a8>)
 8000c68:	f001 fb20 	bl	80022ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	2101      	movs	r1, #1
 8000c70:	4877      	ldr	r0, [pc, #476]	; (8000e50 <MX_GPIO_Init+0x2ac>)
 8000c72:	f001 fb1b 	bl	80022ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000c76:	2200      	movs	r2, #0
 8000c78:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000c7c:	4875      	ldr	r0, [pc, #468]	; (8000e54 <MX_GPIO_Init+0x2b0>)
 8000c7e:	f001 fb15 	bl	80022ac <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000c82:	2308      	movs	r3, #8
 8000c84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c86:	2301      	movs	r3, #1
 8000c88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000c92:	f107 031c 	add.w	r3, r7, #28
 8000c96:	4619      	mov	r1, r3
 8000c98:	486c      	ldr	r0, [pc, #432]	; (8000e4c <MX_GPIO_Init+0x2a8>)
 8000c9a:	f001 f96b 	bl	8001f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	2300      	movs	r3, #0
 8000cac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000cae:	f107 031c 	add.w	r3, r7, #28
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4866      	ldr	r0, [pc, #408]	; (8000e50 <MX_GPIO_Init+0x2ac>)
 8000cb6:	f001 f95d 	bl	8001f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000cba:	2308      	movs	r3, #8
 8000cbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cca:	2305      	movs	r3, #5
 8000ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000cce:	f107 031c 	add.w	r3, r7, #28
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	485e      	ldr	r0, [pc, #376]	; (8000e50 <MX_GPIO_Init+0x2ac>)
 8000cd6:	f001 f94d 	bl	8001f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cde:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ce2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ce8:	f107 031c 	add.w	r3, r7, #28
 8000cec:	4619      	mov	r1, r3
 8000cee:	485a      	ldr	r0, [pc, #360]	; (8000e58 <MX_GPIO_Init+0x2b4>)
 8000cf0:	f001 f940 	bl	8001f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000cf4:	2310      	movs	r3, #16
 8000cf6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d00:	2300      	movs	r3, #0
 8000d02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d04:	2306      	movs	r3, #6
 8000d06:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000d08:	f107 031c 	add.w	r3, r7, #28
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4852      	ldr	r0, [pc, #328]	; (8000e58 <MX_GPIO_Init+0x2b4>)
 8000d10:	f001 f930 	bl	8001f74 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d14:	23e0      	movs	r3, #224	; 0xe0
 8000d16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d20:	2300      	movs	r3, #0
 8000d22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d24:	2305      	movs	r3, #5
 8000d26:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d28:	f107 031c 	add.w	r3, r7, #28
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	484a      	ldr	r0, [pc, #296]	; (8000e58 <MX_GPIO_Init+0x2b4>)
 8000d30:	f001 f920 	bl	8001f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000d34:	2304      	movs	r3, #4
 8000d36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000d40:	f107 031c 	add.w	r3, r7, #28
 8000d44:	4619      	mov	r1, r3
 8000d46:	4845      	ldr	r0, [pc, #276]	; (8000e5c <MX_GPIO_Init+0x2b8>)
 8000d48:	f001 f914 	bl	8001f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000d4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d52:	2302      	movs	r3, #2
 8000d54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d5e:	2305      	movs	r3, #5
 8000d60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000d62:	f107 031c 	add.w	r3, r7, #28
 8000d66:	4619      	mov	r1, r3
 8000d68:	483c      	ldr	r0, [pc, #240]	; (8000e5c <MX_GPIO_Init+0x2b8>)
 8000d6a:	f001 f903 	bl	8001f74 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000d6e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000d72:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d74:	2301      	movs	r3, #1
 8000d76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d80:	f107 031c 	add.w	r3, r7, #28
 8000d84:	4619      	mov	r1, r3
 8000d86:	4833      	ldr	r0, [pc, #204]	; (8000e54 <MX_GPIO_Init+0x2b0>)
 8000d88:	f001 f8f4 	bl	8001f74 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000d8c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000d90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d92:	2302      	movs	r3, #2
 8000d94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d9e:	2306      	movs	r3, #6
 8000da0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000da2:	f107 031c 	add.w	r3, r7, #28
 8000da6:	4619      	mov	r1, r3
 8000da8:	4829      	ldr	r0, [pc, #164]	; (8000e50 <MX_GPIO_Init+0x2ac>)
 8000daa:	f001 f8e3 	bl	8001f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000dae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000db2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000db4:	2300      	movs	r3, #0
 8000db6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000dbc:	f107 031c 	add.w	r3, r7, #28
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4825      	ldr	r0, [pc, #148]	; (8000e58 <MX_GPIO_Init+0x2b4>)
 8000dc4:	f001 f8d6 	bl	8001f74 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000dc8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000dcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000dda:	230a      	movs	r3, #10
 8000ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dde:	f107 031c 	add.w	r3, r7, #28
 8000de2:	4619      	mov	r1, r3
 8000de4:	481c      	ldr	r0, [pc, #112]	; (8000e58 <MX_GPIO_Init+0x2b4>)
 8000de6:	f001 f8c5 	bl	8001f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000dea:	2320      	movs	r3, #32
 8000dec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dee:	2300      	movs	r3, #0
 8000df0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000df6:	f107 031c 	add.w	r3, r7, #28
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4815      	ldr	r0, [pc, #84]	; (8000e54 <MX_GPIO_Init+0x2b0>)
 8000dfe:	f001 f8b9 	bl	8001f74 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000e02:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000e06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e08:	2312      	movs	r3, #18
 8000e0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e10:	2300      	movs	r3, #0
 8000e12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e14:	2304      	movs	r3, #4
 8000e16:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e18:	f107 031c 	add.w	r3, r7, #28
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	480f      	ldr	r0, [pc, #60]	; (8000e5c <MX_GPIO_Init+0x2b8>)
 8000e20:	f001 f8a8 	bl	8001f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000e24:	2302      	movs	r3, #2
 8000e26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e28:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000e2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000e32:	f107 031c 	add.w	r3, r7, #28
 8000e36:	4619      	mov	r1, r3
 8000e38:	4804      	ldr	r0, [pc, #16]	; (8000e4c <MX_GPIO_Init+0x2a8>)
 8000e3a:	f001 f89b 	bl	8001f74 <HAL_GPIO_Init>

}
 8000e3e:	bf00      	nop
 8000e40:	3730      	adds	r7, #48	; 0x30
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40023800 	.word	0x40023800
 8000e4c:	40021000 	.word	0x40021000
 8000e50:	40020800 	.word	0x40020800
 8000e54:	40020c00 	.word	0x40020c00
 8000e58:	40020000 	.word	0x40020000
 8000e5c:	40020400 	.word	0x40020400

08000e60 <led_effect_callback>:

/* USER CODE BEGIN 4 */
void led_effect_callback(TimerHandle_t xTimer)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
	int id;
	id = (uint32_t) pvTimerGetTimerID(xTimer);
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f006 f891 	bl	8006f90 <pvTimerGetTimerID>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	60fb      	str	r3, [r7, #12]

	switch(id)
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	3b01      	subs	r3, #1
 8000e76:	2b03      	cmp	r3, #3
 8000e78:	d816      	bhi.n	8000ea8 <led_effect_callback+0x48>
 8000e7a:	a201      	add	r2, pc, #4	; (adr r2, 8000e80 <led_effect_callback+0x20>)
 8000e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e80:	08000e91 	.word	0x08000e91
 8000e84:	08000e97 	.word	0x08000e97
 8000e88:	08000e9d 	.word	0x08000e9d
 8000e8c:	08000ea3 	.word	0x08000ea3
	{
		case 1:
			LED_effect1();
 8000e90:	f7ff fc00 	bl	8000694 <LED_effect1>
			break;
 8000e94:	e008      	b.n	8000ea8 <led_effect_callback+0x48>
		case 2:
			LED_effect2();
 8000e96:	f7ff fc4f 	bl	8000738 <LED_effect2>
			break;
 8000e9a:	e005      	b.n	8000ea8 <led_effect_callback+0x48>
		case 3:
			LED_effect3();
 8000e9c:	f7ff fc88 	bl	80007b0 <LED_effect3>
			break;
 8000ea0:	e002      	b.n	8000ea8 <led_effect_callback+0x48>
		case 4:
			LED_effect4();
 8000ea2:	f7ff fc9d 	bl	80007e0 <LED_effect4>
	}
}
 8000ea6:	e7ff      	b.n	8000ea8 <led_effect_callback+0x48>
 8000ea8:	bf00      	nop
 8000eaa:	3710      	adds	r7, #16
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af02      	add	r7, sp, #8
 8000eb6:	6078      	str	r0, [r7, #4]
	if(xQueueIsQueueFullFromISR(input_data_queue_handle) == pdFALSE) // check if the queue is full
 8000eb8:	4b1e      	ldr	r3, [pc, #120]	; (8000f34 <HAL_UART_RxCpltCallback+0x84>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f004 fbc2 	bl	8005646 <xQueueIsQueueFullFromISR>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d107      	bne.n	8000ed8 <HAL_UART_RxCpltCallback+0x28>
	{
		// if Queue is not full -> enqueue the data
		xQueueSendFromISR(input_data_queue_handle, (void*)&user_data, NULL);
 8000ec8:	4b1a      	ldr	r3, [pc, #104]	; (8000f34 <HAL_UART_RxCpltCallback+0x84>)
 8000eca:	6818      	ldr	r0, [r3, #0]
 8000ecc:	2300      	movs	r3, #0
 8000ece:	2200      	movs	r2, #0
 8000ed0:	4919      	ldr	r1, [pc, #100]	; (8000f38 <HAL_UART_RxCpltCallback+0x88>)
 8000ed2:	f004 f871 	bl	8004fb8 <xQueueGenericSendFromISR>
 8000ed6:	e013      	b.n	8000f00 <HAL_UART_RxCpltCallback+0x50>
	}
	else
	{
		// Queue is full
		if(user_data == '\n') // Check if the inserted data is ENTER (\n)
 8000ed8:	4b17      	ldr	r3, [pc, #92]	; (8000f38 <HAL_UART_RxCpltCallback+0x88>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	2b0a      	cmp	r3, #10
 8000ee0:	d10e      	bne.n	8000f00 <HAL_UART_RxCpltCallback+0x50>
		{
			uint8_t dummy;
			// if the data is \n -> make sure the last byte of the queue is '\n'
			xQueueReceiveFromISR(input_data_queue_handle, (void*)&dummy, NULL);
 8000ee2:	4b14      	ldr	r3, [pc, #80]	; (8000f34 <HAL_UART_RxCpltCallback+0x84>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f107 010f 	add.w	r1, r7, #15
 8000eea:	2200      	movs	r2, #0
 8000eec:	4618      	mov	r0, r3
 8000eee:	f004 f9ed 	bl	80052cc <xQueueReceiveFromISR>
			xQueueSendFromISR(input_data_queue_handle, (void*)&user_data, NULL);
 8000ef2:	4b10      	ldr	r3, [pc, #64]	; (8000f34 <HAL_UART_RxCpltCallback+0x84>)
 8000ef4:	6818      	ldr	r0, [r3, #0]
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	2200      	movs	r2, #0
 8000efa:	490f      	ldr	r1, [pc, #60]	; (8000f38 <HAL_UART_RxCpltCallback+0x88>)
 8000efc:	f004 f85c 	bl	8004fb8 <xQueueGenericSendFromISR>
		}
	}
	// Send notification to command handling task if user data is \n
	if(user_data == '\n')
 8000f00:	4b0d      	ldr	r3, [pc, #52]	; (8000f38 <HAL_UART_RxCpltCallback+0x88>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	2b0a      	cmp	r3, #10
 8000f08:	d10a      	bne.n	8000f20 <HAL_UART_RxCpltCallback+0x70>
	{
		xTaskNotifyFromISR(command_handling_task_handle, 0, eNoAction, NULL);
 8000f0a:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <HAL_UART_RxCpltCallback+0x8c>)
 8000f0c:	6818      	ldr	r0, [r3, #0]
 8000f0e:	2300      	movs	r3, #0
 8000f10:	9301      	str	r3, [sp, #4]
 8000f12:	2300      	movs	r3, #0
 8000f14:	9300      	str	r3, [sp, #0]
 8000f16:	2300      	movs	r3, #0
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	f005 fb62 	bl	80065e4 <xTaskGenericNotifyFromISR>
	}

	// Enable UART data byte reception again in IT mode
	HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 8000f20:	2201      	movs	r2, #1
 8000f22:	4905      	ldr	r1, [pc, #20]	; (8000f38 <HAL_UART_RxCpltCallback+0x88>)
 8000f24:	4806      	ldr	r0, [pc, #24]	; (8000f40 <HAL_UART_RxCpltCallback+0x90>)
 8000f26:	f002 fe12 	bl	8003b4e <HAL_UART_Receive_IT>
}
 8000f2a:	bf00      	nop
 8000f2c:	3710      	adds	r7, #16
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000128 	.word	0x20000128
 8000f38:	20000130 	.word	0x20000130
 8000f3c:	20000124 	.word	0x20000124
 8000f40:	200000d0 	.word	0x200000d0

08000f44 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a04      	ldr	r2, [pc, #16]	; (8000f64 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d101      	bne.n	8000f5a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f56:	f000 fe79 	bl	8001c4c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40001000 	.word	0x40001000

08000f68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f6c:	b672      	cpsid	i
}
 8000f6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f70:	e7fe      	b.n	8000f70 <Error_Handler+0x8>
	...

08000f74 <show_time_date>:
 */

#include "main.h"

void show_time_date(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08c      	sub	sp, #48	; 0x30
 8000f78:	af04      	add	r7, sp, #16
	RTC_TimeTypeDef rtc_time;

	static char *time = showtime;
	static char *date = showdate;

	memset(&rtc_date, 0, sizeof(rtc_date));
 8000f7a:	f107 0318 	add.w	r3, r7, #24
 8000f7e:	2204      	movs	r2, #4
 8000f80:	2100      	movs	r1, #0
 8000f82:	4618      	mov	r0, r3
 8000f84:	f006 fd28 	bl	80079d8 <memset>
	memset(&rtc_time, 0, sizeof(rtc_time));
 8000f88:	1d3b      	adds	r3, r7, #4
 8000f8a:	2214      	movs	r2, #20
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f006 fd22 	bl	80079d8 <memset>

	// get the rtc current time
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8000f94:	1d3b      	adds	r3, r7, #4
 8000f96:	2200      	movs	r2, #0
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4821      	ldr	r0, [pc, #132]	; (8001020 <show_time_date+0xac>)
 8000f9c:	f002 f85c 	bl	8003058 <HAL_RTC_GetTime>
	// get the rtc current date
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8000fa0:	f107 0318 	add.w	r3, r7, #24
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	481d      	ldr	r0, [pc, #116]	; (8001020 <show_time_date+0xac>)
 8000faa:	f002 f937 	bl	800321c <HAL_RTC_GetDate>

	char *format;
	format = (rtc_time.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d101      	bne.n	8000fb8 <show_time_date+0x44>
 8000fb4:	4b1b      	ldr	r3, [pc, #108]	; (8001024 <show_time_date+0xb0>)
 8000fb6:	e000      	b.n	8000fba <show_time_date+0x46>
 8000fb8:	4b1b      	ldr	r3, [pc, #108]	; (8001028 <show_time_date+0xb4>)
 8000fba:	61fb      	str	r3, [r7, #28]

	// display time format: hh:mm:ss [AM/PM]
	sprintf((char*)showtime, "%s:\t%02d:%02d:%02d [%s", "\nCurrent Time&Date", rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds, format);
 8000fbc:	793b      	ldrb	r3, [r7, #4]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	797b      	ldrb	r3, [r7, #5]
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	79bb      	ldrb	r3, [r7, #6]
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	9302      	str	r3, [sp, #8]
 8000fcc:	9101      	str	r1, [sp, #4]
 8000fce:	9200      	str	r2, [sp, #0]
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	4a16      	ldr	r2, [pc, #88]	; (800102c <show_time_date+0xb8>)
 8000fd4:	4916      	ldr	r1, [pc, #88]	; (8001030 <show_time_date+0xbc>)
 8000fd6:	4817      	ldr	r0, [pc, #92]	; (8001034 <show_time_date+0xc0>)
 8000fd8:	f006 fd06 	bl	80079e8 <siprintf>
	xQueueSend(print_queue_handle, &time, portMAX_DELAY);
 8000fdc:	4b16      	ldr	r3, [pc, #88]	; (8001038 <show_time_date+0xc4>)
 8000fde:	6818      	ldr	r0, [r3, #0]
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	f04f 32ff 	mov.w	r2, #4294967295
 8000fe6:	4915      	ldr	r1, [pc, #84]	; (800103c <show_time_date+0xc8>)
 8000fe8:	f003 fee8 	bl	8004dbc <xQueueGenericSend>

	// display date format: date-month-year
	sprintf((char*)showdate, "\t%02d-%02d-%2d\n", rtc_date.Month, rtc_date.Date, 2000 + rtc_date.Year);
 8000fec:	7e7b      	ldrb	r3, [r7, #25]
 8000fee:	461a      	mov	r2, r3
 8000ff0:	7ebb      	ldrb	r3, [r7, #26]
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	7efb      	ldrb	r3, [r7, #27]
 8000ff6:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000ffa:	9300      	str	r3, [sp, #0]
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	4910      	ldr	r1, [pc, #64]	; (8001040 <show_time_date+0xcc>)
 8001000:	4810      	ldr	r0, [pc, #64]	; (8001044 <show_time_date+0xd0>)
 8001002:	f006 fcf1 	bl	80079e8 <siprintf>
	xQueueSend(print_queue_handle, &date, portMAX_DELAY);
 8001006:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <show_time_date+0xc4>)
 8001008:	6818      	ldr	r0, [r3, #0]
 800100a:	2300      	movs	r3, #0
 800100c:	f04f 32ff 	mov.w	r2, #4294967295
 8001010:	490d      	ldr	r1, [pc, #52]	; (8001048 <show_time_date+0xd4>)
 8001012:	f003 fed3 	bl	8004dbc <xQueueGenericSend>
}
 8001016:	bf00      	nop
 8001018:	3720      	adds	r7, #32
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	200000b0 	.word	0x200000b0
 8001024:	080082ec 	.word	0x080082ec
 8001028:	080082f0 	.word	0x080082f0
 800102c:	080082f4 	.word	0x080082f4
 8001030:	08008308 	.word	0x08008308
 8001034:	20000144 	.word	0x20000144
 8001038:	2000012c 	.word	0x2000012c
 800103c:	20000008 	.word	0x20000008
 8001040:	08008320 	.word	0x08008320
 8001044:	2000016c 	.word	0x2000016c
 8001048:	2000000c 	.word	0x2000000c

0800104c <rtc_configure_time>:

void rtc_configure_time(RTC_TimeTypeDef *time)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
	time->TimeFormat = RTC_HOURFORMAT12_AM;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2200      	movs	r2, #0
 8001058:	70da      	strb	r2, [r3, #3]

	HAL_RTC_SetTime(&hrtc, time, RTC_FORMAT_BIN);
 800105a:	2200      	movs	r2, #0
 800105c:	6879      	ldr	r1, [r7, #4]
 800105e:	4803      	ldr	r0, [pc, #12]	; (800106c <rtc_configure_time+0x20>)
 8001060:	f001 ff60 	bl	8002f24 <HAL_RTC_SetTime>
}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	200000b0 	.word	0x200000b0

08001070 <rtc_configure_date>:

void rtc_configure_date(RTC_DateTypeDef *date)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
	HAL_RTC_SetDate(&hrtc, date, RTC_FORMAT_BIN);
 8001078:	2200      	movs	r2, #0
 800107a:	6879      	ldr	r1, [r7, #4]
 800107c:	4803      	ldr	r0, [pc, #12]	; (800108c <rtc_configure_date+0x1c>)
 800107e:	f002 f849 	bl	8003114 <HAL_RTC_SetDate>
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	200000b0 	.word	0x200000b0

08001090 <validate_rtc_information>:

int validate_rtc_information(RTC_TimeTypeDef *time, RTC_DateTypeDef *date)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
	if(time)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d00d      	beq.n	80010bc <validate_rtc_information+0x2c>
	{
		if((time->Hours > 12) || (time->Minutes > 59) || (time->Seconds > 59))
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2b0c      	cmp	r3, #12
 80010a6:	d807      	bhi.n	80010b8 <validate_rtc_information+0x28>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	785b      	ldrb	r3, [r3, #1]
 80010ac:	2b3b      	cmp	r3, #59	; 0x3b
 80010ae:	d803      	bhi.n	80010b8 <validate_rtc_information+0x28>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	789b      	ldrb	r3, [r3, #2]
 80010b4:	2b3b      	cmp	r3, #59	; 0x3b
 80010b6:	d901      	bls.n	80010bc <validate_rtc_information+0x2c>
			return 1;
 80010b8:	2301      	movs	r3, #1
 80010ba:	e015      	b.n	80010e8 <validate_rtc_information+0x58>
	}

	if(date)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d011      	beq.n	80010e6 <validate_rtc_information+0x56>
	{
		if((date->Date > 31) || (date->WeekDay > 7) || (date->Year > 99) || (date->Month > 12))
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	789b      	ldrb	r3, [r3, #2]
 80010c6:	2b1f      	cmp	r3, #31
 80010c8:	d80b      	bhi.n	80010e2 <validate_rtc_information+0x52>
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	2b07      	cmp	r3, #7
 80010d0:	d807      	bhi.n	80010e2 <validate_rtc_information+0x52>
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	78db      	ldrb	r3, [r3, #3]
 80010d6:	2b63      	cmp	r3, #99	; 0x63
 80010d8:	d803      	bhi.n	80010e2 <validate_rtc_information+0x52>
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	785b      	ldrb	r3, [r3, #1]
 80010de:	2b0c      	cmp	r3, #12
 80010e0:	d901      	bls.n	80010e6 <validate_rtc_information+0x56>
			return 1;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e000      	b.n	80010e8 <validate_rtc_information+0x58>
	}

	return 0;
 80010e6:	2300      	movs	r3, #0
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	607b      	str	r3, [r7, #4]
 80010fe:	4b10      	ldr	r3, [pc, #64]	; (8001140 <HAL_MspInit+0x4c>)
 8001100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001102:	4a0f      	ldr	r2, [pc, #60]	; (8001140 <HAL_MspInit+0x4c>)
 8001104:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001108:	6453      	str	r3, [r2, #68]	; 0x44
 800110a:	4b0d      	ldr	r3, [pc, #52]	; (8001140 <HAL_MspInit+0x4c>)
 800110c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001112:	607b      	str	r3, [r7, #4]
 8001114:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	603b      	str	r3, [r7, #0]
 800111a:	4b09      	ldr	r3, [pc, #36]	; (8001140 <HAL_MspInit+0x4c>)
 800111c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111e:	4a08      	ldr	r2, [pc, #32]	; (8001140 <HAL_MspInit+0x4c>)
 8001120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001124:	6413      	str	r3, [r2, #64]	; 0x40
 8001126:	4b06      	ldr	r3, [pc, #24]	; (8001140 <HAL_MspInit+0x4c>)
 8001128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800112e:	603b      	str	r3, [r7, #0]
 8001130:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8001132:	f006 f879 	bl	8007228 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40023800 	.word	0x40023800

08001144 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800114c:	f107 0308 	add.w	r3, r7, #8
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a0c      	ldr	r2, [pc, #48]	; (8001190 <HAL_RTC_MspInit+0x4c>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d111      	bne.n	8001188 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001164:	2302      	movs	r3, #2
 8001166:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001168:	f44f 7300 	mov.w	r3, #512	; 0x200
 800116c:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800116e:	f107 0308 	add.w	r3, r7, #8
 8001172:	4618      	mov	r0, r3
 8001174:	f001 fd7e 	bl	8002c74 <HAL_RCCEx_PeriphCLKConfig>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800117e:	f7ff fef3 	bl	8000f68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001182:	4b04      	ldr	r3, [pc, #16]	; (8001194 <HAL_RTC_MspInit+0x50>)
 8001184:	2201      	movs	r2, #1
 8001186:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001188:	bf00      	nop
 800118a:	3718      	adds	r7, #24
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40002800 	.word	0x40002800
 8001194:	42470e3c 	.word	0x42470e3c

08001198 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08a      	sub	sp, #40	; 0x28
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a1d      	ldr	r2, [pc, #116]	; (800122c <HAL_UART_MspInit+0x94>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d133      	bne.n	8001222 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	613b      	str	r3, [r7, #16]
 80011be:	4b1c      	ldr	r3, [pc, #112]	; (8001230 <HAL_UART_MspInit+0x98>)
 80011c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c2:	4a1b      	ldr	r2, [pc, #108]	; (8001230 <HAL_UART_MspInit+0x98>)
 80011c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011c8:	6413      	str	r3, [r2, #64]	; 0x40
 80011ca:	4b19      	ldr	r3, [pc, #100]	; (8001230 <HAL_UART_MspInit+0x98>)
 80011cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d2:	613b      	str	r3, [r7, #16]
 80011d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	60fb      	str	r3, [r7, #12]
 80011da:	4b15      	ldr	r3, [pc, #84]	; (8001230 <HAL_UART_MspInit+0x98>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	4a14      	ldr	r2, [pc, #80]	; (8001230 <HAL_UART_MspInit+0x98>)
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	6313      	str	r3, [r2, #48]	; 0x30
 80011e6:	4b12      	ldr	r3, [pc, #72]	; (8001230 <HAL_UART_MspInit+0x98>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80011f2:	230c      	movs	r3, #12
 80011f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f6:	2302      	movs	r3, #2
 80011f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011fe:	2303      	movs	r3, #3
 8001200:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001202:	2307      	movs	r3, #7
 8001204:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001206:	f107 0314 	add.w	r3, r7, #20
 800120a:	4619      	mov	r1, r3
 800120c:	4809      	ldr	r0, [pc, #36]	; (8001234 <HAL_UART_MspInit+0x9c>)
 800120e:	f000 feb1 	bl	8001f74 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8001212:	2200      	movs	r2, #0
 8001214:	2106      	movs	r1, #6
 8001216:	2026      	movs	r0, #38	; 0x26
 8001218:	f000 fdf0 	bl	8001dfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800121c:	2026      	movs	r0, #38	; 0x26
 800121e:	f000 fe09 	bl	8001e34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001222:	bf00      	nop
 8001224:	3728      	adds	r7, #40	; 0x28
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40004400 	.word	0x40004400
 8001230:	40023800 	.word	0x40023800
 8001234:	40020000 	.word	0x40020000

08001238 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08e      	sub	sp, #56	; 0x38
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001240:	2300      	movs	r3, #0
 8001242:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001244:	2300      	movs	r3, #0
 8001246:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001248:	2300      	movs	r3, #0
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	4b33      	ldr	r3, [pc, #204]	; (800131c <HAL_InitTick+0xe4>)
 800124e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001250:	4a32      	ldr	r2, [pc, #200]	; (800131c <HAL_InitTick+0xe4>)
 8001252:	f043 0310 	orr.w	r3, r3, #16
 8001256:	6413      	str	r3, [r2, #64]	; 0x40
 8001258:	4b30      	ldr	r3, [pc, #192]	; (800131c <HAL_InitTick+0xe4>)
 800125a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125c:	f003 0310 	and.w	r3, r3, #16
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001264:	f107 0210 	add.w	r2, r7, #16
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	4611      	mov	r1, r2
 800126e:	4618      	mov	r0, r3
 8001270:	f001 fcce 	bl	8002c10 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001274:	6a3b      	ldr	r3, [r7, #32]
 8001276:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800127a:	2b00      	cmp	r3, #0
 800127c:	d103      	bne.n	8001286 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800127e:	f001 fc9f 	bl	8002bc0 <HAL_RCC_GetPCLK1Freq>
 8001282:	6378      	str	r0, [r7, #52]	; 0x34
 8001284:	e004      	b.n	8001290 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001286:	f001 fc9b 	bl	8002bc0 <HAL_RCC_GetPCLK1Freq>
 800128a:	4603      	mov	r3, r0
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001292:	4a23      	ldr	r2, [pc, #140]	; (8001320 <HAL_InitTick+0xe8>)
 8001294:	fba2 2303 	umull	r2, r3, r2, r3
 8001298:	0c9b      	lsrs	r3, r3, #18
 800129a:	3b01      	subs	r3, #1
 800129c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800129e:	4b21      	ldr	r3, [pc, #132]	; (8001324 <HAL_InitTick+0xec>)
 80012a0:	4a21      	ldr	r2, [pc, #132]	; (8001328 <HAL_InitTick+0xf0>)
 80012a2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80012a4:	4b1f      	ldr	r3, [pc, #124]	; (8001324 <HAL_InitTick+0xec>)
 80012a6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012aa:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80012ac:	4a1d      	ldr	r2, [pc, #116]	; (8001324 <HAL_InitTick+0xec>)
 80012ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012b0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80012b2:	4b1c      	ldr	r3, [pc, #112]	; (8001324 <HAL_InitTick+0xec>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b8:	4b1a      	ldr	r3, [pc, #104]	; (8001324 <HAL_InitTick+0xec>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012be:	4b19      	ldr	r3, [pc, #100]	; (8001324 <HAL_InitTick+0xec>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80012c4:	4817      	ldr	r0, [pc, #92]	; (8001324 <HAL_InitTick+0xec>)
 80012c6:	f002 f8b5 	bl	8003434 <HAL_TIM_Base_Init>
 80012ca:	4603      	mov	r3, r0
 80012cc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80012d0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d11b      	bne.n	8001310 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80012d8:	4812      	ldr	r0, [pc, #72]	; (8001324 <HAL_InitTick+0xec>)
 80012da:	f002 f905 	bl	80034e8 <HAL_TIM_Base_Start_IT>
 80012de:	4603      	mov	r3, r0
 80012e0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80012e4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d111      	bne.n	8001310 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80012ec:	2036      	movs	r0, #54	; 0x36
 80012ee:	f000 fda1 	bl	8001e34 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2b0f      	cmp	r3, #15
 80012f6:	d808      	bhi.n	800130a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80012f8:	2200      	movs	r2, #0
 80012fa:	6879      	ldr	r1, [r7, #4]
 80012fc:	2036      	movs	r0, #54	; 0x36
 80012fe:	f000 fd7d 	bl	8001dfc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001302:	4a0a      	ldr	r2, [pc, #40]	; (800132c <HAL_InitTick+0xf4>)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6013      	str	r3, [r2, #0]
 8001308:	e002      	b.n	8001310 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001310:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001314:	4618      	mov	r0, r3
 8001316:	3738      	adds	r7, #56	; 0x38
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	40023800 	.word	0x40023800
 8001320:	431bde83 	.word	0x431bde83
 8001324:	20000194 	.word	0x20000194
 8001328:	40001000 	.word	0x40001000
 800132c:	20000018 	.word	0x20000018

08001330 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001334:	e7fe      	b.n	8001334 <NMI_Handler+0x4>

08001336 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001336:	b480      	push	{r7}
 8001338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800133a:	e7fe      	b.n	800133a <HardFault_Handler+0x4>

0800133c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001340:	e7fe      	b.n	8001340 <MemManage_Handler+0x4>

08001342 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001342:	b480      	push	{r7}
 8001344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001346:	e7fe      	b.n	8001346 <BusFault_Handler+0x4>

08001348 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800134c:	e7fe      	b.n	800134c <UsageFault_Handler+0x4>

0800134e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800134e:	b480      	push	{r7}
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001360:	4802      	ldr	r0, [pc, #8]	; (800136c <USART2_IRQHandler+0x10>)
 8001362:	f002 fc25 	bl	8003bb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	200000d0 	.word	0x200000d0

08001370 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001374:	4802      	ldr	r0, [pc, #8]	; (8001380 <TIM6_DAC_IRQHandler+0x10>)
 8001376:	f002 f927 	bl	80035c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20000194 	.word	0x20000194

08001384 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800138c:	4a14      	ldr	r2, [pc, #80]	; (80013e0 <_sbrk+0x5c>)
 800138e:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <_sbrk+0x60>)
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001398:	4b13      	ldr	r3, [pc, #76]	; (80013e8 <_sbrk+0x64>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d102      	bne.n	80013a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013a0:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <_sbrk+0x64>)
 80013a2:	4a12      	ldr	r2, [pc, #72]	; (80013ec <_sbrk+0x68>)
 80013a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013a6:	4b10      	ldr	r3, [pc, #64]	; (80013e8 <_sbrk+0x64>)
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4413      	add	r3, r2
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d207      	bcs.n	80013c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013b4:	f006 fad8 	bl	8007968 <__errno>
 80013b8:	4603      	mov	r3, r0
 80013ba:	220c      	movs	r2, #12
 80013bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013be:	f04f 33ff 	mov.w	r3, #4294967295
 80013c2:	e009      	b.n	80013d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013c4:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <_sbrk+0x64>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013ca:	4b07      	ldr	r3, [pc, #28]	; (80013e8 <_sbrk+0x64>)
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4413      	add	r3, r2
 80013d2:	4a05      	ldr	r2, [pc, #20]	; (80013e8 <_sbrk+0x64>)
 80013d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013d6:	68fb      	ldr	r3, [r7, #12]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3718      	adds	r7, #24
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	20020000 	.word	0x20020000
 80013e4:	00000400 	.word	0x00000400
 80013e8:	200001dc 	.word	0x200001dc
 80013ec:	20012fa0 	.word	0x20012fa0

080013f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013f4:	4b06      	ldr	r3, [pc, #24]	; (8001410 <SystemInit+0x20>)
 80013f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013fa:	4a05      	ldr	r2, [pc, #20]	; (8001410 <SystemInit+0x20>)
 80013fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001400:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <menu_task>:
void process_command(command_t *cmd);

const char *msg_inv = "////Invalid option////\n";

void menu_task(void* parameters)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b088      	sub	sp, #32
 8001418:	af02      	add	r7, sp, #8
 800141a:	6078      	str	r0, [r7, #4]
	uint32_t cmd_addr;
	command_t *cmd;
	uint8_t option;
	const char* msg_menu = "===================\n"
 800141c:	4b2f      	ldr	r3, [pc, #188]	; (80014dc <menu_task+0xc8>)
 800141e:	60bb      	str	r3, [r7, #8]
													"Date and time      ---> 1 \n"
													"Exit               ---> 2 \n"
													"Enter your choice here:   \n";
	while(1)
	{
		xQueueSend(print_queue_handle, &msg_menu, portMAX_DELAY);
 8001420:	4b2f      	ldr	r3, [pc, #188]	; (80014e0 <menu_task+0xcc>)
 8001422:	6818      	ldr	r0, [r3, #0]
 8001424:	f107 0108 	add.w	r1, r7, #8
 8001428:	2300      	movs	r3, #0
 800142a:	f04f 32ff 	mov.w	r2, #4294967295
 800142e:	f003 fcc5 	bl	8004dbc <xQueueGenericSend>
		// wait for menu commands
		xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
 8001432:	f107 030c 	add.w	r3, r7, #12
 8001436:	f04f 32ff 	mov.w	r2, #4294967295
 800143a:	9200      	str	r2, [sp, #0]
 800143c:	2200      	movs	r2, #0
 800143e:	2100      	movs	r1, #0
 8001440:	2000      	movs	r0, #0
 8001442:	f004 ff6f 	bl	8006324 <xTaskGenericNotifyWait>
		cmd = (command_t*)cmd_addr;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	617b      	str	r3, [r7, #20]
		if(cmd->len == 1)
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d130      	bne.n	80014b4 <menu_task+0xa0>
		{
			option = cmd->payload[0] - 48; // convert ascii to number by subtracting to 48
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	3b30      	subs	r3, #48	; 0x30
 8001458:	74fb      	strb	r3, [r7, #19]
			switch(option)
 800145a:	7cfb      	ldrb	r3, [r7, #19]
 800145c:	2b02      	cmp	r3, #2
 800145e:	d032      	beq.n	80014c6 <menu_task+0xb2>
 8001460:	2b02      	cmp	r3, #2
 8001462:	dc1e      	bgt.n	80014a2 <menu_task+0x8e>
 8001464:	2b00      	cmp	r3, #0
 8001466:	d002      	beq.n	800146e <menu_task+0x5a>
 8001468:	2b01      	cmp	r3, #1
 800146a:	d00d      	beq.n	8001488 <menu_task+0x74>
 800146c:	e019      	b.n	80014a2 <menu_task+0x8e>
			{
			case 0:
			{
				curr_state = sLedEffect;
 800146e:	4b1d      	ldr	r3, [pc, #116]	; (80014e4 <menu_task+0xd0>)
 8001470:	2201      	movs	r2, #1
 8001472:	701a      	strb	r2, [r3, #0]
				xTaskNotify(led_task_handle, 0, eNoAction);
 8001474:	4b1c      	ldr	r3, [pc, #112]	; (80014e8 <menu_task+0xd4>)
 8001476:	6818      	ldr	r0, [r3, #0]
 8001478:	2300      	movs	r3, #0
 800147a:	9300      	str	r3, [sp, #0]
 800147c:	2300      	movs	r3, #0
 800147e:	2200      	movs	r2, #0
 8001480:	2100      	movs	r1, #0
 8001482:	f004 ffcf 	bl	8006424 <xTaskGenericNotify>
				break;
 8001486:	e01f      	b.n	80014c8 <menu_task+0xb4>
			}
			case 1:
			{
				curr_state = sRtcMenu;
 8001488:	4b16      	ldr	r3, [pc, #88]	; (80014e4 <menu_task+0xd0>)
 800148a:	2202      	movs	r2, #2
 800148c:	701a      	strb	r2, [r3, #0]
				xTaskNotify(rtc_task_handle, 0, eNoAction);
 800148e:	4b17      	ldr	r3, [pc, #92]	; (80014ec <menu_task+0xd8>)
 8001490:	6818      	ldr	r0, [r3, #0]
 8001492:	2300      	movs	r3, #0
 8001494:	9300      	str	r3, [sp, #0]
 8001496:	2300      	movs	r3, #0
 8001498:	2200      	movs	r2, #0
 800149a:	2100      	movs	r1, #0
 800149c:	f004 ffc2 	bl	8006424 <xTaskGenericNotify>
				break;
 80014a0:	e012      	b.n	80014c8 <menu_task+0xb4>
			case 2: // Exit option

				break;
			default:
			{
				xQueueSend(print_queue_handle, &msg_inv, portMAX_DELAY);
 80014a2:	4b0f      	ldr	r3, [pc, #60]	; (80014e0 <menu_task+0xcc>)
 80014a4:	6818      	ldr	r0, [r3, #0]
 80014a6:	2300      	movs	r3, #0
 80014a8:	f04f 32ff 	mov.w	r2, #4294967295
 80014ac:	4910      	ldr	r1, [pc, #64]	; (80014f0 <menu_task+0xdc>)
 80014ae:	f003 fc85 	bl	8004dbc <xQueueGenericSend>
				continue;
 80014b2:	e012      	b.n	80014da <menu_task+0xc6>
			}
		}
		else
		{
			// invalid entry
			xQueueSend(print_queue_handle, &msg_inv, portMAX_DELAY);
 80014b4:	4b0a      	ldr	r3, [pc, #40]	; (80014e0 <menu_task+0xcc>)
 80014b6:	6818      	ldr	r0, [r3, #0]
 80014b8:	2300      	movs	r3, #0
 80014ba:	f04f 32ff 	mov.w	r2, #4294967295
 80014be:	490c      	ldr	r1, [pc, #48]	; (80014f0 <menu_task+0xdc>)
 80014c0:	f003 fc7c 	bl	8004dbc <xQueueGenericSend>
			continue;
 80014c4:	e009      	b.n	80014da <menu_task+0xc6>
				break;
 80014c6:	bf00      	nop
		}
		// wait to run again when some other task notifies
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80014c8:	f04f 33ff 	mov.w	r3, #4294967295
 80014cc:	9300      	str	r3, [sp, #0]
 80014ce:	2300      	movs	r3, #0
 80014d0:	2200      	movs	r2, #0
 80014d2:	2100      	movs	r1, #0
 80014d4:	2000      	movs	r0, #0
 80014d6:	f004 ff25 	bl	8006324 <xTaskGenericNotifyWait>
		xQueueSend(print_queue_handle, &msg_menu, portMAX_DELAY);
 80014da:	e7a1      	b.n	8001420 <menu_task+0xc>
 80014dc:	08008348 	.word	0x08008348
 80014e0:	2000012c 	.word	0x2000012c
 80014e4:	20000131 	.word	0x20000131
 80014e8:	20000118 	.word	0x20000118
 80014ec:	2000011c 	.word	0x2000011c
 80014f0:	20000014 	.word	0x20000014

080014f4 <led_task>:
	}
}

void led_task(void* parameters)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b088      	sub	sp, #32
 80014f8:	af02      	add	r7, sp, #8
 80014fa:	6078      	str	r0, [r7, #4]
	uint32_t cmd_addr;
	command_t *cmd;
	const char* msg_led = "===========================\n"
 80014fc:	4b3e      	ldr	r3, [pc, #248]	; (80015f8 <led_task+0x104>)
 80014fe:	60fb      	str	r3, [r7, #12]
												"(none, e1, e2, e3, e4) \n"
												"Enter your choice here:    \n";
	while(1)
	{
		// Wait for notification
		xTaskNotifyWait(0,0,NULL, portMAX_DELAY);
 8001500:	f04f 33ff 	mov.w	r3, #4294967295
 8001504:	9300      	str	r3, [sp, #0]
 8001506:	2300      	movs	r3, #0
 8001508:	2200      	movs	r2, #0
 800150a:	2100      	movs	r1, #0
 800150c:	2000      	movs	r0, #0
 800150e:	f004 ff09 	bl	8006324 <xTaskGenericNotifyWait>
		// Print LED Menu
		xQueueSend(print_queue_handle, &msg_led, portMAX_DELAY);
 8001512:	4b3a      	ldr	r3, [pc, #232]	; (80015fc <led_task+0x108>)
 8001514:	6818      	ldr	r0, [r3, #0]
 8001516:	f107 010c 	add.w	r1, r7, #12
 800151a:	2300      	movs	r3, #0
 800151c:	f04f 32ff 	mov.w	r2, #4294967295
 8001520:	f003 fc4c 	bl	8004dbc <xQueueGenericSend>
		// Wait for LED command
		xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
 8001524:	f107 0310 	add.w	r3, r7, #16
 8001528:	f04f 32ff 	mov.w	r2, #4294967295
 800152c:	9200      	str	r2, [sp, #0]
 800152e:	2200      	movs	r2, #0
 8001530:	2100      	movs	r1, #0
 8001532:	2000      	movs	r0, #0
 8001534:	f004 fef6 	bl	8006324 <xTaskGenericNotifyWait>
		cmd = (command_t*)cmd_addr;
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	617b      	str	r3, [r7, #20]
		if(cmd->len <= 4)
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	2b04      	cmp	r3, #4
 8001542:	d843      	bhi.n	80015cc <led_task+0xd8>
		{
			if(! strcmp((char*)cmd->payload, "none"))
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	492e      	ldr	r1, [pc, #184]	; (8001600 <led_task+0x10c>)
 8001548:	4618      	mov	r0, r3
 800154a:	f7fe fe41 	bl	80001d0 <strcmp>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d102      	bne.n	800155a <led_task+0x66>
				led_effect_stop();
 8001554:	f7ff f826 	bl	80005a4 <led_effect_stop>
 8001558:	e040      	b.n	80015dc <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload, "e1"))
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	4929      	ldr	r1, [pc, #164]	; (8001604 <led_task+0x110>)
 800155e:	4618      	mov	r0, r3
 8001560:	f7fe fe36 	bl	80001d0 <strcmp>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d103      	bne.n	8001572 <led_task+0x7e>
				led_effect(1);
 800156a:	2001      	movs	r0, #1
 800156c:	f7ff f83a 	bl	80005e4 <led_effect>
 8001570:	e034      	b.n	80015dc <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload, "e2"))
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	4924      	ldr	r1, [pc, #144]	; (8001608 <led_task+0x114>)
 8001576:	4618      	mov	r0, r3
 8001578:	f7fe fe2a 	bl	80001d0 <strcmp>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d103      	bne.n	800158a <led_task+0x96>
				led_effect(2);
 8001582:	2002      	movs	r0, #2
 8001584:	f7ff f82e 	bl	80005e4 <led_effect>
 8001588:	e028      	b.n	80015dc <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload, "e3"))
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	491f      	ldr	r1, [pc, #124]	; (800160c <led_task+0x118>)
 800158e:	4618      	mov	r0, r3
 8001590:	f7fe fe1e 	bl	80001d0 <strcmp>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d103      	bne.n	80015a2 <led_task+0xae>
				led_effect(3);
 800159a:	2003      	movs	r0, #3
 800159c:	f7ff f822 	bl	80005e4 <led_effect>
 80015a0:	e01c      	b.n	80015dc <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload, "e4"))
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	491a      	ldr	r1, [pc, #104]	; (8001610 <led_task+0x11c>)
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7fe fe12 	bl	80001d0 <strcmp>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d103      	bne.n	80015ba <led_task+0xc6>
				led_effect(4);
 80015b2:	2004      	movs	r0, #4
 80015b4:	f7ff f816 	bl	80005e4 <led_effect>
 80015b8:	e010      	b.n	80015dc <led_task+0xe8>
			else
				// Print invalid message
				xQueueSend(print_queue_handle, &msg_inv, portMAX_DELAY);
 80015ba:	4b10      	ldr	r3, [pc, #64]	; (80015fc <led_task+0x108>)
 80015bc:	6818      	ldr	r0, [r3, #0]
 80015be:	2300      	movs	r3, #0
 80015c0:	f04f 32ff 	mov.w	r2, #4294967295
 80015c4:	4913      	ldr	r1, [pc, #76]	; (8001614 <led_task+0x120>)
 80015c6:	f003 fbf9 	bl	8004dbc <xQueueGenericSend>
 80015ca:	e007      	b.n	80015dc <led_task+0xe8>
		}
		else
			//print invalid message
			xQueueSend(print_queue_handle, &msg_inv, portMAX_DELAY);
 80015cc:	4b0b      	ldr	r3, [pc, #44]	; (80015fc <led_task+0x108>)
 80015ce:	6818      	ldr	r0, [r3, #0]
 80015d0:	2300      	movs	r3, #0
 80015d2:	f04f 32ff 	mov.w	r2, #4294967295
 80015d6:	490f      	ldr	r1, [pc, #60]	; (8001614 <led_task+0x120>)
 80015d8:	f003 fbf0 	bl	8004dbc <xQueueGenericSend>

		curr_state = sMainMenu;
 80015dc:	4b0e      	ldr	r3, [pc, #56]	; (8001618 <led_task+0x124>)
 80015de:	2200      	movs	r2, #0
 80015e0:	701a      	strb	r2, [r3, #0]

		xTaskNotify(menu_task_handle,0,eNoAction);
 80015e2:	4b0e      	ldr	r3, [pc, #56]	; (800161c <led_task+0x128>)
 80015e4:	6818      	ldr	r0, [r3, #0]
 80015e6:	2300      	movs	r3, #0
 80015e8:	9300      	str	r3, [sp, #0]
 80015ea:	2300      	movs	r3, #0
 80015ec:	2200      	movs	r2, #0
 80015ee:	2100      	movs	r1, #0
 80015f0:	f004 ff18 	bl	8006424 <xTaskGenericNotify>
		xTaskNotifyWait(0,0,NULL, portMAX_DELAY);
 80015f4:	e784      	b.n	8001500 <led_task+0xc>
 80015f6:	bf00      	nop
 80015f8:	080083f4 	.word	0x080083f4
 80015fc:	2000012c 	.word	0x2000012c
 8001600:	08008480 	.word	0x08008480
 8001604:	08008488 	.word	0x08008488
 8001608:	0800848c 	.word	0x0800848c
 800160c:	08008490 	.word	0x08008490
 8001610:	08008494 	.word	0x08008494
 8001614:	20000014 	.word	0x20000014
 8001618:	20000131 	.word	0x20000131
 800161c:	20000114 	.word	0x20000114

08001620 <getnumber>:
	}
}

uint8_t getnumber(uint8_t *p, int len)
{
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
	int value;
	if(len > 1)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	2b01      	cmp	r3, #1
 800162e:	dd0f      	ble.n	8001650 <getnumber+0x30>
		value = (((p[0] - 48) * 10) + (p[1] - 48));
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001638:	4613      	mov	r3, r2
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	4413      	add	r3, r2
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	461a      	mov	r2, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	3301      	adds	r3, #1
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	3b30      	subs	r3, #48	; 0x30
 800164a:	4413      	add	r3, r2
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	e003      	b.n	8001658 <getnumber+0x38>
	else
		value = p[0] - 48;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	3b30      	subs	r3, #48	; 0x30
 8001656:	60fb      	str	r3, [r7, #12]

	return value;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	b2db      	uxtb	r3, r3
}
 800165c:	4618      	mov	r0, r3
 800165e:	3714      	adds	r7, #20
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <rtc_task>:

void rtc_task(void* parameters)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b09a      	sub	sp, #104	; 0x68
 800166c:	af02      	add	r7, sp, #8
 800166e:	6078      	str	r0, [r7, #4]
	const char* msg_rtc1 = "==========================\n"
 8001670:	4bb4      	ldr	r3, [pc, #720]	; (8001944 <rtc_task+0x2dc>)
 8001672:	653b      	str	r3, [r7, #80]	; 0x50
													"|            RTC          |\n"
													"===========================\n";

	const char* msg_rtc2 = "Configure Time        ---> 0\n"
 8001674:	4bb4      	ldr	r3, [pc, #720]	; (8001948 <rtc_task+0x2e0>)
 8001676:	64fb      	str	r3, [r7, #76]	; 0x4c
													"Configure Date        ---> 1\n"
													"Enable reporting      ---> 2\n"
													"Exit                  ---> 3\n"
													"Enter your choice here: ";

	const char *msg_rtc_hh = "Enter hour(1-12): ";
 8001678:	4bb4      	ldr	r3, [pc, #720]	; (800194c <rtc_task+0x2e4>)
 800167a:	64bb      	str	r3, [r7, #72]	; 0x48
	const char *msg_rtc_mm = "Enter minutes(0-59): ";
 800167c:	4bb4      	ldr	r3, [pc, #720]	; (8001950 <rtc_task+0x2e8>)
 800167e:	647b      	str	r3, [r7, #68]	; 0x44
	const char *msg_rtc_ss = "Enter seconds(0-59): ";
 8001680:	4bb4      	ldr	r3, [pc, #720]	; (8001954 <rtc_task+0x2ec>)
 8001682:	643b      	str	r3, [r7, #64]	; 0x40

	const char *msg_rtc_dd = "Enter date(1 - 31): ";
 8001684:	4bb4      	ldr	r3, [pc, #720]	; (8001958 <rtc_task+0x2f0>)
 8001686:	63fb      	str	r3, [r7, #60]	; 0x3c
	const char *msg_rtc_mo = "Enter month(1-12): ";
 8001688:	4bb4      	ldr	r3, [pc, #720]	; (800195c <rtc_task+0x2f4>)
 800168a:	63bb      	str	r3, [r7, #56]	; 0x38
	const char *msg_rtc_dow = "Enter day(1-7 sun:1): ";
 800168c:	4bb4      	ldr	r3, [pc, #720]	; (8001960 <rtc_task+0x2f8>)
 800168e:	637b      	str	r3, [r7, #52]	; 0x34
	const char *msg_rtc_yr = "Enter year(0-99): ";
 8001690:	4bb4      	ldr	r3, [pc, #720]	; (8001964 <rtc_task+0x2fc>)
 8001692:	633b      	str	r3, [r7, #48]	; 0x30

	const char *msg_conf = "Configuration successful!\n";
 8001694:	4bb4      	ldr	r3, [pc, #720]	; (8001968 <rtc_task+0x300>)
 8001696:	62fb      	str	r3, [r7, #44]	; 0x2c
	const char *msg_rtc_report = "Enable time & date reporting(y/n)?: ";
 8001698:	4bb4      	ldr	r3, [pc, #720]	; (800196c <rtc_task+0x304>)
 800169a:	62bb      	str	r3, [r7, #40]	; 0x28
#define DAY_CONFIG		3

	while(1)
	{
		// Notify wait (wait until someone notifies)
		xTaskNotifyWait(0,0,NULL, portMAX_DELAY);
 800169c:	f04f 33ff 	mov.w	r3, #4294967295
 80016a0:	9300      	str	r3, [sp, #0]
 80016a2:	2300      	movs	r3, #0
 80016a4:	2200      	movs	r2, #0
 80016a6:	2100      	movs	r1, #0
 80016a8:	2000      	movs	r0, #0
 80016aa:	f004 fe3b 	bl	8006324 <xTaskGenericNotifyWait>
		// Print the menu and show current date and time information.
		xQueueSend(print_queue_handle, &msg_rtc1, portMAX_DELAY);
 80016ae:	4bb0      	ldr	r3, [pc, #704]	; (8001970 <rtc_task+0x308>)
 80016b0:	6818      	ldr	r0, [r3, #0]
 80016b2:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80016b6:	2300      	movs	r3, #0
 80016b8:	f04f 32ff 	mov.w	r2, #4294967295
 80016bc:	f003 fb7e 	bl	8004dbc <xQueueGenericSend>
		show_time_date();
 80016c0:	f7ff fc58 	bl	8000f74 <show_time_date>
		xQueueSend(print_queue_handle, &msg_rtc2, portMAX_DELAY);
 80016c4:	4baa      	ldr	r3, [pc, #680]	; (8001970 <rtc_task+0x308>)
 80016c6:	6818      	ldr	r0, [r3, #0]
 80016c8:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80016cc:	2300      	movs	r3, #0
 80016ce:	f04f 32ff 	mov.w	r2, #4294967295
 80016d2:	f003 fb73 	bl	8004dbc <xQueueGenericSend>

		while(curr_state != sMainMenu)
 80016d6:	bf00      	nop
 80016d8:	e1a4      	b.n	8001a24 <rtc_task+0x3bc>
		{
			// Wait for command notification (Notify wait)
			xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
 80016da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016de:	f04f 32ff 	mov.w	r2, #4294967295
 80016e2:	9200      	str	r2, [sp, #0]
 80016e4:	2200      	movs	r2, #0
 80016e6:	2100      	movs	r1, #0
 80016e8:	2000      	movs	r0, #0
 80016ea:	f004 fe1b 	bl	8006324 <xTaskGenericNotifyWait>
			cmd = (command_t*)cmd_addr;
 80016ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f0:	65fb      	str	r3, [r7, #92]	; 0x5c
			switch(curr_state)
 80016f2:	4ba0      	ldr	r3, [pc, #640]	; (8001974 <rtc_task+0x30c>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	3b02      	subs	r3, #2
 80016f8:	2b03      	cmp	r3, #3
 80016fa:	f200 8193 	bhi.w	8001a24 <rtc_task+0x3bc>
 80016fe:	a201      	add	r2, pc, #4	; (adr r2, 8001704 <rtc_task+0x9c>)
 8001700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001704:	08001715 	.word	0x08001715
 8001708:	080017cd 	.word	0x080017cd
 800170c:	080018bb 	.word	0x080018bb
 8001710:	08001a23 	.word	0x08001a23
			{
				case sRtcMenu:
				{
					// Process RTC menu commands
					if(cmd->len == 1)
 8001714:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d14b      	bne.n	80017b4 <rtc_task+0x14c>
					{
						menu_option = cmd->payload[0] - 48;
 800171c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	3b30      	subs	r3, #48	; 0x30
 8001722:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
						if(menu_option == 0)
 8001726:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800172a:	2b00      	cmp	r3, #0
 800172c:	d10c      	bne.n	8001748 <rtc_task+0xe0>
						{
							curr_state = sRtcTimeConfig;
 800172e:	4b91      	ldr	r3, [pc, #580]	; (8001974 <rtc_task+0x30c>)
 8001730:	2203      	movs	r2, #3
 8001732:	701a      	strb	r2, [r3, #0]
							xQueueSend(print_queue_handle, &msg_rtc_hh, portMAX_DELAY);
 8001734:	4b8e      	ldr	r3, [pc, #568]	; (8001970 <rtc_task+0x308>)
 8001736:	6818      	ldr	r0, [r3, #0]
 8001738:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800173c:	2300      	movs	r3, #0
 800173e:	f04f 32ff 	mov.w	r2, #4294967295
 8001742:	f003 fb3b 	bl	8004dbc <xQueueGenericSend>
 8001746:	e16d      	b.n	8001a24 <rtc_task+0x3bc>
						}
						else if(menu_option == 1)
 8001748:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800174c:	2b01      	cmp	r3, #1
 800174e:	d10c      	bne.n	800176a <rtc_task+0x102>
						{
							curr_state = sRtcDateConfig;
 8001750:	4b88      	ldr	r3, [pc, #544]	; (8001974 <rtc_task+0x30c>)
 8001752:	2204      	movs	r2, #4
 8001754:	701a      	strb	r2, [r3, #0]
							xQueueSend(print_queue_handle, &msg_rtc_dd, portMAX_DELAY);
 8001756:	4b86      	ldr	r3, [pc, #536]	; (8001970 <rtc_task+0x308>)
 8001758:	6818      	ldr	r0, [r3, #0]
 800175a:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800175e:	2300      	movs	r3, #0
 8001760:	f04f 32ff 	mov.w	r2, #4294967295
 8001764:	f003 fb2a 	bl	8004dbc <xQueueGenericSend>
 8001768:	e15c      	b.n	8001a24 <rtc_task+0x3bc>
						}
						else if(menu_option == 2)
 800176a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800176e:	2b02      	cmp	r3, #2
 8001770:	d10c      	bne.n	800178c <rtc_task+0x124>
						{
							curr_state = sRtcReport;
 8001772:	4b80      	ldr	r3, [pc, #512]	; (8001974 <rtc_task+0x30c>)
 8001774:	2205      	movs	r2, #5
 8001776:	701a      	strb	r2, [r3, #0]
							xQueueSend(print_queue_handle, &msg_rtc_report, portMAX_DELAY);
 8001778:	4b7d      	ldr	r3, [pc, #500]	; (8001970 <rtc_task+0x308>)
 800177a:	6818      	ldr	r0, [r3, #0]
 800177c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001780:	2300      	movs	r3, #0
 8001782:	f04f 32ff 	mov.w	r2, #4294967295
 8001786:	f003 fb19 	bl	8004dbc <xQueueGenericSend>
 800178a:	e14b      	b.n	8001a24 <rtc_task+0x3bc>
						}
						else if(menu_option == 3)
 800178c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8001790:	2b03      	cmp	r3, #3
 8001792:	d103      	bne.n	800179c <rtc_task+0x134>
							curr_state = sMainMenu;
 8001794:	4b77      	ldr	r3, [pc, #476]	; (8001974 <rtc_task+0x30c>)
 8001796:	2200      	movs	r2, #0
 8001798:	701a      	strb	r2, [r3, #0]
 800179a:	e143      	b.n	8001a24 <rtc_task+0x3bc>
						else
						{
							curr_state = sMainMenu;
 800179c:	4b75      	ldr	r3, [pc, #468]	; (8001974 <rtc_task+0x30c>)
 800179e:	2200      	movs	r2, #0
 80017a0:	701a      	strb	r2, [r3, #0]
							xQueueSend(print_queue_handle, &msg_inv, portMAX_DELAY);
 80017a2:	4b73      	ldr	r3, [pc, #460]	; (8001970 <rtc_task+0x308>)
 80017a4:	6818      	ldr	r0, [r3, #0]
 80017a6:	2300      	movs	r3, #0
 80017a8:	f04f 32ff 	mov.w	r2, #4294967295
 80017ac:	4972      	ldr	r1, [pc, #456]	; (8001978 <rtc_task+0x310>)
 80017ae:	f003 fb05 	bl	8004dbc <xQueueGenericSend>
 80017b2:	e137      	b.n	8001a24 <rtc_task+0x3bc>
						}
					}
					else
					{
						curr_state = sMainMenu;
 80017b4:	4b6f      	ldr	r3, [pc, #444]	; (8001974 <rtc_task+0x30c>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	701a      	strb	r2, [r3, #0]
						xQueueSend(print_queue_handle, &msg_inv, portMAX_DELAY);
 80017ba:	4b6d      	ldr	r3, [pc, #436]	; (8001970 <rtc_task+0x308>)
 80017bc:	6818      	ldr	r0, [r3, #0]
 80017be:	2300      	movs	r3, #0
 80017c0:	f04f 32ff 	mov.w	r2, #4294967295
 80017c4:	496c      	ldr	r1, [pc, #432]	; (8001978 <rtc_task+0x310>)
 80017c6:	f003 faf9 	bl	8004dbc <xQueueGenericSend>
					}
					break;
 80017ca:	e12b      	b.n	8001a24 <rtc_task+0x3bc>
				}
				case sRtcTimeConfig:
				{
					// get hh, mm, ss, info and configure RTC
					switch(rtc_state)
 80017cc:	4b6b      	ldr	r3, [pc, #428]	; (800197c <rtc_task+0x314>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d03b      	beq.n	800184c <rtc_task+0x1e4>
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	f300 8125 	bgt.w	8001a24 <rtc_task+0x3bc>
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d002      	beq.n	80017e4 <rtc_task+0x17c>
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d01a      	beq.n	8001818 <rtc_task+0x1b0>
 80017e2:	e11f      	b.n	8001a24 <rtc_task+0x3bc>
					{
						case HH_CONFIG:
						{
							uint8_t hour = getnumber(cmd->payload, cmd->len);
 80017e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80017e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017e8:	68db      	ldr	r3, [r3, #12]
 80017ea:	4619      	mov	r1, r3
 80017ec:	4610      	mov	r0, r2
 80017ee:	f7ff ff17 	bl	8001620 <getnumber>
 80017f2:	4603      	mov	r3, r0
 80017f4:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
							time.Hours = hour;
 80017f8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80017fc:	743b      	strb	r3, [r7, #16]
							rtc_state = MM_CONFIG;
 80017fe:	4b5f      	ldr	r3, [pc, #380]	; (800197c <rtc_task+0x314>)
 8001800:	2201      	movs	r2, #1
 8001802:	601a      	str	r2, [r3, #0]
							xQueueSend(print_queue_handle, &msg_rtc_mm, portMAX_DELAY);
 8001804:	4b5a      	ldr	r3, [pc, #360]	; (8001970 <rtc_task+0x308>)
 8001806:	6818      	ldr	r0, [r3, #0]
 8001808:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800180c:	2300      	movs	r3, #0
 800180e:	f04f 32ff 	mov.w	r2, #4294967295
 8001812:	f003 fad3 	bl	8004dbc <xQueueGenericSend>
							break;
 8001816:	e04f      	b.n	80018b8 <rtc_task+0x250>
						}
						case MM_CONFIG:
						{
							uint8_t minute = getnumber(cmd->payload, cmd->len);
 8001818:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800181a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	4619      	mov	r1, r3
 8001820:	4610      	mov	r0, r2
 8001822:	f7ff fefd 	bl	8001620 <getnumber>
 8001826:	4603      	mov	r3, r0
 8001828:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
							time.Minutes = minute;
 800182c:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001830:	747b      	strb	r3, [r7, #17]
							rtc_state = SS_CONFIG;
 8001832:	4b52      	ldr	r3, [pc, #328]	; (800197c <rtc_task+0x314>)
 8001834:	2202      	movs	r2, #2
 8001836:	601a      	str	r2, [r3, #0]
							xQueueSend(print_queue_handle, &msg_rtc_ss, portMAX_DELAY);
 8001838:	4b4d      	ldr	r3, [pc, #308]	; (8001970 <rtc_task+0x308>)
 800183a:	6818      	ldr	r0, [r3, #0]
 800183c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001840:	2300      	movs	r3, #0
 8001842:	f04f 32ff 	mov.w	r2, #4294967295
 8001846:	f003 fab9 	bl	8004dbc <xQueueGenericSend>
							break;
 800184a:	e035      	b.n	80018b8 <rtc_task+0x250>
						}
						case SS_CONFIG:
						{
							uint8_t sec = getnumber(cmd->payload, cmd->len);
 800184c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800184e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	4619      	mov	r1, r3
 8001854:	4610      	mov	r0, r2
 8001856:	f7ff fee3 	bl	8001620 <getnumber>
 800185a:	4603      	mov	r3, r0
 800185c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							time.Seconds = sec;
 8001860:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001864:	74bb      	strb	r3, [r7, #18]
							if(!validate_rtc_information(&time, NULL))
 8001866:	f107 0310 	add.w	r3, r7, #16
 800186a:	2100      	movs	r1, #0
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff fc0f 	bl	8001090 <validate_rtc_information>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d110      	bne.n	800189a <rtc_task+0x232>
							{
								rtc_configure_time(&time);
 8001878:	f107 0310 	add.w	r3, r7, #16
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff fbe5 	bl	800104c <rtc_configure_time>
								xQueueSend(print_queue_handle, &msg_conf, portMAX_DELAY);
 8001882:	4b3b      	ldr	r3, [pc, #236]	; (8001970 <rtc_task+0x308>)
 8001884:	6818      	ldr	r0, [r3, #0]
 8001886:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800188a:	2300      	movs	r3, #0
 800188c:	f04f 32ff 	mov.w	r2, #4294967295
 8001890:	f003 fa94 	bl	8004dbc <xQueueGenericSend>
								show_time_date();
 8001894:	f7ff fb6e 	bl	8000f74 <show_time_date>
 8001898:	e007      	b.n	80018aa <rtc_task+0x242>
							}
							else
								xQueueSend(print_queue_handle, &msg_inv, portMAX_DELAY);
 800189a:	4b35      	ldr	r3, [pc, #212]	; (8001970 <rtc_task+0x308>)
 800189c:	6818      	ldr	r0, [r3, #0]
 800189e:	2300      	movs	r3, #0
 80018a0:	f04f 32ff 	mov.w	r2, #4294967295
 80018a4:	4934      	ldr	r1, [pc, #208]	; (8001978 <rtc_task+0x310>)
 80018a6:	f003 fa89 	bl	8004dbc <xQueueGenericSend>

							curr_state = sMainMenu;
 80018aa:	4b32      	ldr	r3, [pc, #200]	; (8001974 <rtc_task+0x30c>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	701a      	strb	r2, [r3, #0]
							rtc_state = 0;
 80018b0:	4b32      	ldr	r3, [pc, #200]	; (800197c <rtc_task+0x314>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]
							break;
 80018b6:	bf00      	nop
						}
					}
					break;
 80018b8:	e0b4      	b.n	8001a24 <rtc_task+0x3bc>
				}
				case sRtcDateConfig:
				{
					switch(rtc_state)
 80018ba:	4b30      	ldr	r3, [pc, #192]	; (800197c <rtc_task+0x314>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2b03      	cmp	r3, #3
 80018c0:	f200 80b0 	bhi.w	8001a24 <rtc_task+0x3bc>
 80018c4:	a201      	add	r2, pc, #4	; (adr r2, 80018cc <rtc_task+0x264>)
 80018c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ca:	bf00      	nop
 80018cc:	080018dd 	.word	0x080018dd
 80018d0:	08001911 	.word	0x08001911
 80018d4:	080019b5 	.word	0x080019b5
 80018d8:	08001981 	.word	0x08001981
					{
						case DATE_CONFIG:
						{
							uint8_t d = getnumber(cmd->payload, cmd->len);
 80018dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80018de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018e0:	68db      	ldr	r3, [r3, #12]
 80018e2:	4619      	mov	r1, r3
 80018e4:	4610      	mov	r0, r2
 80018e6:	f7ff fe9b 	bl	8001620 <getnumber>
 80018ea:	4603      	mov	r3, r0
 80018ec:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
							date.Date = d;
 80018f0:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 80018f4:	73bb      	strb	r3, [r7, #14]
							rtc_state = MONTH_CONFIG;
 80018f6:	4b21      	ldr	r3, [pc, #132]	; (800197c <rtc_task+0x314>)
 80018f8:	2201      	movs	r2, #1
 80018fa:	601a      	str	r2, [r3, #0]
							xQueueSend(print_queue_handle, &msg_rtc_mo, portMAX_DELAY);
 80018fc:	4b1c      	ldr	r3, [pc, #112]	; (8001970 <rtc_task+0x308>)
 80018fe:	6818      	ldr	r0, [r3, #0]
 8001900:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001904:	2300      	movs	r3, #0
 8001906:	f04f 32ff 	mov.w	r2, #4294967295
 800190a:	f003 fa57 	bl	8004dbc <xQueueGenericSend>
							break;
 800190e:	e087      	b.n	8001a20 <rtc_task+0x3b8>
						}
						case MONTH_CONFIG:
						{
							uint8_t month = getnumber(cmd->payload, cmd->len);
 8001910:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001912:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	4619      	mov	r1, r3
 8001918:	4610      	mov	r0, r2
 800191a:	f7ff fe81 	bl	8001620 <getnumber>
 800191e:	4603      	mov	r3, r0
 8001920:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
							date.Month = month;
 8001924:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8001928:	737b      	strb	r3, [r7, #13]
							rtc_state = DAY_CONFIG;
 800192a:	4b14      	ldr	r3, [pc, #80]	; (800197c <rtc_task+0x314>)
 800192c:	2203      	movs	r2, #3
 800192e:	601a      	str	r2, [r3, #0]
							xQueueSend(print_queue_handle, &msg_rtc_dow, portMAX_DELAY);
 8001930:	4b0f      	ldr	r3, [pc, #60]	; (8001970 <rtc_task+0x308>)
 8001932:	6818      	ldr	r0, [r3, #0]
 8001934:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001938:	2300      	movs	r3, #0
 800193a:	f04f 32ff 	mov.w	r2, #4294967295
 800193e:	f003 fa3d 	bl	8004dbc <xQueueGenericSend>
							break;
 8001942:	e06d      	b.n	8001a20 <rtc_task+0x3b8>
 8001944:	08008498 	.word	0x08008498
 8001948:	080084ec 	.word	0x080084ec
 800194c:	0800857c 	.word	0x0800857c
 8001950:	08008590 	.word	0x08008590
 8001954:	080085a8 	.word	0x080085a8
 8001958:	080085c0 	.word	0x080085c0
 800195c:	080085d8 	.word	0x080085d8
 8001960:	080085ec 	.word	0x080085ec
 8001964:	08008604 	.word	0x08008604
 8001968:	08008618 	.word	0x08008618
 800196c:	08008634 	.word	0x08008634
 8001970:	2000012c 	.word	0x2000012c
 8001974:	20000131 	.word	0x20000131
 8001978:	20000014 	.word	0x20000014
 800197c:	200001e0 	.word	0x200001e0
						}
						case DAY_CONFIG:
						{
							uint8_t day = getnumber(cmd->payload, cmd->len);
 8001980:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001982:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	4619      	mov	r1, r3
 8001988:	4610      	mov	r0, r2
 800198a:	f7ff fe49 	bl	8001620 <getnumber>
 800198e:	4603      	mov	r3, r0
 8001990:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
							date.WeekDay = day;
 8001994:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001998:	733b      	strb	r3, [r7, #12]
							rtc_state = YEAR_CONFIG;
 800199a:	4b2a      	ldr	r3, [pc, #168]	; (8001a44 <rtc_task+0x3dc>)
 800199c:	2202      	movs	r2, #2
 800199e:	601a      	str	r2, [r3, #0]
							xQueueSend(print_queue_handle, &msg_rtc_yr, portMAX_DELAY);
 80019a0:	4b29      	ldr	r3, [pc, #164]	; (8001a48 <rtc_task+0x3e0>)
 80019a2:	6818      	ldr	r0, [r3, #0]
 80019a4:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80019a8:	2300      	movs	r3, #0
 80019aa:	f04f 32ff 	mov.w	r2, #4294967295
 80019ae:	f003 fa05 	bl	8004dbc <xQueueGenericSend>
							break;
 80019b2:	e035      	b.n	8001a20 <rtc_task+0x3b8>
						}
						case YEAR_CONFIG:
						{
							uint8_t year = getnumber(cmd->payload, cmd->len);
 80019b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80019b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	4619      	mov	r1, r3
 80019bc:	4610      	mov	r0, r2
 80019be:	f7ff fe2f 	bl	8001620 <getnumber>
 80019c2:	4603      	mov	r3, r0
 80019c4:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
							date.Year = year;
 80019c8:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 80019cc:	73fb      	strb	r3, [r7, #15]

							if(!validate_rtc_information(NULL, &date))
 80019ce:	f107 030c 	add.w	r3, r7, #12
 80019d2:	4619      	mov	r1, r3
 80019d4:	2000      	movs	r0, #0
 80019d6:	f7ff fb5b 	bl	8001090 <validate_rtc_information>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d110      	bne.n	8001a02 <rtc_task+0x39a>
							{
								rtc_configure_date(&date);
 80019e0:	f107 030c 	add.w	r3, r7, #12
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff fb43 	bl	8001070 <rtc_configure_date>
								xQueueSend(print_queue_handle, &msg_conf, portMAX_DELAY);
 80019ea:	4b17      	ldr	r3, [pc, #92]	; (8001a48 <rtc_task+0x3e0>)
 80019ec:	6818      	ldr	r0, [r3, #0]
 80019ee:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80019f2:	2300      	movs	r3, #0
 80019f4:	f04f 32ff 	mov.w	r2, #4294967295
 80019f8:	f003 f9e0 	bl	8004dbc <xQueueGenericSend>
								show_time_date();
 80019fc:	f7ff faba 	bl	8000f74 <show_time_date>
 8001a00:	e007      	b.n	8001a12 <rtc_task+0x3aa>
							}
							else
								xQueueSend(print_queue_handle, &msg_inv, portMAX_DELAY);
 8001a02:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <rtc_task+0x3e0>)
 8001a04:	6818      	ldr	r0, [r3, #0]
 8001a06:	2300      	movs	r3, #0
 8001a08:	f04f 32ff 	mov.w	r2, #4294967295
 8001a0c:	490f      	ldr	r1, [pc, #60]	; (8001a4c <rtc_task+0x3e4>)
 8001a0e:	f003 f9d5 	bl	8004dbc <xQueueGenericSend>

							curr_state = sMainMenu;
 8001a12:	4b0f      	ldr	r3, [pc, #60]	; (8001a50 <rtc_task+0x3e8>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	701a      	strb	r2, [r3, #0]
							rtc_state = 0;
 8001a18:	4b0a      	ldr	r3, [pc, #40]	; (8001a44 <rtc_task+0x3dc>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	601a      	str	r2, [r3, #0]
							break;
 8001a1e:	bf00      	nop
						}
					}

					break;
 8001a20:	e000      	b.n	8001a24 <rtc_task+0x3bc>
				}
				case sRtcReport:
				{
					// enable or disable RTC current time reporting over ITM printf

					break;
 8001a22:	bf00      	nop
		while(curr_state != sMainMenu)
 8001a24:	4b0a      	ldr	r3, [pc, #40]	; (8001a50 <rtc_task+0x3e8>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	f47f ae56 	bne.w	80016da <rtc_task+0x72>
				}
			}
		}
		// Notify menu task
		xTaskNotify(menu_task_handle, 0, eNoAction);
 8001a2e:	4b09      	ldr	r3, [pc, #36]	; (8001a54 <rtc_task+0x3ec>)
 8001a30:	6818      	ldr	r0, [r3, #0]
 8001a32:	2300      	movs	r3, #0
 8001a34:	9300      	str	r3, [sp, #0]
 8001a36:	2300      	movs	r3, #0
 8001a38:	2200      	movs	r2, #0
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	f004 fcf2 	bl	8006424 <xTaskGenericNotify>
		xTaskNotifyWait(0,0,NULL, portMAX_DELAY);
 8001a40:	e62c      	b.n	800169c <rtc_task+0x34>
 8001a42:	bf00      	nop
 8001a44:	200001e0 	.word	0x200001e0
 8001a48:	2000012c 	.word	0x2000012c
 8001a4c:	20000014 	.word	0x20000014
 8001a50:	20000131 	.word	0x20000131
 8001a54:	20000114 	.word	0x20000114

08001a58 <print_task>:
	}
}

void print_task(void* parameters)
{
 8001a58:	b590      	push	{r4, r7, lr}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
	uint32_t *msg;
	while(1)
	{
		xQueueReceive(print_queue_handle, &msg, portMAX_DELAY);
 8001a60:	4b0b      	ldr	r3, [pc, #44]	; (8001a90 <print_task+0x38>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f107 010c 	add.w	r1, r7, #12
 8001a68:	f04f 32ff 	mov.w	r2, #4294967295
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f003 fb4d 	bl	800510c <xQueueReceive>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen((char*)msg), HAL_MAX_DELAY);
 8001a72:	68fc      	ldr	r4, [r7, #12]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7fe fbb4 	bl	80001e4 <strlen>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	b29a      	uxth	r2, r3
 8001a80:	f04f 33ff 	mov.w	r3, #4294967295
 8001a84:	4621      	mov	r1, r4
 8001a86:	4803      	ldr	r0, [pc, #12]	; (8001a94 <print_task+0x3c>)
 8001a88:	f001 ffcf 	bl	8003a2a <HAL_UART_Transmit>
		xQueueReceive(print_queue_handle, &msg, portMAX_DELAY);
 8001a8c:	e7e8      	b.n	8001a60 <print_task+0x8>
 8001a8e:	bf00      	nop
 8001a90:	2000012c 	.word	0x2000012c
 8001a94:	200000d0 	.word	0x200000d0

08001a98 <command_handling_task>:
	}
}

void command_handling_task(void* parameters)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b08a      	sub	sp, #40	; 0x28
 8001a9c:	af02      	add	r7, sp, #8
 8001a9e:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	command_t cmd;
	while(1)
	{
		// Implement notify wait
		status = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8001aa4:	9300      	str	r3, [sp, #0]
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	2100      	movs	r1, #0
 8001aac:	2000      	movs	r0, #0
 8001aae:	f004 fc39 	bl	8006324 <xTaskGenericNotifyWait>
 8001ab2:	61f8      	str	r0, [r7, #28]
		if(status == pdTRUE)
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d1f2      	bne.n	8001aa0 <command_handling_task+0x8>
		{
			// Process the user data (command) stored in input data queue
			process_command(&cmd);
 8001aba:	f107 030c 	add.w	r3, r7, #12
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f000 f802 	bl	8001ac8 <process_command>
		status = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001ac4:	e7ec      	b.n	8001aa0 <command_handling_task+0x8>
	...

08001ac8 <process_command>:
		}
	}
}

void process_command(command_t *cmd)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af02      	add	r7, sp, #8
 8001ace:	6078      	str	r0, [r7, #4]
	extract_command(cmd);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f000 f835 	bl	8001b40 <extract_command>

	switch(curr_state)
 8001ad6:	4b16      	ldr	r3, [pc, #88]	; (8001b30 <process_command+0x68>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	2b05      	cmp	r3, #5
 8001adc:	dc24      	bgt.n	8001b28 <process_command+0x60>
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	da18      	bge.n	8001b14 <process_command+0x4c>
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d002      	beq.n	8001aec <process_command+0x24>
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d00a      	beq.n	8001b00 <process_command+0x38>
			// Notify task with the command
			xTaskNotify(rtc_task_handle, (uint32_t)cmd, eSetValueWithOverwrite);
			break;
		}
	}
}
 8001aea:	e01d      	b.n	8001b28 <process_command+0x60>
			xTaskNotify(menu_task_handle, (uint32_t)cmd, eSetValueWithOverwrite);
 8001aec:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <process_command+0x6c>)
 8001aee:	6818      	ldr	r0, [r3, #0]
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	2300      	movs	r3, #0
 8001af4:	9300      	str	r3, [sp, #0]
 8001af6:	2303      	movs	r3, #3
 8001af8:	2100      	movs	r1, #0
 8001afa:	f004 fc93 	bl	8006424 <xTaskGenericNotify>
			break;
 8001afe:	e013      	b.n	8001b28 <process_command+0x60>
			xTaskNotify(led_task_handle, (uint32_t)cmd, eSetValueWithOverwrite);
 8001b00:	4b0d      	ldr	r3, [pc, #52]	; (8001b38 <process_command+0x70>)
 8001b02:	6818      	ldr	r0, [r3, #0]
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	2300      	movs	r3, #0
 8001b08:	9300      	str	r3, [sp, #0]
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	f004 fc89 	bl	8006424 <xTaskGenericNotify>
			break;
 8001b12:	e009      	b.n	8001b28 <process_command+0x60>
			xTaskNotify(rtc_task_handle, (uint32_t)cmd, eSetValueWithOverwrite);
 8001b14:	4b09      	ldr	r3, [pc, #36]	; (8001b3c <process_command+0x74>)
 8001b16:	6818      	ldr	r0, [r3, #0]
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	9300      	str	r3, [sp, #0]
 8001b1e:	2303      	movs	r3, #3
 8001b20:	2100      	movs	r1, #0
 8001b22:	f004 fc7f 	bl	8006424 <xTaskGenericNotify>
			break;
 8001b26:	bf00      	nop
}
 8001b28:	bf00      	nop
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	20000131 	.word	0x20000131
 8001b34:	20000114 	.word	0x20000114
 8001b38:	20000118 	.word	0x20000118
 8001b3c:	2000011c 	.word	0x2000011c

08001b40 <extract_command>:

int extract_command(command_t *cmd)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
	uint8_t item;
	UBaseType_t numberOfMessages;
	BaseType_t status;

	numberOfMessages = uxQueueMessagesWaiting(input_data_queue_handle);
 8001b48:	4b19      	ldr	r3, [pc, #100]	; (8001bb0 <extract_command+0x70>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f003 fc4c 	bl	80053ea <uxQueueMessagesWaiting>
 8001b52:	6138      	str	r0, [r7, #16]
	if(!numberOfMessages)
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d102      	bne.n	8001b60 <extract_command+0x20>
		return -1;
 8001b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b5e:	e022      	b.n	8001ba6 <extract_command+0x66>
	uint8_t i = 0;
 8001b60:	2300      	movs	r3, #0
 8001b62:	75fb      	strb	r3, [r7, #23]

	do
	{
		status = xQueueReceive(input_data_queue_handle, &item, 0);
 8001b64:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <extract_command+0x70>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f107 010b 	add.w	r1, r7, #11
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f003 facc 	bl	800510c <xQueueReceive>
 8001b74:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE)
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d106      	bne.n	8001b8a <extract_command+0x4a>
			cmd->payload[i++] = item;
 8001b7c:	7dfb      	ldrb	r3, [r7, #23]
 8001b7e:	1c5a      	adds	r2, r3, #1
 8001b80:	75fa      	strb	r2, [r7, #23]
 8001b82:	461a      	mov	r2, r3
 8001b84:	7af9      	ldrb	r1, [r7, #11]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	5499      	strb	r1, [r3, r2]
	}while(item != '\n');
 8001b8a:	7afb      	ldrb	r3, [r7, #11]
 8001b8c:	2b0a      	cmp	r3, #10
 8001b8e:	d1e9      	bne.n	8001b64 <extract_command+0x24>

	cmd->payload[i-1] = '\0';
 8001b90:	7dfb      	ldrb	r3, [r7, #23]
 8001b92:	3b01      	subs	r3, #1
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	2100      	movs	r1, #0
 8001b98:	54d1      	strb	r1, [r2, r3]
	cmd->len = i - 1;
 8001b9a:	7dfb      	ldrb	r3, [r7, #23]
 8001b9c:	3b01      	subs	r3, #1
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	60da      	str	r2, [r3, #12]

	return 0;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3718      	adds	r7, #24
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	20000128 	.word	0x20000128

08001bb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001bb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bb8:	480d      	ldr	r0, [pc, #52]	; (8001bf0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001bba:	490e      	ldr	r1, [pc, #56]	; (8001bf4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001bbc:	4a0e      	ldr	r2, [pc, #56]	; (8001bf8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bc0:	e002      	b.n	8001bc8 <LoopCopyDataInit>

08001bc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bc6:	3304      	adds	r3, #4

08001bc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bcc:	d3f9      	bcc.n	8001bc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bce:	4a0b      	ldr	r2, [pc, #44]	; (8001bfc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001bd0:	4c0b      	ldr	r4, [pc, #44]	; (8001c00 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001bd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bd4:	e001      	b.n	8001bda <LoopFillZerobss>

08001bd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bd8:	3204      	adds	r2, #4

08001bda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bdc:	d3fb      	bcc.n	8001bd6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001bde:	f7ff fc07 	bl	80013f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001be2:	f005 fec7 	bl	8007974 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001be6:	f7fe fe13 	bl	8000810 <main>
  bx  lr    
 8001bea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001bec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bf4:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001bf8:	080086d0 	.word	0x080086d0
  ldr r2, =_sbss
 8001bfc:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001c00:	20012fa0 	.word	0x20012fa0

08001c04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c04:	e7fe      	b.n	8001c04 <ADC_IRQHandler>
	...

08001c08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c0c:	4b0e      	ldr	r3, [pc, #56]	; (8001c48 <HAL_Init+0x40>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a0d      	ldr	r2, [pc, #52]	; (8001c48 <HAL_Init+0x40>)
 8001c12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c18:	4b0b      	ldr	r3, [pc, #44]	; (8001c48 <HAL_Init+0x40>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a0a      	ldr	r2, [pc, #40]	; (8001c48 <HAL_Init+0x40>)
 8001c1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c24:	4b08      	ldr	r3, [pc, #32]	; (8001c48 <HAL_Init+0x40>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a07      	ldr	r2, [pc, #28]	; (8001c48 <HAL_Init+0x40>)
 8001c2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c30:	2003      	movs	r0, #3
 8001c32:	f000 f8d8 	bl	8001de6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c36:	2000      	movs	r0, #0
 8001c38:	f7ff fafe 	bl	8001238 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c3c:	f7ff fa5a 	bl	80010f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	40023c00 	.word	0x40023c00

08001c4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c50:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <HAL_IncTick+0x20>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	461a      	mov	r2, r3
 8001c56:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <HAL_IncTick+0x24>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	4a04      	ldr	r2, [pc, #16]	; (8001c70 <HAL_IncTick+0x24>)
 8001c5e:	6013      	str	r3, [r2, #0]
}
 8001c60:	bf00      	nop
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	2000001c 	.word	0x2000001c
 8001c70:	200001e4 	.word	0x200001e4

08001c74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  return uwTick;
 8001c78:	4b03      	ldr	r3, [pc, #12]	; (8001c88 <HAL_GetTick+0x14>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	200001e4 	.word	0x200001e4

08001c8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f003 0307 	and.w	r3, r3, #7
 8001c9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c9c:	4b0c      	ldr	r3, [pc, #48]	; (8001cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ca2:	68ba      	ldr	r2, [r7, #8]
 8001ca4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ca8:	4013      	ands	r3, r2
 8001caa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cbe:	4a04      	ldr	r2, [pc, #16]	; (8001cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	60d3      	str	r3, [r2, #12]
}
 8001cc4:	bf00      	nop
 8001cc6:	3714      	adds	r7, #20
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr
 8001cd0:	e000ed00 	.word	0xe000ed00

08001cd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cd8:	4b04      	ldr	r3, [pc, #16]	; (8001cec <__NVIC_GetPriorityGrouping+0x18>)
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	0a1b      	lsrs	r3, r3, #8
 8001cde:	f003 0307 	and.w	r3, r3, #7
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	e000ed00 	.word	0xe000ed00

08001cf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	db0b      	blt.n	8001d1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d02:	79fb      	ldrb	r3, [r7, #7]
 8001d04:	f003 021f 	and.w	r2, r3, #31
 8001d08:	4907      	ldr	r1, [pc, #28]	; (8001d28 <__NVIC_EnableIRQ+0x38>)
 8001d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0e:	095b      	lsrs	r3, r3, #5
 8001d10:	2001      	movs	r0, #1
 8001d12:	fa00 f202 	lsl.w	r2, r0, r2
 8001d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d1a:	bf00      	nop
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	e000e100 	.word	0xe000e100

08001d2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	6039      	str	r1, [r7, #0]
 8001d36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	db0a      	blt.n	8001d56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	b2da      	uxtb	r2, r3
 8001d44:	490c      	ldr	r1, [pc, #48]	; (8001d78 <__NVIC_SetPriority+0x4c>)
 8001d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4a:	0112      	lsls	r2, r2, #4
 8001d4c:	b2d2      	uxtb	r2, r2
 8001d4e:	440b      	add	r3, r1
 8001d50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d54:	e00a      	b.n	8001d6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	b2da      	uxtb	r2, r3
 8001d5a:	4908      	ldr	r1, [pc, #32]	; (8001d7c <__NVIC_SetPriority+0x50>)
 8001d5c:	79fb      	ldrb	r3, [r7, #7]
 8001d5e:	f003 030f 	and.w	r3, r3, #15
 8001d62:	3b04      	subs	r3, #4
 8001d64:	0112      	lsls	r2, r2, #4
 8001d66:	b2d2      	uxtb	r2, r2
 8001d68:	440b      	add	r3, r1
 8001d6a:	761a      	strb	r2, [r3, #24]
}
 8001d6c:	bf00      	nop
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr
 8001d78:	e000e100 	.word	0xe000e100
 8001d7c:	e000ed00 	.word	0xe000ed00

08001d80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b089      	sub	sp, #36	; 0x24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f003 0307 	and.w	r3, r3, #7
 8001d92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	f1c3 0307 	rsb	r3, r3, #7
 8001d9a:	2b04      	cmp	r3, #4
 8001d9c:	bf28      	it	cs
 8001d9e:	2304      	movcs	r3, #4
 8001da0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	3304      	adds	r3, #4
 8001da6:	2b06      	cmp	r3, #6
 8001da8:	d902      	bls.n	8001db0 <NVIC_EncodePriority+0x30>
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	3b03      	subs	r3, #3
 8001dae:	e000      	b.n	8001db2 <NVIC_EncodePriority+0x32>
 8001db0:	2300      	movs	r3, #0
 8001db2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db4:	f04f 32ff 	mov.w	r2, #4294967295
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	43da      	mvns	r2, r3
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	401a      	ands	r2, r3
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dc8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd2:	43d9      	mvns	r1, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd8:	4313      	orrs	r3, r2
         );
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3724      	adds	r7, #36	; 0x24
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr

08001de6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b082      	sub	sp, #8
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f7ff ff4c 	bl	8001c8c <__NVIC_SetPriorityGrouping>
}
 8001df4:	bf00      	nop
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	4603      	mov	r3, r0
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
 8001e08:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e0e:	f7ff ff61 	bl	8001cd4 <__NVIC_GetPriorityGrouping>
 8001e12:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	68b9      	ldr	r1, [r7, #8]
 8001e18:	6978      	ldr	r0, [r7, #20]
 8001e1a:	f7ff ffb1 	bl	8001d80 <NVIC_EncodePriority>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e24:	4611      	mov	r1, r2
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7ff ff80 	bl	8001d2c <__NVIC_SetPriority>
}
 8001e2c:	bf00      	nop
 8001e2e:	3718      	adds	r7, #24
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff ff54 	bl	8001cf0 <__NVIC_EnableIRQ>
}
 8001e48:	bf00      	nop
 8001e4a:	3708      	adds	r7, #8
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e5c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e5e:	f7ff ff09 	bl	8001c74 <HAL_GetTick>
 8001e62:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d008      	beq.n	8001e82 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2280      	movs	r2, #128	; 0x80
 8001e74:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e052      	b.n	8001f28 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f022 0216 	bic.w	r2, r2, #22
 8001e90:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	695a      	ldr	r2, [r3, #20]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ea0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d103      	bne.n	8001eb2 <HAL_DMA_Abort+0x62>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d007      	beq.n	8001ec2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f022 0208 	bic.w	r2, r2, #8
 8001ec0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f022 0201 	bic.w	r2, r2, #1
 8001ed0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ed2:	e013      	b.n	8001efc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ed4:	f7ff fece 	bl	8001c74 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b05      	cmp	r3, #5
 8001ee0:	d90c      	bls.n	8001efc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2220      	movs	r2, #32
 8001ee6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2203      	movs	r2, #3
 8001eec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e015      	b.n	8001f28 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d1e4      	bne.n	8001ed4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f0e:	223f      	movs	r2, #63	; 0x3f
 8001f10:	409a      	lsls	r2, r3
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3710      	adds	r7, #16
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d004      	beq.n	8001f4e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2280      	movs	r2, #128	; 0x80
 8001f48:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e00c      	b.n	8001f68 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2205      	movs	r2, #5
 8001f52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f022 0201 	bic.w	r2, r2, #1
 8001f64:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b089      	sub	sp, #36	; 0x24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f82:	2300      	movs	r3, #0
 8001f84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f86:	2300      	movs	r3, #0
 8001f88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	61fb      	str	r3, [r7, #28]
 8001f8e:	e16b      	b.n	8002268 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f90:	2201      	movs	r2, #1
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	697a      	ldr	r2, [r7, #20]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fa4:	693a      	ldr	r2, [r7, #16]
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	f040 815a 	bne.w	8002262 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f003 0303 	and.w	r3, r3, #3
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d005      	beq.n	8001fc6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d130      	bne.n	8002028 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	2203      	movs	r2, #3
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	43db      	mvns	r3, r3
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	68da      	ldr	r2, [r3, #12]
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	43db      	mvns	r3, r3
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	4013      	ands	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	091b      	lsrs	r3, r3, #4
 8002012:	f003 0201 	and.w	r2, r3, #1
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	4313      	orrs	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f003 0303 	and.w	r3, r3, #3
 8002030:	2b03      	cmp	r3, #3
 8002032:	d017      	beq.n	8002064 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	2203      	movs	r2, #3
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	43db      	mvns	r3, r3
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	4013      	ands	r3, r2
 800204a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	689a      	ldr	r2, [r3, #8]
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	4313      	orrs	r3, r2
 800205c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f003 0303 	and.w	r3, r3, #3
 800206c:	2b02      	cmp	r3, #2
 800206e:	d123      	bne.n	80020b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	08da      	lsrs	r2, r3, #3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	3208      	adds	r2, #8
 8002078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800207c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	f003 0307 	and.w	r3, r3, #7
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	220f      	movs	r2, #15
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	43db      	mvns	r3, r3
 800208e:	69ba      	ldr	r2, [r7, #24]
 8002090:	4013      	ands	r3, r2
 8002092:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	691a      	ldr	r2, [r3, #16]
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	08da      	lsrs	r2, r3, #3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	3208      	adds	r2, #8
 80020b2:	69b9      	ldr	r1, [r7, #24]
 80020b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	2203      	movs	r2, #3
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	43db      	mvns	r3, r3
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	4013      	ands	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f003 0203 	and.w	r2, r3, #3
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	f000 80b4 	beq.w	8002262 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020fa:	2300      	movs	r3, #0
 80020fc:	60fb      	str	r3, [r7, #12]
 80020fe:	4b60      	ldr	r3, [pc, #384]	; (8002280 <HAL_GPIO_Init+0x30c>)
 8002100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002102:	4a5f      	ldr	r2, [pc, #380]	; (8002280 <HAL_GPIO_Init+0x30c>)
 8002104:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002108:	6453      	str	r3, [r2, #68]	; 0x44
 800210a:	4b5d      	ldr	r3, [pc, #372]	; (8002280 <HAL_GPIO_Init+0x30c>)
 800210c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002112:	60fb      	str	r3, [r7, #12]
 8002114:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002116:	4a5b      	ldr	r2, [pc, #364]	; (8002284 <HAL_GPIO_Init+0x310>)
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	089b      	lsrs	r3, r3, #2
 800211c:	3302      	adds	r3, #2
 800211e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002122:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	f003 0303 	and.w	r3, r3, #3
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	220f      	movs	r2, #15
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	43db      	mvns	r3, r3
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	4013      	ands	r3, r2
 8002138:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a52      	ldr	r2, [pc, #328]	; (8002288 <HAL_GPIO_Init+0x314>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d02b      	beq.n	800219a <HAL_GPIO_Init+0x226>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a51      	ldr	r2, [pc, #324]	; (800228c <HAL_GPIO_Init+0x318>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d025      	beq.n	8002196 <HAL_GPIO_Init+0x222>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a50      	ldr	r2, [pc, #320]	; (8002290 <HAL_GPIO_Init+0x31c>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d01f      	beq.n	8002192 <HAL_GPIO_Init+0x21e>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a4f      	ldr	r2, [pc, #316]	; (8002294 <HAL_GPIO_Init+0x320>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d019      	beq.n	800218e <HAL_GPIO_Init+0x21a>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a4e      	ldr	r2, [pc, #312]	; (8002298 <HAL_GPIO_Init+0x324>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d013      	beq.n	800218a <HAL_GPIO_Init+0x216>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a4d      	ldr	r2, [pc, #308]	; (800229c <HAL_GPIO_Init+0x328>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d00d      	beq.n	8002186 <HAL_GPIO_Init+0x212>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a4c      	ldr	r2, [pc, #304]	; (80022a0 <HAL_GPIO_Init+0x32c>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d007      	beq.n	8002182 <HAL_GPIO_Init+0x20e>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a4b      	ldr	r2, [pc, #300]	; (80022a4 <HAL_GPIO_Init+0x330>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d101      	bne.n	800217e <HAL_GPIO_Init+0x20a>
 800217a:	2307      	movs	r3, #7
 800217c:	e00e      	b.n	800219c <HAL_GPIO_Init+0x228>
 800217e:	2308      	movs	r3, #8
 8002180:	e00c      	b.n	800219c <HAL_GPIO_Init+0x228>
 8002182:	2306      	movs	r3, #6
 8002184:	e00a      	b.n	800219c <HAL_GPIO_Init+0x228>
 8002186:	2305      	movs	r3, #5
 8002188:	e008      	b.n	800219c <HAL_GPIO_Init+0x228>
 800218a:	2304      	movs	r3, #4
 800218c:	e006      	b.n	800219c <HAL_GPIO_Init+0x228>
 800218e:	2303      	movs	r3, #3
 8002190:	e004      	b.n	800219c <HAL_GPIO_Init+0x228>
 8002192:	2302      	movs	r3, #2
 8002194:	e002      	b.n	800219c <HAL_GPIO_Init+0x228>
 8002196:	2301      	movs	r3, #1
 8002198:	e000      	b.n	800219c <HAL_GPIO_Init+0x228>
 800219a:	2300      	movs	r3, #0
 800219c:	69fa      	ldr	r2, [r7, #28]
 800219e:	f002 0203 	and.w	r2, r2, #3
 80021a2:	0092      	lsls	r2, r2, #2
 80021a4:	4093      	lsls	r3, r2
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021ac:	4935      	ldr	r1, [pc, #212]	; (8002284 <HAL_GPIO_Init+0x310>)
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	089b      	lsrs	r3, r3, #2
 80021b2:	3302      	adds	r3, #2
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021ba:	4b3b      	ldr	r3, [pc, #236]	; (80022a8 <HAL_GPIO_Init+0x334>)
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	43db      	mvns	r3, r3
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	4013      	ands	r3, r2
 80021c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d003      	beq.n	80021de <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	4313      	orrs	r3, r2
 80021dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021de:	4a32      	ldr	r2, [pc, #200]	; (80022a8 <HAL_GPIO_Init+0x334>)
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021e4:	4b30      	ldr	r3, [pc, #192]	; (80022a8 <HAL_GPIO_Init+0x334>)
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	43db      	mvns	r3, r3
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	4013      	ands	r3, r2
 80021f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d003      	beq.n	8002208 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	4313      	orrs	r3, r2
 8002206:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002208:	4a27      	ldr	r2, [pc, #156]	; (80022a8 <HAL_GPIO_Init+0x334>)
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800220e:	4b26      	ldr	r3, [pc, #152]	; (80022a8 <HAL_GPIO_Init+0x334>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	43db      	mvns	r3, r3
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	4013      	ands	r3, r2
 800221c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d003      	beq.n	8002232 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	4313      	orrs	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002232:	4a1d      	ldr	r2, [pc, #116]	; (80022a8 <HAL_GPIO_Init+0x334>)
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002238:	4b1b      	ldr	r3, [pc, #108]	; (80022a8 <HAL_GPIO_Init+0x334>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	43db      	mvns	r3, r3
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	4013      	ands	r3, r2
 8002246:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d003      	beq.n	800225c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	4313      	orrs	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800225c:	4a12      	ldr	r2, [pc, #72]	; (80022a8 <HAL_GPIO_Init+0x334>)
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	3301      	adds	r3, #1
 8002266:	61fb      	str	r3, [r7, #28]
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	2b0f      	cmp	r3, #15
 800226c:	f67f ae90 	bls.w	8001f90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002270:	bf00      	nop
 8002272:	bf00      	nop
 8002274:	3724      	adds	r7, #36	; 0x24
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	40023800 	.word	0x40023800
 8002284:	40013800 	.word	0x40013800
 8002288:	40020000 	.word	0x40020000
 800228c:	40020400 	.word	0x40020400
 8002290:	40020800 	.word	0x40020800
 8002294:	40020c00 	.word	0x40020c00
 8002298:	40021000 	.word	0x40021000
 800229c:	40021400 	.word	0x40021400
 80022a0:	40021800 	.word	0x40021800
 80022a4:	40021c00 	.word	0x40021c00
 80022a8:	40013c00 	.word	0x40013c00

080022ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	460b      	mov	r3, r1
 80022b6:	807b      	strh	r3, [r7, #2]
 80022b8:	4613      	mov	r3, r2
 80022ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022bc:	787b      	ldrb	r3, [r7, #1]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d003      	beq.n	80022ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022c2:	887a      	ldrh	r2, [r7, #2]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022c8:	e003      	b.n	80022d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022ca:	887b      	ldrh	r3, [r7, #2]
 80022cc:	041a      	lsls	r2, r3, #16
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	619a      	str	r2, [r3, #24]
}
 80022d2:	bf00      	nop
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
	...

080022e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b086      	sub	sp, #24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e267      	b.n	80027c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d075      	beq.n	80023ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022fe:	4b88      	ldr	r3, [pc, #544]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f003 030c 	and.w	r3, r3, #12
 8002306:	2b04      	cmp	r3, #4
 8002308:	d00c      	beq.n	8002324 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800230a:	4b85      	ldr	r3, [pc, #532]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002312:	2b08      	cmp	r3, #8
 8002314:	d112      	bne.n	800233c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002316:	4b82      	ldr	r3, [pc, #520]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800231e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002322:	d10b      	bne.n	800233c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002324:	4b7e      	ldr	r3, [pc, #504]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d05b      	beq.n	80023e8 <HAL_RCC_OscConfig+0x108>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d157      	bne.n	80023e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e242      	b.n	80027c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002344:	d106      	bne.n	8002354 <HAL_RCC_OscConfig+0x74>
 8002346:	4b76      	ldr	r3, [pc, #472]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a75      	ldr	r2, [pc, #468]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 800234c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002350:	6013      	str	r3, [r2, #0]
 8002352:	e01d      	b.n	8002390 <HAL_RCC_OscConfig+0xb0>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800235c:	d10c      	bne.n	8002378 <HAL_RCC_OscConfig+0x98>
 800235e:	4b70      	ldr	r3, [pc, #448]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a6f      	ldr	r2, [pc, #444]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 8002364:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002368:	6013      	str	r3, [r2, #0]
 800236a:	4b6d      	ldr	r3, [pc, #436]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a6c      	ldr	r2, [pc, #432]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 8002370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002374:	6013      	str	r3, [r2, #0]
 8002376:	e00b      	b.n	8002390 <HAL_RCC_OscConfig+0xb0>
 8002378:	4b69      	ldr	r3, [pc, #420]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a68      	ldr	r2, [pc, #416]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 800237e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002382:	6013      	str	r3, [r2, #0]
 8002384:	4b66      	ldr	r3, [pc, #408]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a65      	ldr	r2, [pc, #404]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 800238a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800238e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d013      	beq.n	80023c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002398:	f7ff fc6c 	bl	8001c74 <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800239e:	e008      	b.n	80023b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023a0:	f7ff fc68 	bl	8001c74 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b64      	cmp	r3, #100	; 0x64
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e207      	b.n	80027c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b2:	4b5b      	ldr	r3, [pc, #364]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d0f0      	beq.n	80023a0 <HAL_RCC_OscConfig+0xc0>
 80023be:	e014      	b.n	80023ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c0:	f7ff fc58 	bl	8001c74 <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023c8:	f7ff fc54 	bl	8001c74 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b64      	cmp	r3, #100	; 0x64
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e1f3      	b.n	80027c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023da:	4b51      	ldr	r3, [pc, #324]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1f0      	bne.n	80023c8 <HAL_RCC_OscConfig+0xe8>
 80023e6:	e000      	b.n	80023ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d063      	beq.n	80024be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023f6:	4b4a      	ldr	r3, [pc, #296]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f003 030c 	and.w	r3, r3, #12
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00b      	beq.n	800241a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002402:	4b47      	ldr	r3, [pc, #284]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800240a:	2b08      	cmp	r3, #8
 800240c:	d11c      	bne.n	8002448 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800240e:	4b44      	ldr	r3, [pc, #272]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d116      	bne.n	8002448 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800241a:	4b41      	ldr	r3, [pc, #260]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d005      	beq.n	8002432 <HAL_RCC_OscConfig+0x152>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d001      	beq.n	8002432 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e1c7      	b.n	80027c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002432:	4b3b      	ldr	r3, [pc, #236]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	4937      	ldr	r1, [pc, #220]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 8002442:	4313      	orrs	r3, r2
 8002444:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002446:	e03a      	b.n	80024be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d020      	beq.n	8002492 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002450:	4b34      	ldr	r3, [pc, #208]	; (8002524 <HAL_RCC_OscConfig+0x244>)
 8002452:	2201      	movs	r2, #1
 8002454:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002456:	f7ff fc0d 	bl	8001c74 <HAL_GetTick>
 800245a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800245c:	e008      	b.n	8002470 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800245e:	f7ff fc09 	bl	8001c74 <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	2b02      	cmp	r3, #2
 800246a:	d901      	bls.n	8002470 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e1a8      	b.n	80027c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002470:	4b2b      	ldr	r3, [pc, #172]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0302 	and.w	r3, r3, #2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d0f0      	beq.n	800245e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800247c:	4b28      	ldr	r3, [pc, #160]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	4925      	ldr	r1, [pc, #148]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 800248c:	4313      	orrs	r3, r2
 800248e:	600b      	str	r3, [r1, #0]
 8002490:	e015      	b.n	80024be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002492:	4b24      	ldr	r3, [pc, #144]	; (8002524 <HAL_RCC_OscConfig+0x244>)
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002498:	f7ff fbec 	bl	8001c74 <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024a0:	f7ff fbe8 	bl	8001c74 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e187      	b.n	80027c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024b2:	4b1b      	ldr	r3, [pc, #108]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1f0      	bne.n	80024a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0308 	and.w	r3, r3, #8
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d036      	beq.n	8002538 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	695b      	ldr	r3, [r3, #20]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d016      	beq.n	8002500 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024d2:	4b15      	ldr	r3, [pc, #84]	; (8002528 <HAL_RCC_OscConfig+0x248>)
 80024d4:	2201      	movs	r2, #1
 80024d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d8:	f7ff fbcc 	bl	8001c74 <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024e0:	f7ff fbc8 	bl	8001c74 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e167      	b.n	80027c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024f2:	4b0b      	ldr	r3, [pc, #44]	; (8002520 <HAL_RCC_OscConfig+0x240>)
 80024f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d0f0      	beq.n	80024e0 <HAL_RCC_OscConfig+0x200>
 80024fe:	e01b      	b.n	8002538 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002500:	4b09      	ldr	r3, [pc, #36]	; (8002528 <HAL_RCC_OscConfig+0x248>)
 8002502:	2200      	movs	r2, #0
 8002504:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002506:	f7ff fbb5 	bl	8001c74 <HAL_GetTick>
 800250a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800250c:	e00e      	b.n	800252c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800250e:	f7ff fbb1 	bl	8001c74 <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	2b02      	cmp	r3, #2
 800251a:	d907      	bls.n	800252c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e150      	b.n	80027c2 <HAL_RCC_OscConfig+0x4e2>
 8002520:	40023800 	.word	0x40023800
 8002524:	42470000 	.word	0x42470000
 8002528:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800252c:	4b88      	ldr	r3, [pc, #544]	; (8002750 <HAL_RCC_OscConfig+0x470>)
 800252e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d1ea      	bne.n	800250e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0304 	and.w	r3, r3, #4
 8002540:	2b00      	cmp	r3, #0
 8002542:	f000 8097 	beq.w	8002674 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002546:	2300      	movs	r3, #0
 8002548:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800254a:	4b81      	ldr	r3, [pc, #516]	; (8002750 <HAL_RCC_OscConfig+0x470>)
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d10f      	bne.n	8002576 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002556:	2300      	movs	r3, #0
 8002558:	60bb      	str	r3, [r7, #8]
 800255a:	4b7d      	ldr	r3, [pc, #500]	; (8002750 <HAL_RCC_OscConfig+0x470>)
 800255c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255e:	4a7c      	ldr	r2, [pc, #496]	; (8002750 <HAL_RCC_OscConfig+0x470>)
 8002560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002564:	6413      	str	r3, [r2, #64]	; 0x40
 8002566:	4b7a      	ldr	r3, [pc, #488]	; (8002750 <HAL_RCC_OscConfig+0x470>)
 8002568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800256e:	60bb      	str	r3, [r7, #8]
 8002570:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002572:	2301      	movs	r3, #1
 8002574:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002576:	4b77      	ldr	r3, [pc, #476]	; (8002754 <HAL_RCC_OscConfig+0x474>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800257e:	2b00      	cmp	r3, #0
 8002580:	d118      	bne.n	80025b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002582:	4b74      	ldr	r3, [pc, #464]	; (8002754 <HAL_RCC_OscConfig+0x474>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a73      	ldr	r2, [pc, #460]	; (8002754 <HAL_RCC_OscConfig+0x474>)
 8002588:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800258c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800258e:	f7ff fb71 	bl	8001c74 <HAL_GetTick>
 8002592:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002594:	e008      	b.n	80025a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002596:	f7ff fb6d 	bl	8001c74 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e10c      	b.n	80027c2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a8:	4b6a      	ldr	r3, [pc, #424]	; (8002754 <HAL_RCC_OscConfig+0x474>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d0f0      	beq.n	8002596 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d106      	bne.n	80025ca <HAL_RCC_OscConfig+0x2ea>
 80025bc:	4b64      	ldr	r3, [pc, #400]	; (8002750 <HAL_RCC_OscConfig+0x470>)
 80025be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c0:	4a63      	ldr	r2, [pc, #396]	; (8002750 <HAL_RCC_OscConfig+0x470>)
 80025c2:	f043 0301 	orr.w	r3, r3, #1
 80025c6:	6713      	str	r3, [r2, #112]	; 0x70
 80025c8:	e01c      	b.n	8002604 <HAL_RCC_OscConfig+0x324>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	2b05      	cmp	r3, #5
 80025d0:	d10c      	bne.n	80025ec <HAL_RCC_OscConfig+0x30c>
 80025d2:	4b5f      	ldr	r3, [pc, #380]	; (8002750 <HAL_RCC_OscConfig+0x470>)
 80025d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d6:	4a5e      	ldr	r2, [pc, #376]	; (8002750 <HAL_RCC_OscConfig+0x470>)
 80025d8:	f043 0304 	orr.w	r3, r3, #4
 80025dc:	6713      	str	r3, [r2, #112]	; 0x70
 80025de:	4b5c      	ldr	r3, [pc, #368]	; (8002750 <HAL_RCC_OscConfig+0x470>)
 80025e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e2:	4a5b      	ldr	r2, [pc, #364]	; (8002750 <HAL_RCC_OscConfig+0x470>)
 80025e4:	f043 0301 	orr.w	r3, r3, #1
 80025e8:	6713      	str	r3, [r2, #112]	; 0x70
 80025ea:	e00b      	b.n	8002604 <HAL_RCC_OscConfig+0x324>
 80025ec:	4b58      	ldr	r3, [pc, #352]	; (8002750 <HAL_RCC_OscConfig+0x470>)
 80025ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f0:	4a57      	ldr	r2, [pc, #348]	; (8002750 <HAL_RCC_OscConfig+0x470>)
 80025f2:	f023 0301 	bic.w	r3, r3, #1
 80025f6:	6713      	str	r3, [r2, #112]	; 0x70
 80025f8:	4b55      	ldr	r3, [pc, #340]	; (8002750 <HAL_RCC_OscConfig+0x470>)
 80025fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025fc:	4a54      	ldr	r2, [pc, #336]	; (8002750 <HAL_RCC_OscConfig+0x470>)
 80025fe:	f023 0304 	bic.w	r3, r3, #4
 8002602:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d015      	beq.n	8002638 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800260c:	f7ff fb32 	bl	8001c74 <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002612:	e00a      	b.n	800262a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002614:	f7ff fb2e 	bl	8001c74 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002622:	4293      	cmp	r3, r2
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e0cb      	b.n	80027c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800262a:	4b49      	ldr	r3, [pc, #292]	; (8002750 <HAL_RCC_OscConfig+0x470>)
 800262c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d0ee      	beq.n	8002614 <HAL_RCC_OscConfig+0x334>
 8002636:	e014      	b.n	8002662 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002638:	f7ff fb1c 	bl	8001c74 <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800263e:	e00a      	b.n	8002656 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002640:	f7ff fb18 	bl	8001c74 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	f241 3288 	movw	r2, #5000	; 0x1388
 800264e:	4293      	cmp	r3, r2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e0b5      	b.n	80027c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002656:	4b3e      	ldr	r3, [pc, #248]	; (8002750 <HAL_RCC_OscConfig+0x470>)
 8002658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1ee      	bne.n	8002640 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002662:	7dfb      	ldrb	r3, [r7, #23]
 8002664:	2b01      	cmp	r3, #1
 8002666:	d105      	bne.n	8002674 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002668:	4b39      	ldr	r3, [pc, #228]	; (8002750 <HAL_RCC_OscConfig+0x470>)
 800266a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266c:	4a38      	ldr	r2, [pc, #224]	; (8002750 <HAL_RCC_OscConfig+0x470>)
 800266e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002672:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	2b00      	cmp	r3, #0
 800267a:	f000 80a1 	beq.w	80027c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800267e:	4b34      	ldr	r3, [pc, #208]	; (8002750 <HAL_RCC_OscConfig+0x470>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f003 030c 	and.w	r3, r3, #12
 8002686:	2b08      	cmp	r3, #8
 8002688:	d05c      	beq.n	8002744 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	2b02      	cmp	r3, #2
 8002690:	d141      	bne.n	8002716 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002692:	4b31      	ldr	r3, [pc, #196]	; (8002758 <HAL_RCC_OscConfig+0x478>)
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002698:	f7ff faec 	bl	8001c74 <HAL_GetTick>
 800269c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800269e:	e008      	b.n	80026b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026a0:	f7ff fae8 	bl	8001c74 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e087      	b.n	80027c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026b2:	4b27      	ldr	r3, [pc, #156]	; (8002750 <HAL_RCC_OscConfig+0x470>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1f0      	bne.n	80026a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	69da      	ldr	r2, [r3, #28]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a1b      	ldr	r3, [r3, #32]
 80026c6:	431a      	orrs	r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026cc:	019b      	lsls	r3, r3, #6
 80026ce:	431a      	orrs	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d4:	085b      	lsrs	r3, r3, #1
 80026d6:	3b01      	subs	r3, #1
 80026d8:	041b      	lsls	r3, r3, #16
 80026da:	431a      	orrs	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e0:	061b      	lsls	r3, r3, #24
 80026e2:	491b      	ldr	r1, [pc, #108]	; (8002750 <HAL_RCC_OscConfig+0x470>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026e8:	4b1b      	ldr	r3, [pc, #108]	; (8002758 <HAL_RCC_OscConfig+0x478>)
 80026ea:	2201      	movs	r2, #1
 80026ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ee:	f7ff fac1 	bl	8001c74 <HAL_GetTick>
 80026f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026f4:	e008      	b.n	8002708 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026f6:	f7ff fabd 	bl	8001c74 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d901      	bls.n	8002708 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e05c      	b.n	80027c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002708:	4b11      	ldr	r3, [pc, #68]	; (8002750 <HAL_RCC_OscConfig+0x470>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d0f0      	beq.n	80026f6 <HAL_RCC_OscConfig+0x416>
 8002714:	e054      	b.n	80027c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002716:	4b10      	ldr	r3, [pc, #64]	; (8002758 <HAL_RCC_OscConfig+0x478>)
 8002718:	2200      	movs	r2, #0
 800271a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800271c:	f7ff faaa 	bl	8001c74 <HAL_GetTick>
 8002720:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002724:	f7ff faa6 	bl	8001c74 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b02      	cmp	r3, #2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e045      	b.n	80027c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002736:	4b06      	ldr	r3, [pc, #24]	; (8002750 <HAL_RCC_OscConfig+0x470>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1f0      	bne.n	8002724 <HAL_RCC_OscConfig+0x444>
 8002742:	e03d      	b.n	80027c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	2b01      	cmp	r3, #1
 800274a:	d107      	bne.n	800275c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e038      	b.n	80027c2 <HAL_RCC_OscConfig+0x4e2>
 8002750:	40023800 	.word	0x40023800
 8002754:	40007000 	.word	0x40007000
 8002758:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800275c:	4b1b      	ldr	r3, [pc, #108]	; (80027cc <HAL_RCC_OscConfig+0x4ec>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d028      	beq.n	80027bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002774:	429a      	cmp	r2, r3
 8002776:	d121      	bne.n	80027bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002782:	429a      	cmp	r2, r3
 8002784:	d11a      	bne.n	80027bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800278c:	4013      	ands	r3, r2
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002792:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002794:	4293      	cmp	r3, r2
 8002796:	d111      	bne.n	80027bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a2:	085b      	lsrs	r3, r3, #1
 80027a4:	3b01      	subs	r3, #1
 80027a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d107      	bne.n	80027bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d001      	beq.n	80027c0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e000      	b.n	80027c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3718      	adds	r7, #24
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	40023800 	.word	0x40023800

080027d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d101      	bne.n	80027e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e0cc      	b.n	800297e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027e4:	4b68      	ldr	r3, [pc, #416]	; (8002988 <HAL_RCC_ClockConfig+0x1b8>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0307 	and.w	r3, r3, #7
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d90c      	bls.n	800280c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027f2:	4b65      	ldr	r3, [pc, #404]	; (8002988 <HAL_RCC_ClockConfig+0x1b8>)
 80027f4:	683a      	ldr	r2, [r7, #0]
 80027f6:	b2d2      	uxtb	r2, r2
 80027f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027fa:	4b63      	ldr	r3, [pc, #396]	; (8002988 <HAL_RCC_ClockConfig+0x1b8>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0307 	and.w	r3, r3, #7
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	429a      	cmp	r2, r3
 8002806:	d001      	beq.n	800280c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e0b8      	b.n	800297e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0302 	and.w	r3, r3, #2
 8002814:	2b00      	cmp	r3, #0
 8002816:	d020      	beq.n	800285a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0304 	and.w	r3, r3, #4
 8002820:	2b00      	cmp	r3, #0
 8002822:	d005      	beq.n	8002830 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002824:	4b59      	ldr	r3, [pc, #356]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	4a58      	ldr	r2, [pc, #352]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 800282a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800282e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0308 	and.w	r3, r3, #8
 8002838:	2b00      	cmp	r3, #0
 800283a:	d005      	beq.n	8002848 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800283c:	4b53      	ldr	r3, [pc, #332]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	4a52      	ldr	r2, [pc, #328]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 8002842:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002846:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002848:	4b50      	ldr	r3, [pc, #320]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	494d      	ldr	r1, [pc, #308]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 8002856:	4313      	orrs	r3, r2
 8002858:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b00      	cmp	r3, #0
 8002864:	d044      	beq.n	80028f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d107      	bne.n	800287e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800286e:	4b47      	ldr	r3, [pc, #284]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d119      	bne.n	80028ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e07f      	b.n	800297e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	2b02      	cmp	r3, #2
 8002884:	d003      	beq.n	800288e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800288a:	2b03      	cmp	r3, #3
 800288c:	d107      	bne.n	800289e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800288e:	4b3f      	ldr	r3, [pc, #252]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d109      	bne.n	80028ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e06f      	b.n	800297e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800289e:	4b3b      	ldr	r3, [pc, #236]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d101      	bne.n	80028ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e067      	b.n	800297e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028ae:	4b37      	ldr	r3, [pc, #220]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f023 0203 	bic.w	r2, r3, #3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	4934      	ldr	r1, [pc, #208]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028c0:	f7ff f9d8 	bl	8001c74 <HAL_GetTick>
 80028c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028c6:	e00a      	b.n	80028de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028c8:	f7ff f9d4 	bl	8001c74 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d901      	bls.n	80028de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e04f      	b.n	800297e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028de:	4b2b      	ldr	r3, [pc, #172]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f003 020c 	and.w	r2, r3, #12
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d1eb      	bne.n	80028c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028f0:	4b25      	ldr	r3, [pc, #148]	; (8002988 <HAL_RCC_ClockConfig+0x1b8>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0307 	and.w	r3, r3, #7
 80028f8:	683a      	ldr	r2, [r7, #0]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d20c      	bcs.n	8002918 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028fe:	4b22      	ldr	r3, [pc, #136]	; (8002988 <HAL_RCC_ClockConfig+0x1b8>)
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	b2d2      	uxtb	r2, r2
 8002904:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002906:	4b20      	ldr	r3, [pc, #128]	; (8002988 <HAL_RCC_ClockConfig+0x1b8>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0307 	and.w	r3, r3, #7
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	429a      	cmp	r2, r3
 8002912:	d001      	beq.n	8002918 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e032      	b.n	800297e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0304 	and.w	r3, r3, #4
 8002920:	2b00      	cmp	r3, #0
 8002922:	d008      	beq.n	8002936 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002924:	4b19      	ldr	r3, [pc, #100]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	4916      	ldr	r1, [pc, #88]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 8002932:	4313      	orrs	r3, r2
 8002934:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0308 	and.w	r3, r3, #8
 800293e:	2b00      	cmp	r3, #0
 8002940:	d009      	beq.n	8002956 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002942:	4b12      	ldr	r3, [pc, #72]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	490e      	ldr	r1, [pc, #56]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 8002952:	4313      	orrs	r3, r2
 8002954:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002956:	f000 f821 	bl	800299c <HAL_RCC_GetSysClockFreq>
 800295a:	4602      	mov	r2, r0
 800295c:	4b0b      	ldr	r3, [pc, #44]	; (800298c <HAL_RCC_ClockConfig+0x1bc>)
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	091b      	lsrs	r3, r3, #4
 8002962:	f003 030f 	and.w	r3, r3, #15
 8002966:	490a      	ldr	r1, [pc, #40]	; (8002990 <HAL_RCC_ClockConfig+0x1c0>)
 8002968:	5ccb      	ldrb	r3, [r1, r3]
 800296a:	fa22 f303 	lsr.w	r3, r2, r3
 800296e:	4a09      	ldr	r2, [pc, #36]	; (8002994 <HAL_RCC_ClockConfig+0x1c4>)
 8002970:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002972:	4b09      	ldr	r3, [pc, #36]	; (8002998 <HAL_RCC_ClockConfig+0x1c8>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4618      	mov	r0, r3
 8002978:	f7fe fc5e 	bl	8001238 <HAL_InitTick>

  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	40023c00 	.word	0x40023c00
 800298c:	40023800 	.word	0x40023800
 8002990:	08008674 	.word	0x08008674
 8002994:	20000010 	.word	0x20000010
 8002998:	20000018 	.word	0x20000018

0800299c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800299c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029a0:	b094      	sub	sp, #80	; 0x50
 80029a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80029a4:	2300      	movs	r3, #0
 80029a6:	647b      	str	r3, [r7, #68]	; 0x44
 80029a8:	2300      	movs	r3, #0
 80029aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029ac:	2300      	movs	r3, #0
 80029ae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80029b0:	2300      	movs	r3, #0
 80029b2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029b4:	4b79      	ldr	r3, [pc, #484]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x200>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f003 030c 	and.w	r3, r3, #12
 80029bc:	2b08      	cmp	r3, #8
 80029be:	d00d      	beq.n	80029dc <HAL_RCC_GetSysClockFreq+0x40>
 80029c0:	2b08      	cmp	r3, #8
 80029c2:	f200 80e1 	bhi.w	8002b88 <HAL_RCC_GetSysClockFreq+0x1ec>
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d002      	beq.n	80029d0 <HAL_RCC_GetSysClockFreq+0x34>
 80029ca:	2b04      	cmp	r3, #4
 80029cc:	d003      	beq.n	80029d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80029ce:	e0db      	b.n	8002b88 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029d0:	4b73      	ldr	r3, [pc, #460]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x204>)
 80029d2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80029d4:	e0db      	b.n	8002b8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029d6:	4b73      	ldr	r3, [pc, #460]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x208>)
 80029d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029da:	e0d8      	b.n	8002b8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029dc:	4b6f      	ldr	r3, [pc, #444]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x200>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029e4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029e6:	4b6d      	ldr	r3, [pc, #436]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x200>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d063      	beq.n	8002aba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029f2:	4b6a      	ldr	r3, [pc, #424]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x200>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	099b      	lsrs	r3, r3, #6
 80029f8:	2200      	movs	r2, #0
 80029fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80029fc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80029fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a04:	633b      	str	r3, [r7, #48]	; 0x30
 8002a06:	2300      	movs	r3, #0
 8002a08:	637b      	str	r3, [r7, #52]	; 0x34
 8002a0a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002a0e:	4622      	mov	r2, r4
 8002a10:	462b      	mov	r3, r5
 8002a12:	f04f 0000 	mov.w	r0, #0
 8002a16:	f04f 0100 	mov.w	r1, #0
 8002a1a:	0159      	lsls	r1, r3, #5
 8002a1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a20:	0150      	lsls	r0, r2, #5
 8002a22:	4602      	mov	r2, r0
 8002a24:	460b      	mov	r3, r1
 8002a26:	4621      	mov	r1, r4
 8002a28:	1a51      	subs	r1, r2, r1
 8002a2a:	6139      	str	r1, [r7, #16]
 8002a2c:	4629      	mov	r1, r5
 8002a2e:	eb63 0301 	sbc.w	r3, r3, r1
 8002a32:	617b      	str	r3, [r7, #20]
 8002a34:	f04f 0200 	mov.w	r2, #0
 8002a38:	f04f 0300 	mov.w	r3, #0
 8002a3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a40:	4659      	mov	r1, fp
 8002a42:	018b      	lsls	r3, r1, #6
 8002a44:	4651      	mov	r1, sl
 8002a46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a4a:	4651      	mov	r1, sl
 8002a4c:	018a      	lsls	r2, r1, #6
 8002a4e:	4651      	mov	r1, sl
 8002a50:	ebb2 0801 	subs.w	r8, r2, r1
 8002a54:	4659      	mov	r1, fp
 8002a56:	eb63 0901 	sbc.w	r9, r3, r1
 8002a5a:	f04f 0200 	mov.w	r2, #0
 8002a5e:	f04f 0300 	mov.w	r3, #0
 8002a62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a6e:	4690      	mov	r8, r2
 8002a70:	4699      	mov	r9, r3
 8002a72:	4623      	mov	r3, r4
 8002a74:	eb18 0303 	adds.w	r3, r8, r3
 8002a78:	60bb      	str	r3, [r7, #8]
 8002a7a:	462b      	mov	r3, r5
 8002a7c:	eb49 0303 	adc.w	r3, r9, r3
 8002a80:	60fb      	str	r3, [r7, #12]
 8002a82:	f04f 0200 	mov.w	r2, #0
 8002a86:	f04f 0300 	mov.w	r3, #0
 8002a8a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002a8e:	4629      	mov	r1, r5
 8002a90:	024b      	lsls	r3, r1, #9
 8002a92:	4621      	mov	r1, r4
 8002a94:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a98:	4621      	mov	r1, r4
 8002a9a:	024a      	lsls	r2, r1, #9
 8002a9c:	4610      	mov	r0, r2
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002aa6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002aa8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002aac:	f7fd fbf8 	bl	80002a0 <__aeabi_uldivmod>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ab8:	e058      	b.n	8002b6c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aba:	4b38      	ldr	r3, [pc, #224]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x200>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	099b      	lsrs	r3, r3, #6
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	4611      	mov	r1, r2
 8002ac6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002aca:	623b      	str	r3, [r7, #32]
 8002acc:	2300      	movs	r3, #0
 8002ace:	627b      	str	r3, [r7, #36]	; 0x24
 8002ad0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ad4:	4642      	mov	r2, r8
 8002ad6:	464b      	mov	r3, r9
 8002ad8:	f04f 0000 	mov.w	r0, #0
 8002adc:	f04f 0100 	mov.w	r1, #0
 8002ae0:	0159      	lsls	r1, r3, #5
 8002ae2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ae6:	0150      	lsls	r0, r2, #5
 8002ae8:	4602      	mov	r2, r0
 8002aea:	460b      	mov	r3, r1
 8002aec:	4641      	mov	r1, r8
 8002aee:	ebb2 0a01 	subs.w	sl, r2, r1
 8002af2:	4649      	mov	r1, r9
 8002af4:	eb63 0b01 	sbc.w	fp, r3, r1
 8002af8:	f04f 0200 	mov.w	r2, #0
 8002afc:	f04f 0300 	mov.w	r3, #0
 8002b00:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b04:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b08:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b0c:	ebb2 040a 	subs.w	r4, r2, sl
 8002b10:	eb63 050b 	sbc.w	r5, r3, fp
 8002b14:	f04f 0200 	mov.w	r2, #0
 8002b18:	f04f 0300 	mov.w	r3, #0
 8002b1c:	00eb      	lsls	r3, r5, #3
 8002b1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b22:	00e2      	lsls	r2, r4, #3
 8002b24:	4614      	mov	r4, r2
 8002b26:	461d      	mov	r5, r3
 8002b28:	4643      	mov	r3, r8
 8002b2a:	18e3      	adds	r3, r4, r3
 8002b2c:	603b      	str	r3, [r7, #0]
 8002b2e:	464b      	mov	r3, r9
 8002b30:	eb45 0303 	adc.w	r3, r5, r3
 8002b34:	607b      	str	r3, [r7, #4]
 8002b36:	f04f 0200 	mov.w	r2, #0
 8002b3a:	f04f 0300 	mov.w	r3, #0
 8002b3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b42:	4629      	mov	r1, r5
 8002b44:	028b      	lsls	r3, r1, #10
 8002b46:	4621      	mov	r1, r4
 8002b48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b4c:	4621      	mov	r1, r4
 8002b4e:	028a      	lsls	r2, r1, #10
 8002b50:	4610      	mov	r0, r2
 8002b52:	4619      	mov	r1, r3
 8002b54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b56:	2200      	movs	r2, #0
 8002b58:	61bb      	str	r3, [r7, #24]
 8002b5a:	61fa      	str	r2, [r7, #28]
 8002b5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b60:	f7fd fb9e 	bl	80002a0 <__aeabi_uldivmod>
 8002b64:	4602      	mov	r2, r0
 8002b66:	460b      	mov	r3, r1
 8002b68:	4613      	mov	r3, r2
 8002b6a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b6c:	4b0b      	ldr	r3, [pc, #44]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x200>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	0c1b      	lsrs	r3, r3, #16
 8002b72:	f003 0303 	and.w	r3, r3, #3
 8002b76:	3301      	adds	r3, #1
 8002b78:	005b      	lsls	r3, r3, #1
 8002b7a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002b7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b84:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b86:	e002      	b.n	8002b8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b88:	4b05      	ldr	r3, [pc, #20]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b8a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3750      	adds	r7, #80	; 0x50
 8002b94:	46bd      	mov	sp, r7
 8002b96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b9a:	bf00      	nop
 8002b9c:	40023800 	.word	0x40023800
 8002ba0:	00f42400 	.word	0x00f42400
 8002ba4:	007a1200 	.word	0x007a1200

08002ba8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bac:	4b03      	ldr	r3, [pc, #12]	; (8002bbc <HAL_RCC_GetHCLKFreq+0x14>)
 8002bae:	681b      	ldr	r3, [r3, #0]
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	20000010 	.word	0x20000010

08002bc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002bc4:	f7ff fff0 	bl	8002ba8 <HAL_RCC_GetHCLKFreq>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	4b05      	ldr	r3, [pc, #20]	; (8002be0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	0a9b      	lsrs	r3, r3, #10
 8002bd0:	f003 0307 	and.w	r3, r3, #7
 8002bd4:	4903      	ldr	r1, [pc, #12]	; (8002be4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bd6:	5ccb      	ldrb	r3, [r1, r3]
 8002bd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	40023800 	.word	0x40023800
 8002be4:	08008684 	.word	0x08008684

08002be8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002bec:	f7ff ffdc 	bl	8002ba8 <HAL_RCC_GetHCLKFreq>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	4b05      	ldr	r3, [pc, #20]	; (8002c08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	0b5b      	lsrs	r3, r3, #13
 8002bf8:	f003 0307 	and.w	r3, r3, #7
 8002bfc:	4903      	ldr	r1, [pc, #12]	; (8002c0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bfe:	5ccb      	ldrb	r3, [r1, r3]
 8002c00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	40023800 	.word	0x40023800
 8002c0c:	08008684 	.word	0x08008684

08002c10 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	220f      	movs	r2, #15
 8002c1e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002c20:	4b12      	ldr	r3, [pc, #72]	; (8002c6c <HAL_RCC_GetClockConfig+0x5c>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f003 0203 	and.w	r2, r3, #3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002c2c:	4b0f      	ldr	r3, [pc, #60]	; (8002c6c <HAL_RCC_GetClockConfig+0x5c>)
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002c38:	4b0c      	ldr	r3, [pc, #48]	; (8002c6c <HAL_RCC_GetClockConfig+0x5c>)
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002c44:	4b09      	ldr	r3, [pc, #36]	; (8002c6c <HAL_RCC_GetClockConfig+0x5c>)
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	08db      	lsrs	r3, r3, #3
 8002c4a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002c52:	4b07      	ldr	r3, [pc, #28]	; (8002c70 <HAL_RCC_GetClockConfig+0x60>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0207 	and.w	r2, r3, #7
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	601a      	str	r2, [r3, #0]
}
 8002c5e:	bf00      	nop
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	40023800 	.word	0x40023800
 8002c70:	40023c00 	.word	0x40023c00

08002c74 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002c80:	2300      	movs	r3, #0
 8002c82:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d105      	bne.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d035      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002c9c:	4b62      	ldr	r3, [pc, #392]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ca2:	f7fe ffe7 	bl	8001c74 <HAL_GetTick>
 8002ca6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ca8:	e008      	b.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002caa:	f7fe ffe3 	bl	8001c74 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e0b0      	b.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002cbc:	4b5b      	ldr	r3, [pc, #364]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d1f0      	bne.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	019a      	lsls	r2, r3, #6
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	071b      	lsls	r3, r3, #28
 8002cd4:	4955      	ldr	r1, [pc, #340]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002cdc:	4b52      	ldr	r3, [pc, #328]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002cde:	2201      	movs	r2, #1
 8002ce0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ce2:	f7fe ffc7 	bl	8001c74 <HAL_GetTick>
 8002ce6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ce8:	e008      	b.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002cea:	f7fe ffc3 	bl	8001c74 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d901      	bls.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e090      	b.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002cfc:	4b4b      	ldr	r3, [pc, #300]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d0f0      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f000 8083 	beq.w	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d16:	2300      	movs	r3, #0
 8002d18:	60fb      	str	r3, [r7, #12]
 8002d1a:	4b44      	ldr	r3, [pc, #272]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1e:	4a43      	ldr	r2, [pc, #268]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d24:	6413      	str	r3, [r2, #64]	; 0x40
 8002d26:	4b41      	ldr	r3, [pc, #260]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d2e:	60fb      	str	r3, [r7, #12]
 8002d30:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002d32:	4b3f      	ldr	r3, [pc, #252]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a3e      	ldr	r2, [pc, #248]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002d38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d3c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002d3e:	f7fe ff99 	bl	8001c74 <HAL_GetTick>
 8002d42:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002d44:	e008      	b.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002d46:	f7fe ff95 	bl	8001c74 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d901      	bls.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e062      	b.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002d58:	4b35      	ldr	r3, [pc, #212]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d0f0      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d64:	4b31      	ldr	r3, [pc, #196]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d6c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d02f      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d028      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d82:	4b2a      	ldr	r3, [pc, #168]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d8a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d8c:	4b29      	ldr	r3, [pc, #164]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002d8e:	2201      	movs	r2, #1
 8002d90:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d92:	4b28      	ldr	r3, [pc, #160]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002d98:	4a24      	ldr	r2, [pc, #144]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002d9e:	4b23      	ldr	r3, [pc, #140]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d114      	bne.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002daa:	f7fe ff63 	bl	8001c74 <HAL_GetTick>
 8002dae:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002db0:	e00a      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002db2:	f7fe ff5f 	bl	8001c74 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d901      	bls.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e02a      	b.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dc8:	4b18      	ldr	r3, [pc, #96]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dcc:	f003 0302 	and.w	r3, r3, #2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d0ee      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ddc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002de0:	d10d      	bne.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002de2:	4b12      	ldr	r3, [pc, #72]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002df2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002df6:	490d      	ldr	r1, [pc, #52]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	608b      	str	r3, [r1, #8]
 8002dfc:	e005      	b.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002dfe:	4b0b      	ldr	r3, [pc, #44]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	4a0a      	ldr	r2, [pc, #40]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e04:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002e08:	6093      	str	r3, [r2, #8]
 8002e0a:	4b08      	ldr	r3, [pc, #32]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e0c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e16:	4905      	ldr	r1, [pc, #20]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3718      	adds	r7, #24
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	42470068 	.word	0x42470068
 8002e2c:	40023800 	.word	0x40023800
 8002e30:	40007000 	.word	0x40007000
 8002e34:	42470e40 	.word	0x42470e40

08002e38 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e066      	b.n	8002f1c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	7f5b      	ldrb	r3, [r3, #29]
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d105      	bne.n	8002e64 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f7fe f970 	bl	8001144 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2202      	movs	r2, #2
 8002e68:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	22ca      	movs	r2, #202	; 0xca
 8002e70:	625a      	str	r2, [r3, #36]	; 0x24
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2253      	movs	r2, #83	; 0x53
 8002e78:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 fa45 	bl	800330a <RTC_EnterInitMode>
 8002e80:	4603      	mov	r3, r0
 8002e82:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002e84:	7bfb      	ldrb	r3, [r7, #15]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d12c      	bne.n	8002ee4 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	6812      	ldr	r2, [r2, #0]
 8002e94:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002e98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e9c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	6899      	ldr	r1, [r3, #8]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685a      	ldr	r2, [r3, #4]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	691b      	ldr	r3, [r3, #16]
 8002eac:	431a      	orrs	r2, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	431a      	orrs	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	68d2      	ldr	r2, [r2, #12]
 8002ec4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	6919      	ldr	r1, [r3, #16]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	041a      	lsls	r2, r3, #16
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f000 fa4c 	bl	8003378 <RTC_ExitInitMode>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002ee4:	7bfb      	ldrb	r3, [r7, #15]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d113      	bne.n	8002f12 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002ef8:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	699a      	ldr	r2, [r3, #24]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	22ff      	movs	r2, #255	; 0xff
 8002f18:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8002f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3710      	adds	r7, #16
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002f24:	b590      	push	{r4, r7, lr}
 8002f26:	b087      	sub	sp, #28
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002f30:	2300      	movs	r3, #0
 8002f32:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	7f1b      	ldrb	r3, [r3, #28]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d101      	bne.n	8002f40 <HAL_RTC_SetTime+0x1c>
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	e087      	b.n	8003050 <HAL_RTC_SetTime+0x12c>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2201      	movs	r2, #1
 8002f44:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2202      	movs	r2, #2
 8002f4a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d126      	bne.n	8002fa0 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d102      	bne.n	8002f66 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	2200      	movs	r2, #0
 8002f64:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f000 fa29 	bl	80033c2 <RTC_ByteToBcd2>
 8002f70:	4603      	mov	r3, r0
 8002f72:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	785b      	ldrb	r3, [r3, #1]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f000 fa22 	bl	80033c2 <RTC_ByteToBcd2>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002f82:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	789b      	ldrb	r3, [r3, #2]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f000 fa1a 	bl	80033c2 <RTC_ByteToBcd2>
 8002f8e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002f90:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	78db      	ldrb	r3, [r3, #3]
 8002f98:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	617b      	str	r3, [r7, #20]
 8002f9e:	e018      	b.n	8002fd2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d102      	bne.n	8002fb4 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	785b      	ldrb	r3, [r3, #1]
 8002fbe:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002fc0:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8002fc2:	68ba      	ldr	r2, [r7, #8]
 8002fc4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002fc6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	78db      	ldrb	r3, [r3, #3]
 8002fcc:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	22ca      	movs	r2, #202	; 0xca
 8002fd8:	625a      	str	r2, [r3, #36]	; 0x24
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2253      	movs	r2, #83	; 0x53
 8002fe0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002fe2:	68f8      	ldr	r0, [r7, #12]
 8002fe4:	f000 f991 	bl	800330a <RTC_EnterInitMode>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002fec:	7cfb      	ldrb	r3, [r7, #19]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d120      	bne.n	8003034 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002ffc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003000:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	689a      	ldr	r2, [r3, #8]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003010:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	6899      	ldr	r1, [r3, #8]
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	68da      	ldr	r2, [r3, #12]
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	691b      	ldr	r3, [r3, #16]
 8003020:	431a      	orrs	r2, r3
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	430a      	orrs	r2, r1
 8003028:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	f000 f9a4 	bl	8003378 <RTC_ExitInitMode>
 8003030:	4603      	mov	r3, r0
 8003032:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003034:	7cfb      	ldrb	r3, [r7, #19]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d102      	bne.n	8003040 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2201      	movs	r2, #1
 800303e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	22ff      	movs	r2, #255	; 0xff
 8003046:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2200      	movs	r2, #0
 800304c:	771a      	strb	r2, [r3, #28]

  return status;
 800304e:	7cfb      	ldrb	r3, [r7, #19]
}
 8003050:	4618      	mov	r0, r3
 8003052:	371c      	adds	r7, #28
 8003054:	46bd      	mov	sp, r7
 8003056:	bd90      	pop	{r4, r7, pc}

08003058 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b086      	sub	sp, #24
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003064:	2300      	movs	r3, #0
 8003066:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	691b      	ldr	r3, [r3, #16]
 8003078:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800308a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800308e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	0c1b      	lsrs	r3, r3, #16
 8003094:	b2db      	uxtb	r3, r3
 8003096:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800309a:	b2da      	uxtb	r2, r3
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	0a1b      	lsrs	r3, r3, #8
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030aa:	b2da      	uxtb	r2, r3
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030b8:	b2da      	uxtb	r2, r3
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	0d9b      	lsrs	r3, r3, #22
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	f003 0301 	and.w	r3, r3, #1
 80030c8:	b2da      	uxtb	r2, r3
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d11a      	bne.n	800310a <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	4618      	mov	r0, r3
 80030da:	f000 f98f 	bl	80033fc <RTC_Bcd2ToByte>
 80030de:	4603      	mov	r3, r0
 80030e0:	461a      	mov	r2, r3
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	785b      	ldrb	r3, [r3, #1]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f000 f986 	bl	80033fc <RTC_Bcd2ToByte>
 80030f0:	4603      	mov	r3, r0
 80030f2:	461a      	mov	r2, r3
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	789b      	ldrb	r3, [r3, #2]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f000 f97d 	bl	80033fc <RTC_Bcd2ToByte>
 8003102:	4603      	mov	r3, r0
 8003104:	461a      	mov	r2, r3
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800310a:	2300      	movs	r3, #0
}
 800310c:	4618      	mov	r0, r3
 800310e:	3718      	adds	r7, #24
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003114:	b590      	push	{r4, r7, lr}
 8003116:	b087      	sub	sp, #28
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003120:	2300      	movs	r3, #0
 8003122:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	7f1b      	ldrb	r3, [r3, #28]
 8003128:	2b01      	cmp	r3, #1
 800312a:	d101      	bne.n	8003130 <HAL_RTC_SetDate+0x1c>
 800312c:	2302      	movs	r3, #2
 800312e:	e071      	b.n	8003214 <HAL_RTC_SetDate+0x100>
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2201      	movs	r2, #1
 8003134:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2202      	movs	r2, #2
 800313a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d10e      	bne.n	8003160 <HAL_RTC_SetDate+0x4c>
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	785b      	ldrb	r3, [r3, #1]
 8003146:	f003 0310 	and.w	r3, r3, #16
 800314a:	2b00      	cmp	r3, #0
 800314c:	d008      	beq.n	8003160 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	785b      	ldrb	r3, [r3, #1]
 8003152:	f023 0310 	bic.w	r3, r3, #16
 8003156:	b2db      	uxtb	r3, r3
 8003158:	330a      	adds	r3, #10
 800315a:	b2da      	uxtb	r2, r3
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d11c      	bne.n	80031a0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	78db      	ldrb	r3, [r3, #3]
 800316a:	4618      	mov	r0, r3
 800316c:	f000 f929 	bl	80033c2 <RTC_ByteToBcd2>
 8003170:	4603      	mov	r3, r0
 8003172:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	785b      	ldrb	r3, [r3, #1]
 8003178:	4618      	mov	r0, r3
 800317a:	f000 f922 	bl	80033c2 <RTC_ByteToBcd2>
 800317e:	4603      	mov	r3, r0
 8003180:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003182:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	789b      	ldrb	r3, [r3, #2]
 8003188:	4618      	mov	r0, r3
 800318a:	f000 f91a 	bl	80033c2 <RTC_ByteToBcd2>
 800318e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003190:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800319a:	4313      	orrs	r3, r2
 800319c:	617b      	str	r3, [r7, #20]
 800319e:	e00e      	b.n	80031be <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	78db      	ldrb	r3, [r3, #3]
 80031a4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	785b      	ldrb	r3, [r3, #1]
 80031aa:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80031ac:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80031ae:	68ba      	ldr	r2, [r7, #8]
 80031b0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80031b2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80031ba:	4313      	orrs	r3, r2
 80031bc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	22ca      	movs	r2, #202	; 0xca
 80031c4:	625a      	str	r2, [r3, #36]	; 0x24
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2253      	movs	r2, #83	; 0x53
 80031cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80031ce:	68f8      	ldr	r0, [r7, #12]
 80031d0:	f000 f89b 	bl	800330a <RTC_EnterInitMode>
 80031d4:	4603      	mov	r3, r0
 80031d6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80031d8:	7cfb      	ldrb	r3, [r7, #19]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d10c      	bne.n	80031f8 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80031e8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80031ec:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f000 f8c2 	bl	8003378 <RTC_ExitInitMode>
 80031f4:	4603      	mov	r3, r0
 80031f6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80031f8:	7cfb      	ldrb	r3, [r7, #19]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d102      	bne.n	8003204 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2201      	movs	r2, #1
 8003202:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	22ff      	movs	r2, #255	; 0xff
 800320a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	771a      	strb	r2, [r3, #28]

  return status;
 8003212:	7cfb      	ldrb	r3, [r7, #19]
}
 8003214:	4618      	mov	r0, r3
 8003216:	371c      	adds	r7, #28
 8003218:	46bd      	mov	sp, r7
 800321a:	bd90      	pop	{r4, r7, pc}

0800321c <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003228:	2300      	movs	r3, #0
 800322a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003236:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800323a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	0c1b      	lsrs	r3, r3, #16
 8003240:	b2da      	uxtb	r2, r3
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	0a1b      	lsrs	r3, r3, #8
 800324a:	b2db      	uxtb	r3, r3
 800324c:	f003 031f 	and.w	r3, r3, #31
 8003250:	b2da      	uxtb	r2, r3
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	b2db      	uxtb	r3, r3
 800325a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800325e:	b2da      	uxtb	r2, r3
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	0b5b      	lsrs	r3, r3, #13
 8003268:	b2db      	uxtb	r3, r3
 800326a:	f003 0307 	and.w	r3, r3, #7
 800326e:	b2da      	uxtb	r2, r3
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d11a      	bne.n	80032b0 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	78db      	ldrb	r3, [r3, #3]
 800327e:	4618      	mov	r0, r3
 8003280:	f000 f8bc 	bl	80033fc <RTC_Bcd2ToByte>
 8003284:	4603      	mov	r3, r0
 8003286:	461a      	mov	r2, r3
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	785b      	ldrb	r3, [r3, #1]
 8003290:	4618      	mov	r0, r3
 8003292:	f000 f8b3 	bl	80033fc <RTC_Bcd2ToByte>
 8003296:	4603      	mov	r3, r0
 8003298:	461a      	mov	r2, r3
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	789b      	ldrb	r3, [r3, #2]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f000 f8aa 	bl	80033fc <RTC_Bcd2ToByte>
 80032a8:	4603      	mov	r3, r0
 80032aa:	461a      	mov	r2, r3
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3718      	adds	r7, #24
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}

080032ba <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80032ba:	b580      	push	{r7, lr}
 80032bc:	b084      	sub	sp, #16
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032c2:	2300      	movs	r3, #0
 80032c4:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68da      	ldr	r2, [r3, #12]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80032d4:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032d6:	f7fe fccd 	bl	8001c74 <HAL_GetTick>
 80032da:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80032dc:	e009      	b.n	80032f2 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80032de:	f7fe fcc9 	bl	8001c74 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032ec:	d901      	bls.n	80032f2 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e007      	b.n	8003302 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	f003 0320 	and.w	r3, r3, #32
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d0ee      	beq.n	80032de <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3710      	adds	r7, #16
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}

0800330a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800330a:	b580      	push	{r7, lr}
 800330c:	b084      	sub	sp, #16
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003312:	2300      	movs	r3, #0
 8003314:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003316:	2300      	movs	r3, #0
 8003318:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003324:	2b00      	cmp	r3, #0
 8003326:	d122      	bne.n	800336e <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68da      	ldr	r2, [r3, #12]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003336:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003338:	f7fe fc9c 	bl	8001c74 <HAL_GetTick>
 800333c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800333e:	e00c      	b.n	800335a <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003340:	f7fe fc98 	bl	8001c74 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800334e:	d904      	bls.n	800335a <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2204      	movs	r2, #4
 8003354:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003364:	2b00      	cmp	r3, #0
 8003366:	d102      	bne.n	800336e <RTC_EnterInitMode+0x64>
 8003368:	7bfb      	ldrb	r3, [r7, #15]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d1e8      	bne.n	8003340 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800336e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003370:	4618      	mov	r0, r3
 8003372:	3710      	adds	r7, #16
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003380:	2300      	movs	r3, #0
 8003382:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68da      	ldr	r2, [r3, #12]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003392:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f003 0320 	and.w	r3, r3, #32
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d10a      	bne.n	80033b8 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f7ff ff89 	bl	80032ba <HAL_RTC_WaitForSynchro>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d004      	beq.n	80033b8 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2204      	movs	r2, #4
 80033b2:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80033b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80033c2:	b480      	push	{r7}
 80033c4:	b085      	sub	sp, #20
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	4603      	mov	r3, r0
 80033ca:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80033cc:	2300      	movs	r3, #0
 80033ce:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80033d0:	e005      	b.n	80033de <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80033d2:	7bfb      	ldrb	r3, [r7, #15]
 80033d4:	3301      	adds	r3, #1
 80033d6:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80033d8:	79fb      	ldrb	r3, [r7, #7]
 80033da:	3b0a      	subs	r3, #10
 80033dc:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80033de:	79fb      	ldrb	r3, [r7, #7]
 80033e0:	2b09      	cmp	r3, #9
 80033e2:	d8f6      	bhi.n	80033d2 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80033e4:	7bfb      	ldrb	r3, [r7, #15]
 80033e6:	011b      	lsls	r3, r3, #4
 80033e8:	b2da      	uxtb	r2, r3
 80033ea:	79fb      	ldrb	r3, [r7, #7]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	b2db      	uxtb	r3, r3
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3714      	adds	r7, #20
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr

080033fc <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
 8003402:	4603      	mov	r3, r0
 8003404:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8003406:	2300      	movs	r3, #0
 8003408:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800340a:	79fb      	ldrb	r3, [r7, #7]
 800340c:	091b      	lsrs	r3, r3, #4
 800340e:	b2db      	uxtb	r3, r3
 8003410:	461a      	mov	r2, r3
 8003412:	0092      	lsls	r2, r2, #2
 8003414:	4413      	add	r3, r2
 8003416:	005b      	lsls	r3, r3, #1
 8003418:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800341a:	79fb      	ldrb	r3, [r7, #7]
 800341c:	f003 030f 	and.w	r3, r3, #15
 8003420:	b2da      	uxtb	r2, r3
 8003422:	7bfb      	ldrb	r3, [r7, #15]
 8003424:	4413      	add	r3, r2
 8003426:	b2db      	uxtb	r3, r3
}
 8003428:	4618      	mov	r0, r3
 800342a:	3714      	adds	r7, #20
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d101      	bne.n	8003446 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e041      	b.n	80034ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b00      	cmp	r3, #0
 8003450:	d106      	bne.n	8003460 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 f839 	bl	80034d2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2202      	movs	r2, #2
 8003464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	3304      	adds	r3, #4
 8003470:	4619      	mov	r1, r3
 8003472:	4610      	mov	r0, r2
 8003474:	f000 f9d8 	bl	8003828 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3708      	adds	r7, #8
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80034d2:	b480      	push	{r7}
 80034d4:	b083      	sub	sp, #12
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80034da:	bf00      	nop
 80034dc:	370c      	adds	r7, #12
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
	...

080034e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d001      	beq.n	8003500 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e04e      	b.n	800359e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2202      	movs	r2, #2
 8003504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68da      	ldr	r2, [r3, #12]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f042 0201 	orr.w	r2, r2, #1
 8003516:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a23      	ldr	r2, [pc, #140]	; (80035ac <HAL_TIM_Base_Start_IT+0xc4>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d022      	beq.n	8003568 <HAL_TIM_Base_Start_IT+0x80>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800352a:	d01d      	beq.n	8003568 <HAL_TIM_Base_Start_IT+0x80>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a1f      	ldr	r2, [pc, #124]	; (80035b0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d018      	beq.n	8003568 <HAL_TIM_Base_Start_IT+0x80>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a1e      	ldr	r2, [pc, #120]	; (80035b4 <HAL_TIM_Base_Start_IT+0xcc>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d013      	beq.n	8003568 <HAL_TIM_Base_Start_IT+0x80>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a1c      	ldr	r2, [pc, #112]	; (80035b8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d00e      	beq.n	8003568 <HAL_TIM_Base_Start_IT+0x80>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a1b      	ldr	r2, [pc, #108]	; (80035bc <HAL_TIM_Base_Start_IT+0xd4>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d009      	beq.n	8003568 <HAL_TIM_Base_Start_IT+0x80>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a19      	ldr	r2, [pc, #100]	; (80035c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d004      	beq.n	8003568 <HAL_TIM_Base_Start_IT+0x80>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a18      	ldr	r2, [pc, #96]	; (80035c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d111      	bne.n	800358c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f003 0307 	and.w	r3, r3, #7
 8003572:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2b06      	cmp	r3, #6
 8003578:	d010      	beq.n	800359c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f042 0201 	orr.w	r2, r2, #1
 8003588:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800358a:	e007      	b.n	800359c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f042 0201 	orr.w	r2, r2, #1
 800359a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3714      	adds	r7, #20
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	40010000 	.word	0x40010000
 80035b0:	40000400 	.word	0x40000400
 80035b4:	40000800 	.word	0x40000800
 80035b8:	40000c00 	.word	0x40000c00
 80035bc:	40010400 	.word	0x40010400
 80035c0:	40014000 	.word	0x40014000
 80035c4:	40001800 	.word	0x40001800

080035c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d122      	bne.n	8003624 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	f003 0302 	and.w	r3, r3, #2
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d11b      	bne.n	8003624 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f06f 0202 	mvn.w	r2, #2
 80035f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2201      	movs	r2, #1
 80035fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	f003 0303 	and.w	r3, r3, #3
 8003606:	2b00      	cmp	r3, #0
 8003608:	d003      	beq.n	8003612 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 f8ee 	bl	80037ec <HAL_TIM_IC_CaptureCallback>
 8003610:	e005      	b.n	800361e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 f8e0 	bl	80037d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f000 f8f1 	bl	8003800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	f003 0304 	and.w	r3, r3, #4
 800362e:	2b04      	cmp	r3, #4
 8003630:	d122      	bne.n	8003678 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	f003 0304 	and.w	r3, r3, #4
 800363c:	2b04      	cmp	r3, #4
 800363e:	d11b      	bne.n	8003678 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f06f 0204 	mvn.w	r2, #4
 8003648:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2202      	movs	r2, #2
 800364e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800365a:	2b00      	cmp	r3, #0
 800365c:	d003      	beq.n	8003666 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 f8c4 	bl	80037ec <HAL_TIM_IC_CaptureCallback>
 8003664:	e005      	b.n	8003672 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f8b6 	bl	80037d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f000 f8c7 	bl	8003800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	f003 0308 	and.w	r3, r3, #8
 8003682:	2b08      	cmp	r3, #8
 8003684:	d122      	bne.n	80036cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	f003 0308 	and.w	r3, r3, #8
 8003690:	2b08      	cmp	r3, #8
 8003692:	d11b      	bne.n	80036cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f06f 0208 	mvn.w	r2, #8
 800369c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2204      	movs	r2, #4
 80036a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	69db      	ldr	r3, [r3, #28]
 80036aa:	f003 0303 	and.w	r3, r3, #3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d003      	beq.n	80036ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f000 f89a 	bl	80037ec <HAL_TIM_IC_CaptureCallback>
 80036b8:	e005      	b.n	80036c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 f88c 	bl	80037d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f000 f89d 	bl	8003800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	f003 0310 	and.w	r3, r3, #16
 80036d6:	2b10      	cmp	r3, #16
 80036d8:	d122      	bne.n	8003720 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	f003 0310 	and.w	r3, r3, #16
 80036e4:	2b10      	cmp	r3, #16
 80036e6:	d11b      	bne.n	8003720 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f06f 0210 	mvn.w	r2, #16
 80036f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2208      	movs	r2, #8
 80036f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	69db      	ldr	r3, [r3, #28]
 80036fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003702:	2b00      	cmp	r3, #0
 8003704:	d003      	beq.n	800370e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 f870 	bl	80037ec <HAL_TIM_IC_CaptureCallback>
 800370c:	e005      	b.n	800371a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 f862 	bl	80037d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 f873 	bl	8003800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	2b01      	cmp	r3, #1
 800372c:	d10e      	bne.n	800374c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	f003 0301 	and.w	r3, r3, #1
 8003738:	2b01      	cmp	r3, #1
 800373a:	d107      	bne.n	800374c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f06f 0201 	mvn.w	r2, #1
 8003744:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f7fd fbfc 	bl	8000f44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003756:	2b80      	cmp	r3, #128	; 0x80
 8003758:	d10e      	bne.n	8003778 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003764:	2b80      	cmp	r3, #128	; 0x80
 8003766:	d107      	bne.n	8003778 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003770:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 f902 	bl	800397c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003782:	2b40      	cmp	r3, #64	; 0x40
 8003784:	d10e      	bne.n	80037a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003790:	2b40      	cmp	r3, #64	; 0x40
 8003792:	d107      	bne.n	80037a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800379c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 f838 	bl	8003814 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	f003 0320 	and.w	r3, r3, #32
 80037ae:	2b20      	cmp	r3, #32
 80037b0:	d10e      	bne.n	80037d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	f003 0320 	and.w	r3, r3, #32
 80037bc:	2b20      	cmp	r3, #32
 80037be:	d107      	bne.n	80037d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f06f 0220 	mvn.w	r2, #32
 80037c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 f8cc 	bl	8003968 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037d0:	bf00      	nop
 80037d2:	3708      	adds	r7, #8
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037f4:	bf00      	nop
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003808:	bf00      	nop
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003828:	b480      	push	{r7}
 800382a:	b085      	sub	sp, #20
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4a40      	ldr	r2, [pc, #256]	; (800393c <TIM_Base_SetConfig+0x114>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d013      	beq.n	8003868 <TIM_Base_SetConfig+0x40>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003846:	d00f      	beq.n	8003868 <TIM_Base_SetConfig+0x40>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4a3d      	ldr	r2, [pc, #244]	; (8003940 <TIM_Base_SetConfig+0x118>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d00b      	beq.n	8003868 <TIM_Base_SetConfig+0x40>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a3c      	ldr	r2, [pc, #240]	; (8003944 <TIM_Base_SetConfig+0x11c>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d007      	beq.n	8003868 <TIM_Base_SetConfig+0x40>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a3b      	ldr	r2, [pc, #236]	; (8003948 <TIM_Base_SetConfig+0x120>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d003      	beq.n	8003868 <TIM_Base_SetConfig+0x40>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4a3a      	ldr	r2, [pc, #232]	; (800394c <TIM_Base_SetConfig+0x124>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d108      	bne.n	800387a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800386e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	68fa      	ldr	r2, [r7, #12]
 8003876:	4313      	orrs	r3, r2
 8003878:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a2f      	ldr	r2, [pc, #188]	; (800393c <TIM_Base_SetConfig+0x114>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d02b      	beq.n	80038da <TIM_Base_SetConfig+0xb2>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003888:	d027      	beq.n	80038da <TIM_Base_SetConfig+0xb2>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a2c      	ldr	r2, [pc, #176]	; (8003940 <TIM_Base_SetConfig+0x118>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d023      	beq.n	80038da <TIM_Base_SetConfig+0xb2>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a2b      	ldr	r2, [pc, #172]	; (8003944 <TIM_Base_SetConfig+0x11c>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d01f      	beq.n	80038da <TIM_Base_SetConfig+0xb2>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a2a      	ldr	r2, [pc, #168]	; (8003948 <TIM_Base_SetConfig+0x120>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d01b      	beq.n	80038da <TIM_Base_SetConfig+0xb2>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a29      	ldr	r2, [pc, #164]	; (800394c <TIM_Base_SetConfig+0x124>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d017      	beq.n	80038da <TIM_Base_SetConfig+0xb2>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a28      	ldr	r2, [pc, #160]	; (8003950 <TIM_Base_SetConfig+0x128>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d013      	beq.n	80038da <TIM_Base_SetConfig+0xb2>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a27      	ldr	r2, [pc, #156]	; (8003954 <TIM_Base_SetConfig+0x12c>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d00f      	beq.n	80038da <TIM_Base_SetConfig+0xb2>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a26      	ldr	r2, [pc, #152]	; (8003958 <TIM_Base_SetConfig+0x130>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d00b      	beq.n	80038da <TIM_Base_SetConfig+0xb2>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a25      	ldr	r2, [pc, #148]	; (800395c <TIM_Base_SetConfig+0x134>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d007      	beq.n	80038da <TIM_Base_SetConfig+0xb2>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a24      	ldr	r2, [pc, #144]	; (8003960 <TIM_Base_SetConfig+0x138>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d003      	beq.n	80038da <TIM_Base_SetConfig+0xb2>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a23      	ldr	r2, [pc, #140]	; (8003964 <TIM_Base_SetConfig+0x13c>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d108      	bne.n	80038ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	68fa      	ldr	r2, [r7, #12]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	695b      	ldr	r3, [r3, #20]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	689a      	ldr	r2, [r3, #8]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a0a      	ldr	r2, [pc, #40]	; (800393c <TIM_Base_SetConfig+0x114>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d003      	beq.n	8003920 <TIM_Base_SetConfig+0xf8>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a0c      	ldr	r2, [pc, #48]	; (800394c <TIM_Base_SetConfig+0x124>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d103      	bne.n	8003928 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	691a      	ldr	r2, [r3, #16]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	615a      	str	r2, [r3, #20]
}
 800392e:	bf00      	nop
 8003930:	3714      	adds	r7, #20
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	40010000 	.word	0x40010000
 8003940:	40000400 	.word	0x40000400
 8003944:	40000800 	.word	0x40000800
 8003948:	40000c00 	.word	0x40000c00
 800394c:	40010400 	.word	0x40010400
 8003950:	40014000 	.word	0x40014000
 8003954:	40014400 	.word	0x40014400
 8003958:	40014800 	.word	0x40014800
 800395c:	40001800 	.word	0x40001800
 8003960:	40001c00 	.word	0x40001c00
 8003964:	40002000 	.word	0x40002000

08003968 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d101      	bne.n	80039a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e03f      	b.n	8003a22 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d106      	bne.n	80039bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f7fd fbee 	bl	8001198 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2224      	movs	r2, #36	; 0x24
 80039c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68da      	ldr	r2, [r3, #12]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f000 fddf 	bl	8004598 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	691a      	ldr	r2, [r3, #16]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	695a      	ldr	r2, [r3, #20]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68da      	ldr	r2, [r3, #12]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2220      	movs	r2, #32
 8003a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2220      	movs	r2, #32
 8003a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3708      	adds	r7, #8
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b08a      	sub	sp, #40	; 0x28
 8003a2e:	af02      	add	r7, sp, #8
 8003a30:	60f8      	str	r0, [r7, #12]
 8003a32:	60b9      	str	r1, [r7, #8]
 8003a34:	603b      	str	r3, [r7, #0]
 8003a36:	4613      	mov	r3, r2
 8003a38:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	2b20      	cmp	r3, #32
 8003a48:	d17c      	bne.n	8003b44 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d002      	beq.n	8003a56 <HAL_UART_Transmit+0x2c>
 8003a50:	88fb      	ldrh	r3, [r7, #6]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d101      	bne.n	8003a5a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e075      	b.n	8003b46 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d101      	bne.n	8003a68 <HAL_UART_Transmit+0x3e>
 8003a64:	2302      	movs	r3, #2
 8003a66:	e06e      	b.n	8003b46 <HAL_UART_Transmit+0x11c>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2200      	movs	r2, #0
 8003a74:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2221      	movs	r2, #33	; 0x21
 8003a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a7e:	f7fe f8f9 	bl	8001c74 <HAL_GetTick>
 8003a82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	88fa      	ldrh	r2, [r7, #6]
 8003a88:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	88fa      	ldrh	r2, [r7, #6]
 8003a8e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a98:	d108      	bne.n	8003aac <HAL_UART_Transmit+0x82>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d104      	bne.n	8003aac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	61bb      	str	r3, [r7, #24]
 8003aaa:	e003      	b.n	8003ab4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003abc:	e02a      	b.n	8003b14 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	9300      	str	r3, [sp, #0]
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	2180      	movs	r1, #128	; 0x80
 8003ac8:	68f8      	ldr	r0, [r7, #12]
 8003aca:	f000 fb1f 	bl	800410c <UART_WaitOnFlagUntilTimeout>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d001      	beq.n	8003ad8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e036      	b.n	8003b46 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10b      	bne.n	8003af6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	881b      	ldrh	r3, [r3, #0]
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003aec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	3302      	adds	r3, #2
 8003af2:	61bb      	str	r3, [r7, #24]
 8003af4:	e007      	b.n	8003b06 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	781a      	ldrb	r2, [r3, #0]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	3301      	adds	r3, #1
 8003b04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	b29a      	uxth	r2, r3
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d1cf      	bne.n	8003abe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	9300      	str	r3, [sp, #0]
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	2200      	movs	r2, #0
 8003b26:	2140      	movs	r1, #64	; 0x40
 8003b28:	68f8      	ldr	r0, [r7, #12]
 8003b2a:	f000 faef 	bl	800410c <UART_WaitOnFlagUntilTimeout>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d001      	beq.n	8003b38 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e006      	b.n	8003b46 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003b40:	2300      	movs	r3, #0
 8003b42:	e000      	b.n	8003b46 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003b44:	2302      	movs	r3, #2
  }
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3720      	adds	r7, #32
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b084      	sub	sp, #16
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	60f8      	str	r0, [r7, #12]
 8003b56:	60b9      	str	r1, [r7, #8]
 8003b58:	4613      	mov	r3, r2
 8003b5a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	2b20      	cmp	r3, #32
 8003b66:	d11d      	bne.n	8003ba4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d002      	beq.n	8003b74 <HAL_UART_Receive_IT+0x26>
 8003b6e:	88fb      	ldrh	r3, [r7, #6]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d101      	bne.n	8003b78 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e016      	b.n	8003ba6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d101      	bne.n	8003b86 <HAL_UART_Receive_IT+0x38>
 8003b82:	2302      	movs	r3, #2
 8003b84:	e00f      	b.n	8003ba6 <HAL_UART_Receive_IT+0x58>
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2200      	movs	r2, #0
 8003b92:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003b94:	88fb      	ldrh	r3, [r7, #6]
 8003b96:	461a      	mov	r2, r3
 8003b98:	68b9      	ldr	r1, [r7, #8]
 8003b9a:	68f8      	ldr	r0, [r7, #12]
 8003b9c:	f000 fb24 	bl	80041e8 <UART_Start_Receive_IT>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	e000      	b.n	8003ba6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003ba4:	2302      	movs	r3, #2
  }
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3710      	adds	r7, #16
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
	...

08003bb0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b0ba      	sub	sp, #232	; 0xe8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003be6:	f003 030f 	and.w	r3, r3, #15
 8003bea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003bee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d10f      	bne.n	8003c16 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bfa:	f003 0320 	and.w	r3, r3, #32
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d009      	beq.n	8003c16 <HAL_UART_IRQHandler+0x66>
 8003c02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c06:	f003 0320 	and.w	r3, r3, #32
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d003      	beq.n	8003c16 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 fc07 	bl	8004422 <UART_Receive_IT>
      return;
 8003c14:	e256      	b.n	80040c4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003c16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f000 80de 	beq.w	8003ddc <HAL_UART_IRQHandler+0x22c>
 8003c20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c24:	f003 0301 	and.w	r3, r3, #1
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d106      	bne.n	8003c3a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c30:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	f000 80d1 	beq.w	8003ddc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00b      	beq.n	8003c5e <HAL_UART_IRQHandler+0xae>
 8003c46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d005      	beq.n	8003c5e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c56:	f043 0201 	orr.w	r2, r3, #1
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c62:	f003 0304 	and.w	r3, r3, #4
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00b      	beq.n	8003c82 <HAL_UART_IRQHandler+0xd2>
 8003c6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d005      	beq.n	8003c82 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7a:	f043 0202 	orr.w	r2, r3, #2
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00b      	beq.n	8003ca6 <HAL_UART_IRQHandler+0xf6>
 8003c8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d005      	beq.n	8003ca6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9e:	f043 0204 	orr.w	r2, r3, #4
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003caa:	f003 0308 	and.w	r3, r3, #8
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d011      	beq.n	8003cd6 <HAL_UART_IRQHandler+0x126>
 8003cb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cb6:	f003 0320 	and.w	r3, r3, #32
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d105      	bne.n	8003cca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003cbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cc2:	f003 0301 	and.w	r3, r3, #1
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d005      	beq.n	8003cd6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cce:	f043 0208 	orr.w	r2, r3, #8
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	f000 81ed 	beq.w	80040ba <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ce0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ce4:	f003 0320 	and.w	r3, r3, #32
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d008      	beq.n	8003cfe <HAL_UART_IRQHandler+0x14e>
 8003cec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cf0:	f003 0320 	and.w	r3, r3, #32
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d002      	beq.n	8003cfe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f000 fb92 	bl	8004422 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	695b      	ldr	r3, [r3, #20]
 8003d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d08:	2b40      	cmp	r3, #64	; 0x40
 8003d0a:	bf0c      	ite	eq
 8003d0c:	2301      	moveq	r3, #1
 8003d0e:	2300      	movne	r3, #0
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1a:	f003 0308 	and.w	r3, r3, #8
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d103      	bne.n	8003d2a <HAL_UART_IRQHandler+0x17a>
 8003d22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d04f      	beq.n	8003dca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 fa9a 	bl	8004264 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	695b      	ldr	r3, [r3, #20]
 8003d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d3a:	2b40      	cmp	r3, #64	; 0x40
 8003d3c:	d141      	bne.n	8003dc2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	3314      	adds	r3, #20
 8003d44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d4c:	e853 3f00 	ldrex	r3, [r3]
 8003d50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003d54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	3314      	adds	r3, #20
 8003d66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003d6a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003d6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003d76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003d7a:	e841 2300 	strex	r3, r2, [r1]
 8003d7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003d82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1d9      	bne.n	8003d3e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d013      	beq.n	8003dba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d96:	4a7d      	ldr	r2, [pc, #500]	; (8003f8c <HAL_UART_IRQHandler+0x3dc>)
 8003d98:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f7fe f8c6 	bl	8001f30 <HAL_DMA_Abort_IT>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d016      	beq.n	8003dd8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003db4:	4610      	mov	r0, r2
 8003db6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003db8:	e00e      	b.n	8003dd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 f990 	bl	80040e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dc0:	e00a      	b.n	8003dd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 f98c 	bl	80040e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dc8:	e006      	b.n	8003dd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 f988 	bl	80040e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003dd6:	e170      	b.n	80040ba <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dd8:	bf00      	nop
    return;
 8003dda:	e16e      	b.n	80040ba <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	f040 814a 	bne.w	800407a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003de6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dea:	f003 0310 	and.w	r3, r3, #16
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	f000 8143 	beq.w	800407a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003df4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003df8:	f003 0310 	and.w	r3, r3, #16
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	f000 813c 	beq.w	800407a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e02:	2300      	movs	r3, #0
 8003e04:	60bb      	str	r3, [r7, #8]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	60bb      	str	r3, [r7, #8]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	60bb      	str	r3, [r7, #8]
 8003e16:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e22:	2b40      	cmp	r3, #64	; 0x40
 8003e24:	f040 80b4 	bne.w	8003f90 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e34:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	f000 8140 	beq.w	80040be <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e46:	429a      	cmp	r2, r3
 8003e48:	f080 8139 	bcs.w	80040be <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e52:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e58:	69db      	ldr	r3, [r3, #28]
 8003e5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e5e:	f000 8088 	beq.w	8003f72 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	330c      	adds	r3, #12
 8003e68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e70:	e853 3f00 	ldrex	r3, [r3]
 8003e74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003e78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	330c      	adds	r3, #12
 8003e8a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003e8e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003e92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e96:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003e9a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003e9e:	e841 2300 	strex	r3, r2, [r1]
 8003ea2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003ea6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1d9      	bne.n	8003e62 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	3314      	adds	r3, #20
 8003eb4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003eb8:	e853 3f00 	ldrex	r3, [r3]
 8003ebc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003ebe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ec0:	f023 0301 	bic.w	r3, r3, #1
 8003ec4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	3314      	adds	r3, #20
 8003ece:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003ed2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003ed6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003eda:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003ede:	e841 2300 	strex	r3, r2, [r1]
 8003ee2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003ee4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1e1      	bne.n	8003eae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	3314      	adds	r3, #20
 8003ef0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ef4:	e853 3f00 	ldrex	r3, [r3]
 8003ef8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003efa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003efc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	3314      	adds	r3, #20
 8003f0a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003f0e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003f10:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f12:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003f14:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003f16:	e841 2300 	strex	r3, r2, [r1]
 8003f1a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003f1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1e3      	bne.n	8003eea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2220      	movs	r2, #32
 8003f26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	330c      	adds	r3, #12
 8003f36:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f3a:	e853 3f00 	ldrex	r3, [r3]
 8003f3e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003f40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f42:	f023 0310 	bic.w	r3, r3, #16
 8003f46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	330c      	adds	r3, #12
 8003f50:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003f54:	65ba      	str	r2, [r7, #88]	; 0x58
 8003f56:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f58:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003f5a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f5c:	e841 2300 	strex	r3, r2, [r1]
 8003f60:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003f62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1e3      	bne.n	8003f30 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7fd ff6f 	bl	8001e50 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	4619      	mov	r1, r3
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 f8b6 	bl	80040f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f88:	e099      	b.n	80040be <HAL_UART_IRQHandler+0x50e>
 8003f8a:	bf00      	nop
 8003f8c:	0800432b 	.word	0x0800432b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f000 808b 	beq.w	80040c2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003fac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f000 8086 	beq.w	80040c2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	330c      	adds	r3, #12
 8003fbc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fc0:	e853 3f00 	ldrex	r3, [r3]
 8003fc4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fc8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fcc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	330c      	adds	r3, #12
 8003fd6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003fda:	647a      	str	r2, [r7, #68]	; 0x44
 8003fdc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fde:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003fe0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fe2:	e841 2300 	strex	r3, r2, [r1]
 8003fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003fe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1e3      	bne.n	8003fb6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	3314      	adds	r3, #20
 8003ff4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff8:	e853 3f00 	ldrex	r3, [r3]
 8003ffc:	623b      	str	r3, [r7, #32]
   return(result);
 8003ffe:	6a3b      	ldr	r3, [r7, #32]
 8004000:	f023 0301 	bic.w	r3, r3, #1
 8004004:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	3314      	adds	r3, #20
 800400e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004012:	633a      	str	r2, [r7, #48]	; 0x30
 8004014:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004016:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004018:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800401a:	e841 2300 	strex	r3, r2, [r1]
 800401e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004022:	2b00      	cmp	r3, #0
 8004024:	d1e3      	bne.n	8003fee <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2220      	movs	r2, #32
 800402a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	330c      	adds	r3, #12
 800403a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	e853 3f00 	ldrex	r3, [r3]
 8004042:	60fb      	str	r3, [r7, #12]
   return(result);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f023 0310 	bic.w	r3, r3, #16
 800404a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	330c      	adds	r3, #12
 8004054:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004058:	61fa      	str	r2, [r7, #28]
 800405a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800405c:	69b9      	ldr	r1, [r7, #24]
 800405e:	69fa      	ldr	r2, [r7, #28]
 8004060:	e841 2300 	strex	r3, r2, [r1]
 8004064:	617b      	str	r3, [r7, #20]
   return(result);
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d1e3      	bne.n	8004034 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800406c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004070:	4619      	mov	r1, r3
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 f83e 	bl	80040f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004078:	e023      	b.n	80040c2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800407a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800407e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004082:	2b00      	cmp	r3, #0
 8004084:	d009      	beq.n	800409a <HAL_UART_IRQHandler+0x4ea>
 8004086:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800408a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800408e:	2b00      	cmp	r3, #0
 8004090:	d003      	beq.n	800409a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 f95d 	bl	8004352 <UART_Transmit_IT>
    return;
 8004098:	e014      	b.n	80040c4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800409a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800409e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00e      	beq.n	80040c4 <HAL_UART_IRQHandler+0x514>
 80040a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d008      	beq.n	80040c4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 f99d 	bl	80043f2 <UART_EndTransmit_IT>
    return;
 80040b8:	e004      	b.n	80040c4 <HAL_UART_IRQHandler+0x514>
    return;
 80040ba:	bf00      	nop
 80040bc:	e002      	b.n	80040c4 <HAL_UART_IRQHandler+0x514>
      return;
 80040be:	bf00      	nop
 80040c0:	e000      	b.n	80040c4 <HAL_UART_IRQHandler+0x514>
      return;
 80040c2:	bf00      	nop
  }
}
 80040c4:	37e8      	adds	r7, #232	; 0xe8
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop

080040cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80040d4:	bf00      	nop
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80040e8:	bf00      	nop
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	460b      	mov	r3, r1
 80040fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004100:	bf00      	nop
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b090      	sub	sp, #64	; 0x40
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	603b      	str	r3, [r7, #0]
 8004118:	4613      	mov	r3, r2
 800411a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800411c:	e050      	b.n	80041c0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800411e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004124:	d04c      	beq.n	80041c0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004126:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004128:	2b00      	cmp	r3, #0
 800412a:	d007      	beq.n	800413c <UART_WaitOnFlagUntilTimeout+0x30>
 800412c:	f7fd fda2 	bl	8001c74 <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004138:	429a      	cmp	r2, r3
 800413a:	d241      	bcs.n	80041c0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	330c      	adds	r3, #12
 8004142:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004146:	e853 3f00 	ldrex	r3, [r3]
 800414a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800414c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004152:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	330c      	adds	r3, #12
 800415a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800415c:	637a      	str	r2, [r7, #52]	; 0x34
 800415e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004160:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004162:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004164:	e841 2300 	strex	r3, r2, [r1]
 8004168:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800416a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800416c:	2b00      	cmp	r3, #0
 800416e:	d1e5      	bne.n	800413c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	3314      	adds	r3, #20
 8004176:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	e853 3f00 	ldrex	r3, [r3]
 800417e:	613b      	str	r3, [r7, #16]
   return(result);
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	f023 0301 	bic.w	r3, r3, #1
 8004186:	63bb      	str	r3, [r7, #56]	; 0x38
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	3314      	adds	r3, #20
 800418e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004190:	623a      	str	r2, [r7, #32]
 8004192:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004194:	69f9      	ldr	r1, [r7, #28]
 8004196:	6a3a      	ldr	r2, [r7, #32]
 8004198:	e841 2300 	strex	r3, r2, [r1]
 800419c:	61bb      	str	r3, [r7, #24]
   return(result);
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1e5      	bne.n	8004170 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2220      	movs	r2, #32
 80041a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2220      	movs	r2, #32
 80041b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e00f      	b.n	80041e0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	4013      	ands	r3, r2
 80041ca:	68ba      	ldr	r2, [r7, #8]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	bf0c      	ite	eq
 80041d0:	2301      	moveq	r3, #1
 80041d2:	2300      	movne	r3, #0
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	461a      	mov	r2, r3
 80041d8:	79fb      	ldrb	r3, [r7, #7]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d09f      	beq.n	800411e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3740      	adds	r7, #64	; 0x40
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b085      	sub	sp, #20
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	4613      	mov	r3, r2
 80041f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	68ba      	ldr	r2, [r7, #8]
 80041fa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	88fa      	ldrh	r2, [r7, #6]
 8004200:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	88fa      	ldrh	r2, [r7, #6]
 8004206:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2200      	movs	r2, #0
 800420c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2222      	movs	r2, #34	; 0x22
 8004212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d007      	beq.n	8004236 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68da      	ldr	r2, [r3, #12]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004234:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	695a      	ldr	r2, [r3, #20]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f042 0201 	orr.w	r2, r2, #1
 8004244:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	68da      	ldr	r2, [r3, #12]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f042 0220 	orr.w	r2, r2, #32
 8004254:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004256:	2300      	movs	r3, #0
}
 8004258:	4618      	mov	r0, r3
 800425a:	3714      	adds	r7, #20
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004264:	b480      	push	{r7}
 8004266:	b095      	sub	sp, #84	; 0x54
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	330c      	adds	r3, #12
 8004272:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004276:	e853 3f00 	ldrex	r3, [r3]
 800427a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800427c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800427e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004282:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	330c      	adds	r3, #12
 800428a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800428c:	643a      	str	r2, [r7, #64]	; 0x40
 800428e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004290:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004292:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004294:	e841 2300 	strex	r3, r2, [r1]
 8004298:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800429a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800429c:	2b00      	cmp	r3, #0
 800429e:	d1e5      	bne.n	800426c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	3314      	adds	r3, #20
 80042a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a8:	6a3b      	ldr	r3, [r7, #32]
 80042aa:	e853 3f00 	ldrex	r3, [r3]
 80042ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	f023 0301 	bic.w	r3, r3, #1
 80042b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	3314      	adds	r3, #20
 80042be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042c8:	e841 2300 	strex	r3, r2, [r1]
 80042cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80042ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d1e5      	bne.n	80042a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d119      	bne.n	8004310 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	330c      	adds	r3, #12
 80042e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	e853 3f00 	ldrex	r3, [r3]
 80042ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	f023 0310 	bic.w	r3, r3, #16
 80042f2:	647b      	str	r3, [r7, #68]	; 0x44
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	330c      	adds	r3, #12
 80042fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042fc:	61ba      	str	r2, [r7, #24]
 80042fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004300:	6979      	ldr	r1, [r7, #20]
 8004302:	69ba      	ldr	r2, [r7, #24]
 8004304:	e841 2300 	strex	r3, r2, [r1]
 8004308:	613b      	str	r3, [r7, #16]
   return(result);
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d1e5      	bne.n	80042dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2220      	movs	r2, #32
 8004314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800431e:	bf00      	nop
 8004320:	3754      	adds	r7, #84	; 0x54
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr

0800432a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800432a:	b580      	push	{r7, lr}
 800432c:	b084      	sub	sp, #16
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004336:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2200      	movs	r2, #0
 8004342:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004344:	68f8      	ldr	r0, [r7, #12]
 8004346:	f7ff fecb 	bl	80040e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800434a:	bf00      	nop
 800434c:	3710      	adds	r7, #16
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}

08004352 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004352:	b480      	push	{r7}
 8004354:	b085      	sub	sp, #20
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b21      	cmp	r3, #33	; 0x21
 8004364:	d13e      	bne.n	80043e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800436e:	d114      	bne.n	800439a <UART_Transmit_IT+0x48>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d110      	bne.n	800439a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a1b      	ldr	r3, [r3, #32]
 800437c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	881b      	ldrh	r3, [r3, #0]
 8004382:	461a      	mov	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800438c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a1b      	ldr	r3, [r3, #32]
 8004392:	1c9a      	adds	r2, r3, #2
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	621a      	str	r2, [r3, #32]
 8004398:	e008      	b.n	80043ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a1b      	ldr	r3, [r3, #32]
 800439e:	1c59      	adds	r1, r3, #1
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	6211      	str	r1, [r2, #32]
 80043a4:	781a      	ldrb	r2, [r3, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	3b01      	subs	r3, #1
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	4619      	mov	r1, r3
 80043ba:	84d1      	strh	r1, [r2, #38]	; 0x26
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d10f      	bne.n	80043e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68da      	ldr	r2, [r3, #12]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68da      	ldr	r2, [r3, #12]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80043e0:	2300      	movs	r3, #0
 80043e2:	e000      	b.n	80043e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80043e4:	2302      	movs	r3, #2
  }
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3714      	adds	r7, #20
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr

080043f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80043f2:	b580      	push	{r7, lr}
 80043f4:	b082      	sub	sp, #8
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68da      	ldr	r2, [r3, #12]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004408:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2220      	movs	r2, #32
 800440e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f7ff fe5a 	bl	80040cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3708      	adds	r7, #8
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004422:	b580      	push	{r7, lr}
 8004424:	b08c      	sub	sp, #48	; 0x30
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2b22      	cmp	r3, #34	; 0x22
 8004434:	f040 80ab 	bne.w	800458e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004440:	d117      	bne.n	8004472 <UART_Receive_IT+0x50>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d113      	bne.n	8004472 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800444a:	2300      	movs	r3, #0
 800444c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004452:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	b29b      	uxth	r3, r3
 800445c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004460:	b29a      	uxth	r2, r3
 8004462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004464:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800446a:	1c9a      	adds	r2, r3, #2
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	629a      	str	r2, [r3, #40]	; 0x28
 8004470:	e026      	b.n	80044c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004476:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004478:	2300      	movs	r3, #0
 800447a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004484:	d007      	beq.n	8004496 <UART_Receive_IT+0x74>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d10a      	bne.n	80044a4 <UART_Receive_IT+0x82>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d106      	bne.n	80044a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	b2da      	uxtb	r2, r3
 800449e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044a0:	701a      	strb	r2, [r3, #0]
 80044a2:	e008      	b.n	80044b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044b0:	b2da      	uxtb	r2, r3
 80044b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ba:	1c5a      	adds	r2, r3, #1
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	3b01      	subs	r3, #1
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	4619      	mov	r1, r3
 80044ce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d15a      	bne.n	800458a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68da      	ldr	r2, [r3, #12]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f022 0220 	bic.w	r2, r2, #32
 80044e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	68da      	ldr	r2, [r3, #12]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	695a      	ldr	r2, [r3, #20]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f022 0201 	bic.w	r2, r2, #1
 8004502:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2220      	movs	r2, #32
 8004508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004510:	2b01      	cmp	r3, #1
 8004512:	d135      	bne.n	8004580 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	330c      	adds	r3, #12
 8004520:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	e853 3f00 	ldrex	r3, [r3]
 8004528:	613b      	str	r3, [r7, #16]
   return(result);
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	f023 0310 	bic.w	r3, r3, #16
 8004530:	627b      	str	r3, [r7, #36]	; 0x24
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	330c      	adds	r3, #12
 8004538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800453a:	623a      	str	r2, [r7, #32]
 800453c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453e:	69f9      	ldr	r1, [r7, #28]
 8004540:	6a3a      	ldr	r2, [r7, #32]
 8004542:	e841 2300 	strex	r3, r2, [r1]
 8004546:	61bb      	str	r3, [r7, #24]
   return(result);
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1e5      	bne.n	800451a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0310 	and.w	r3, r3, #16
 8004558:	2b10      	cmp	r3, #16
 800455a:	d10a      	bne.n	8004572 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800455c:	2300      	movs	r3, #0
 800455e:	60fb      	str	r3, [r7, #12]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	60fb      	str	r3, [r7, #12]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	60fb      	str	r3, [r7, #12]
 8004570:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004576:	4619      	mov	r1, r3
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f7ff fdbb 	bl	80040f4 <HAL_UARTEx_RxEventCallback>
 800457e:	e002      	b.n	8004586 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f7fc fc95 	bl	8000eb0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004586:	2300      	movs	r3, #0
 8004588:	e002      	b.n	8004590 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800458a:	2300      	movs	r3, #0
 800458c:	e000      	b.n	8004590 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800458e:	2302      	movs	r3, #2
  }
}
 8004590:	4618      	mov	r0, r3
 8004592:	3730      	adds	r7, #48	; 0x30
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004598:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800459c:	b0c0      	sub	sp, #256	; 0x100
 800459e:	af00      	add	r7, sp, #0
 80045a0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80045b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b4:	68d9      	ldr	r1, [r3, #12]
 80045b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	ea40 0301 	orr.w	r3, r0, r1
 80045c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80045c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045c6:	689a      	ldr	r2, [r3, #8]
 80045c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	431a      	orrs	r2, r3
 80045d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045d4:	695b      	ldr	r3, [r3, #20]
 80045d6:	431a      	orrs	r2, r3
 80045d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045dc:	69db      	ldr	r3, [r3, #28]
 80045de:	4313      	orrs	r3, r2
 80045e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80045e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80045f0:	f021 010c 	bic.w	r1, r1, #12
 80045f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80045fe:	430b      	orrs	r3, r1
 8004600:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800460e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004612:	6999      	ldr	r1, [r3, #24]
 8004614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	ea40 0301 	orr.w	r3, r0, r1
 800461e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	4b8f      	ldr	r3, [pc, #572]	; (8004864 <UART_SetConfig+0x2cc>)
 8004628:	429a      	cmp	r2, r3
 800462a:	d005      	beq.n	8004638 <UART_SetConfig+0xa0>
 800462c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	4b8d      	ldr	r3, [pc, #564]	; (8004868 <UART_SetConfig+0x2d0>)
 8004634:	429a      	cmp	r2, r3
 8004636:	d104      	bne.n	8004642 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004638:	f7fe fad6 	bl	8002be8 <HAL_RCC_GetPCLK2Freq>
 800463c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004640:	e003      	b.n	800464a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004642:	f7fe fabd 	bl	8002bc0 <HAL_RCC_GetPCLK1Freq>
 8004646:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800464a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800464e:	69db      	ldr	r3, [r3, #28]
 8004650:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004654:	f040 810c 	bne.w	8004870 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004658:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800465c:	2200      	movs	r2, #0
 800465e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004662:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004666:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800466a:	4622      	mov	r2, r4
 800466c:	462b      	mov	r3, r5
 800466e:	1891      	adds	r1, r2, r2
 8004670:	65b9      	str	r1, [r7, #88]	; 0x58
 8004672:	415b      	adcs	r3, r3
 8004674:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004676:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800467a:	4621      	mov	r1, r4
 800467c:	eb12 0801 	adds.w	r8, r2, r1
 8004680:	4629      	mov	r1, r5
 8004682:	eb43 0901 	adc.w	r9, r3, r1
 8004686:	f04f 0200 	mov.w	r2, #0
 800468a:	f04f 0300 	mov.w	r3, #0
 800468e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004692:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004696:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800469a:	4690      	mov	r8, r2
 800469c:	4699      	mov	r9, r3
 800469e:	4623      	mov	r3, r4
 80046a0:	eb18 0303 	adds.w	r3, r8, r3
 80046a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80046a8:	462b      	mov	r3, r5
 80046aa:	eb49 0303 	adc.w	r3, r9, r3
 80046ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80046b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80046be:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80046c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80046c6:	460b      	mov	r3, r1
 80046c8:	18db      	adds	r3, r3, r3
 80046ca:	653b      	str	r3, [r7, #80]	; 0x50
 80046cc:	4613      	mov	r3, r2
 80046ce:	eb42 0303 	adc.w	r3, r2, r3
 80046d2:	657b      	str	r3, [r7, #84]	; 0x54
 80046d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80046d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80046dc:	f7fb fde0 	bl	80002a0 <__aeabi_uldivmod>
 80046e0:	4602      	mov	r2, r0
 80046e2:	460b      	mov	r3, r1
 80046e4:	4b61      	ldr	r3, [pc, #388]	; (800486c <UART_SetConfig+0x2d4>)
 80046e6:	fba3 2302 	umull	r2, r3, r3, r2
 80046ea:	095b      	lsrs	r3, r3, #5
 80046ec:	011c      	lsls	r4, r3, #4
 80046ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046f2:	2200      	movs	r2, #0
 80046f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80046f8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80046fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004700:	4642      	mov	r2, r8
 8004702:	464b      	mov	r3, r9
 8004704:	1891      	adds	r1, r2, r2
 8004706:	64b9      	str	r1, [r7, #72]	; 0x48
 8004708:	415b      	adcs	r3, r3
 800470a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800470c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004710:	4641      	mov	r1, r8
 8004712:	eb12 0a01 	adds.w	sl, r2, r1
 8004716:	4649      	mov	r1, r9
 8004718:	eb43 0b01 	adc.w	fp, r3, r1
 800471c:	f04f 0200 	mov.w	r2, #0
 8004720:	f04f 0300 	mov.w	r3, #0
 8004724:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004728:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800472c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004730:	4692      	mov	sl, r2
 8004732:	469b      	mov	fp, r3
 8004734:	4643      	mov	r3, r8
 8004736:	eb1a 0303 	adds.w	r3, sl, r3
 800473a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800473e:	464b      	mov	r3, r9
 8004740:	eb4b 0303 	adc.w	r3, fp, r3
 8004744:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004754:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004758:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800475c:	460b      	mov	r3, r1
 800475e:	18db      	adds	r3, r3, r3
 8004760:	643b      	str	r3, [r7, #64]	; 0x40
 8004762:	4613      	mov	r3, r2
 8004764:	eb42 0303 	adc.w	r3, r2, r3
 8004768:	647b      	str	r3, [r7, #68]	; 0x44
 800476a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800476e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004772:	f7fb fd95 	bl	80002a0 <__aeabi_uldivmod>
 8004776:	4602      	mov	r2, r0
 8004778:	460b      	mov	r3, r1
 800477a:	4611      	mov	r1, r2
 800477c:	4b3b      	ldr	r3, [pc, #236]	; (800486c <UART_SetConfig+0x2d4>)
 800477e:	fba3 2301 	umull	r2, r3, r3, r1
 8004782:	095b      	lsrs	r3, r3, #5
 8004784:	2264      	movs	r2, #100	; 0x64
 8004786:	fb02 f303 	mul.w	r3, r2, r3
 800478a:	1acb      	subs	r3, r1, r3
 800478c:	00db      	lsls	r3, r3, #3
 800478e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004792:	4b36      	ldr	r3, [pc, #216]	; (800486c <UART_SetConfig+0x2d4>)
 8004794:	fba3 2302 	umull	r2, r3, r3, r2
 8004798:	095b      	lsrs	r3, r3, #5
 800479a:	005b      	lsls	r3, r3, #1
 800479c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80047a0:	441c      	add	r4, r3
 80047a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047a6:	2200      	movs	r2, #0
 80047a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80047ac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80047b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80047b4:	4642      	mov	r2, r8
 80047b6:	464b      	mov	r3, r9
 80047b8:	1891      	adds	r1, r2, r2
 80047ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80047bc:	415b      	adcs	r3, r3
 80047be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80047c4:	4641      	mov	r1, r8
 80047c6:	1851      	adds	r1, r2, r1
 80047c8:	6339      	str	r1, [r7, #48]	; 0x30
 80047ca:	4649      	mov	r1, r9
 80047cc:	414b      	adcs	r3, r1
 80047ce:	637b      	str	r3, [r7, #52]	; 0x34
 80047d0:	f04f 0200 	mov.w	r2, #0
 80047d4:	f04f 0300 	mov.w	r3, #0
 80047d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80047dc:	4659      	mov	r1, fp
 80047de:	00cb      	lsls	r3, r1, #3
 80047e0:	4651      	mov	r1, sl
 80047e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047e6:	4651      	mov	r1, sl
 80047e8:	00ca      	lsls	r2, r1, #3
 80047ea:	4610      	mov	r0, r2
 80047ec:	4619      	mov	r1, r3
 80047ee:	4603      	mov	r3, r0
 80047f0:	4642      	mov	r2, r8
 80047f2:	189b      	adds	r3, r3, r2
 80047f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80047f8:	464b      	mov	r3, r9
 80047fa:	460a      	mov	r2, r1
 80047fc:	eb42 0303 	adc.w	r3, r2, r3
 8004800:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004810:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004814:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004818:	460b      	mov	r3, r1
 800481a:	18db      	adds	r3, r3, r3
 800481c:	62bb      	str	r3, [r7, #40]	; 0x28
 800481e:	4613      	mov	r3, r2
 8004820:	eb42 0303 	adc.w	r3, r2, r3
 8004824:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004826:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800482a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800482e:	f7fb fd37 	bl	80002a0 <__aeabi_uldivmod>
 8004832:	4602      	mov	r2, r0
 8004834:	460b      	mov	r3, r1
 8004836:	4b0d      	ldr	r3, [pc, #52]	; (800486c <UART_SetConfig+0x2d4>)
 8004838:	fba3 1302 	umull	r1, r3, r3, r2
 800483c:	095b      	lsrs	r3, r3, #5
 800483e:	2164      	movs	r1, #100	; 0x64
 8004840:	fb01 f303 	mul.w	r3, r1, r3
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	00db      	lsls	r3, r3, #3
 8004848:	3332      	adds	r3, #50	; 0x32
 800484a:	4a08      	ldr	r2, [pc, #32]	; (800486c <UART_SetConfig+0x2d4>)
 800484c:	fba2 2303 	umull	r2, r3, r2, r3
 8004850:	095b      	lsrs	r3, r3, #5
 8004852:	f003 0207 	and.w	r2, r3, #7
 8004856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4422      	add	r2, r4
 800485e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004860:	e105      	b.n	8004a6e <UART_SetConfig+0x4d6>
 8004862:	bf00      	nop
 8004864:	40011000 	.word	0x40011000
 8004868:	40011400 	.word	0x40011400
 800486c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004870:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004874:	2200      	movs	r2, #0
 8004876:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800487a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800487e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004882:	4642      	mov	r2, r8
 8004884:	464b      	mov	r3, r9
 8004886:	1891      	adds	r1, r2, r2
 8004888:	6239      	str	r1, [r7, #32]
 800488a:	415b      	adcs	r3, r3
 800488c:	627b      	str	r3, [r7, #36]	; 0x24
 800488e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004892:	4641      	mov	r1, r8
 8004894:	1854      	adds	r4, r2, r1
 8004896:	4649      	mov	r1, r9
 8004898:	eb43 0501 	adc.w	r5, r3, r1
 800489c:	f04f 0200 	mov.w	r2, #0
 80048a0:	f04f 0300 	mov.w	r3, #0
 80048a4:	00eb      	lsls	r3, r5, #3
 80048a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048aa:	00e2      	lsls	r2, r4, #3
 80048ac:	4614      	mov	r4, r2
 80048ae:	461d      	mov	r5, r3
 80048b0:	4643      	mov	r3, r8
 80048b2:	18e3      	adds	r3, r4, r3
 80048b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80048b8:	464b      	mov	r3, r9
 80048ba:	eb45 0303 	adc.w	r3, r5, r3
 80048be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80048c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80048ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80048d2:	f04f 0200 	mov.w	r2, #0
 80048d6:	f04f 0300 	mov.w	r3, #0
 80048da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80048de:	4629      	mov	r1, r5
 80048e0:	008b      	lsls	r3, r1, #2
 80048e2:	4621      	mov	r1, r4
 80048e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048e8:	4621      	mov	r1, r4
 80048ea:	008a      	lsls	r2, r1, #2
 80048ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80048f0:	f7fb fcd6 	bl	80002a0 <__aeabi_uldivmod>
 80048f4:	4602      	mov	r2, r0
 80048f6:	460b      	mov	r3, r1
 80048f8:	4b60      	ldr	r3, [pc, #384]	; (8004a7c <UART_SetConfig+0x4e4>)
 80048fa:	fba3 2302 	umull	r2, r3, r3, r2
 80048fe:	095b      	lsrs	r3, r3, #5
 8004900:	011c      	lsls	r4, r3, #4
 8004902:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004906:	2200      	movs	r2, #0
 8004908:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800490c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004910:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004914:	4642      	mov	r2, r8
 8004916:	464b      	mov	r3, r9
 8004918:	1891      	adds	r1, r2, r2
 800491a:	61b9      	str	r1, [r7, #24]
 800491c:	415b      	adcs	r3, r3
 800491e:	61fb      	str	r3, [r7, #28]
 8004920:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004924:	4641      	mov	r1, r8
 8004926:	1851      	adds	r1, r2, r1
 8004928:	6139      	str	r1, [r7, #16]
 800492a:	4649      	mov	r1, r9
 800492c:	414b      	adcs	r3, r1
 800492e:	617b      	str	r3, [r7, #20]
 8004930:	f04f 0200 	mov.w	r2, #0
 8004934:	f04f 0300 	mov.w	r3, #0
 8004938:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800493c:	4659      	mov	r1, fp
 800493e:	00cb      	lsls	r3, r1, #3
 8004940:	4651      	mov	r1, sl
 8004942:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004946:	4651      	mov	r1, sl
 8004948:	00ca      	lsls	r2, r1, #3
 800494a:	4610      	mov	r0, r2
 800494c:	4619      	mov	r1, r3
 800494e:	4603      	mov	r3, r0
 8004950:	4642      	mov	r2, r8
 8004952:	189b      	adds	r3, r3, r2
 8004954:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004958:	464b      	mov	r3, r9
 800495a:	460a      	mov	r2, r1
 800495c:	eb42 0303 	adc.w	r3, r2, r3
 8004960:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	67bb      	str	r3, [r7, #120]	; 0x78
 800496e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004970:	f04f 0200 	mov.w	r2, #0
 8004974:	f04f 0300 	mov.w	r3, #0
 8004978:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800497c:	4649      	mov	r1, r9
 800497e:	008b      	lsls	r3, r1, #2
 8004980:	4641      	mov	r1, r8
 8004982:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004986:	4641      	mov	r1, r8
 8004988:	008a      	lsls	r2, r1, #2
 800498a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800498e:	f7fb fc87 	bl	80002a0 <__aeabi_uldivmod>
 8004992:	4602      	mov	r2, r0
 8004994:	460b      	mov	r3, r1
 8004996:	4b39      	ldr	r3, [pc, #228]	; (8004a7c <UART_SetConfig+0x4e4>)
 8004998:	fba3 1302 	umull	r1, r3, r3, r2
 800499c:	095b      	lsrs	r3, r3, #5
 800499e:	2164      	movs	r1, #100	; 0x64
 80049a0:	fb01 f303 	mul.w	r3, r1, r3
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	011b      	lsls	r3, r3, #4
 80049a8:	3332      	adds	r3, #50	; 0x32
 80049aa:	4a34      	ldr	r2, [pc, #208]	; (8004a7c <UART_SetConfig+0x4e4>)
 80049ac:	fba2 2303 	umull	r2, r3, r2, r3
 80049b0:	095b      	lsrs	r3, r3, #5
 80049b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049b6:	441c      	add	r4, r3
 80049b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049bc:	2200      	movs	r2, #0
 80049be:	673b      	str	r3, [r7, #112]	; 0x70
 80049c0:	677a      	str	r2, [r7, #116]	; 0x74
 80049c2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80049c6:	4642      	mov	r2, r8
 80049c8:	464b      	mov	r3, r9
 80049ca:	1891      	adds	r1, r2, r2
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	415b      	adcs	r3, r3
 80049d0:	60fb      	str	r3, [r7, #12]
 80049d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049d6:	4641      	mov	r1, r8
 80049d8:	1851      	adds	r1, r2, r1
 80049da:	6039      	str	r1, [r7, #0]
 80049dc:	4649      	mov	r1, r9
 80049de:	414b      	adcs	r3, r1
 80049e0:	607b      	str	r3, [r7, #4]
 80049e2:	f04f 0200 	mov.w	r2, #0
 80049e6:	f04f 0300 	mov.w	r3, #0
 80049ea:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80049ee:	4659      	mov	r1, fp
 80049f0:	00cb      	lsls	r3, r1, #3
 80049f2:	4651      	mov	r1, sl
 80049f4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049f8:	4651      	mov	r1, sl
 80049fa:	00ca      	lsls	r2, r1, #3
 80049fc:	4610      	mov	r0, r2
 80049fe:	4619      	mov	r1, r3
 8004a00:	4603      	mov	r3, r0
 8004a02:	4642      	mov	r2, r8
 8004a04:	189b      	adds	r3, r3, r2
 8004a06:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a08:	464b      	mov	r3, r9
 8004a0a:	460a      	mov	r2, r1
 8004a0c:	eb42 0303 	adc.w	r3, r2, r3
 8004a10:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	663b      	str	r3, [r7, #96]	; 0x60
 8004a1c:	667a      	str	r2, [r7, #100]	; 0x64
 8004a1e:	f04f 0200 	mov.w	r2, #0
 8004a22:	f04f 0300 	mov.w	r3, #0
 8004a26:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004a2a:	4649      	mov	r1, r9
 8004a2c:	008b      	lsls	r3, r1, #2
 8004a2e:	4641      	mov	r1, r8
 8004a30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a34:	4641      	mov	r1, r8
 8004a36:	008a      	lsls	r2, r1, #2
 8004a38:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004a3c:	f7fb fc30 	bl	80002a0 <__aeabi_uldivmod>
 8004a40:	4602      	mov	r2, r0
 8004a42:	460b      	mov	r3, r1
 8004a44:	4b0d      	ldr	r3, [pc, #52]	; (8004a7c <UART_SetConfig+0x4e4>)
 8004a46:	fba3 1302 	umull	r1, r3, r3, r2
 8004a4a:	095b      	lsrs	r3, r3, #5
 8004a4c:	2164      	movs	r1, #100	; 0x64
 8004a4e:	fb01 f303 	mul.w	r3, r1, r3
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	011b      	lsls	r3, r3, #4
 8004a56:	3332      	adds	r3, #50	; 0x32
 8004a58:	4a08      	ldr	r2, [pc, #32]	; (8004a7c <UART_SetConfig+0x4e4>)
 8004a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5e:	095b      	lsrs	r3, r3, #5
 8004a60:	f003 020f 	and.w	r2, r3, #15
 8004a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4422      	add	r2, r4
 8004a6c:	609a      	str	r2, [r3, #8]
}
 8004a6e:	bf00      	nop
 8004a70:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004a74:	46bd      	mov	sp, r7
 8004a76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a7a:	bf00      	nop
 8004a7c:	51eb851f 	.word	0x51eb851f

08004a80 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f103 0208 	add.w	r2, r3, #8
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f04f 32ff 	mov.w	r2, #4294967295
 8004a98:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f103 0208 	add.w	r2, r3, #8
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f103 0208 	add.w	r2, r3, #8
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004ab4:	bf00      	nop
 8004ab6:	370c      	adds	r7, #12
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004ace:	bf00      	nop
 8004ad0:	370c      	adds	r7, #12
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr

08004ada <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8004ada:	b480      	push	{r7}
 8004adc:	b085      	sub	sp, #20
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
 8004ae2:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	689a      	ldr	r2, [r3, #8]
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	683a      	ldr	r2, [r7, #0]
 8004afe:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	683a      	ldr	r2, [r7, #0]
 8004b04:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	1c5a      	adds	r2, r3, #1
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	601a      	str	r2, [r3, #0]
}
 8004b16:	bf00      	nop
 8004b18:	3714      	adds	r7, #20
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr

08004b22 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8004b22:	b480      	push	{r7}
 8004b24:	b085      	sub	sp, #20
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
 8004b2a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b38:	d103      	bne.n	8004b42 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	60fb      	str	r3, [r7, #12]
 8004b40:	e00c      	b.n	8004b5c <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	3308      	adds	r3, #8
 8004b46:	60fb      	str	r3, [r7, #12]
 8004b48:	e002      	b.n	8004b50 <vListInsert+0x2e>
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	60fb      	str	r3, [r7, #12]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	68ba      	ldr	r2, [r7, #8]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d2f6      	bcs.n	8004b4a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	685a      	ldr	r2, [r3, #4]
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	683a      	ldr	r2, [r7, #0]
 8004b6a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	683a      	ldr	r2, [r7, #0]
 8004b76:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	1c5a      	adds	r2, r3, #1
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	601a      	str	r2, [r3, #0]
}
 8004b88:	bf00      	nop
 8004b8a:	3714      	adds	r7, #20
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004b94:	b480      	push	{r7}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	6892      	ldr	r2, [r2, #8]
 8004baa:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	6852      	ldr	r2, [r2, #4]
 8004bb4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d103      	bne.n	8004bc8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	689a      	ldr	r2, [r3, #8]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	1e5a      	subs	r2, r3, #1
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3714      	adds	r7, #20
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d10a      	bne.n	8004c12 <xQueueGenericReset+0x2a>
        __asm volatile
 8004bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c00:	f383 8811 	msr	BASEPRI, r3
 8004c04:	f3bf 8f6f 	isb	sy
 8004c08:	f3bf 8f4f 	dsb	sy
 8004c0c:	60bb      	str	r3, [r7, #8]
    }
 8004c0e:	bf00      	nop
 8004c10:	e7fe      	b.n	8004c10 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8004c12:	f002 fb87 	bl	8007324 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c1e:	68f9      	ldr	r1, [r7, #12]
 8004c20:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004c22:	fb01 f303 	mul.w	r3, r1, r3
 8004c26:	441a      	add	r2, r3
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c42:	3b01      	subs	r3, #1
 8004c44:	68f9      	ldr	r1, [r7, #12]
 8004c46:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004c48:	fb01 f303 	mul.w	r3, r1, r3
 8004c4c:	441a      	add	r2, r3
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	22ff      	movs	r2, #255	; 0xff
 8004c56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	22ff      	movs	r2, #255	; 0xff
 8004c5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d114      	bne.n	8004c92 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	691b      	ldr	r3, [r3, #16]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d01a      	beq.n	8004ca6 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	3310      	adds	r3, #16
 8004c74:	4618      	mov	r0, r3
 8004c76:	f001 f921 	bl	8005ebc <xTaskRemoveFromEventList>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d012      	beq.n	8004ca6 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8004c80:	4b0c      	ldr	r3, [pc, #48]	; (8004cb4 <xQueueGenericReset+0xcc>)
 8004c82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c86:	601a      	str	r2, [r3, #0]
 8004c88:	f3bf 8f4f 	dsb	sy
 8004c8c:	f3bf 8f6f 	isb	sy
 8004c90:	e009      	b.n	8004ca6 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	3310      	adds	r3, #16
 8004c96:	4618      	mov	r0, r3
 8004c98:	f7ff fef2 	bl	8004a80 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	3324      	adds	r3, #36	; 0x24
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f7ff feed 	bl	8004a80 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8004ca6:	f002 fb6d 	bl	8007384 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8004caa:	2301      	movs	r3, #1
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3710      	adds	r7, #16
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	e000ed04 	.word	0xe000ed04

08004cb8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b08c      	sub	sp, #48	; 0x30
 8004cbc:	af02      	add	r7, sp, #8
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	60b9      	str	r1, [r7, #8]
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d10a      	bne.n	8004ce2 <xQueueGenericCreate+0x2a>
        __asm volatile
 8004ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd0:	f383 8811 	msr	BASEPRI, r3
 8004cd4:	f3bf 8f6f 	isb	sy
 8004cd8:	f3bf 8f4f 	dsb	sy
 8004cdc:	61bb      	str	r3, [r7, #24]
    }
 8004cde:	bf00      	nop
 8004ce0:	e7fe      	b.n	8004ce0 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	68ba      	ldr	r2, [r7, #8]
 8004ce6:	fb02 f303 	mul.w	r3, r2, r3
 8004cea:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d006      	beq.n	8004d00 <xQueueGenericCreate+0x48>
 8004cf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cfa:	68fa      	ldr	r2, [r7, #12]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d101      	bne.n	8004d04 <xQueueGenericCreate+0x4c>
 8004d00:	2301      	movs	r3, #1
 8004d02:	e000      	b.n	8004d06 <xQueueGenericCreate+0x4e>
 8004d04:	2300      	movs	r3, #0
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d10a      	bne.n	8004d20 <xQueueGenericCreate+0x68>
        __asm volatile
 8004d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d0e:	f383 8811 	msr	BASEPRI, r3
 8004d12:	f3bf 8f6f 	isb	sy
 8004d16:	f3bf 8f4f 	dsb	sy
 8004d1a:	617b      	str	r3, [r7, #20]
    }
 8004d1c:	bf00      	nop
 8004d1e:	e7fe      	b.n	8004d1e <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8004d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d22:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8004d26:	d90a      	bls.n	8004d3e <xQueueGenericCreate+0x86>
        __asm volatile
 8004d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d2c:	f383 8811 	msr	BASEPRI, r3
 8004d30:	f3bf 8f6f 	isb	sy
 8004d34:	f3bf 8f4f 	dsb	sy
 8004d38:	613b      	str	r3, [r7, #16]
    }
 8004d3a:	bf00      	nop
 8004d3c:	e7fe      	b.n	8004d3c <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d40:	3350      	adds	r3, #80	; 0x50
 8004d42:	4618      	mov	r0, r3
 8004d44:	f002 fc12 	bl	800756c <pvPortMalloc>
 8004d48:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8004d4a:	6a3b      	ldr	r3, [r7, #32]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d00d      	beq.n	8004d6c <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004d50:	6a3b      	ldr	r3, [r7, #32]
 8004d52:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	3350      	adds	r3, #80	; 0x50
 8004d58:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004d5a:	79fa      	ldrb	r2, [r7, #7]
 8004d5c:	6a3b      	ldr	r3, [r7, #32]
 8004d5e:	9300      	str	r3, [sp, #0]
 8004d60:	4613      	mov	r3, r2
 8004d62:	69fa      	ldr	r2, [r7, #28]
 8004d64:	68b9      	ldr	r1, [r7, #8]
 8004d66:	68f8      	ldr	r0, [r7, #12]
 8004d68:	f000 f805 	bl	8004d76 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8004d6c:	6a3b      	ldr	r3, [r7, #32]
    }
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3728      	adds	r7, #40	; 0x28
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8004d76:	b580      	push	{r7, lr}
 8004d78:	b084      	sub	sp, #16
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	60f8      	str	r0, [r7, #12]
 8004d7e:	60b9      	str	r1, [r7, #8]
 8004d80:	607a      	str	r2, [r7, #4]
 8004d82:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d103      	bne.n	8004d92 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	69ba      	ldr	r2, [r7, #24]
 8004d8e:	601a      	str	r2, [r3, #0]
 8004d90:	e002      	b.n	8004d98 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	68fa      	ldr	r2, [r7, #12]
 8004d9c:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	68ba      	ldr	r2, [r7, #8]
 8004da2:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004da4:	2101      	movs	r1, #1
 8004da6:	69b8      	ldr	r0, [r7, #24]
 8004da8:	f7ff ff1e 	bl	8004be8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	78fa      	ldrb	r2, [r7, #3]
 8004db0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8004db4:	bf00      	nop
 8004db6:	3710      	adds	r7, #16
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b08e      	sub	sp, #56	; 0x38
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	607a      	str	r2, [r7, #4]
 8004dc8:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8004dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d10a      	bne.n	8004dee <xQueueGenericSend+0x32>
        __asm volatile
 8004dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ddc:	f383 8811 	msr	BASEPRI, r3
 8004de0:	f3bf 8f6f 	isb	sy
 8004de4:	f3bf 8f4f 	dsb	sy
 8004de8:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8004dea:	bf00      	nop
 8004dec:	e7fe      	b.n	8004dec <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d103      	bne.n	8004dfc <xQueueGenericSend+0x40>
 8004df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d101      	bne.n	8004e00 <xQueueGenericSend+0x44>
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e000      	b.n	8004e02 <xQueueGenericSend+0x46>
 8004e00:	2300      	movs	r3, #0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d10a      	bne.n	8004e1c <xQueueGenericSend+0x60>
        __asm volatile
 8004e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e0a:	f383 8811 	msr	BASEPRI, r3
 8004e0e:	f3bf 8f6f 	isb	sy
 8004e12:	f3bf 8f4f 	dsb	sy
 8004e16:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8004e18:	bf00      	nop
 8004e1a:	e7fe      	b.n	8004e1a <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d103      	bne.n	8004e2a <xQueueGenericSend+0x6e>
 8004e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d101      	bne.n	8004e2e <xQueueGenericSend+0x72>
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e000      	b.n	8004e30 <xQueueGenericSend+0x74>
 8004e2e:	2300      	movs	r3, #0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d10a      	bne.n	8004e4a <xQueueGenericSend+0x8e>
        __asm volatile
 8004e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e38:	f383 8811 	msr	BASEPRI, r3
 8004e3c:	f3bf 8f6f 	isb	sy
 8004e40:	f3bf 8f4f 	dsb	sy
 8004e44:	623b      	str	r3, [r7, #32]
    }
 8004e46:	bf00      	nop
 8004e48:	e7fe      	b.n	8004e48 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e4a:	f001 f9d3 	bl	80061f4 <xTaskGetSchedulerState>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d102      	bne.n	8004e5a <xQueueGenericSend+0x9e>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d101      	bne.n	8004e5e <xQueueGenericSend+0xa2>
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e000      	b.n	8004e60 <xQueueGenericSend+0xa4>
 8004e5e:	2300      	movs	r3, #0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d10a      	bne.n	8004e7a <xQueueGenericSend+0xbe>
        __asm volatile
 8004e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e68:	f383 8811 	msr	BASEPRI, r3
 8004e6c:	f3bf 8f6f 	isb	sy
 8004e70:	f3bf 8f4f 	dsb	sy
 8004e74:	61fb      	str	r3, [r7, #28]
    }
 8004e76:	bf00      	nop
 8004e78:	e7fe      	b.n	8004e78 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004e7a:	f002 fa53 	bl	8007324 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d302      	bcc.n	8004e90 <xQueueGenericSend+0xd4>
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	2b02      	cmp	r3, #2
 8004e8e:	d129      	bne.n	8004ee4 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e90:	683a      	ldr	r2, [r7, #0]
 8004e92:	68b9      	ldr	r1, [r7, #8]
 8004e94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e96:	f000 fac6 	bl	8005426 <prvCopyDataToQueue>
 8004e9a:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d010      	beq.n	8004ec6 <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea6:	3324      	adds	r3, #36	; 0x24
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f001 f807 	bl	8005ebc <xTaskRemoveFromEventList>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d013      	beq.n	8004edc <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8004eb4:	4b3f      	ldr	r3, [pc, #252]	; (8004fb4 <xQueueGenericSend+0x1f8>)
 8004eb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004eba:	601a      	str	r2, [r3, #0]
 8004ebc:	f3bf 8f4f 	dsb	sy
 8004ec0:	f3bf 8f6f 	isb	sy
 8004ec4:	e00a      	b.n	8004edc <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8004ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d007      	beq.n	8004edc <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8004ecc:	4b39      	ldr	r3, [pc, #228]	; (8004fb4 <xQueueGenericSend+0x1f8>)
 8004ece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ed2:	601a      	str	r2, [r3, #0]
 8004ed4:	f3bf 8f4f 	dsb	sy
 8004ed8:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8004edc:	f002 fa52 	bl	8007384 <vPortExitCritical>
                return pdPASS;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e063      	b.n	8004fac <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d103      	bne.n	8004ef2 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004eea:	f002 fa4b 	bl	8007384 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	e05c      	b.n	8004fac <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d106      	bne.n	8004f06 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004ef8:	f107 0314 	add.w	r3, r7, #20
 8004efc:	4618      	mov	r0, r3
 8004efe:	f001 f83f 	bl	8005f80 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004f02:	2301      	movs	r3, #1
 8004f04:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004f06:	f002 fa3d 	bl	8007384 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004f0a:	f000 fdb9 	bl	8005a80 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004f0e:	f002 fa09 	bl	8007324 <vPortEnterCritical>
 8004f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f18:	b25b      	sxtb	r3, r3
 8004f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f1e:	d103      	bne.n	8004f28 <xQueueGenericSend+0x16c>
 8004f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f2e:	b25b      	sxtb	r3, r3
 8004f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f34:	d103      	bne.n	8004f3e <xQueueGenericSend+0x182>
 8004f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f3e:	f002 fa21 	bl	8007384 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f42:	1d3a      	adds	r2, r7, #4
 8004f44:	f107 0314 	add.w	r3, r7, #20
 8004f48:	4611      	mov	r1, r2
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f001 f82e 	bl	8005fac <xTaskCheckForTimeOut>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d124      	bne.n	8004fa0 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004f56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f58:	f000 fb5d 	bl	8005616 <prvIsQueueFull>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d018      	beq.n	8004f94 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f64:	3310      	adds	r3, #16
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	4611      	mov	r1, r2
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f000 ff56 	bl	8005e1c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8004f70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f72:	f000 fae8 	bl	8005546 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8004f76:	f000 fd91 	bl	8005a9c <xTaskResumeAll>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f47f af7c 	bne.w	8004e7a <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8004f82:	4b0c      	ldr	r3, [pc, #48]	; (8004fb4 <xQueueGenericSend+0x1f8>)
 8004f84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f88:	601a      	str	r2, [r3, #0]
 8004f8a:	f3bf 8f4f 	dsb	sy
 8004f8e:	f3bf 8f6f 	isb	sy
 8004f92:	e772      	b.n	8004e7a <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8004f94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f96:	f000 fad6 	bl	8005546 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004f9a:	f000 fd7f 	bl	8005a9c <xTaskResumeAll>
 8004f9e:	e76c      	b.n	8004e7a <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8004fa0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004fa2:	f000 fad0 	bl	8005546 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004fa6:	f000 fd79 	bl	8005a9c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8004faa:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3738      	adds	r7, #56	; 0x38
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	e000ed04 	.word	0xe000ed04

08004fb8 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b090      	sub	sp, #64	; 0x40
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	607a      	str	r2, [r7, #4]
 8004fc4:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8004fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d10a      	bne.n	8004fe6 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8004fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd4:	f383 8811 	msr	BASEPRI, r3
 8004fd8:	f3bf 8f6f 	isb	sy
 8004fdc:	f3bf 8f4f 	dsb	sy
 8004fe0:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8004fe2:	bf00      	nop
 8004fe4:	e7fe      	b.n	8004fe4 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d103      	bne.n	8004ff4 <xQueueGenericSendFromISR+0x3c>
 8004fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d101      	bne.n	8004ff8 <xQueueGenericSendFromISR+0x40>
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e000      	b.n	8004ffa <xQueueGenericSendFromISR+0x42>
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d10a      	bne.n	8005014 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8004ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005002:	f383 8811 	msr	BASEPRI, r3
 8005006:	f3bf 8f6f 	isb	sy
 800500a:	f3bf 8f4f 	dsb	sy
 800500e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8005010:	bf00      	nop
 8005012:	e7fe      	b.n	8005012 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	2b02      	cmp	r3, #2
 8005018:	d103      	bne.n	8005022 <xQueueGenericSendFromISR+0x6a>
 800501a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800501c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800501e:	2b01      	cmp	r3, #1
 8005020:	d101      	bne.n	8005026 <xQueueGenericSendFromISR+0x6e>
 8005022:	2301      	movs	r3, #1
 8005024:	e000      	b.n	8005028 <xQueueGenericSendFromISR+0x70>
 8005026:	2300      	movs	r3, #0
 8005028:	2b00      	cmp	r3, #0
 800502a:	d10a      	bne.n	8005042 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 800502c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005030:	f383 8811 	msr	BASEPRI, r3
 8005034:	f3bf 8f6f 	isb	sy
 8005038:	f3bf 8f4f 	dsb	sy
 800503c:	623b      	str	r3, [r7, #32]
    }
 800503e:	bf00      	nop
 8005040:	e7fe      	b.n	8005040 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005042:	f002 fa53 	bl	80074ec <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8005046:	f3ef 8211 	mrs	r2, BASEPRI
 800504a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800504e:	f383 8811 	msr	BASEPRI, r3
 8005052:	f3bf 8f6f 	isb	sy
 8005056:	f3bf 8f4f 	dsb	sy
 800505a:	61fa      	str	r2, [r7, #28]
 800505c:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800505e:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005060:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005064:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800506a:	429a      	cmp	r2, r3
 800506c:	d302      	bcc.n	8005074 <xQueueGenericSendFromISR+0xbc>
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	2b02      	cmp	r3, #2
 8005072:	d13e      	bne.n	80050f2 <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8005074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005076:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800507a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800507e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005082:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005084:	683a      	ldr	r2, [r7, #0]
 8005086:	68b9      	ldr	r1, [r7, #8]
 8005088:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800508a:	f000 f9cc 	bl	8005426 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800508e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005096:	d112      	bne.n	80050be <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800509a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509c:	2b00      	cmp	r3, #0
 800509e:	d025      	beq.n	80050ec <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050a2:	3324      	adds	r3, #36	; 0x24
 80050a4:	4618      	mov	r0, r3
 80050a6:	f000 ff09 	bl	8005ebc <xTaskRemoveFromEventList>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d01d      	beq.n	80050ec <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d01a      	beq.n	80050ec <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2201      	movs	r2, #1
 80050ba:	601a      	str	r2, [r3, #0]
 80050bc:	e016      	b.n	80050ec <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80050be:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80050c2:	2b7f      	cmp	r3, #127	; 0x7f
 80050c4:	d10a      	bne.n	80050dc <xQueueGenericSendFromISR+0x124>
        __asm volatile
 80050c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ca:	f383 8811 	msr	BASEPRI, r3
 80050ce:	f3bf 8f6f 	isb	sy
 80050d2:	f3bf 8f4f 	dsb	sy
 80050d6:	617b      	str	r3, [r7, #20]
    }
 80050d8:	bf00      	nop
 80050da:	e7fe      	b.n	80050da <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80050dc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80050e0:	3301      	adds	r3, #1
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	b25a      	sxtb	r2, r3
 80050e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80050ec:	2301      	movs	r3, #1
 80050ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 80050f0:	e001      	b.n	80050f6 <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80050f2:	2300      	movs	r3, #0
 80050f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050f8:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8005100:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8005102:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005104:	4618      	mov	r0, r3
 8005106:	3740      	adds	r7, #64	; 0x40
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b08c      	sub	sp, #48	; 0x30
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8005118:	2300      	movs	r3, #0
 800511a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8005120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005122:	2b00      	cmp	r3, #0
 8005124:	d10a      	bne.n	800513c <xQueueReceive+0x30>
        __asm volatile
 8005126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800512a:	f383 8811 	msr	BASEPRI, r3
 800512e:	f3bf 8f6f 	isb	sy
 8005132:	f3bf 8f4f 	dsb	sy
 8005136:	623b      	str	r3, [r7, #32]
    }
 8005138:	bf00      	nop
 800513a:	e7fe      	b.n	800513a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d103      	bne.n	800514a <xQueueReceive+0x3e>
 8005142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005146:	2b00      	cmp	r3, #0
 8005148:	d101      	bne.n	800514e <xQueueReceive+0x42>
 800514a:	2301      	movs	r3, #1
 800514c:	e000      	b.n	8005150 <xQueueReceive+0x44>
 800514e:	2300      	movs	r3, #0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d10a      	bne.n	800516a <xQueueReceive+0x5e>
        __asm volatile
 8005154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005158:	f383 8811 	msr	BASEPRI, r3
 800515c:	f3bf 8f6f 	isb	sy
 8005160:	f3bf 8f4f 	dsb	sy
 8005164:	61fb      	str	r3, [r7, #28]
    }
 8005166:	bf00      	nop
 8005168:	e7fe      	b.n	8005168 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800516a:	f001 f843 	bl	80061f4 <xTaskGetSchedulerState>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d102      	bne.n	800517a <xQueueReceive+0x6e>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d101      	bne.n	800517e <xQueueReceive+0x72>
 800517a:	2301      	movs	r3, #1
 800517c:	e000      	b.n	8005180 <xQueueReceive+0x74>
 800517e:	2300      	movs	r3, #0
 8005180:	2b00      	cmp	r3, #0
 8005182:	d10a      	bne.n	800519a <xQueueReceive+0x8e>
        __asm volatile
 8005184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005188:	f383 8811 	msr	BASEPRI, r3
 800518c:	f3bf 8f6f 	isb	sy
 8005190:	f3bf 8f4f 	dsb	sy
 8005194:	61bb      	str	r3, [r7, #24]
    }
 8005196:	bf00      	nop
 8005198:	e7fe      	b.n	8005198 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800519a:	f002 f8c3 	bl	8007324 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800519e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a2:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80051a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d01f      	beq.n	80051ea <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80051aa:	68b9      	ldr	r1, [r7, #8]
 80051ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051ae:	f000 f9a4 	bl	80054fa <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80051b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b4:	1e5a      	subs	r2, r3, #1
 80051b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b8:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d00f      	beq.n	80051e2 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c4:	3310      	adds	r3, #16
 80051c6:	4618      	mov	r0, r3
 80051c8:	f000 fe78 	bl	8005ebc <xTaskRemoveFromEventList>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d007      	beq.n	80051e2 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80051d2:	4b3d      	ldr	r3, [pc, #244]	; (80052c8 <xQueueReceive+0x1bc>)
 80051d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051d8:	601a      	str	r2, [r3, #0]
 80051da:	f3bf 8f4f 	dsb	sy
 80051de:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80051e2:	f002 f8cf 	bl	8007384 <vPortExitCritical>
                return pdPASS;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e069      	b.n	80052be <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d103      	bne.n	80051f8 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80051f0:	f002 f8c8 	bl	8007384 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80051f4:	2300      	movs	r3, #0
 80051f6:	e062      	b.n	80052be <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 80051f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d106      	bne.n	800520c <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80051fe:	f107 0310 	add.w	r3, r7, #16
 8005202:	4618      	mov	r0, r3
 8005204:	f000 febc 	bl	8005f80 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005208:	2301      	movs	r3, #1
 800520a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800520c:	f002 f8ba 	bl	8007384 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005210:	f000 fc36 	bl	8005a80 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005214:	f002 f886 	bl	8007324 <vPortEnterCritical>
 8005218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800521a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800521e:	b25b      	sxtb	r3, r3
 8005220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005224:	d103      	bne.n	800522e <xQueueReceive+0x122>
 8005226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005228:	2200      	movs	r2, #0
 800522a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800522e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005230:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005234:	b25b      	sxtb	r3, r3
 8005236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800523a:	d103      	bne.n	8005244 <xQueueReceive+0x138>
 800523c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800523e:	2200      	movs	r2, #0
 8005240:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005244:	f002 f89e 	bl	8007384 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005248:	1d3a      	adds	r2, r7, #4
 800524a:	f107 0310 	add.w	r3, r7, #16
 800524e:	4611      	mov	r1, r2
 8005250:	4618      	mov	r0, r3
 8005252:	f000 feab 	bl	8005fac <xTaskCheckForTimeOut>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d123      	bne.n	80052a4 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800525c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800525e:	f000 f9c4 	bl	80055ea <prvIsQueueEmpty>
 8005262:	4603      	mov	r3, r0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d017      	beq.n	8005298 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800526a:	3324      	adds	r3, #36	; 0x24
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	4611      	mov	r1, r2
 8005270:	4618      	mov	r0, r3
 8005272:	f000 fdd3 	bl	8005e1c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8005276:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005278:	f000 f965 	bl	8005546 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800527c:	f000 fc0e 	bl	8005a9c <xTaskResumeAll>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d189      	bne.n	800519a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8005286:	4b10      	ldr	r3, [pc, #64]	; (80052c8 <xQueueReceive+0x1bc>)
 8005288:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800528c:	601a      	str	r2, [r3, #0]
 800528e:	f3bf 8f4f 	dsb	sy
 8005292:	f3bf 8f6f 	isb	sy
 8005296:	e780      	b.n	800519a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8005298:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800529a:	f000 f954 	bl	8005546 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800529e:	f000 fbfd 	bl	8005a9c <xTaskResumeAll>
 80052a2:	e77a      	b.n	800519a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80052a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052a6:	f000 f94e 	bl	8005546 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80052aa:	f000 fbf7 	bl	8005a9c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80052ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052b0:	f000 f99b 	bl	80055ea <prvIsQueueEmpty>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	f43f af6f 	beq.w	800519a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80052bc:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3730      	adds	r7, #48	; 0x30
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	e000ed04 	.word	0xe000ed04

080052cc <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b090      	sub	sp, #64	; 0x40
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80052dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d10a      	bne.n	80052f8 <xQueueReceiveFromISR+0x2c>
        __asm volatile
 80052e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e6:	f383 8811 	msr	BASEPRI, r3
 80052ea:	f3bf 8f6f 	isb	sy
 80052ee:	f3bf 8f4f 	dsb	sy
 80052f2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80052f4:	bf00      	nop
 80052f6:	e7fe      	b.n	80052f6 <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d103      	bne.n	8005306 <xQueueReceiveFromISR+0x3a>
 80052fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005302:	2b00      	cmp	r3, #0
 8005304:	d101      	bne.n	800530a <xQueueReceiveFromISR+0x3e>
 8005306:	2301      	movs	r3, #1
 8005308:	e000      	b.n	800530c <xQueueReceiveFromISR+0x40>
 800530a:	2300      	movs	r3, #0
 800530c:	2b00      	cmp	r3, #0
 800530e:	d10a      	bne.n	8005326 <xQueueReceiveFromISR+0x5a>
        __asm volatile
 8005310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005314:	f383 8811 	msr	BASEPRI, r3
 8005318:	f3bf 8f6f 	isb	sy
 800531c:	f3bf 8f4f 	dsb	sy
 8005320:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8005322:	bf00      	nop
 8005324:	e7fe      	b.n	8005324 <xQueueReceiveFromISR+0x58>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005326:	f002 f8e1 	bl	80074ec <vPortValidateInterruptPriority>
        __asm volatile
 800532a:	f3ef 8211 	mrs	r2, BASEPRI
 800532e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005332:	f383 8811 	msr	BASEPRI, r3
 8005336:	f3bf 8f6f 	isb	sy
 800533a:	f3bf 8f4f 	dsb	sy
 800533e:	623a      	str	r2, [r7, #32]
 8005340:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 8005342:	6a3b      	ldr	r3, [r7, #32]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005344:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800534a:	633b      	str	r3, [r7, #48]	; 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800534c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800534e:	2b00      	cmp	r3, #0
 8005350:	d03e      	beq.n	80053d0 <xQueueReceiveFromISR+0x104>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 8005352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005354:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005358:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 800535c:	68b9      	ldr	r1, [r7, #8]
 800535e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005360:	f000 f8cb 	bl	80054fa <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005366:	1e5a      	subs	r2, r3, #1
 8005368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800536a:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 800536c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005374:	d112      	bne.n	800539c <xQueueReceiveFromISR+0xd0>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d025      	beq.n	80053ca <xQueueReceiveFromISR+0xfe>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800537e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005380:	3310      	adds	r3, #16
 8005382:	4618      	mov	r0, r3
 8005384:	f000 fd9a 	bl	8005ebc <xTaskRemoveFromEventList>
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d01d      	beq.n	80053ca <xQueueReceiveFromISR+0xfe>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d01a      	beq.n	80053ca <xQueueReceiveFromISR+0xfe>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	601a      	str	r2, [r3, #0]
 800539a:	e016      	b.n	80053ca <xQueueReceiveFromISR+0xfe>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                configASSERT( cRxLock != queueINT8_MAX );
 800539c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80053a0:	2b7f      	cmp	r3, #127	; 0x7f
 80053a2:	d10a      	bne.n	80053ba <xQueueReceiveFromISR+0xee>
        __asm volatile
 80053a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a8:	f383 8811 	msr	BASEPRI, r3
 80053ac:	f3bf 8f6f 	isb	sy
 80053b0:	f3bf 8f4f 	dsb	sy
 80053b4:	61bb      	str	r3, [r7, #24]
    }
 80053b6:	bf00      	nop
 80053b8:	e7fe      	b.n	80053b8 <xQueueReceiveFromISR+0xec>

                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80053ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80053be:	3301      	adds	r3, #1
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	b25a      	sxtb	r2, r3
 80053c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 80053ca:	2301      	movs	r3, #1
 80053cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053ce:	e001      	b.n	80053d4 <xQueueReceiveFromISR+0x108>
        }
        else
        {
            xReturn = pdFAIL;
 80053d0:	2300      	movs	r3, #0
 80053d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053d6:	617b      	str	r3, [r7, #20]
        __asm volatile
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	f383 8811 	msr	BASEPRI, r3
    }
 80053de:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80053e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3740      	adds	r7, #64	; 0x40
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}

080053ea <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80053ea:	b580      	push	{r7, lr}
 80053ec:	b084      	sub	sp, #16
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d10a      	bne.n	800540e <uxQueueMessagesWaiting+0x24>
        __asm volatile
 80053f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053fc:	f383 8811 	msr	BASEPRI, r3
 8005400:	f3bf 8f6f 	isb	sy
 8005404:	f3bf 8f4f 	dsb	sy
 8005408:	60bb      	str	r3, [r7, #8]
    }
 800540a:	bf00      	nop
 800540c:	e7fe      	b.n	800540c <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 800540e:	f001 ff89 	bl	8007324 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005416:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8005418:	f001 ffb4 	bl	8007384 <vPortExitCritical>

    return uxReturn;
 800541c:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800541e:	4618      	mov	r0, r3
 8005420:	3710      	adds	r7, #16
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}

08005426 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8005426:	b580      	push	{r7, lr}
 8005428:	b086      	sub	sp, #24
 800542a:	af00      	add	r7, sp, #0
 800542c:	60f8      	str	r0, [r7, #12]
 800542e:	60b9      	str	r1, [r7, #8]
 8005430:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8005432:	2300      	movs	r3, #0
 8005434:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800543a:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005440:	2b00      	cmp	r3, #0
 8005442:	d10d      	bne.n	8005460 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d14d      	bne.n	80054e8 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	4618      	mov	r0, r3
 8005452:	f000 feed 	bl	8006230 <xTaskPriorityDisinherit>
 8005456:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2200      	movs	r2, #0
 800545c:	609a      	str	r2, [r3, #8]
 800545e:	e043      	b.n	80054e8 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d119      	bne.n	800549a <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6858      	ldr	r0, [r3, #4]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546e:	461a      	mov	r2, r3
 8005470:	68b9      	ldr	r1, [r7, #8]
 8005472:	f002 faa3 	bl	80079bc <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	685a      	ldr	r2, [r3, #4]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547e:	441a      	add	r2, r3
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	685a      	ldr	r2, [r3, #4]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	429a      	cmp	r2, r3
 800548e:	d32b      	bcc.n	80054e8 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	605a      	str	r2, [r3, #4]
 8005498:	e026      	b.n	80054e8 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	68d8      	ldr	r0, [r3, #12]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a2:	461a      	mov	r2, r3
 80054a4:	68b9      	ldr	r1, [r7, #8]
 80054a6:	f002 fa89 	bl	80079bc <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	68da      	ldr	r2, [r3, #12]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b2:	425b      	negs	r3, r3
 80054b4:	441a      	add	r2, r3
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	68da      	ldr	r2, [r3, #12]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d207      	bcs.n	80054d6 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	689a      	ldr	r2, [r3, #8]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ce:	425b      	negs	r3, r3
 80054d0:	441a      	add	r2, r3
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2b02      	cmp	r3, #2
 80054da:	d105      	bne.n	80054e8 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d002      	beq.n	80054e8 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	3b01      	subs	r3, #1
 80054e6:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	1c5a      	adds	r2, r3, #1
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80054f0:	697b      	ldr	r3, [r7, #20]
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3718      	adds	r7, #24
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}

080054fa <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80054fa:	b580      	push	{r7, lr}
 80054fc:	b082      	sub	sp, #8
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
 8005502:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005508:	2b00      	cmp	r3, #0
 800550a:	d018      	beq.n	800553e <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	68da      	ldr	r2, [r3, #12]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005514:	441a      	add	r2, r3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	68da      	ldr	r2, [r3, #12]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	429a      	cmp	r2, r3
 8005524:	d303      	bcc.n	800552e <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	68d9      	ldr	r1, [r3, #12]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005536:	461a      	mov	r2, r3
 8005538:	6838      	ldr	r0, [r7, #0]
 800553a:	f002 fa3f 	bl	80079bc <memcpy>
    }
}
 800553e:	bf00      	nop
 8005540:	3708      	adds	r7, #8
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}

08005546 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005546:	b580      	push	{r7, lr}
 8005548:	b084      	sub	sp, #16
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800554e:	f001 fee9 	bl	8007324 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005558:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800555a:	e011      	b.n	8005580 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005560:	2b00      	cmp	r3, #0
 8005562:	d012      	beq.n	800558a <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	3324      	adds	r3, #36	; 0x24
 8005568:	4618      	mov	r0, r3
 800556a:	f000 fca7 	bl	8005ebc <xTaskRemoveFromEventList>
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d001      	beq.n	8005578 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8005574:	f000 fd80 	bl	8006078 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8005578:	7bfb      	ldrb	r3, [r7, #15]
 800557a:	3b01      	subs	r3, #1
 800557c:	b2db      	uxtb	r3, r3
 800557e:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8005580:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005584:	2b00      	cmp	r3, #0
 8005586:	dce9      	bgt.n	800555c <prvUnlockQueue+0x16>
 8005588:	e000      	b.n	800558c <prvUnlockQueue+0x46>
                        break;
 800558a:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	22ff      	movs	r2, #255	; 0xff
 8005590:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8005594:	f001 fef6 	bl	8007384 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8005598:	f001 fec4 	bl	8007324 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80055a2:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80055a4:	e011      	b.n	80055ca <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d012      	beq.n	80055d4 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	3310      	adds	r3, #16
 80055b2:	4618      	mov	r0, r3
 80055b4:	f000 fc82 	bl	8005ebc <xTaskRemoveFromEventList>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d001      	beq.n	80055c2 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80055be:	f000 fd5b 	bl	8006078 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80055c2:	7bbb      	ldrb	r3, [r7, #14]
 80055c4:	3b01      	subs	r3, #1
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80055ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	dce9      	bgt.n	80055a6 <prvUnlockQueue+0x60>
 80055d2:	e000      	b.n	80055d6 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80055d4:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	22ff      	movs	r2, #255	; 0xff
 80055da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80055de:	f001 fed1 	bl	8007384 <vPortExitCritical>
}
 80055e2:	bf00      	nop
 80055e4:	3710      	adds	r7, #16
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}

080055ea <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80055ea:	b580      	push	{r7, lr}
 80055ec:	b084      	sub	sp, #16
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80055f2:	f001 fe97 	bl	8007324 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d102      	bne.n	8005604 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80055fe:	2301      	movs	r3, #1
 8005600:	60fb      	str	r3, [r7, #12]
 8005602:	e001      	b.n	8005608 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8005604:	2300      	movs	r3, #0
 8005606:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005608:	f001 febc 	bl	8007384 <vPortExitCritical>

    return xReturn;
 800560c:	68fb      	ldr	r3, [r7, #12]
}
 800560e:	4618      	mov	r0, r3
 8005610:	3710      	adds	r7, #16
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}

08005616 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8005616:	b580      	push	{r7, lr}
 8005618:	b084      	sub	sp, #16
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800561e:	f001 fe81 	bl	8007324 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800562a:	429a      	cmp	r2, r3
 800562c:	d102      	bne.n	8005634 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800562e:	2301      	movs	r3, #1
 8005630:	60fb      	str	r3, [r7, #12]
 8005632:	e001      	b.n	8005638 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8005634:	2300      	movs	r3, #0
 8005636:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005638:	f001 fea4 	bl	8007384 <vPortExitCritical>

    return xReturn;
 800563c:	68fb      	ldr	r3, [r7, #12]
}
 800563e:	4618      	mov	r0, r3
 8005640:	3710      	adds	r7, #16
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}

08005646 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 8005646:	b480      	push	{r7}
 8005648:	b087      	sub	sp, #28
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d10a      	bne.n	800566e <xQueueIsQueueFullFromISR+0x28>
        __asm volatile
 8005658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800565c:	f383 8811 	msr	BASEPRI, r3
 8005660:	f3bf 8f6f 	isb	sy
 8005664:	f3bf 8f4f 	dsb	sy
 8005668:	60fb      	str	r3, [r7, #12]
    }
 800566a:	bf00      	nop
 800566c:	e7fe      	b.n	800566c <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005676:	429a      	cmp	r2, r3
 8005678:	d102      	bne.n	8005680 <xQueueIsQueueFullFromISR+0x3a>
    {
        xReturn = pdTRUE;
 800567a:	2301      	movs	r3, #1
 800567c:	617b      	str	r3, [r7, #20]
 800567e:	e001      	b.n	8005684 <xQueueIsQueueFullFromISR+0x3e>
    }
    else
    {
        xReturn = pdFALSE;
 8005680:	2300      	movs	r3, #0
 8005682:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8005684:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005686:	4618      	mov	r0, r3
 8005688:	371c      	adds	r7, #28
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr
	...

08005694 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8005694:	b480      	push	{r7}
 8005696:	b085      	sub	sp, #20
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800569e:	2300      	movs	r3, #0
 80056a0:	60fb      	str	r3, [r7, #12]
 80056a2:	e014      	b.n	80056ce <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80056a4:	4a0f      	ldr	r2, [pc, #60]	; (80056e4 <vQueueAddToRegistry+0x50>)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d10b      	bne.n	80056c8 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80056b0:	490c      	ldr	r1, [pc, #48]	; (80056e4 <vQueueAddToRegistry+0x50>)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	683a      	ldr	r2, [r7, #0]
 80056b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80056ba:	4a0a      	ldr	r2, [pc, #40]	; (80056e4 <vQueueAddToRegistry+0x50>)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	00db      	lsls	r3, r3, #3
 80056c0:	4413      	add	r3, r2
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 80056c6:	e006      	b.n	80056d6 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	3301      	adds	r3, #1
 80056cc:	60fb      	str	r3, [r7, #12]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2b07      	cmp	r3, #7
 80056d2:	d9e7      	bls.n	80056a4 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80056d4:	bf00      	nop
 80056d6:	bf00      	nop
 80056d8:	3714      	adds	r7, #20
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	200001e8 	.word	0x200001e8

080056e8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b086      	sub	sp, #24
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80056f8:	f001 fe14 	bl	8007324 <vPortEnterCritical>
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005702:	b25b      	sxtb	r3, r3
 8005704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005708:	d103      	bne.n	8005712 <vQueueWaitForMessageRestricted+0x2a>
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	2200      	movs	r2, #0
 800570e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005718:	b25b      	sxtb	r3, r3
 800571a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800571e:	d103      	bne.n	8005728 <vQueueWaitForMessageRestricted+0x40>
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	2200      	movs	r2, #0
 8005724:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005728:	f001 fe2c 	bl	8007384 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005730:	2b00      	cmp	r3, #0
 8005732:	d106      	bne.n	8005742 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	3324      	adds	r3, #36	; 0x24
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	68b9      	ldr	r1, [r7, #8]
 800573c:	4618      	mov	r0, r3
 800573e:	f000 fb91 	bl	8005e64 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8005742:	6978      	ldr	r0, [r7, #20]
 8005744:	f7ff feff 	bl	8005546 <prvUnlockQueue>
    }
 8005748:	bf00      	nop
 800574a:	3718      	adds	r7, #24
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}

08005750 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8005750:	b580      	push	{r7, lr}
 8005752:	b08c      	sub	sp, #48	; 0x30
 8005754:	af04      	add	r7, sp, #16
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	603b      	str	r3, [r7, #0]
 800575c:	4613      	mov	r3, r2
 800575e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005760:	88fb      	ldrh	r3, [r7, #6]
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	4618      	mov	r0, r3
 8005766:	f001 ff01 	bl	800756c <pvPortMalloc>
 800576a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d00e      	beq.n	8005790 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005772:	2058      	movs	r0, #88	; 0x58
 8005774:	f001 fefa 	bl	800756c <pvPortMalloc>
 8005778:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d003      	beq.n	8005788 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	697a      	ldr	r2, [r7, #20]
 8005784:	631a      	str	r2, [r3, #48]	; 0x30
 8005786:	e005      	b.n	8005794 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8005788:	6978      	ldr	r0, [r7, #20]
 800578a:	f001 ffcf 	bl	800772c <vPortFree>
 800578e:	e001      	b.n	8005794 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8005790:	2300      	movs	r3, #0
 8005792:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d013      	beq.n	80057c2 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800579a:	88fa      	ldrh	r2, [r7, #6]
 800579c:	2300      	movs	r3, #0
 800579e:	9303      	str	r3, [sp, #12]
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	9302      	str	r3, [sp, #8]
 80057a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a6:	9301      	str	r3, [sp, #4]
 80057a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057aa:	9300      	str	r3, [sp, #0]
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	68b9      	ldr	r1, [r7, #8]
 80057b0:	68f8      	ldr	r0, [r7, #12]
 80057b2:	f000 f80e 	bl	80057d2 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80057b6:	69f8      	ldr	r0, [r7, #28]
 80057b8:	f000 f8a2 	bl	8005900 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80057bc:	2301      	movs	r3, #1
 80057be:	61bb      	str	r3, [r7, #24]
 80057c0:	e002      	b.n	80057c8 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80057c2:	f04f 33ff 	mov.w	r3, #4294967295
 80057c6:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80057c8:	69bb      	ldr	r3, [r7, #24]
    }
 80057ca:	4618      	mov	r0, r3
 80057cc:	3720      	adds	r7, #32
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}

080057d2 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80057d2:	b580      	push	{r7, lr}
 80057d4:	b088      	sub	sp, #32
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	60f8      	str	r0, [r7, #12]
 80057da:	60b9      	str	r1, [r7, #8]
 80057dc:	607a      	str	r2, [r7, #4]
 80057de:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80057e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	461a      	mov	r2, r3
 80057ea:	21a5      	movs	r1, #165	; 0xa5
 80057ec:	f002 f8f4 	bl	80079d8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80057f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80057fa:	3b01      	subs	r3, #1
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	4413      	add	r3, r2
 8005800:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005802:	69bb      	ldr	r3, [r7, #24]
 8005804:	f023 0307 	bic.w	r3, r3, #7
 8005808:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800580a:	69bb      	ldr	r3, [r7, #24]
 800580c:	f003 0307 	and.w	r3, r3, #7
 8005810:	2b00      	cmp	r3, #0
 8005812:	d00a      	beq.n	800582a <prvInitialiseNewTask+0x58>
        __asm volatile
 8005814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005818:	f383 8811 	msr	BASEPRI, r3
 800581c:	f3bf 8f6f 	isb	sy
 8005820:	f3bf 8f4f 	dsb	sy
 8005824:	617b      	str	r3, [r7, #20]
    }
 8005826:	bf00      	nop
 8005828:	e7fe      	b.n	8005828 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d01f      	beq.n	8005870 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005830:	2300      	movs	r3, #0
 8005832:	61fb      	str	r3, [r7, #28]
 8005834:	e012      	b.n	800585c <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005836:	68ba      	ldr	r2, [r7, #8]
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	4413      	add	r3, r2
 800583c:	7819      	ldrb	r1, [r3, #0]
 800583e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	4413      	add	r3, r2
 8005844:	3334      	adds	r3, #52	; 0x34
 8005846:	460a      	mov	r2, r1
 8005848:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800584a:	68ba      	ldr	r2, [r7, #8]
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	4413      	add	r3, r2
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d006      	beq.n	8005864 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	3301      	adds	r3, #1
 800585a:	61fb      	str	r3, [r7, #28]
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	2b09      	cmp	r3, #9
 8005860:	d9e9      	bls.n	8005836 <prvInitialiseNewTask+0x64>
 8005862:	e000      	b.n	8005866 <prvInitialiseNewTask+0x94>
            {
                break;
 8005864:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005868:	2200      	movs	r2, #0
 800586a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800586e:	e003      	b.n	8005878 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005872:	2200      	movs	r2, #0
 8005874:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800587a:	2b04      	cmp	r3, #4
 800587c:	d901      	bls.n	8005882 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800587e:	2304      	movs	r3, #4
 8005880:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8005882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005884:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005886:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8005888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800588a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800588c:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800588e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005890:	2200      	movs	r2, #0
 8005892:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005896:	3304      	adds	r3, #4
 8005898:	4618      	mov	r0, r3
 800589a:	f7ff f911 	bl	8004ac0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800589e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a0:	3318      	adds	r3, #24
 80058a2:	4618      	mov	r0, r3
 80058a4:	f7ff f90c 	bl	8004ac0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80058a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058ac:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b0:	f1c3 0205 	rsb	r2, r3, #5
 80058b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b6:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80058b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058bc:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80058be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c0:	3350      	adds	r3, #80	; 0x50
 80058c2:	2204      	movs	r2, #4
 80058c4:	2100      	movs	r1, #0
 80058c6:	4618      	mov	r0, r3
 80058c8:	f002 f886 	bl	80079d8 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80058cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ce:	3354      	adds	r3, #84	; 0x54
 80058d0:	2201      	movs	r2, #1
 80058d2:	2100      	movs	r1, #0
 80058d4:	4618      	mov	r0, r3
 80058d6:	f002 f87f 	bl	80079d8 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80058da:	683a      	ldr	r2, [r7, #0]
 80058dc:	68f9      	ldr	r1, [r7, #12]
 80058de:	69b8      	ldr	r0, [r7, #24]
 80058e0:	f001 fb76 	bl	8006fd0 <pxPortInitialiseStack>
 80058e4:	4602      	mov	r2, r0
 80058e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e8:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80058ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d002      	beq.n	80058f6 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80058f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058f4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80058f6:	bf00      	nop
 80058f8:	3720      	adds	r7, #32
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
	...

08005900 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b082      	sub	sp, #8
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8005908:	f001 fd0c 	bl	8007324 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800590c:	4b2c      	ldr	r3, [pc, #176]	; (80059c0 <prvAddNewTaskToReadyList+0xc0>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	3301      	adds	r3, #1
 8005912:	4a2b      	ldr	r2, [pc, #172]	; (80059c0 <prvAddNewTaskToReadyList+0xc0>)
 8005914:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8005916:	4b2b      	ldr	r3, [pc, #172]	; (80059c4 <prvAddNewTaskToReadyList+0xc4>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d109      	bne.n	8005932 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800591e:	4a29      	ldr	r2, [pc, #164]	; (80059c4 <prvAddNewTaskToReadyList+0xc4>)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005924:	4b26      	ldr	r3, [pc, #152]	; (80059c0 <prvAddNewTaskToReadyList+0xc0>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2b01      	cmp	r3, #1
 800592a:	d110      	bne.n	800594e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800592c:	f000 fbc8 	bl	80060c0 <prvInitialiseTaskLists>
 8005930:	e00d      	b.n	800594e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8005932:	4b25      	ldr	r3, [pc, #148]	; (80059c8 <prvAddNewTaskToReadyList+0xc8>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d109      	bne.n	800594e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800593a:	4b22      	ldr	r3, [pc, #136]	; (80059c4 <prvAddNewTaskToReadyList+0xc4>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005944:	429a      	cmp	r2, r3
 8005946:	d802      	bhi.n	800594e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8005948:	4a1e      	ldr	r2, [pc, #120]	; (80059c4 <prvAddNewTaskToReadyList+0xc4>)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800594e:	4b1f      	ldr	r3, [pc, #124]	; (80059cc <prvAddNewTaskToReadyList+0xcc>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	3301      	adds	r3, #1
 8005954:	4a1d      	ldr	r2, [pc, #116]	; (80059cc <prvAddNewTaskToReadyList+0xcc>)
 8005956:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005958:	4b1c      	ldr	r3, [pc, #112]	; (80059cc <prvAddNewTaskToReadyList+0xcc>)
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005964:	2201      	movs	r2, #1
 8005966:	409a      	lsls	r2, r3
 8005968:	4b19      	ldr	r3, [pc, #100]	; (80059d0 <prvAddNewTaskToReadyList+0xd0>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4313      	orrs	r3, r2
 800596e:	4a18      	ldr	r2, [pc, #96]	; (80059d0 <prvAddNewTaskToReadyList+0xd0>)
 8005970:	6013      	str	r3, [r2, #0]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005976:	4613      	mov	r3, r2
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	4413      	add	r3, r2
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	4a15      	ldr	r2, [pc, #84]	; (80059d4 <prvAddNewTaskToReadyList+0xd4>)
 8005980:	441a      	add	r2, r3
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	3304      	adds	r3, #4
 8005986:	4619      	mov	r1, r3
 8005988:	4610      	mov	r0, r2
 800598a:	f7ff f8a6 	bl	8004ada <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800598e:	f001 fcf9 	bl	8007384 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8005992:	4b0d      	ldr	r3, [pc, #52]	; (80059c8 <prvAddNewTaskToReadyList+0xc8>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d00e      	beq.n	80059b8 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800599a:	4b0a      	ldr	r3, [pc, #40]	; (80059c4 <prvAddNewTaskToReadyList+0xc4>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d207      	bcs.n	80059b8 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80059a8:	4b0b      	ldr	r3, [pc, #44]	; (80059d8 <prvAddNewTaskToReadyList+0xd8>)
 80059aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059ae:	601a      	str	r2, [r3, #0]
 80059b0:	f3bf 8f4f 	dsb	sy
 80059b4:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80059b8:	bf00      	nop
 80059ba:	3708      	adds	r7, #8
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	20000300 	.word	0x20000300
 80059c4:	20000228 	.word	0x20000228
 80059c8:	2000030c 	.word	0x2000030c
 80059cc:	2000031c 	.word	0x2000031c
 80059d0:	20000308 	.word	0x20000308
 80059d4:	2000022c 	.word	0x2000022c
 80059d8:	e000ed04 	.word	0xe000ed04

080059dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b086      	sub	sp, #24
 80059e0:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80059e2:	4b20      	ldr	r3, [pc, #128]	; (8005a64 <vTaskStartScheduler+0x88>)
 80059e4:	9301      	str	r3, [sp, #4]
 80059e6:	2300      	movs	r3, #0
 80059e8:	9300      	str	r3, [sp, #0]
 80059ea:	2300      	movs	r3, #0
 80059ec:	2282      	movs	r2, #130	; 0x82
 80059ee:	491e      	ldr	r1, [pc, #120]	; (8005a68 <vTaskStartScheduler+0x8c>)
 80059f0:	481e      	ldr	r0, [pc, #120]	; (8005a6c <vTaskStartScheduler+0x90>)
 80059f2:	f7ff fead 	bl	8005750 <xTaskCreate>
 80059f6:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d102      	bne.n	8005a04 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80059fe:	f000 ff59 	bl	80068b4 <xTimerCreateTimerTask>
 8005a02:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d116      	bne.n	8005a38 <vTaskStartScheduler+0x5c>
        __asm volatile
 8005a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a0e:	f383 8811 	msr	BASEPRI, r3
 8005a12:	f3bf 8f6f 	isb	sy
 8005a16:	f3bf 8f4f 	dsb	sy
 8005a1a:	60bb      	str	r3, [r7, #8]
    }
 8005a1c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8005a1e:	4b14      	ldr	r3, [pc, #80]	; (8005a70 <vTaskStartScheduler+0x94>)
 8005a20:	f04f 32ff 	mov.w	r2, #4294967295
 8005a24:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8005a26:	4b13      	ldr	r3, [pc, #76]	; (8005a74 <vTaskStartScheduler+0x98>)
 8005a28:	2201      	movs	r2, #1
 8005a2a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005a2c:	4b12      	ldr	r3, [pc, #72]	; (8005a78 <vTaskStartScheduler+0x9c>)
 8005a2e:	2200      	movs	r2, #0
 8005a30:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8005a32:	f001 fb57 	bl	80070e4 <xPortStartScheduler>
 8005a36:	e00e      	b.n	8005a56 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a3e:	d10a      	bne.n	8005a56 <vTaskStartScheduler+0x7a>
        __asm volatile
 8005a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a44:	f383 8811 	msr	BASEPRI, r3
 8005a48:	f3bf 8f6f 	isb	sy
 8005a4c:	f3bf 8f4f 	dsb	sy
 8005a50:	607b      	str	r3, [r7, #4]
    }
 8005a52:	bf00      	nop
 8005a54:	e7fe      	b.n	8005a54 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8005a56:	4b09      	ldr	r3, [pc, #36]	; (8005a7c <vTaskStartScheduler+0xa0>)
 8005a58:	681b      	ldr	r3, [r3, #0]
}
 8005a5a:	bf00      	nop
 8005a5c:	3710      	adds	r7, #16
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop
 8005a64:	20000324 	.word	0x20000324
 8005a68:	0800865c 	.word	0x0800865c
 8005a6c:	08006091 	.word	0x08006091
 8005a70:	20000320 	.word	0x20000320
 8005a74:	2000030c 	.word	0x2000030c
 8005a78:	20000304 	.word	0x20000304
 8005a7c:	20000020 	.word	0x20000020

08005a80 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005a80:	b480      	push	{r7}
 8005a82:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8005a84:	4b04      	ldr	r3, [pc, #16]	; (8005a98 <vTaskSuspendAll+0x18>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	3301      	adds	r3, #1
 8005a8a:	4a03      	ldr	r2, [pc, #12]	; (8005a98 <vTaskSuspendAll+0x18>)
 8005a8c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8005a8e:	bf00      	nop
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr
 8005a98:	20000328 	.word	0x20000328

08005a9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8005aaa:	4b41      	ldr	r3, [pc, #260]	; (8005bb0 <xTaskResumeAll+0x114>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d10a      	bne.n	8005ac8 <xTaskResumeAll+0x2c>
        __asm volatile
 8005ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab6:	f383 8811 	msr	BASEPRI, r3
 8005aba:	f3bf 8f6f 	isb	sy
 8005abe:	f3bf 8f4f 	dsb	sy
 8005ac2:	603b      	str	r3, [r7, #0]
    }
 8005ac4:	bf00      	nop
 8005ac6:	e7fe      	b.n	8005ac6 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8005ac8:	f001 fc2c 	bl	8007324 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8005acc:	4b38      	ldr	r3, [pc, #224]	; (8005bb0 <xTaskResumeAll+0x114>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	3b01      	subs	r3, #1
 8005ad2:	4a37      	ldr	r2, [pc, #220]	; (8005bb0 <xTaskResumeAll+0x114>)
 8005ad4:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ad6:	4b36      	ldr	r3, [pc, #216]	; (8005bb0 <xTaskResumeAll+0x114>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d161      	bne.n	8005ba2 <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005ade:	4b35      	ldr	r3, [pc, #212]	; (8005bb4 <xTaskResumeAll+0x118>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d05d      	beq.n	8005ba2 <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005ae6:	e02e      	b.n	8005b46 <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ae8:	4b33      	ldr	r3, [pc, #204]	; (8005bb8 <xTaskResumeAll+0x11c>)
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	3318      	adds	r3, #24
 8005af4:	4618      	mov	r0, r3
 8005af6:	f7ff f84d 	bl	8004b94 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	3304      	adds	r3, #4
 8005afe:	4618      	mov	r0, r3
 8005b00:	f7ff f848 	bl	8004b94 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b08:	2201      	movs	r2, #1
 8005b0a:	409a      	lsls	r2, r3
 8005b0c:	4b2b      	ldr	r3, [pc, #172]	; (8005bbc <xTaskResumeAll+0x120>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4313      	orrs	r3, r2
 8005b12:	4a2a      	ldr	r2, [pc, #168]	; (8005bbc <xTaskResumeAll+0x120>)
 8005b14:	6013      	str	r3, [r2, #0]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b1a:	4613      	mov	r3, r2
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	4413      	add	r3, r2
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	4a27      	ldr	r2, [pc, #156]	; (8005bc0 <xTaskResumeAll+0x124>)
 8005b24:	441a      	add	r2, r3
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	3304      	adds	r3, #4
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	4610      	mov	r0, r2
 8005b2e:	f7fe ffd4 	bl	8004ada <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b36:	4b23      	ldr	r3, [pc, #140]	; (8005bc4 <xTaskResumeAll+0x128>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d302      	bcc.n	8005b46 <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8005b40:	4b21      	ldr	r3, [pc, #132]	; (8005bc8 <xTaskResumeAll+0x12c>)
 8005b42:	2201      	movs	r2, #1
 8005b44:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b46:	4b1c      	ldr	r3, [pc, #112]	; (8005bb8 <xTaskResumeAll+0x11c>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d1cc      	bne.n	8005ae8 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d001      	beq.n	8005b58 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8005b54:	f000 fb32 	bl	80061bc <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005b58:	4b1c      	ldr	r3, [pc, #112]	; (8005bcc <xTaskResumeAll+0x130>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d010      	beq.n	8005b86 <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8005b64:	f000 f846 	bl	8005bf4 <xTaskIncrementTick>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d002      	beq.n	8005b74 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 8005b6e:	4b16      	ldr	r3, [pc, #88]	; (8005bc8 <xTaskResumeAll+0x12c>)
 8005b70:	2201      	movs	r2, #1
 8005b72:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	3b01      	subs	r3, #1
 8005b78:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d1f1      	bne.n	8005b64 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8005b80:	4b12      	ldr	r3, [pc, #72]	; (8005bcc <xTaskResumeAll+0x130>)
 8005b82:	2200      	movs	r2, #0
 8005b84:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8005b86:	4b10      	ldr	r3, [pc, #64]	; (8005bc8 <xTaskResumeAll+0x12c>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d009      	beq.n	8005ba2 <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8005b92:	4b0f      	ldr	r3, [pc, #60]	; (8005bd0 <xTaskResumeAll+0x134>)
 8005b94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b98:	601a      	str	r2, [r3, #0]
 8005b9a:	f3bf 8f4f 	dsb	sy
 8005b9e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8005ba2:	f001 fbef 	bl	8007384 <vPortExitCritical>

    return xAlreadyYielded;
 8005ba6:	68bb      	ldr	r3, [r7, #8]
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3710      	adds	r7, #16
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}
 8005bb0:	20000328 	.word	0x20000328
 8005bb4:	20000300 	.word	0x20000300
 8005bb8:	200002c0 	.word	0x200002c0
 8005bbc:	20000308 	.word	0x20000308
 8005bc0:	2000022c 	.word	0x2000022c
 8005bc4:	20000228 	.word	0x20000228
 8005bc8:	20000314 	.word	0x20000314
 8005bcc:	20000310 	.word	0x20000310
 8005bd0:	e000ed04 	.word	0xe000ed04

08005bd4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8005bda:	4b05      	ldr	r3, [pc, #20]	; (8005bf0 <xTaskGetTickCount+0x1c>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8005be0:	687b      	ldr	r3, [r7, #4]
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	370c      	adds	r7, #12
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop
 8005bf0:	20000304 	.word	0x20000304

08005bf4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b086      	sub	sp, #24
 8005bf8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bfe:	4b4e      	ldr	r3, [pc, #312]	; (8005d38 <xTaskIncrementTick+0x144>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	f040 808e 	bne.w	8005d24 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005c08:	4b4c      	ldr	r3, [pc, #304]	; (8005d3c <xTaskIncrementTick+0x148>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8005c10:	4a4a      	ldr	r2, [pc, #296]	; (8005d3c <xTaskIncrementTick+0x148>)
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d120      	bne.n	8005c5e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8005c1c:	4b48      	ldr	r3, [pc, #288]	; (8005d40 <xTaskIncrementTick+0x14c>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d00a      	beq.n	8005c3c <xTaskIncrementTick+0x48>
        __asm volatile
 8005c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c2a:	f383 8811 	msr	BASEPRI, r3
 8005c2e:	f3bf 8f6f 	isb	sy
 8005c32:	f3bf 8f4f 	dsb	sy
 8005c36:	603b      	str	r3, [r7, #0]
    }
 8005c38:	bf00      	nop
 8005c3a:	e7fe      	b.n	8005c3a <xTaskIncrementTick+0x46>
 8005c3c:	4b40      	ldr	r3, [pc, #256]	; (8005d40 <xTaskIncrementTick+0x14c>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	60fb      	str	r3, [r7, #12]
 8005c42:	4b40      	ldr	r3, [pc, #256]	; (8005d44 <xTaskIncrementTick+0x150>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a3e      	ldr	r2, [pc, #248]	; (8005d40 <xTaskIncrementTick+0x14c>)
 8005c48:	6013      	str	r3, [r2, #0]
 8005c4a:	4a3e      	ldr	r2, [pc, #248]	; (8005d44 <xTaskIncrementTick+0x150>)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6013      	str	r3, [r2, #0]
 8005c50:	4b3d      	ldr	r3, [pc, #244]	; (8005d48 <xTaskIncrementTick+0x154>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	3301      	adds	r3, #1
 8005c56:	4a3c      	ldr	r2, [pc, #240]	; (8005d48 <xTaskIncrementTick+0x154>)
 8005c58:	6013      	str	r3, [r2, #0]
 8005c5a:	f000 faaf 	bl	80061bc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8005c5e:	4b3b      	ldr	r3, [pc, #236]	; (8005d4c <xTaskIncrementTick+0x158>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	693a      	ldr	r2, [r7, #16]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d348      	bcc.n	8005cfa <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c68:	4b35      	ldr	r3, [pc, #212]	; (8005d40 <xTaskIncrementTick+0x14c>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d104      	bne.n	8005c7c <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c72:	4b36      	ldr	r3, [pc, #216]	; (8005d4c <xTaskIncrementTick+0x158>)
 8005c74:	f04f 32ff 	mov.w	r2, #4294967295
 8005c78:	601a      	str	r2, [r3, #0]
                    break;
 8005c7a:	e03e      	b.n	8005cfa <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c7c:	4b30      	ldr	r3, [pc, #192]	; (8005d40 <xTaskIncrementTick+0x14c>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8005c8c:	693a      	ldr	r2, [r7, #16]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d203      	bcs.n	8005c9c <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8005c94:	4a2d      	ldr	r2, [pc, #180]	; (8005d4c <xTaskIncrementTick+0x158>)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005c9a:	e02e      	b.n	8005cfa <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	3304      	adds	r3, #4
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f7fe ff77 	bl	8004b94 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d004      	beq.n	8005cb8 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	3318      	adds	r3, #24
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f7fe ff6e 	bl	8004b94 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	409a      	lsls	r2, r3
 8005cc0:	4b23      	ldr	r3, [pc, #140]	; (8005d50 <xTaskIncrementTick+0x15c>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	4a22      	ldr	r2, [pc, #136]	; (8005d50 <xTaskIncrementTick+0x15c>)
 8005cc8:	6013      	str	r3, [r2, #0]
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cce:	4613      	mov	r3, r2
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	4413      	add	r3, r2
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	4a1f      	ldr	r2, [pc, #124]	; (8005d54 <xTaskIncrementTick+0x160>)
 8005cd8:	441a      	add	r2, r3
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	3304      	adds	r3, #4
 8005cde:	4619      	mov	r1, r3
 8005ce0:	4610      	mov	r0, r2
 8005ce2:	f7fe fefa 	bl	8004ada <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cea:	4b1b      	ldr	r3, [pc, #108]	; (8005d58 <xTaskIncrementTick+0x164>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d3b9      	bcc.n	8005c68 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005cf8:	e7b6      	b.n	8005c68 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005cfa:	4b17      	ldr	r3, [pc, #92]	; (8005d58 <xTaskIncrementTick+0x164>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d00:	4914      	ldr	r1, [pc, #80]	; (8005d54 <xTaskIncrementTick+0x160>)
 8005d02:	4613      	mov	r3, r2
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	4413      	add	r3, r2
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	440b      	add	r3, r1
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d901      	bls.n	8005d16 <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 8005d12:	2301      	movs	r3, #1
 8005d14:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8005d16:	4b11      	ldr	r3, [pc, #68]	; (8005d5c <xTaskIncrementTick+0x168>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d007      	beq.n	8005d2e <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	617b      	str	r3, [r7, #20]
 8005d22:	e004      	b.n	8005d2e <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8005d24:	4b0e      	ldr	r3, [pc, #56]	; (8005d60 <xTaskIncrementTick+0x16c>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	3301      	adds	r3, #1
 8005d2a:	4a0d      	ldr	r2, [pc, #52]	; (8005d60 <xTaskIncrementTick+0x16c>)
 8005d2c:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8005d2e:	697b      	ldr	r3, [r7, #20]
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3718      	adds	r7, #24
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	20000328 	.word	0x20000328
 8005d3c:	20000304 	.word	0x20000304
 8005d40:	200002b8 	.word	0x200002b8
 8005d44:	200002bc 	.word	0x200002bc
 8005d48:	20000318 	.word	0x20000318
 8005d4c:	20000320 	.word	0x20000320
 8005d50:	20000308 	.word	0x20000308
 8005d54:	2000022c 	.word	0x2000022c
 8005d58:	20000228 	.word	0x20000228
 8005d5c:	20000314 	.word	0x20000314
 8005d60:	20000310 	.word	0x20000310

08005d64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005d64:	b480      	push	{r7}
 8005d66:	b087      	sub	sp, #28
 8005d68:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005d6a:	4b27      	ldr	r3, [pc, #156]	; (8005e08 <vTaskSwitchContext+0xa4>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d003      	beq.n	8005d7a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8005d72:	4b26      	ldr	r3, [pc, #152]	; (8005e0c <vTaskSwitchContext+0xa8>)
 8005d74:	2201      	movs	r2, #1
 8005d76:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8005d78:	e03f      	b.n	8005dfa <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8005d7a:	4b24      	ldr	r3, [pc, #144]	; (8005e0c <vTaskSwitchContext+0xa8>)
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d80:	4b23      	ldr	r3, [pc, #140]	; (8005e10 <vTaskSwitchContext+0xac>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	fab3 f383 	clz	r3, r3
 8005d8c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8005d8e:	7afb      	ldrb	r3, [r7, #11]
 8005d90:	f1c3 031f 	rsb	r3, r3, #31
 8005d94:	617b      	str	r3, [r7, #20]
 8005d96:	491f      	ldr	r1, [pc, #124]	; (8005e14 <vTaskSwitchContext+0xb0>)
 8005d98:	697a      	ldr	r2, [r7, #20]
 8005d9a:	4613      	mov	r3, r2
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	4413      	add	r3, r2
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	440b      	add	r3, r1
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d10a      	bne.n	8005dc0 <vTaskSwitchContext+0x5c>
        __asm volatile
 8005daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dae:	f383 8811 	msr	BASEPRI, r3
 8005db2:	f3bf 8f6f 	isb	sy
 8005db6:	f3bf 8f4f 	dsb	sy
 8005dba:	607b      	str	r3, [r7, #4]
    }
 8005dbc:	bf00      	nop
 8005dbe:	e7fe      	b.n	8005dbe <vTaskSwitchContext+0x5a>
 8005dc0:	697a      	ldr	r2, [r7, #20]
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	4413      	add	r3, r2
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	4a12      	ldr	r2, [pc, #72]	; (8005e14 <vTaskSwitchContext+0xb0>)
 8005dcc:	4413      	add	r3, r2
 8005dce:	613b      	str	r3, [r7, #16]
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	685a      	ldr	r2, [r3, #4]
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	605a      	str	r2, [r3, #4]
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	685a      	ldr	r2, [r3, #4]
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	3308      	adds	r3, #8
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d104      	bne.n	8005df0 <vTaskSwitchContext+0x8c>
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	685a      	ldr	r2, [r3, #4]
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	605a      	str	r2, [r3, #4]
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	4a08      	ldr	r2, [pc, #32]	; (8005e18 <vTaskSwitchContext+0xb4>)
 8005df8:	6013      	str	r3, [r2, #0]
}
 8005dfa:	bf00      	nop
 8005dfc:	371c      	adds	r7, #28
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr
 8005e06:	bf00      	nop
 8005e08:	20000328 	.word	0x20000328
 8005e0c:	20000314 	.word	0x20000314
 8005e10:	20000308 	.word	0x20000308
 8005e14:	2000022c 	.word	0x2000022c
 8005e18:	20000228 	.word	0x20000228

08005e1c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d10a      	bne.n	8005e42 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8005e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e30:	f383 8811 	msr	BASEPRI, r3
 8005e34:	f3bf 8f6f 	isb	sy
 8005e38:	f3bf 8f4f 	dsb	sy
 8005e3c:	60fb      	str	r3, [r7, #12]
    }
 8005e3e:	bf00      	nop
 8005e40:	e7fe      	b.n	8005e40 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005e42:	4b07      	ldr	r3, [pc, #28]	; (8005e60 <vTaskPlaceOnEventList+0x44>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	3318      	adds	r3, #24
 8005e48:	4619      	mov	r1, r3
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f7fe fe69 	bl	8004b22 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005e50:	2101      	movs	r1, #1
 8005e52:	6838      	ldr	r0, [r7, #0]
 8005e54:	f000 fcc8 	bl	80067e8 <prvAddCurrentTaskToDelayedList>
}
 8005e58:	bf00      	nop
 8005e5a:	3710      	adds	r7, #16
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	20000228 	.word	0x20000228

08005e64 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b086      	sub	sp, #24
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	60b9      	str	r1, [r7, #8]
 8005e6e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d10a      	bne.n	8005e8c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8005e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e7a:	f383 8811 	msr	BASEPRI, r3
 8005e7e:	f3bf 8f6f 	isb	sy
 8005e82:	f3bf 8f4f 	dsb	sy
 8005e86:	617b      	str	r3, [r7, #20]
    }
 8005e88:	bf00      	nop
 8005e8a:	e7fe      	b.n	8005e8a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005e8c:	4b0a      	ldr	r3, [pc, #40]	; (8005eb8 <vTaskPlaceOnEventListRestricted+0x54>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	3318      	adds	r3, #24
 8005e92:	4619      	mov	r1, r3
 8005e94:	68f8      	ldr	r0, [r7, #12]
 8005e96:	f7fe fe20 	bl	8004ada <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d002      	beq.n	8005ea6 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8005ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ea4:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005ea6:	6879      	ldr	r1, [r7, #4]
 8005ea8:	68b8      	ldr	r0, [r7, #8]
 8005eaa:	f000 fc9d 	bl	80067e8 <prvAddCurrentTaskToDelayedList>
    }
 8005eae:	bf00      	nop
 8005eb0:	3718      	adds	r7, #24
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	20000228 	.word	0x20000228

08005ebc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b086      	sub	sp, #24
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	68db      	ldr	r3, [r3, #12]
 8005eca:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d10a      	bne.n	8005ee8 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8005ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed6:	f383 8811 	msr	BASEPRI, r3
 8005eda:	f3bf 8f6f 	isb	sy
 8005ede:	f3bf 8f4f 	dsb	sy
 8005ee2:	60fb      	str	r3, [r7, #12]
    }
 8005ee4:	bf00      	nop
 8005ee6:	e7fe      	b.n	8005ee6 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	3318      	adds	r3, #24
 8005eec:	4618      	mov	r0, r3
 8005eee:	f7fe fe51 	bl	8004b94 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ef2:	4b1d      	ldr	r3, [pc, #116]	; (8005f68 <xTaskRemoveFromEventList+0xac>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d11c      	bne.n	8005f34 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	3304      	adds	r3, #4
 8005efe:	4618      	mov	r0, r3
 8005f00:	f7fe fe48 	bl	8004b94 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f08:	2201      	movs	r2, #1
 8005f0a:	409a      	lsls	r2, r3
 8005f0c:	4b17      	ldr	r3, [pc, #92]	; (8005f6c <xTaskRemoveFromEventList+0xb0>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	4a16      	ldr	r2, [pc, #88]	; (8005f6c <xTaskRemoveFromEventList+0xb0>)
 8005f14:	6013      	str	r3, [r2, #0]
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f1a:	4613      	mov	r3, r2
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	4413      	add	r3, r2
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	4a13      	ldr	r2, [pc, #76]	; (8005f70 <xTaskRemoveFromEventList+0xb4>)
 8005f24:	441a      	add	r2, r3
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	3304      	adds	r3, #4
 8005f2a:	4619      	mov	r1, r3
 8005f2c:	4610      	mov	r0, r2
 8005f2e:	f7fe fdd4 	bl	8004ada <vListInsertEnd>
 8005f32:	e005      	b.n	8005f40 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	3318      	adds	r3, #24
 8005f38:	4619      	mov	r1, r3
 8005f3a:	480e      	ldr	r0, [pc, #56]	; (8005f74 <xTaskRemoveFromEventList+0xb8>)
 8005f3c:	f7fe fdcd 	bl	8004ada <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f44:	4b0c      	ldr	r3, [pc, #48]	; (8005f78 <xTaskRemoveFromEventList+0xbc>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d905      	bls.n	8005f5a <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8005f52:	4b0a      	ldr	r3, [pc, #40]	; (8005f7c <xTaskRemoveFromEventList+0xc0>)
 8005f54:	2201      	movs	r2, #1
 8005f56:	601a      	str	r2, [r3, #0]
 8005f58:	e001      	b.n	8005f5e <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8005f5e:	697b      	ldr	r3, [r7, #20]
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3718      	adds	r7, #24
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	20000328 	.word	0x20000328
 8005f6c:	20000308 	.word	0x20000308
 8005f70:	2000022c 	.word	0x2000022c
 8005f74:	200002c0 	.word	0x200002c0
 8005f78:	20000228 	.word	0x20000228
 8005f7c:	20000314 	.word	0x20000314

08005f80 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005f88:	4b06      	ldr	r3, [pc, #24]	; (8005fa4 <vTaskInternalSetTimeOutState+0x24>)
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8005f90:	4b05      	ldr	r3, [pc, #20]	; (8005fa8 <vTaskInternalSetTimeOutState+0x28>)
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	605a      	str	r2, [r3, #4]
}
 8005f98:	bf00      	nop
 8005f9a:	370c      	adds	r7, #12
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr
 8005fa4:	20000318 	.word	0x20000318
 8005fa8:	20000304 	.word	0x20000304

08005fac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b088      	sub	sp, #32
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d10a      	bne.n	8005fd2 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8005fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc0:	f383 8811 	msr	BASEPRI, r3
 8005fc4:	f3bf 8f6f 	isb	sy
 8005fc8:	f3bf 8f4f 	dsb	sy
 8005fcc:	613b      	str	r3, [r7, #16]
    }
 8005fce:	bf00      	nop
 8005fd0:	e7fe      	b.n	8005fd0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d10a      	bne.n	8005fee <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8005fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fdc:	f383 8811 	msr	BASEPRI, r3
 8005fe0:	f3bf 8f6f 	isb	sy
 8005fe4:	f3bf 8f4f 	dsb	sy
 8005fe8:	60fb      	str	r3, [r7, #12]
    }
 8005fea:	bf00      	nop
 8005fec:	e7fe      	b.n	8005fec <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8005fee:	f001 f999 	bl	8007324 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8005ff2:	4b1f      	ldr	r3, [pc, #124]	; (8006070 <xTaskCheckForTimeOut+0xc4>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	69ba      	ldr	r2, [r7, #24]
 8005ffe:	1ad3      	subs	r3, r2, r3
 8006000:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800600a:	d102      	bne.n	8006012 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800600c:	2300      	movs	r3, #0
 800600e:	61fb      	str	r3, [r7, #28]
 8006010:	e026      	b.n	8006060 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	4b17      	ldr	r3, [pc, #92]	; (8006074 <xTaskCheckForTimeOut+0xc8>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	429a      	cmp	r2, r3
 800601c:	d00a      	beq.n	8006034 <xTaskCheckForTimeOut+0x88>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	69ba      	ldr	r2, [r7, #24]
 8006024:	429a      	cmp	r2, r3
 8006026:	d305      	bcc.n	8006034 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8006028:	2301      	movs	r3, #1
 800602a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	2200      	movs	r2, #0
 8006030:	601a      	str	r2, [r3, #0]
 8006032:	e015      	b.n	8006060 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	697a      	ldr	r2, [r7, #20]
 800603a:	429a      	cmp	r2, r3
 800603c:	d20b      	bcs.n	8006056 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	1ad2      	subs	r2, r2, r3
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f7ff ff98 	bl	8005f80 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8006050:	2300      	movs	r3, #0
 8006052:	61fb      	str	r3, [r7, #28]
 8006054:	e004      	b.n	8006060 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	2200      	movs	r2, #0
 800605a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800605c:	2301      	movs	r3, #1
 800605e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8006060:	f001 f990 	bl	8007384 <vPortExitCritical>

    return xReturn;
 8006064:	69fb      	ldr	r3, [r7, #28]
}
 8006066:	4618      	mov	r0, r3
 8006068:	3720      	adds	r7, #32
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop
 8006070:	20000304 	.word	0x20000304
 8006074:	20000318 	.word	0x20000318

08006078 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006078:	b480      	push	{r7}
 800607a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800607c:	4b03      	ldr	r3, [pc, #12]	; (800608c <vTaskMissedYield+0x14>)
 800607e:	2201      	movs	r2, #1
 8006080:	601a      	str	r2, [r3, #0]
}
 8006082:	bf00      	nop
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr
 800608c:	20000314 	.word	0x20000314

08006090 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b082      	sub	sp, #8
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8006098:	f000 f852 	bl	8006140 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800609c:	4b06      	ldr	r3, [pc, #24]	; (80060b8 <prvIdleTask+0x28>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d9f9      	bls.n	8006098 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80060a4:	4b05      	ldr	r3, [pc, #20]	; (80060bc <prvIdleTask+0x2c>)
 80060a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060aa:	601a      	str	r2, [r3, #0]
 80060ac:	f3bf 8f4f 	dsb	sy
 80060b0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80060b4:	e7f0      	b.n	8006098 <prvIdleTask+0x8>
 80060b6:	bf00      	nop
 80060b8:	2000022c 	.word	0x2000022c
 80060bc:	e000ed04 	.word	0xe000ed04

080060c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b082      	sub	sp, #8
 80060c4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80060c6:	2300      	movs	r3, #0
 80060c8:	607b      	str	r3, [r7, #4]
 80060ca:	e00c      	b.n	80060e6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	4613      	mov	r3, r2
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	4413      	add	r3, r2
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	4a12      	ldr	r2, [pc, #72]	; (8006120 <prvInitialiseTaskLists+0x60>)
 80060d8:	4413      	add	r3, r2
 80060da:	4618      	mov	r0, r3
 80060dc:	f7fe fcd0 	bl	8004a80 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	3301      	adds	r3, #1
 80060e4:	607b      	str	r3, [r7, #4]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2b04      	cmp	r3, #4
 80060ea:	d9ef      	bls.n	80060cc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80060ec:	480d      	ldr	r0, [pc, #52]	; (8006124 <prvInitialiseTaskLists+0x64>)
 80060ee:	f7fe fcc7 	bl	8004a80 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80060f2:	480d      	ldr	r0, [pc, #52]	; (8006128 <prvInitialiseTaskLists+0x68>)
 80060f4:	f7fe fcc4 	bl	8004a80 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80060f8:	480c      	ldr	r0, [pc, #48]	; (800612c <prvInitialiseTaskLists+0x6c>)
 80060fa:	f7fe fcc1 	bl	8004a80 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80060fe:	480c      	ldr	r0, [pc, #48]	; (8006130 <prvInitialiseTaskLists+0x70>)
 8006100:	f7fe fcbe 	bl	8004a80 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8006104:	480b      	ldr	r0, [pc, #44]	; (8006134 <prvInitialiseTaskLists+0x74>)
 8006106:	f7fe fcbb 	bl	8004a80 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800610a:	4b0b      	ldr	r3, [pc, #44]	; (8006138 <prvInitialiseTaskLists+0x78>)
 800610c:	4a05      	ldr	r2, [pc, #20]	; (8006124 <prvInitialiseTaskLists+0x64>)
 800610e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006110:	4b0a      	ldr	r3, [pc, #40]	; (800613c <prvInitialiseTaskLists+0x7c>)
 8006112:	4a05      	ldr	r2, [pc, #20]	; (8006128 <prvInitialiseTaskLists+0x68>)
 8006114:	601a      	str	r2, [r3, #0]
}
 8006116:	bf00      	nop
 8006118:	3708      	adds	r7, #8
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
 800611e:	bf00      	nop
 8006120:	2000022c 	.word	0x2000022c
 8006124:	20000290 	.word	0x20000290
 8006128:	200002a4 	.word	0x200002a4
 800612c:	200002c0 	.word	0x200002c0
 8006130:	200002d4 	.word	0x200002d4
 8006134:	200002ec 	.word	0x200002ec
 8006138:	200002b8 	.word	0x200002b8
 800613c:	200002bc 	.word	0x200002bc

08006140 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b082      	sub	sp, #8
 8006144:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006146:	e019      	b.n	800617c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8006148:	f001 f8ec 	bl	8007324 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800614c:	4b10      	ldr	r3, [pc, #64]	; (8006190 <prvCheckTasksWaitingTermination+0x50>)
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	3304      	adds	r3, #4
 8006158:	4618      	mov	r0, r3
 800615a:	f7fe fd1b 	bl	8004b94 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800615e:	4b0d      	ldr	r3, [pc, #52]	; (8006194 <prvCheckTasksWaitingTermination+0x54>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	3b01      	subs	r3, #1
 8006164:	4a0b      	ldr	r2, [pc, #44]	; (8006194 <prvCheckTasksWaitingTermination+0x54>)
 8006166:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8006168:	4b0b      	ldr	r3, [pc, #44]	; (8006198 <prvCheckTasksWaitingTermination+0x58>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	3b01      	subs	r3, #1
 800616e:	4a0a      	ldr	r2, [pc, #40]	; (8006198 <prvCheckTasksWaitingTermination+0x58>)
 8006170:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8006172:	f001 f907 	bl	8007384 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 f810 	bl	800619c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800617c:	4b06      	ldr	r3, [pc, #24]	; (8006198 <prvCheckTasksWaitingTermination+0x58>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d1e1      	bne.n	8006148 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8006184:	bf00      	nop
 8006186:	bf00      	nop
 8006188:	3708      	adds	r7, #8
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
 800618e:	bf00      	nop
 8006190:	200002d4 	.word	0x200002d4
 8006194:	20000300 	.word	0x20000300
 8006198:	200002e8 	.word	0x200002e8

0800619c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800619c:	b580      	push	{r7, lr}
 800619e:	b082      	sub	sp, #8
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061a8:	4618      	mov	r0, r3
 80061aa:	f001 fabf 	bl	800772c <vPortFree>
                vPortFree( pxTCB );
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f001 fabc 	bl	800772c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80061b4:	bf00      	nop
 80061b6:	3708      	adds	r7, #8
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80061bc:	b480      	push	{r7}
 80061be:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061c0:	4b0a      	ldr	r3, [pc, #40]	; (80061ec <prvResetNextTaskUnblockTime+0x30>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d104      	bne.n	80061d4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80061ca:	4b09      	ldr	r3, [pc, #36]	; (80061f0 <prvResetNextTaskUnblockTime+0x34>)
 80061cc:	f04f 32ff 	mov.w	r2, #4294967295
 80061d0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80061d2:	e005      	b.n	80061e0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80061d4:	4b05      	ldr	r3, [pc, #20]	; (80061ec <prvResetNextTaskUnblockTime+0x30>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a04      	ldr	r2, [pc, #16]	; (80061f0 <prvResetNextTaskUnblockTime+0x34>)
 80061de:	6013      	str	r3, [r2, #0]
}
 80061e0:	bf00      	nop
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	200002b8 	.word	0x200002b8
 80061f0:	20000320 	.word	0x20000320

080061f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80061fa:	4b0b      	ldr	r3, [pc, #44]	; (8006228 <xTaskGetSchedulerState+0x34>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d102      	bne.n	8006208 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8006202:	2301      	movs	r3, #1
 8006204:	607b      	str	r3, [r7, #4]
 8006206:	e008      	b.n	800621a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006208:	4b08      	ldr	r3, [pc, #32]	; (800622c <xTaskGetSchedulerState+0x38>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d102      	bne.n	8006216 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8006210:	2302      	movs	r3, #2
 8006212:	607b      	str	r3, [r7, #4]
 8006214:	e001      	b.n	800621a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8006216:	2300      	movs	r3, #0
 8006218:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800621a:	687b      	ldr	r3, [r7, #4]
    }
 800621c:	4618      	mov	r0, r3
 800621e:	370c      	adds	r7, #12
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr
 8006228:	2000030c 	.word	0x2000030c
 800622c:	20000328 	.word	0x20000328

08006230 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8006230:	b580      	push	{r7, lr}
 8006232:	b086      	sub	sp, #24
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800623c:	2300      	movs	r3, #0
 800623e:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d063      	beq.n	800630e <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8006246:	4b34      	ldr	r3, [pc, #208]	; (8006318 <xTaskPriorityDisinherit+0xe8>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	693a      	ldr	r2, [r7, #16]
 800624c:	429a      	cmp	r2, r3
 800624e:	d00a      	beq.n	8006266 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8006250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006254:	f383 8811 	msr	BASEPRI, r3
 8006258:	f3bf 8f6f 	isb	sy
 800625c:	f3bf 8f4f 	dsb	sy
 8006260:	60fb      	str	r3, [r7, #12]
    }
 8006262:	bf00      	nop
 8006264:	e7fe      	b.n	8006264 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800626a:	2b00      	cmp	r3, #0
 800626c:	d10a      	bne.n	8006284 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 800626e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006272:	f383 8811 	msr	BASEPRI, r3
 8006276:	f3bf 8f6f 	isb	sy
 800627a:	f3bf 8f4f 	dsb	sy
 800627e:	60bb      	str	r3, [r7, #8]
    }
 8006280:	bf00      	nop
 8006282:	e7fe      	b.n	8006282 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006288:	1e5a      	subs	r2, r3, #1
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006296:	429a      	cmp	r2, r3
 8006298:	d039      	beq.n	800630e <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d135      	bne.n	800630e <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	3304      	adds	r3, #4
 80062a6:	4618      	mov	r0, r3
 80062a8:	f7fe fc74 	bl	8004b94 <uxListRemove>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d10a      	bne.n	80062c8 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b6:	2201      	movs	r2, #1
 80062b8:	fa02 f303 	lsl.w	r3, r2, r3
 80062bc:	43da      	mvns	r2, r3
 80062be:	4b17      	ldr	r3, [pc, #92]	; (800631c <xTaskPriorityDisinherit+0xec>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4013      	ands	r3, r2
 80062c4:	4a15      	ldr	r2, [pc, #84]	; (800631c <xTaskPriorityDisinherit+0xec>)
 80062c6:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d4:	f1c3 0205 	rsb	r2, r3, #5
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e0:	2201      	movs	r2, #1
 80062e2:	409a      	lsls	r2, r3
 80062e4:	4b0d      	ldr	r3, [pc, #52]	; (800631c <xTaskPriorityDisinherit+0xec>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4313      	orrs	r3, r2
 80062ea:	4a0c      	ldr	r2, [pc, #48]	; (800631c <xTaskPriorityDisinherit+0xec>)
 80062ec:	6013      	str	r3, [r2, #0]
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062f2:	4613      	mov	r3, r2
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	4413      	add	r3, r2
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	4a09      	ldr	r2, [pc, #36]	; (8006320 <xTaskPriorityDisinherit+0xf0>)
 80062fc:	441a      	add	r2, r3
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	3304      	adds	r3, #4
 8006302:	4619      	mov	r1, r3
 8006304:	4610      	mov	r0, r2
 8006306:	f7fe fbe8 	bl	8004ada <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800630a:	2301      	movs	r3, #1
 800630c:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800630e:	697b      	ldr	r3, [r7, #20]
    }
 8006310:	4618      	mov	r0, r3
 8006312:	3718      	adds	r7, #24
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}
 8006318:	20000228 	.word	0x20000228
 800631c:	20000308 	.word	0x20000308
 8006320:	2000022c 	.word	0x2000022c

08006324 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8006324:	b580      	push	{r7, lr}
 8006326:	b086      	sub	sp, #24
 8006328:	af00      	add	r7, sp, #0
 800632a:	60f8      	str	r0, [r7, #12]
 800632c:	60b9      	str	r1, [r7, #8]
 800632e:	607a      	str	r2, [r7, #4]
 8006330:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d00a      	beq.n	800634e <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8006338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800633c:	f383 8811 	msr	BASEPRI, r3
 8006340:	f3bf 8f6f 	isb	sy
 8006344:	f3bf 8f4f 	dsb	sy
 8006348:	613b      	str	r3, [r7, #16]
    }
 800634a:	bf00      	nop
 800634c:	e7fe      	b.n	800634c <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 800634e:	f000 ffe9 	bl	8007324 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8006352:	4b32      	ldr	r3, [pc, #200]	; (800641c <xTaskGenericNotifyWait+0xf8>)
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	4413      	add	r3, r2
 800635a:	3354      	adds	r3, #84	; 0x54
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	b2db      	uxtb	r3, r3
 8006360:	2b02      	cmp	r3, #2
 8006362:	d022      	beq.n	80063aa <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8006364:	4b2d      	ldr	r3, [pc, #180]	; (800641c <xTaskGenericNotifyWait+0xf8>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	68fa      	ldr	r2, [r7, #12]
 800636a:	3214      	adds	r2, #20
 800636c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006370:	68ba      	ldr	r2, [r7, #8]
 8006372:	43d2      	mvns	r2, r2
 8006374:	4011      	ands	r1, r2
 8006376:	68fa      	ldr	r2, [r7, #12]
 8006378:	3214      	adds	r2, #20
 800637a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 800637e:	4b27      	ldr	r3, [pc, #156]	; (800641c <xTaskGenericNotifyWait+0xf8>)
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	4413      	add	r3, r2
 8006386:	3354      	adds	r3, #84	; 0x54
 8006388:	2201      	movs	r2, #1
 800638a:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 800638c:	6a3b      	ldr	r3, [r7, #32]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d00b      	beq.n	80063aa <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006392:	2101      	movs	r1, #1
 8006394:	6a38      	ldr	r0, [r7, #32]
 8006396:	f000 fa27 	bl	80067e8 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 800639a:	4b21      	ldr	r3, [pc, #132]	; (8006420 <xTaskGenericNotifyWait+0xfc>)
 800639c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063a0:	601a      	str	r2, [r3, #0]
 80063a2:	f3bf 8f4f 	dsb	sy
 80063a6:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80063aa:	f000 ffeb 	bl	8007384 <vPortExitCritical>

        taskENTER_CRITICAL();
 80063ae:	f000 ffb9 	bl	8007324 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d007      	beq.n	80063c8 <xTaskGenericNotifyWait+0xa4>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 80063b8:	4b18      	ldr	r3, [pc, #96]	; (800641c <xTaskGenericNotifyWait+0xf8>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	68fa      	ldr	r2, [r7, #12]
 80063be:	3214      	adds	r2, #20
 80063c0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80063c8:	4b14      	ldr	r3, [pc, #80]	; (800641c <xTaskGenericNotifyWait+0xf8>)
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	4413      	add	r3, r2
 80063d0:	3354      	adds	r3, #84	; 0x54
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	2b02      	cmp	r3, #2
 80063d8:	d002      	beq.n	80063e0 <xTaskGenericNotifyWait+0xbc>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80063da:	2300      	movs	r3, #0
 80063dc:	617b      	str	r3, [r7, #20]
 80063de:	e00e      	b.n	80063fe <xTaskGenericNotifyWait+0xda>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 80063e0:	4b0e      	ldr	r3, [pc, #56]	; (800641c <xTaskGenericNotifyWait+0xf8>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	68fa      	ldr	r2, [r7, #12]
 80063e6:	3214      	adds	r2, #20
 80063e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	43d2      	mvns	r2, r2
 80063f0:	4011      	ands	r1, r2
 80063f2:	68fa      	ldr	r2, [r7, #12]
 80063f4:	3214      	adds	r2, #20
 80063f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 80063fa:	2301      	movs	r3, #1
 80063fc:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 80063fe:	4b07      	ldr	r3, [pc, #28]	; (800641c <xTaskGenericNotifyWait+0xf8>)
 8006400:	681a      	ldr	r2, [r3, #0]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	4413      	add	r3, r2
 8006406:	3354      	adds	r3, #84	; 0x54
 8006408:	2200      	movs	r2, #0
 800640a:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 800640c:	f000 ffba 	bl	8007384 <vPortExitCritical>

        return xReturn;
 8006410:	697b      	ldr	r3, [r7, #20]
    }
 8006412:	4618      	mov	r0, r3
 8006414:	3718      	adds	r7, #24
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
 800641a:	bf00      	nop
 800641c:	20000228 	.word	0x20000228
 8006420:	e000ed04 	.word	0xe000ed04

08006424 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8006424:	b580      	push	{r7, lr}
 8006426:	b08c      	sub	sp, #48	; 0x30
 8006428:	af00      	add	r7, sp, #0
 800642a:	60f8      	str	r0, [r7, #12]
 800642c:	60b9      	str	r1, [r7, #8]
 800642e:	607a      	str	r2, [r7, #4]
 8006430:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8006432:	2301      	movs	r3, #1
 8006434:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d00a      	beq.n	8006452 <xTaskGenericNotify+0x2e>
        __asm volatile
 800643c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006440:	f383 8811 	msr	BASEPRI, r3
 8006444:	f3bf 8f6f 	isb	sy
 8006448:	f3bf 8f4f 	dsb	sy
 800644c:	623b      	str	r3, [r7, #32]
    }
 800644e:	bf00      	nop
 8006450:	e7fe      	b.n	8006450 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d10a      	bne.n	800646e <xTaskGenericNotify+0x4a>
        __asm volatile
 8006458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800645c:	f383 8811 	msr	BASEPRI, r3
 8006460:	f3bf 8f6f 	isb	sy
 8006464:	f3bf 8f4f 	dsb	sy
 8006468:	61fb      	str	r3, [r7, #28]
    }
 800646a:	bf00      	nop
 800646c:	e7fe      	b.n	800646c <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 8006472:	f000 ff57 	bl	8007324 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8006476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006478:	2b00      	cmp	r3, #0
 800647a:	d006      	beq.n	800648a <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 800647c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800647e:	68ba      	ldr	r2, [r7, #8]
 8006480:	3214      	adds	r2, #20
 8006482:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006488:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800648a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	4413      	add	r3, r2
 8006490:	3354      	adds	r3, #84	; 0x54
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8006498:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	4413      	add	r3, r2
 800649e:	3354      	adds	r3, #84	; 0x54
 80064a0:	2202      	movs	r2, #2
 80064a2:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80064a4:	78fb      	ldrb	r3, [r7, #3]
 80064a6:	2b04      	cmp	r3, #4
 80064a8:	d83b      	bhi.n	8006522 <xTaskGenericNotify+0xfe>
 80064aa:	a201      	add	r2, pc, #4	; (adr r2, 80064b0 <xTaskGenericNotify+0x8c>)
 80064ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064b0:	08006541 	.word	0x08006541
 80064b4:	080064c5 	.word	0x080064c5
 80064b8:	080064e1 	.word	0x080064e1
 80064bc:	080064f9 	.word	0x080064f9
 80064c0:	08006507 	.word	0x08006507
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80064c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c6:	68ba      	ldr	r2, [r7, #8]
 80064c8:	3214      	adds	r2, #20
 80064ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	ea42 0103 	orr.w	r1, r2, r3
 80064d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d6:	68ba      	ldr	r2, [r7, #8]
 80064d8:	3214      	adds	r2, #20
 80064da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80064de:	e032      	b.n	8006546 <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80064e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e2:	68ba      	ldr	r2, [r7, #8]
 80064e4:	3214      	adds	r2, #20
 80064e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064ea:	1c59      	adds	r1, r3, #1
 80064ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ee:	68ba      	ldr	r2, [r7, #8]
 80064f0:	3214      	adds	r2, #20
 80064f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80064f6:	e026      	b.n	8006546 <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80064f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064fa:	68ba      	ldr	r2, [r7, #8]
 80064fc:	3214      	adds	r2, #20
 80064fe:	6879      	ldr	r1, [r7, #4]
 8006500:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006504:	e01f      	b.n	8006546 <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006506:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800650a:	2b02      	cmp	r3, #2
 800650c:	d006      	beq.n	800651c <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800650e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006510:	68ba      	ldr	r2, [r7, #8]
 8006512:	3214      	adds	r2, #20
 8006514:	6879      	ldr	r1, [r7, #4]
 8006516:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800651a:	e014      	b.n	8006546 <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 800651c:	2300      	movs	r3, #0
 800651e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 8006520:	e011      	b.n	8006546 <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8006522:	4b2b      	ldr	r3, [pc, #172]	; (80065d0 <xTaskGenericNotify+0x1ac>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d00c      	beq.n	8006544 <xTaskGenericNotify+0x120>
        __asm volatile
 800652a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800652e:	f383 8811 	msr	BASEPRI, r3
 8006532:	f3bf 8f6f 	isb	sy
 8006536:	f3bf 8f4f 	dsb	sy
 800653a:	61bb      	str	r3, [r7, #24]
    }
 800653c:	bf00      	nop
 800653e:	e7fe      	b.n	800653e <xTaskGenericNotify+0x11a>
                    break;
 8006540:	bf00      	nop
 8006542:	e000      	b.n	8006546 <xTaskGenericNotify+0x122>

                    break;
 8006544:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006546:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800654a:	2b01      	cmp	r3, #1
 800654c:	d139      	bne.n	80065c2 <xTaskGenericNotify+0x19e>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800654e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006550:	3304      	adds	r3, #4
 8006552:	4618      	mov	r0, r3
 8006554:	f7fe fb1e 	bl	8004b94 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 8006558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800655a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800655c:	2201      	movs	r2, #1
 800655e:	409a      	lsls	r2, r3
 8006560:	4b1c      	ldr	r3, [pc, #112]	; (80065d4 <xTaskGenericNotify+0x1b0>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4313      	orrs	r3, r2
 8006566:	4a1b      	ldr	r2, [pc, #108]	; (80065d4 <xTaskGenericNotify+0x1b0>)
 8006568:	6013      	str	r3, [r2, #0]
 800656a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800656c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800656e:	4613      	mov	r3, r2
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	4413      	add	r3, r2
 8006574:	009b      	lsls	r3, r3, #2
 8006576:	4a18      	ldr	r2, [pc, #96]	; (80065d8 <xTaskGenericNotify+0x1b4>)
 8006578:	441a      	add	r2, r3
 800657a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800657c:	3304      	adds	r3, #4
 800657e:	4619      	mov	r1, r3
 8006580:	4610      	mov	r0, r2
 8006582:	f7fe faaa 	bl	8004ada <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800658a:	2b00      	cmp	r3, #0
 800658c:	d00a      	beq.n	80065a4 <xTaskGenericNotify+0x180>
        __asm volatile
 800658e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006592:	f383 8811 	msr	BASEPRI, r3
 8006596:	f3bf 8f6f 	isb	sy
 800659a:	f3bf 8f4f 	dsb	sy
 800659e:	617b      	str	r3, [r7, #20]
    }
 80065a0:	bf00      	nop
 80065a2:	e7fe      	b.n	80065a2 <xTaskGenericNotify+0x17e>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80065a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065a8:	4b0c      	ldr	r3, [pc, #48]	; (80065dc <xTaskGenericNotify+0x1b8>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d907      	bls.n	80065c2 <xTaskGenericNotify+0x19e>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 80065b2:	4b0b      	ldr	r3, [pc, #44]	; (80065e0 <xTaskGenericNotify+0x1bc>)
 80065b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065b8:	601a      	str	r2, [r3, #0]
 80065ba:	f3bf 8f4f 	dsb	sy
 80065be:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80065c2:	f000 fedf 	bl	8007384 <vPortExitCritical>

        return xReturn;
 80065c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 80065c8:	4618      	mov	r0, r3
 80065ca:	3730      	adds	r7, #48	; 0x30
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}
 80065d0:	20000304 	.word	0x20000304
 80065d4:	20000308 	.word	0x20000308
 80065d8:	2000022c 	.word	0x2000022c
 80065dc:	20000228 	.word	0x20000228
 80065e0:	e000ed04 	.word	0xe000ed04

080065e4 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b090      	sub	sp, #64	; 0x40
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	60b9      	str	r1, [r7, #8]
 80065ee:	607a      	str	r2, [r7, #4]
 80065f0:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 80065f2:	2301      	movs	r3, #1
 80065f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d10a      	bne.n	8006612 <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 80065fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006600:	f383 8811 	msr	BASEPRI, r3
 8006604:	f3bf 8f6f 	isb	sy
 8006608:	f3bf 8f4f 	dsb	sy
 800660c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 800660e:	bf00      	nop
 8006610:	e7fe      	b.n	8006610 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d00a      	beq.n	800662e <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8006618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800661c:	f383 8811 	msr	BASEPRI, r3
 8006620:	f3bf 8f6f 	isb	sy
 8006624:	f3bf 8f4f 	dsb	sy
 8006628:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800662a:	bf00      	nop
 800662c:	e7fe      	b.n	800662c <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800662e:	f000 ff5d 	bl	80074ec <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	63bb      	str	r3, [r7, #56]	; 0x38
        __asm volatile
 8006636:	f3ef 8211 	mrs	r2, BASEPRI
 800663a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800663e:	f383 8811 	msr	BASEPRI, r3
 8006642:	f3bf 8f6f 	isb	sy
 8006646:	f3bf 8f4f 	dsb	sy
 800664a:	627a      	str	r2, [r7, #36]	; 0x24
 800664c:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 800664e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006650:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 8006652:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006654:	2b00      	cmp	r3, #0
 8006656:	d006      	beq.n	8006666 <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8006658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800665a:	68ba      	ldr	r2, [r7, #8]
 800665c:	3214      	adds	r2, #20
 800665e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006662:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006664:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8006666:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	4413      	add	r3, r2
 800666c:	3354      	adds	r3, #84	; 0x54
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8006674:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	4413      	add	r3, r2
 800667a:	3354      	adds	r3, #84	; 0x54
 800667c:	2202      	movs	r2, #2
 800667e:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8006680:	78fb      	ldrb	r3, [r7, #3]
 8006682:	2b04      	cmp	r3, #4
 8006684:	d83b      	bhi.n	80066fe <xTaskGenericNotifyFromISR+0x11a>
 8006686:	a201      	add	r2, pc, #4	; (adr r2, 800668c <xTaskGenericNotifyFromISR+0xa8>)
 8006688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800668c:	0800671d 	.word	0x0800671d
 8006690:	080066a1 	.word	0x080066a1
 8006694:	080066bd 	.word	0x080066bd
 8006698:	080066d5 	.word	0x080066d5
 800669c:	080066e3 	.word	0x080066e3
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80066a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a2:	68ba      	ldr	r2, [r7, #8]
 80066a4:	3214      	adds	r2, #20
 80066a6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	ea42 0103 	orr.w	r1, r2, r3
 80066b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b2:	68ba      	ldr	r2, [r7, #8]
 80066b4:	3214      	adds	r2, #20
 80066b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80066ba:	e032      	b.n	8006722 <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80066bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066be:	68ba      	ldr	r2, [r7, #8]
 80066c0:	3214      	adds	r2, #20
 80066c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066c6:	1c59      	adds	r1, r3, #1
 80066c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ca:	68ba      	ldr	r2, [r7, #8]
 80066cc:	3214      	adds	r2, #20
 80066ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80066d2:	e026      	b.n	8006722 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80066d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d6:	68ba      	ldr	r2, [r7, #8]
 80066d8:	3214      	adds	r2, #20
 80066da:	6879      	ldr	r1, [r7, #4]
 80066dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80066e0:	e01f      	b.n	8006722 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80066e2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80066e6:	2b02      	cmp	r3, #2
 80066e8:	d006      	beq.n	80066f8 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80066ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ec:	68ba      	ldr	r2, [r7, #8]
 80066ee:	3214      	adds	r2, #20
 80066f0:	6879      	ldr	r1, [r7, #4]
 80066f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80066f6:	e014      	b.n	8006722 <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 80066f8:	2300      	movs	r3, #0
 80066fa:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 80066fc:	e011      	b.n	8006722 <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80066fe:	4b33      	ldr	r3, [pc, #204]	; (80067cc <xTaskGenericNotifyFromISR+0x1e8>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d00c      	beq.n	8006720 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 8006706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800670a:	f383 8811 	msr	BASEPRI, r3
 800670e:	f3bf 8f6f 	isb	sy
 8006712:	f3bf 8f4f 	dsb	sy
 8006716:	61fb      	str	r3, [r7, #28]
    }
 8006718:	bf00      	nop
 800671a:	e7fe      	b.n	800671a <xTaskGenericNotifyFromISR+0x136>
                    break;
 800671c:	bf00      	nop
 800671e:	e000      	b.n	8006722 <xTaskGenericNotifyFromISR+0x13e>
                    break;
 8006720:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006722:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006726:	2b01      	cmp	r3, #1
 8006728:	d145      	bne.n	80067b6 <xTaskGenericNotifyFromISR+0x1d2>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800672a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800672c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800672e:	2b00      	cmp	r3, #0
 8006730:	d00a      	beq.n	8006748 <xTaskGenericNotifyFromISR+0x164>
        __asm volatile
 8006732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006736:	f383 8811 	msr	BASEPRI, r3
 800673a:	f3bf 8f6f 	isb	sy
 800673e:	f3bf 8f4f 	dsb	sy
 8006742:	61bb      	str	r3, [r7, #24]
    }
 8006744:	bf00      	nop
 8006746:	e7fe      	b.n	8006746 <xTaskGenericNotifyFromISR+0x162>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006748:	4b21      	ldr	r3, [pc, #132]	; (80067d0 <xTaskGenericNotifyFromISR+0x1ec>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d11c      	bne.n	800678a <xTaskGenericNotifyFromISR+0x1a6>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006752:	3304      	adds	r3, #4
 8006754:	4618      	mov	r0, r3
 8006756:	f7fe fa1d 	bl	8004b94 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800675a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800675c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800675e:	2201      	movs	r2, #1
 8006760:	409a      	lsls	r2, r3
 8006762:	4b1c      	ldr	r3, [pc, #112]	; (80067d4 <xTaskGenericNotifyFromISR+0x1f0>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4313      	orrs	r3, r2
 8006768:	4a1a      	ldr	r2, [pc, #104]	; (80067d4 <xTaskGenericNotifyFromISR+0x1f0>)
 800676a:	6013      	str	r3, [r2, #0]
 800676c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800676e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006770:	4613      	mov	r3, r2
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	4413      	add	r3, r2
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	4a17      	ldr	r2, [pc, #92]	; (80067d8 <xTaskGenericNotifyFromISR+0x1f4>)
 800677a:	441a      	add	r2, r3
 800677c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800677e:	3304      	adds	r3, #4
 8006780:	4619      	mov	r1, r3
 8006782:	4610      	mov	r0, r2
 8006784:	f7fe f9a9 	bl	8004ada <vListInsertEnd>
 8006788:	e005      	b.n	8006796 <xTaskGenericNotifyFromISR+0x1b2>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800678a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800678c:	3318      	adds	r3, #24
 800678e:	4619      	mov	r1, r3
 8006790:	4812      	ldr	r0, [pc, #72]	; (80067dc <xTaskGenericNotifyFromISR+0x1f8>)
 8006792:	f7fe f9a2 	bl	8004ada <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800679a:	4b11      	ldr	r3, [pc, #68]	; (80067e0 <xTaskGenericNotifyFromISR+0x1fc>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d908      	bls.n	80067b6 <xTaskGenericNotifyFromISR+0x1d2>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 80067a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d002      	beq.n	80067b0 <xTaskGenericNotifyFromISR+0x1cc>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 80067aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067ac:	2201      	movs	r2, #1
 80067ae:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 80067b0:	4b0c      	ldr	r3, [pc, #48]	; (80067e4 <xTaskGenericNotifyFromISR+0x200>)
 80067b2:	2201      	movs	r2, #1
 80067b4:	601a      	str	r2, [r3, #0]
 80067b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067b8:	617b      	str	r3, [r7, #20]
        __asm volatile
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	f383 8811 	msr	BASEPRI, r3
    }
 80067c0:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 80067c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 80067c4:	4618      	mov	r0, r3
 80067c6:	3740      	adds	r7, #64	; 0x40
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}
 80067cc:	20000304 	.word	0x20000304
 80067d0:	20000328 	.word	0x20000328
 80067d4:	20000308 	.word	0x20000308
 80067d8:	2000022c 	.word	0x2000022c
 80067dc:	200002c0 	.word	0x200002c0
 80067e0:	20000228 	.word	0x20000228
 80067e4:	20000314 	.word	0x20000314

080067e8 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80067f2:	4b29      	ldr	r3, [pc, #164]	; (8006898 <prvAddCurrentTaskToDelayedList+0xb0>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80067f8:	4b28      	ldr	r3, [pc, #160]	; (800689c <prvAddCurrentTaskToDelayedList+0xb4>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	3304      	adds	r3, #4
 80067fe:	4618      	mov	r0, r3
 8006800:	f7fe f9c8 	bl	8004b94 <uxListRemove>
 8006804:	4603      	mov	r3, r0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d10b      	bne.n	8006822 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800680a:	4b24      	ldr	r3, [pc, #144]	; (800689c <prvAddCurrentTaskToDelayedList+0xb4>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006810:	2201      	movs	r2, #1
 8006812:	fa02 f303 	lsl.w	r3, r2, r3
 8006816:	43da      	mvns	r2, r3
 8006818:	4b21      	ldr	r3, [pc, #132]	; (80068a0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4013      	ands	r3, r2
 800681e:	4a20      	ldr	r2, [pc, #128]	; (80068a0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006820:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006828:	d10a      	bne.n	8006840 <prvAddCurrentTaskToDelayedList+0x58>
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d007      	beq.n	8006840 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006830:	4b1a      	ldr	r3, [pc, #104]	; (800689c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	3304      	adds	r3, #4
 8006836:	4619      	mov	r1, r3
 8006838:	481a      	ldr	r0, [pc, #104]	; (80068a4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800683a:	f7fe f94e 	bl	8004ada <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800683e:	e026      	b.n	800688e <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8006840:	68fa      	ldr	r2, [r7, #12]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4413      	add	r3, r2
 8006846:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006848:	4b14      	ldr	r3, [pc, #80]	; (800689c <prvAddCurrentTaskToDelayedList+0xb4>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	68ba      	ldr	r2, [r7, #8]
 800684e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8006850:	68ba      	ldr	r2, [r7, #8]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	429a      	cmp	r2, r3
 8006856:	d209      	bcs.n	800686c <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006858:	4b13      	ldr	r3, [pc, #76]	; (80068a8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	4b0f      	ldr	r3, [pc, #60]	; (800689c <prvAddCurrentTaskToDelayedList+0xb4>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	3304      	adds	r3, #4
 8006862:	4619      	mov	r1, r3
 8006864:	4610      	mov	r0, r2
 8006866:	f7fe f95c 	bl	8004b22 <vListInsert>
}
 800686a:	e010      	b.n	800688e <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800686c:	4b0f      	ldr	r3, [pc, #60]	; (80068ac <prvAddCurrentTaskToDelayedList+0xc4>)
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	4b0a      	ldr	r3, [pc, #40]	; (800689c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	3304      	adds	r3, #4
 8006876:	4619      	mov	r1, r3
 8006878:	4610      	mov	r0, r2
 800687a:	f7fe f952 	bl	8004b22 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800687e:	4b0c      	ldr	r3, [pc, #48]	; (80068b0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	68ba      	ldr	r2, [r7, #8]
 8006884:	429a      	cmp	r2, r3
 8006886:	d202      	bcs.n	800688e <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8006888:	4a09      	ldr	r2, [pc, #36]	; (80068b0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	6013      	str	r3, [r2, #0]
}
 800688e:	bf00      	nop
 8006890:	3710      	adds	r7, #16
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
 8006896:	bf00      	nop
 8006898:	20000304 	.word	0x20000304
 800689c:	20000228 	.word	0x20000228
 80068a0:	20000308 	.word	0x20000308
 80068a4:	200002ec 	.word	0x200002ec
 80068a8:	200002bc 	.word	0x200002bc
 80068ac:	200002b8 	.word	0x200002b8
 80068b0:	20000320 	.word	0x20000320

080068b4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80068ba:	2300      	movs	r3, #0
 80068bc:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80068be:	f000 fb31 	bl	8006f24 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80068c2:	4b11      	ldr	r3, [pc, #68]	; (8006908 <xTimerCreateTimerTask+0x54>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d00b      	beq.n	80068e2 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80068ca:	4b10      	ldr	r3, [pc, #64]	; (800690c <xTimerCreateTimerTask+0x58>)
 80068cc:	9301      	str	r3, [sp, #4]
 80068ce:	2302      	movs	r3, #2
 80068d0:	9300      	str	r3, [sp, #0]
 80068d2:	2300      	movs	r3, #0
 80068d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80068d8:	490d      	ldr	r1, [pc, #52]	; (8006910 <xTimerCreateTimerTask+0x5c>)
 80068da:	480e      	ldr	r0, [pc, #56]	; (8006914 <xTimerCreateTimerTask+0x60>)
 80068dc:	f7fe ff38 	bl	8005750 <xTaskCreate>
 80068e0:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d10a      	bne.n	80068fe <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80068e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ec:	f383 8811 	msr	BASEPRI, r3
 80068f0:	f3bf 8f6f 	isb	sy
 80068f4:	f3bf 8f4f 	dsb	sy
 80068f8:	603b      	str	r3, [r7, #0]
    }
 80068fa:	bf00      	nop
 80068fc:	e7fe      	b.n	80068fc <xTimerCreateTimerTask+0x48>
        return xReturn;
 80068fe:	687b      	ldr	r3, [r7, #4]
    }
 8006900:	4618      	mov	r0, r3
 8006902:	3708      	adds	r7, #8
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}
 8006908:	2000035c 	.word	0x2000035c
 800690c:	20000360 	.word	0x20000360
 8006910:	08008664 	.word	0x08008664
 8006914:	08006b05 	.word	0x08006b05

08006918 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8006918:	b580      	push	{r7, lr}
 800691a:	b088      	sub	sp, #32
 800691c:	af02      	add	r7, sp, #8
 800691e:	60f8      	str	r0, [r7, #12]
 8006920:	60b9      	str	r1, [r7, #8]
 8006922:	607a      	str	r2, [r7, #4]
 8006924:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8006926:	202c      	movs	r0, #44	; 0x2c
 8006928:	f000 fe20 	bl	800756c <pvPortMalloc>
 800692c:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d00d      	beq.n	8006950 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	2200      	movs	r2, #0
 8006938:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	9301      	str	r3, [sp, #4]
 8006940:	6a3b      	ldr	r3, [r7, #32]
 8006942:	9300      	str	r3, [sp, #0]
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	68b9      	ldr	r1, [r7, #8]
 800694a:	68f8      	ldr	r0, [r7, #12]
 800694c:	f000 f805 	bl	800695a <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8006950:	697b      	ldr	r3, [r7, #20]
        }
 8006952:	4618      	mov	r0, r3
 8006954:	3718      	adds	r7, #24
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}

0800695a <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 800695a:	b580      	push	{r7, lr}
 800695c:	b086      	sub	sp, #24
 800695e:	af00      	add	r7, sp, #0
 8006960:	60f8      	str	r0, [r7, #12]
 8006962:	60b9      	str	r1, [r7, #8]
 8006964:	607a      	str	r2, [r7, #4]
 8006966:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d10a      	bne.n	8006984 <prvInitialiseNewTimer+0x2a>
        __asm volatile
 800696e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006972:	f383 8811 	msr	BASEPRI, r3
 8006976:	f3bf 8f6f 	isb	sy
 800697a:	f3bf 8f4f 	dsb	sy
 800697e:	617b      	str	r3, [r7, #20]
    }
 8006980:	bf00      	nop
 8006982:	e7fe      	b.n	8006982 <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 8006984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006986:	2b00      	cmp	r3, #0
 8006988:	d01e      	beq.n	80069c8 <prvInitialiseNewTimer+0x6e>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 800698a:	f000 facb 	bl	8006f24 <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 800698e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006990:	68fa      	ldr	r2, [r7, #12]
 8006992:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8006994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006996:	68ba      	ldr	r2, [r7, #8]
 8006998:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 800699a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699c:	683a      	ldr	r2, [r7, #0]
 800699e:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80069a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a2:	6a3a      	ldr	r2, [r7, #32]
 80069a4:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80069a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a8:	3304      	adds	r3, #4
 80069aa:	4618      	mov	r0, r3
 80069ac:	f7fe f888 	bl	8004ac0 <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d008      	beq.n	80069c8 <prvInitialiseNewTimer+0x6e>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80069b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069bc:	f043 0304 	orr.w	r3, r3, #4
 80069c0:	b2da      	uxtb	r2, r3
 80069c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 80069c8:	bf00      	nop
 80069ca:	3718      	adds	r7, #24
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}

080069d0 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b08a      	sub	sp, #40	; 0x28
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	60f8      	str	r0, [r7, #12]
 80069d8:	60b9      	str	r1, [r7, #8]
 80069da:	607a      	str	r2, [r7, #4]
 80069dc:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80069de:	2300      	movs	r3, #0
 80069e0:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d10a      	bne.n	80069fe <xTimerGenericCommand+0x2e>
        __asm volatile
 80069e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ec:	f383 8811 	msr	BASEPRI, r3
 80069f0:	f3bf 8f6f 	isb	sy
 80069f4:	f3bf 8f4f 	dsb	sy
 80069f8:	623b      	str	r3, [r7, #32]
    }
 80069fa:	bf00      	nop
 80069fc:	e7fe      	b.n	80069fc <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80069fe:	4b1a      	ldr	r3, [pc, #104]	; (8006a68 <xTimerGenericCommand+0x98>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d02a      	beq.n	8006a5c <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	2b05      	cmp	r3, #5
 8006a16:	dc18      	bgt.n	8006a4a <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006a18:	f7ff fbec 	bl	80061f4 <xTaskGetSchedulerState>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	2b02      	cmp	r3, #2
 8006a20:	d109      	bne.n	8006a36 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006a22:	4b11      	ldr	r3, [pc, #68]	; (8006a68 <xTimerGenericCommand+0x98>)
 8006a24:	6818      	ldr	r0, [r3, #0]
 8006a26:	f107 0114 	add.w	r1, r7, #20
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a2e:	f7fe f9c5 	bl	8004dbc <xQueueGenericSend>
 8006a32:	6278      	str	r0, [r7, #36]	; 0x24
 8006a34:	e012      	b.n	8006a5c <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006a36:	4b0c      	ldr	r3, [pc, #48]	; (8006a68 <xTimerGenericCommand+0x98>)
 8006a38:	6818      	ldr	r0, [r3, #0]
 8006a3a:	f107 0114 	add.w	r1, r7, #20
 8006a3e:	2300      	movs	r3, #0
 8006a40:	2200      	movs	r2, #0
 8006a42:	f7fe f9bb 	bl	8004dbc <xQueueGenericSend>
 8006a46:	6278      	str	r0, [r7, #36]	; 0x24
 8006a48:	e008      	b.n	8006a5c <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006a4a:	4b07      	ldr	r3, [pc, #28]	; (8006a68 <xTimerGenericCommand+0x98>)
 8006a4c:	6818      	ldr	r0, [r3, #0]
 8006a4e:	f107 0114 	add.w	r1, r7, #20
 8006a52:	2300      	movs	r3, #0
 8006a54:	683a      	ldr	r2, [r7, #0]
 8006a56:	f7fe faaf 	bl	8004fb8 <xQueueGenericSendFromISR>
 8006a5a:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3728      	adds	r7, #40	; 0x28
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
 8006a66:	bf00      	nop
 8006a68:	2000035c 	.word	0x2000035c

08006a6c <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b088      	sub	sp, #32
 8006a70:	af02      	add	r7, sp, #8
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a76:	4b22      	ldr	r3, [pc, #136]	; (8006b00 <prvProcessExpiredTimer+0x94>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	68db      	ldr	r3, [r3, #12]
 8006a7c:	68db      	ldr	r3, [r3, #12]
 8006a7e:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	3304      	adds	r3, #4
 8006a84:	4618      	mov	r0, r3
 8006a86:	f7fe f885 	bl	8004b94 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a90:	f003 0304 	and.w	r3, r3, #4
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d022      	beq.n	8006ade <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	699a      	ldr	r2, [r3, #24]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	18d1      	adds	r1, r2, r3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	683a      	ldr	r2, [r7, #0]
 8006aa4:	6978      	ldr	r0, [r7, #20]
 8006aa6:	f000 f8d1 	bl	8006c4c <prvInsertTimerInActiveList>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d01f      	beq.n	8006af0 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	9300      	str	r3, [sp, #0]
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	2100      	movs	r1, #0
 8006aba:	6978      	ldr	r0, [r7, #20]
 8006abc:	f7ff ff88 	bl	80069d0 <xTimerGenericCommand>
 8006ac0:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d113      	bne.n	8006af0 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8006ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006acc:	f383 8811 	msr	BASEPRI, r3
 8006ad0:	f3bf 8f6f 	isb	sy
 8006ad4:	f3bf 8f4f 	dsb	sy
 8006ad8:	60fb      	str	r3, [r7, #12]
    }
 8006ada:	bf00      	nop
 8006adc:	e7fe      	b.n	8006adc <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ae4:	f023 0301 	bic.w	r3, r3, #1
 8006ae8:	b2da      	uxtb	r2, r3
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	6a1b      	ldr	r3, [r3, #32]
 8006af4:	6978      	ldr	r0, [r7, #20]
 8006af6:	4798      	blx	r3
    }
 8006af8:	bf00      	nop
 8006afa:	3718      	adds	r7, #24
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}
 8006b00:	20000354 	.word	0x20000354

08006b04 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b084      	sub	sp, #16
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006b0c:	f107 0308 	add.w	r3, r7, #8
 8006b10:	4618      	mov	r0, r3
 8006b12:	f000 f857 	bl	8006bc4 <prvGetNextExpireTime>
 8006b16:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	4619      	mov	r1, r3
 8006b1c:	68f8      	ldr	r0, [r7, #12]
 8006b1e:	f000 f803 	bl	8006b28 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8006b22:	f000 f8d5 	bl	8006cd0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006b26:	e7f1      	b.n	8006b0c <prvTimerTask+0x8>

08006b28 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8006b32:	f7fe ffa5 	bl	8005a80 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006b36:	f107 0308 	add.w	r3, r7, #8
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f000 f866 	bl	8006c0c <prvSampleTimeNow>
 8006b40:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d130      	bne.n	8006baa <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d10a      	bne.n	8006b64 <prvProcessTimerOrBlockTask+0x3c>
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d806      	bhi.n	8006b64 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8006b56:	f7fe ffa1 	bl	8005a9c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006b5a:	68f9      	ldr	r1, [r7, #12]
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f7ff ff85 	bl	8006a6c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8006b62:	e024      	b.n	8006bae <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d008      	beq.n	8006b7c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006b6a:	4b13      	ldr	r3, [pc, #76]	; (8006bb8 <prvProcessTimerOrBlockTask+0x90>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d101      	bne.n	8006b78 <prvProcessTimerOrBlockTask+0x50>
 8006b74:	2301      	movs	r3, #1
 8006b76:	e000      	b.n	8006b7a <prvProcessTimerOrBlockTask+0x52>
 8006b78:	2300      	movs	r3, #0
 8006b7a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006b7c:	4b0f      	ldr	r3, [pc, #60]	; (8006bbc <prvProcessTimerOrBlockTask+0x94>)
 8006b7e:	6818      	ldr	r0, [r3, #0]
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	1ad3      	subs	r3, r2, r3
 8006b86:	683a      	ldr	r2, [r7, #0]
 8006b88:	4619      	mov	r1, r3
 8006b8a:	f7fe fdad 	bl	80056e8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8006b8e:	f7fe ff85 	bl	8005a9c <xTaskResumeAll>
 8006b92:	4603      	mov	r3, r0
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d10a      	bne.n	8006bae <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8006b98:	4b09      	ldr	r3, [pc, #36]	; (8006bc0 <prvProcessTimerOrBlockTask+0x98>)
 8006b9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b9e:	601a      	str	r2, [r3, #0]
 8006ba0:	f3bf 8f4f 	dsb	sy
 8006ba4:	f3bf 8f6f 	isb	sy
    }
 8006ba8:	e001      	b.n	8006bae <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8006baa:	f7fe ff77 	bl	8005a9c <xTaskResumeAll>
    }
 8006bae:	bf00      	nop
 8006bb0:	3710      	adds	r7, #16
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	bf00      	nop
 8006bb8:	20000358 	.word	0x20000358
 8006bbc:	2000035c 	.word	0x2000035c
 8006bc0:	e000ed04 	.word	0xe000ed04

08006bc4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8006bc4:	b480      	push	{r7}
 8006bc6:	b085      	sub	sp, #20
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006bcc:	4b0e      	ldr	r3, [pc, #56]	; (8006c08 <prvGetNextExpireTime+0x44>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d101      	bne.n	8006bda <prvGetNextExpireTime+0x16>
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	e000      	b.n	8006bdc <prvGetNextExpireTime+0x18>
 8006bda:	2200      	movs	r2, #0
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d105      	bne.n	8006bf4 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006be8:	4b07      	ldr	r3, [pc, #28]	; (8006c08 <prvGetNextExpireTime+0x44>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	68db      	ldr	r3, [r3, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	60fb      	str	r3, [r7, #12]
 8006bf2:	e001      	b.n	8006bf8 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
    }
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3714      	adds	r7, #20
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr
 8006c06:	bf00      	nop
 8006c08:	20000354 	.word	0x20000354

08006c0c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b084      	sub	sp, #16
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8006c14:	f7fe ffde 	bl	8005bd4 <xTaskGetTickCount>
 8006c18:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8006c1a:	4b0b      	ldr	r3, [pc, #44]	; (8006c48 <prvSampleTimeNow+0x3c>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	68fa      	ldr	r2, [r7, #12]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d205      	bcs.n	8006c30 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8006c24:	f000 f91a 	bl	8006e5c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	601a      	str	r2, [r3, #0]
 8006c2e:	e002      	b.n	8006c36 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8006c36:	4a04      	ldr	r2, [pc, #16]	; (8006c48 <prvSampleTimeNow+0x3c>)
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
    }
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3710      	adds	r7, #16
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
 8006c46:	bf00      	nop
 8006c48:	20000364 	.word	0x20000364

08006c4c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b086      	sub	sp, #24
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	60f8      	str	r0, [r7, #12]
 8006c54:	60b9      	str	r1, [r7, #8]
 8006c56:	607a      	str	r2, [r7, #4]
 8006c58:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	68ba      	ldr	r2, [r7, #8]
 8006c62:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	68fa      	ldr	r2, [r7, #12]
 8006c68:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8006c6a:	68ba      	ldr	r2, [r7, #8]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d812      	bhi.n	8006c98 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	1ad2      	subs	r2, r2, r3
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	699b      	ldr	r3, [r3, #24]
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d302      	bcc.n	8006c86 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8006c80:	2301      	movs	r3, #1
 8006c82:	617b      	str	r3, [r7, #20]
 8006c84:	e01b      	b.n	8006cbe <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006c86:	4b10      	ldr	r3, [pc, #64]	; (8006cc8 <prvInsertTimerInActiveList+0x7c>)
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	3304      	adds	r3, #4
 8006c8e:	4619      	mov	r1, r3
 8006c90:	4610      	mov	r0, r2
 8006c92:	f7fd ff46 	bl	8004b22 <vListInsert>
 8006c96:	e012      	b.n	8006cbe <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d206      	bcs.n	8006cae <prvInsertTimerInActiveList+0x62>
 8006ca0:	68ba      	ldr	r2, [r7, #8]
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d302      	bcc.n	8006cae <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	617b      	str	r3, [r7, #20]
 8006cac:	e007      	b.n	8006cbe <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006cae:	4b07      	ldr	r3, [pc, #28]	; (8006ccc <prvInsertTimerInActiveList+0x80>)
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	3304      	adds	r3, #4
 8006cb6:	4619      	mov	r1, r3
 8006cb8:	4610      	mov	r0, r2
 8006cba:	f7fd ff32 	bl	8004b22 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8006cbe:	697b      	ldr	r3, [r7, #20]
    }
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3718      	adds	r7, #24
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}
 8006cc8:	20000358 	.word	0x20000358
 8006ccc:	20000354 	.word	0x20000354

08006cd0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b08c      	sub	sp, #48	; 0x30
 8006cd4:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006cd6:	e0ae      	b.n	8006e36 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	f2c0 80aa 	blt.w	8006e34 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce6:	695b      	ldr	r3, [r3, #20]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d004      	beq.n	8006cf6 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cee:	3304      	adds	r3, #4
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f7fd ff4f 	bl	8004b94 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006cf6:	1d3b      	adds	r3, r7, #4
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f7ff ff87 	bl	8006c0c <prvSampleTimeNow>
 8006cfe:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	2b09      	cmp	r3, #9
 8006d04:	f200 8097 	bhi.w	8006e36 <prvProcessReceivedCommands+0x166>
 8006d08:	a201      	add	r2, pc, #4	; (adr r2, 8006d10 <prvProcessReceivedCommands+0x40>)
 8006d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d0e:	bf00      	nop
 8006d10:	08006d39 	.word	0x08006d39
 8006d14:	08006d39 	.word	0x08006d39
 8006d18:	08006d39 	.word	0x08006d39
 8006d1c:	08006dad 	.word	0x08006dad
 8006d20:	08006dc1 	.word	0x08006dc1
 8006d24:	08006e0b 	.word	0x08006e0b
 8006d28:	08006d39 	.word	0x08006d39
 8006d2c:	08006d39 	.word	0x08006d39
 8006d30:	08006dad 	.word	0x08006dad
 8006d34:	08006dc1 	.word	0x08006dc1
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d3e:	f043 0301 	orr.w	r3, r3, #1
 8006d42:	b2da      	uxtb	r2, r3
 8006d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006d4a:	68fa      	ldr	r2, [r7, #12]
 8006d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4e:	699b      	ldr	r3, [r3, #24]
 8006d50:	18d1      	adds	r1, r2, r3
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	6a3a      	ldr	r2, [r7, #32]
 8006d56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006d58:	f7ff ff78 	bl	8006c4c <prvInsertTimerInActiveList>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d069      	beq.n	8006e36 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d64:	6a1b      	ldr	r3, [r3, #32]
 8006d66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006d68:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d70:	f003 0304 	and.w	r3, r3, #4
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d05e      	beq.n	8006e36 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006d78:	68fa      	ldr	r2, [r7, #12]
 8006d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7c:	699b      	ldr	r3, [r3, #24]
 8006d7e:	441a      	add	r2, r3
 8006d80:	2300      	movs	r3, #0
 8006d82:	9300      	str	r3, [sp, #0]
 8006d84:	2300      	movs	r3, #0
 8006d86:	2100      	movs	r1, #0
 8006d88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006d8a:	f7ff fe21 	bl	80069d0 <xTimerGenericCommand>
 8006d8e:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8006d90:	69fb      	ldr	r3, [r7, #28]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d14f      	bne.n	8006e36 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8006d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d9a:	f383 8811 	msr	BASEPRI, r3
 8006d9e:	f3bf 8f6f 	isb	sy
 8006da2:	f3bf 8f4f 	dsb	sy
 8006da6:	61bb      	str	r3, [r7, #24]
    }
 8006da8:	bf00      	nop
 8006daa:	e7fe      	b.n	8006daa <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006db2:	f023 0301 	bic.w	r3, r3, #1
 8006db6:	b2da      	uxtb	r2, r3
 8006db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8006dbe:	e03a      	b.n	8006e36 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006dc6:	f043 0301 	orr.w	r3, r3, #1
 8006dca:	b2da      	uxtb	r2, r3
 8006dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006dd2:	68fa      	ldr	r2, [r7, #12]
 8006dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd6:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dda:	699b      	ldr	r3, [r3, #24]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d10a      	bne.n	8006df6 <prvProcessReceivedCommands+0x126>
        __asm volatile
 8006de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de4:	f383 8811 	msr	BASEPRI, r3
 8006de8:	f3bf 8f6f 	isb	sy
 8006dec:	f3bf 8f4f 	dsb	sy
 8006df0:	617b      	str	r3, [r7, #20]
    }
 8006df2:	bf00      	nop
 8006df4:	e7fe      	b.n	8006df4 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df8:	699a      	ldr	r2, [r3, #24]
 8006dfa:	6a3b      	ldr	r3, [r7, #32]
 8006dfc:	18d1      	adds	r1, r2, r3
 8006dfe:	6a3b      	ldr	r3, [r7, #32]
 8006e00:	6a3a      	ldr	r2, [r7, #32]
 8006e02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006e04:	f7ff ff22 	bl	8006c4c <prvInsertTimerInActiveList>
                        break;
 8006e08:	e015      	b.n	8006e36 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e10:	f003 0302 	and.w	r3, r3, #2
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d103      	bne.n	8006e20 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8006e18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006e1a:	f000 fc87 	bl	800772c <vPortFree>
 8006e1e:	e00a      	b.n	8006e36 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e26:	f023 0301 	bic.w	r3, r3, #1
 8006e2a:	b2da      	uxtb	r2, r3
 8006e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8006e32:	e000      	b.n	8006e36 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8006e34:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006e36:	4b08      	ldr	r3, [pc, #32]	; (8006e58 <prvProcessReceivedCommands+0x188>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f107 0108 	add.w	r1, r7, #8
 8006e3e:	2200      	movs	r2, #0
 8006e40:	4618      	mov	r0, r3
 8006e42:	f7fe f963 	bl	800510c <xQueueReceive>
 8006e46:	4603      	mov	r3, r0
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	f47f af45 	bne.w	8006cd8 <prvProcessReceivedCommands+0x8>
        }
    }
 8006e4e:	bf00      	nop
 8006e50:	bf00      	nop
 8006e52:	3728      	adds	r7, #40	; 0x28
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}
 8006e58:	2000035c 	.word	0x2000035c

08006e5c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b088      	sub	sp, #32
 8006e60:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006e62:	e048      	b.n	8006ef6 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e64:	4b2d      	ldr	r3, [pc, #180]	; (8006f1c <prvSwitchTimerLists+0xc0>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	68db      	ldr	r3, [r3, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e6e:	4b2b      	ldr	r3, [pc, #172]	; (8006f1c <prvSwitchTimerLists+0xc0>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	68db      	ldr	r3, [r3, #12]
 8006e74:	68db      	ldr	r3, [r3, #12]
 8006e76:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	3304      	adds	r3, #4
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f7fd fe89 	bl	8004b94 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	6a1b      	ldr	r3, [r3, #32]
 8006e86:	68f8      	ldr	r0, [r7, #12]
 8006e88:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e90:	f003 0304 	and.w	r3, r3, #4
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d02e      	beq.n	8006ef6 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	699b      	ldr	r3, [r3, #24]
 8006e9c:	693a      	ldr	r2, [r7, #16]
 8006e9e:	4413      	add	r3, r2
 8006ea0:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8006ea2:	68ba      	ldr	r2, [r7, #8]
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d90e      	bls.n	8006ec8 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	68ba      	ldr	r2, [r7, #8]
 8006eae:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	68fa      	ldr	r2, [r7, #12]
 8006eb4:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006eb6:	4b19      	ldr	r3, [pc, #100]	; (8006f1c <prvSwitchTimerLists+0xc0>)
 8006eb8:	681a      	ldr	r2, [r3, #0]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	3304      	adds	r3, #4
 8006ebe:	4619      	mov	r1, r3
 8006ec0:	4610      	mov	r0, r2
 8006ec2:	f7fd fe2e 	bl	8004b22 <vListInsert>
 8006ec6:	e016      	b.n	8006ef6 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006ec8:	2300      	movs	r3, #0
 8006eca:	9300      	str	r3, [sp, #0]
 8006ecc:	2300      	movs	r3, #0
 8006ece:	693a      	ldr	r2, [r7, #16]
 8006ed0:	2100      	movs	r1, #0
 8006ed2:	68f8      	ldr	r0, [r7, #12]
 8006ed4:	f7ff fd7c 	bl	80069d0 <xTimerGenericCommand>
 8006ed8:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d10a      	bne.n	8006ef6 <prvSwitchTimerLists+0x9a>
        __asm volatile
 8006ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee4:	f383 8811 	msr	BASEPRI, r3
 8006ee8:	f3bf 8f6f 	isb	sy
 8006eec:	f3bf 8f4f 	dsb	sy
 8006ef0:	603b      	str	r3, [r7, #0]
    }
 8006ef2:	bf00      	nop
 8006ef4:	e7fe      	b.n	8006ef4 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006ef6:	4b09      	ldr	r3, [pc, #36]	; (8006f1c <prvSwitchTimerLists+0xc0>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d1b1      	bne.n	8006e64 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8006f00:	4b06      	ldr	r3, [pc, #24]	; (8006f1c <prvSwitchTimerLists+0xc0>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8006f06:	4b06      	ldr	r3, [pc, #24]	; (8006f20 <prvSwitchTimerLists+0xc4>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a04      	ldr	r2, [pc, #16]	; (8006f1c <prvSwitchTimerLists+0xc0>)
 8006f0c:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8006f0e:	4a04      	ldr	r2, [pc, #16]	; (8006f20 <prvSwitchTimerLists+0xc4>)
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	6013      	str	r3, [r2, #0]
    }
 8006f14:	bf00      	nop
 8006f16:	3718      	adds	r7, #24
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}
 8006f1c:	20000354 	.word	0x20000354
 8006f20:	20000358 	.word	0x20000358

08006f24 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8006f24:	b580      	push	{r7, lr}
 8006f26:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8006f28:	f000 f9fc 	bl	8007324 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8006f2c:	4b12      	ldr	r3, [pc, #72]	; (8006f78 <prvCheckForValidListAndQueue+0x54>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d11d      	bne.n	8006f70 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8006f34:	4811      	ldr	r0, [pc, #68]	; (8006f7c <prvCheckForValidListAndQueue+0x58>)
 8006f36:	f7fd fda3 	bl	8004a80 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8006f3a:	4811      	ldr	r0, [pc, #68]	; (8006f80 <prvCheckForValidListAndQueue+0x5c>)
 8006f3c:	f7fd fda0 	bl	8004a80 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8006f40:	4b10      	ldr	r3, [pc, #64]	; (8006f84 <prvCheckForValidListAndQueue+0x60>)
 8006f42:	4a0e      	ldr	r2, [pc, #56]	; (8006f7c <prvCheckForValidListAndQueue+0x58>)
 8006f44:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8006f46:	4b10      	ldr	r3, [pc, #64]	; (8006f88 <prvCheckForValidListAndQueue+0x64>)
 8006f48:	4a0d      	ldr	r2, [pc, #52]	; (8006f80 <prvCheckForValidListAndQueue+0x5c>)
 8006f4a:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	210c      	movs	r1, #12
 8006f50:	200a      	movs	r0, #10
 8006f52:	f7fd feb1 	bl	8004cb8 <xQueueGenericCreate>
 8006f56:	4603      	mov	r3, r0
 8006f58:	4a07      	ldr	r2, [pc, #28]	; (8006f78 <prvCheckForValidListAndQueue+0x54>)
 8006f5a:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8006f5c:	4b06      	ldr	r3, [pc, #24]	; (8006f78 <prvCheckForValidListAndQueue+0x54>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d005      	beq.n	8006f70 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006f64:	4b04      	ldr	r3, [pc, #16]	; (8006f78 <prvCheckForValidListAndQueue+0x54>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4908      	ldr	r1, [pc, #32]	; (8006f8c <prvCheckForValidListAndQueue+0x68>)
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f7fe fb92 	bl	8005694 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006f70:	f000 fa08 	bl	8007384 <vPortExitCritical>
    }
 8006f74:	bf00      	nop
 8006f76:	bd80      	pop	{r7, pc}
 8006f78:	2000035c 	.word	0x2000035c
 8006f7c:	2000032c 	.word	0x2000032c
 8006f80:	20000340 	.word	0x20000340
 8006f84:	20000354 	.word	0x20000354
 8006f88:	20000358 	.word	0x20000358
 8006f8c:	0800866c 	.word	0x0800866c

08006f90 <pvTimerGetTimerID>:
        return xReturn;
    } /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b086      	sub	sp, #24
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	617b      	str	r3, [r7, #20]
        void * pvReturn;

        configASSERT( xTimer );
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d10a      	bne.n	8006fb8 <pvTimerGetTimerID+0x28>
        __asm volatile
 8006fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa6:	f383 8811 	msr	BASEPRI, r3
 8006faa:	f3bf 8f6f 	isb	sy
 8006fae:	f3bf 8f4f 	dsb	sy
 8006fb2:	60fb      	str	r3, [r7, #12]
    }
 8006fb4:	bf00      	nop
 8006fb6:	e7fe      	b.n	8006fb6 <pvTimerGetTimerID+0x26>

        taskENTER_CRITICAL();
 8006fb8:	f000 f9b4 	bl	8007324 <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	69db      	ldr	r3, [r3, #28]
 8006fc0:	613b      	str	r3, [r7, #16]
        }
        taskEXIT_CRITICAL();
 8006fc2:	f000 f9df 	bl	8007384 <vPortExitCritical>

        return pvReturn;
 8006fc6:	693b      	ldr	r3, [r7, #16]
    }
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3718      	adds	r7, #24
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b085      	sub	sp, #20
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	60f8      	str	r0, [r7, #12]
 8006fd8:	60b9      	str	r1, [r7, #8]
 8006fda:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	3b04      	subs	r3, #4
 8006fe0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006fe8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	3b04      	subs	r3, #4
 8006fee:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	f023 0201 	bic.w	r2, r3, #1
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	3b04      	subs	r3, #4
 8006ffe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8007000:	4a0c      	ldr	r2, [pc, #48]	; (8007034 <pxPortInitialiseStack+0x64>)
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	3b14      	subs	r3, #20
 800700a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	3b04      	subs	r3, #4
 8007016:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f06f 0202 	mvn.w	r2, #2
 800701e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	3b20      	subs	r3, #32
 8007024:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8007026:	68fb      	ldr	r3, [r7, #12]
}
 8007028:	4618      	mov	r0, r3
 800702a:	3714      	adds	r7, #20
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr
 8007034:	08007039 	.word	0x08007039

08007038 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007038:	b480      	push	{r7}
 800703a:	b085      	sub	sp, #20
 800703c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800703e:	2300      	movs	r3, #0
 8007040:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8007042:	4b12      	ldr	r3, [pc, #72]	; (800708c <prvTaskExitError+0x54>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800704a:	d00a      	beq.n	8007062 <prvTaskExitError+0x2a>
        __asm volatile
 800704c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007050:	f383 8811 	msr	BASEPRI, r3
 8007054:	f3bf 8f6f 	isb	sy
 8007058:	f3bf 8f4f 	dsb	sy
 800705c:	60fb      	str	r3, [r7, #12]
    }
 800705e:	bf00      	nop
 8007060:	e7fe      	b.n	8007060 <prvTaskExitError+0x28>
        __asm volatile
 8007062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007066:	f383 8811 	msr	BASEPRI, r3
 800706a:	f3bf 8f6f 	isb	sy
 800706e:	f3bf 8f4f 	dsb	sy
 8007072:	60bb      	str	r3, [r7, #8]
    }
 8007074:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8007076:	bf00      	nop
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d0fc      	beq.n	8007078 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800707e:	bf00      	nop
 8007080:	bf00      	nop
 8007082:	3714      	adds	r7, #20
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr
 800708c:	20000024 	.word	0x20000024

08007090 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8007090:	4b07      	ldr	r3, [pc, #28]	; (80070b0 <pxCurrentTCBConst2>)
 8007092:	6819      	ldr	r1, [r3, #0]
 8007094:	6808      	ldr	r0, [r1, #0]
 8007096:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800709a:	f380 8809 	msr	PSP, r0
 800709e:	f3bf 8f6f 	isb	sy
 80070a2:	f04f 0000 	mov.w	r0, #0
 80070a6:	f380 8811 	msr	BASEPRI, r0
 80070aa:	4770      	bx	lr
 80070ac:	f3af 8000 	nop.w

080070b0 <pxCurrentTCBConst2>:
 80070b0:	20000228 	.word	0x20000228
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80070b4:	bf00      	nop
 80070b6:	bf00      	nop

080070b8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80070b8:	4808      	ldr	r0, [pc, #32]	; (80070dc <prvPortStartFirstTask+0x24>)
 80070ba:	6800      	ldr	r0, [r0, #0]
 80070bc:	6800      	ldr	r0, [r0, #0]
 80070be:	f380 8808 	msr	MSP, r0
 80070c2:	f04f 0000 	mov.w	r0, #0
 80070c6:	f380 8814 	msr	CONTROL, r0
 80070ca:	b662      	cpsie	i
 80070cc:	b661      	cpsie	f
 80070ce:	f3bf 8f4f 	dsb	sy
 80070d2:	f3bf 8f6f 	isb	sy
 80070d6:	df00      	svc	0
 80070d8:	bf00      	nop
 80070da:	0000      	.short	0x0000
 80070dc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80070e0:	bf00      	nop
 80070e2:	bf00      	nop

080070e4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b086      	sub	sp, #24
 80070e8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80070ea:	4b46      	ldr	r3, [pc, #280]	; (8007204 <xPortStartScheduler+0x120>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a46      	ldr	r2, [pc, #280]	; (8007208 <xPortStartScheduler+0x124>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d10a      	bne.n	800710a <xPortStartScheduler+0x26>
        __asm volatile
 80070f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f8:	f383 8811 	msr	BASEPRI, r3
 80070fc:	f3bf 8f6f 	isb	sy
 8007100:	f3bf 8f4f 	dsb	sy
 8007104:	613b      	str	r3, [r7, #16]
    }
 8007106:	bf00      	nop
 8007108:	e7fe      	b.n	8007108 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800710a:	4b3e      	ldr	r3, [pc, #248]	; (8007204 <xPortStartScheduler+0x120>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a3f      	ldr	r2, [pc, #252]	; (800720c <xPortStartScheduler+0x128>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d10a      	bne.n	800712a <xPortStartScheduler+0x46>
        __asm volatile
 8007114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007118:	f383 8811 	msr	BASEPRI, r3
 800711c:	f3bf 8f6f 	isb	sy
 8007120:	f3bf 8f4f 	dsb	sy
 8007124:	60fb      	str	r3, [r7, #12]
    }
 8007126:	bf00      	nop
 8007128:	e7fe      	b.n	8007128 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800712a:	4b39      	ldr	r3, [pc, #228]	; (8007210 <xPortStartScheduler+0x12c>)
 800712c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	b2db      	uxtb	r3, r3
 8007134:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	22ff      	movs	r2, #255	; 0xff
 800713a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	781b      	ldrb	r3, [r3, #0]
 8007140:	b2db      	uxtb	r3, r3
 8007142:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007144:	78fb      	ldrb	r3, [r7, #3]
 8007146:	b2db      	uxtb	r3, r3
 8007148:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800714c:	b2da      	uxtb	r2, r3
 800714e:	4b31      	ldr	r3, [pc, #196]	; (8007214 <xPortStartScheduler+0x130>)
 8007150:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007152:	4b31      	ldr	r3, [pc, #196]	; (8007218 <xPortStartScheduler+0x134>)
 8007154:	2207      	movs	r2, #7
 8007156:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007158:	e009      	b.n	800716e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800715a:	4b2f      	ldr	r3, [pc, #188]	; (8007218 <xPortStartScheduler+0x134>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	3b01      	subs	r3, #1
 8007160:	4a2d      	ldr	r2, [pc, #180]	; (8007218 <xPortStartScheduler+0x134>)
 8007162:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007164:	78fb      	ldrb	r3, [r7, #3]
 8007166:	b2db      	uxtb	r3, r3
 8007168:	005b      	lsls	r3, r3, #1
 800716a:	b2db      	uxtb	r3, r3
 800716c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800716e:	78fb      	ldrb	r3, [r7, #3]
 8007170:	b2db      	uxtb	r3, r3
 8007172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007176:	2b80      	cmp	r3, #128	; 0x80
 8007178:	d0ef      	beq.n	800715a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800717a:	4b27      	ldr	r3, [pc, #156]	; (8007218 <xPortStartScheduler+0x134>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f1c3 0307 	rsb	r3, r3, #7
 8007182:	2b04      	cmp	r3, #4
 8007184:	d00a      	beq.n	800719c <xPortStartScheduler+0xb8>
        __asm volatile
 8007186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800718a:	f383 8811 	msr	BASEPRI, r3
 800718e:	f3bf 8f6f 	isb	sy
 8007192:	f3bf 8f4f 	dsb	sy
 8007196:	60bb      	str	r3, [r7, #8]
    }
 8007198:	bf00      	nop
 800719a:	e7fe      	b.n	800719a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800719c:	4b1e      	ldr	r3, [pc, #120]	; (8007218 <xPortStartScheduler+0x134>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	021b      	lsls	r3, r3, #8
 80071a2:	4a1d      	ldr	r2, [pc, #116]	; (8007218 <xPortStartScheduler+0x134>)
 80071a4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80071a6:	4b1c      	ldr	r3, [pc, #112]	; (8007218 <xPortStartScheduler+0x134>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80071ae:	4a1a      	ldr	r2, [pc, #104]	; (8007218 <xPortStartScheduler+0x134>)
 80071b0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	b2da      	uxtb	r2, r3
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80071ba:	4b18      	ldr	r3, [pc, #96]	; (800721c <xPortStartScheduler+0x138>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a17      	ldr	r2, [pc, #92]	; (800721c <xPortStartScheduler+0x138>)
 80071c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80071c4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80071c6:	4b15      	ldr	r3, [pc, #84]	; (800721c <xPortStartScheduler+0x138>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a14      	ldr	r2, [pc, #80]	; (800721c <xPortStartScheduler+0x138>)
 80071cc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80071d0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80071d2:	f000 f95b 	bl	800748c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80071d6:	4b12      	ldr	r3, [pc, #72]	; (8007220 <xPortStartScheduler+0x13c>)
 80071d8:	2200      	movs	r2, #0
 80071da:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80071dc:	f000 f97a 	bl	80074d4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80071e0:	4b10      	ldr	r3, [pc, #64]	; (8007224 <xPortStartScheduler+0x140>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a0f      	ldr	r2, [pc, #60]	; (8007224 <xPortStartScheduler+0x140>)
 80071e6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80071ea:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80071ec:	f7ff ff64 	bl	80070b8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80071f0:	f7fe fdb8 	bl	8005d64 <vTaskSwitchContext>
    prvTaskExitError();
 80071f4:	f7ff ff20 	bl	8007038 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80071f8:	2300      	movs	r3, #0
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3718      	adds	r7, #24
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}
 8007202:	bf00      	nop
 8007204:	e000ed00 	.word	0xe000ed00
 8007208:	410fc271 	.word	0x410fc271
 800720c:	410fc270 	.word	0x410fc270
 8007210:	e000e400 	.word	0xe000e400
 8007214:	20000368 	.word	0x20000368
 8007218:	2000036c 	.word	0x2000036c
 800721c:	e000ed20 	.word	0xe000ed20
 8007220:	20000024 	.word	0x20000024
 8007224:	e000ef34 	.word	0xe000ef34

08007228 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8007228:	b480      	push	{r7}
 800722a:	b087      	sub	sp, #28
 800722c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800722e:	4b37      	ldr	r3, [pc, #220]	; (800730c <vInitPrioGroupValue+0xe4>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a37      	ldr	r2, [pc, #220]	; (8007310 <vInitPrioGroupValue+0xe8>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d10a      	bne.n	800724e <vInitPrioGroupValue+0x26>
        __asm volatile
 8007238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800723c:	f383 8811 	msr	BASEPRI, r3
 8007240:	f3bf 8f6f 	isb	sy
 8007244:	f3bf 8f4f 	dsb	sy
 8007248:	613b      	str	r3, [r7, #16]
    }
 800724a:	bf00      	nop
 800724c:	e7fe      	b.n	800724c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800724e:	4b2f      	ldr	r3, [pc, #188]	; (800730c <vInitPrioGroupValue+0xe4>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a30      	ldr	r2, [pc, #192]	; (8007314 <vInitPrioGroupValue+0xec>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d10a      	bne.n	800726e <vInitPrioGroupValue+0x46>
        __asm volatile
 8007258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800725c:	f383 8811 	msr	BASEPRI, r3
 8007260:	f3bf 8f6f 	isb	sy
 8007264:	f3bf 8f4f 	dsb	sy
 8007268:	60fb      	str	r3, [r7, #12]
    }
 800726a:	bf00      	nop
 800726c:	e7fe      	b.n	800726c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800726e:	4b2a      	ldr	r3, [pc, #168]	; (8007318 <vInitPrioGroupValue+0xf0>)
 8007270:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	781b      	ldrb	r3, [r3, #0]
 8007276:	b2db      	uxtb	r3, r3
 8007278:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	22ff      	movs	r2, #255	; 0xff
 800727e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	b2db      	uxtb	r3, r3
 8007286:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007288:	78fb      	ldrb	r3, [r7, #3]
 800728a:	b2db      	uxtb	r3, r3
 800728c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007290:	b2da      	uxtb	r2, r3
 8007292:	4b22      	ldr	r3, [pc, #136]	; (800731c <vInitPrioGroupValue+0xf4>)
 8007294:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007296:	4b22      	ldr	r3, [pc, #136]	; (8007320 <vInitPrioGroupValue+0xf8>)
 8007298:	2207      	movs	r2, #7
 800729a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800729c:	e009      	b.n	80072b2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800729e:	4b20      	ldr	r3, [pc, #128]	; (8007320 <vInitPrioGroupValue+0xf8>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	3b01      	subs	r3, #1
 80072a4:	4a1e      	ldr	r2, [pc, #120]	; (8007320 <vInitPrioGroupValue+0xf8>)
 80072a6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80072a8:	78fb      	ldrb	r3, [r7, #3]
 80072aa:	b2db      	uxtb	r3, r3
 80072ac:	005b      	lsls	r3, r3, #1
 80072ae:	b2db      	uxtb	r3, r3
 80072b0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80072b2:	78fb      	ldrb	r3, [r7, #3]
 80072b4:	b2db      	uxtb	r3, r3
 80072b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072ba:	2b80      	cmp	r3, #128	; 0x80
 80072bc:	d0ef      	beq.n	800729e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80072be:	4b18      	ldr	r3, [pc, #96]	; (8007320 <vInitPrioGroupValue+0xf8>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f1c3 0307 	rsb	r3, r3, #7
 80072c6:	2b04      	cmp	r3, #4
 80072c8:	d00a      	beq.n	80072e0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 80072ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ce:	f383 8811 	msr	BASEPRI, r3
 80072d2:	f3bf 8f6f 	isb	sy
 80072d6:	f3bf 8f4f 	dsb	sy
 80072da:	60bb      	str	r3, [r7, #8]
    }
 80072dc:	bf00      	nop
 80072de:	e7fe      	b.n	80072de <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80072e0:	4b0f      	ldr	r3, [pc, #60]	; (8007320 <vInitPrioGroupValue+0xf8>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	021b      	lsls	r3, r3, #8
 80072e6:	4a0e      	ldr	r2, [pc, #56]	; (8007320 <vInitPrioGroupValue+0xf8>)
 80072e8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80072ea:	4b0d      	ldr	r3, [pc, #52]	; (8007320 <vInitPrioGroupValue+0xf8>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80072f2:	4a0b      	ldr	r2, [pc, #44]	; (8007320 <vInitPrioGroupValue+0xf8>)
 80072f4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	b2da      	uxtb	r2, r3
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80072fe:	bf00      	nop
 8007300:	371c      	adds	r7, #28
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr
 800730a:	bf00      	nop
 800730c:	e000ed00 	.word	0xe000ed00
 8007310:	410fc271 	.word	0x410fc271
 8007314:	410fc270 	.word	0x410fc270
 8007318:	e000e400 	.word	0xe000e400
 800731c:	20000368 	.word	0x20000368
 8007320:	2000036c 	.word	0x2000036c

08007324 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
        __asm volatile
 800732a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800732e:	f383 8811 	msr	BASEPRI, r3
 8007332:	f3bf 8f6f 	isb	sy
 8007336:	f3bf 8f4f 	dsb	sy
 800733a:	607b      	str	r3, [r7, #4]
    }
 800733c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800733e:	4b0f      	ldr	r3, [pc, #60]	; (800737c <vPortEnterCritical+0x58>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	3301      	adds	r3, #1
 8007344:	4a0d      	ldr	r2, [pc, #52]	; (800737c <vPortEnterCritical+0x58>)
 8007346:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8007348:	4b0c      	ldr	r3, [pc, #48]	; (800737c <vPortEnterCritical+0x58>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	2b01      	cmp	r3, #1
 800734e:	d10f      	bne.n	8007370 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007350:	4b0b      	ldr	r3, [pc, #44]	; (8007380 <vPortEnterCritical+0x5c>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	b2db      	uxtb	r3, r3
 8007356:	2b00      	cmp	r3, #0
 8007358:	d00a      	beq.n	8007370 <vPortEnterCritical+0x4c>
        __asm volatile
 800735a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800735e:	f383 8811 	msr	BASEPRI, r3
 8007362:	f3bf 8f6f 	isb	sy
 8007366:	f3bf 8f4f 	dsb	sy
 800736a:	603b      	str	r3, [r7, #0]
    }
 800736c:	bf00      	nop
 800736e:	e7fe      	b.n	800736e <vPortEnterCritical+0x4a>
    }
}
 8007370:	bf00      	nop
 8007372:	370c      	adds	r7, #12
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr
 800737c:	20000024 	.word	0x20000024
 8007380:	e000ed04 	.word	0xe000ed04

08007384 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007384:	b480      	push	{r7}
 8007386:	b083      	sub	sp, #12
 8007388:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800738a:	4b12      	ldr	r3, [pc, #72]	; (80073d4 <vPortExitCritical+0x50>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d10a      	bne.n	80073a8 <vPortExitCritical+0x24>
        __asm volatile
 8007392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007396:	f383 8811 	msr	BASEPRI, r3
 800739a:	f3bf 8f6f 	isb	sy
 800739e:	f3bf 8f4f 	dsb	sy
 80073a2:	607b      	str	r3, [r7, #4]
    }
 80073a4:	bf00      	nop
 80073a6:	e7fe      	b.n	80073a6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80073a8:	4b0a      	ldr	r3, [pc, #40]	; (80073d4 <vPortExitCritical+0x50>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	3b01      	subs	r3, #1
 80073ae:	4a09      	ldr	r2, [pc, #36]	; (80073d4 <vPortExitCritical+0x50>)
 80073b0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80073b2:	4b08      	ldr	r3, [pc, #32]	; (80073d4 <vPortExitCritical+0x50>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d105      	bne.n	80073c6 <vPortExitCritical+0x42>
 80073ba:	2300      	movs	r3, #0
 80073bc:	603b      	str	r3, [r7, #0]
        __asm volatile
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	f383 8811 	msr	BASEPRI, r3
    }
 80073c4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80073c6:	bf00      	nop
 80073c8:	370c      	adds	r7, #12
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr
 80073d2:	bf00      	nop
 80073d4:	20000024 	.word	0x20000024
	...

080073e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80073e0:	f3ef 8009 	mrs	r0, PSP
 80073e4:	f3bf 8f6f 	isb	sy
 80073e8:	4b15      	ldr	r3, [pc, #84]	; (8007440 <pxCurrentTCBConst>)
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	f01e 0f10 	tst.w	lr, #16
 80073f0:	bf08      	it	eq
 80073f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80073f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073fa:	6010      	str	r0, [r2, #0]
 80073fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007400:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007404:	f380 8811 	msr	BASEPRI, r0
 8007408:	f3bf 8f4f 	dsb	sy
 800740c:	f3bf 8f6f 	isb	sy
 8007410:	f7fe fca8 	bl	8005d64 <vTaskSwitchContext>
 8007414:	f04f 0000 	mov.w	r0, #0
 8007418:	f380 8811 	msr	BASEPRI, r0
 800741c:	bc09      	pop	{r0, r3}
 800741e:	6819      	ldr	r1, [r3, #0]
 8007420:	6808      	ldr	r0, [r1, #0]
 8007422:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007426:	f01e 0f10 	tst.w	lr, #16
 800742a:	bf08      	it	eq
 800742c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007430:	f380 8809 	msr	PSP, r0
 8007434:	f3bf 8f6f 	isb	sy
 8007438:	4770      	bx	lr
 800743a:	bf00      	nop
 800743c:	f3af 8000 	nop.w

08007440 <pxCurrentTCBConst>:
 8007440:	20000228 	.word	0x20000228
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8007444:	bf00      	nop
 8007446:	bf00      	nop

08007448 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b082      	sub	sp, #8
 800744c:	af00      	add	r7, sp, #0
        __asm volatile
 800744e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007452:	f383 8811 	msr	BASEPRI, r3
 8007456:	f3bf 8f6f 	isb	sy
 800745a:	f3bf 8f4f 	dsb	sy
 800745e:	607b      	str	r3, [r7, #4]
    }
 8007460:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8007462:	f7fe fbc7 	bl	8005bf4 <xTaskIncrementTick>
 8007466:	4603      	mov	r3, r0
 8007468:	2b00      	cmp	r3, #0
 800746a:	d003      	beq.n	8007474 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800746c:	4b06      	ldr	r3, [pc, #24]	; (8007488 <SysTick_Handler+0x40>)
 800746e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007472:	601a      	str	r2, [r3, #0]
 8007474:	2300      	movs	r3, #0
 8007476:	603b      	str	r3, [r7, #0]
        __asm volatile
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	f383 8811 	msr	BASEPRI, r3
    }
 800747e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8007480:	bf00      	nop
 8007482:	3708      	adds	r7, #8
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}
 8007488:	e000ed04 	.word	0xe000ed04

0800748c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800748c:	b480      	push	{r7}
 800748e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007490:	4b0b      	ldr	r3, [pc, #44]	; (80074c0 <vPortSetupTimerInterrupt+0x34>)
 8007492:	2200      	movs	r2, #0
 8007494:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007496:	4b0b      	ldr	r3, [pc, #44]	; (80074c4 <vPortSetupTimerInterrupt+0x38>)
 8007498:	2200      	movs	r2, #0
 800749a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800749c:	4b0a      	ldr	r3, [pc, #40]	; (80074c8 <vPortSetupTimerInterrupt+0x3c>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a0a      	ldr	r2, [pc, #40]	; (80074cc <vPortSetupTimerInterrupt+0x40>)
 80074a2:	fba2 2303 	umull	r2, r3, r2, r3
 80074a6:	099b      	lsrs	r3, r3, #6
 80074a8:	4a09      	ldr	r2, [pc, #36]	; (80074d0 <vPortSetupTimerInterrupt+0x44>)
 80074aa:	3b01      	subs	r3, #1
 80074ac:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80074ae:	4b04      	ldr	r3, [pc, #16]	; (80074c0 <vPortSetupTimerInterrupt+0x34>)
 80074b0:	2207      	movs	r2, #7
 80074b2:	601a      	str	r2, [r3, #0]
}
 80074b4:	bf00      	nop
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr
 80074be:	bf00      	nop
 80074c0:	e000e010 	.word	0xe000e010
 80074c4:	e000e018 	.word	0xe000e018
 80074c8:	20000010 	.word	0x20000010
 80074cc:	10624dd3 	.word	0x10624dd3
 80074d0:	e000e014 	.word	0xe000e014

080074d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80074d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80074e4 <vPortEnableVFP+0x10>
 80074d8:	6801      	ldr	r1, [r0, #0]
 80074da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80074de:	6001      	str	r1, [r0, #0]
 80074e0:	4770      	bx	lr
 80074e2:	0000      	.short	0x0000
 80074e4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80074e8:	bf00      	nop
 80074ea:	bf00      	nop

080074ec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80074ec:	b480      	push	{r7}
 80074ee:	b085      	sub	sp, #20
 80074f0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80074f2:	f3ef 8305 	mrs	r3, IPSR
 80074f6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2b0f      	cmp	r3, #15
 80074fc:	d914      	bls.n	8007528 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80074fe:	4a17      	ldr	r2, [pc, #92]	; (800755c <vPortValidateInterruptPriority+0x70>)
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	4413      	add	r3, r2
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007508:	4b15      	ldr	r3, [pc, #84]	; (8007560 <vPortValidateInterruptPriority+0x74>)
 800750a:	781b      	ldrb	r3, [r3, #0]
 800750c:	7afa      	ldrb	r2, [r7, #11]
 800750e:	429a      	cmp	r2, r3
 8007510:	d20a      	bcs.n	8007528 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8007512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007516:	f383 8811 	msr	BASEPRI, r3
 800751a:	f3bf 8f6f 	isb	sy
 800751e:	f3bf 8f4f 	dsb	sy
 8007522:	607b      	str	r3, [r7, #4]
    }
 8007524:	bf00      	nop
 8007526:	e7fe      	b.n	8007526 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007528:	4b0e      	ldr	r3, [pc, #56]	; (8007564 <vPortValidateInterruptPriority+0x78>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007530:	4b0d      	ldr	r3, [pc, #52]	; (8007568 <vPortValidateInterruptPriority+0x7c>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	429a      	cmp	r2, r3
 8007536:	d90a      	bls.n	800754e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8007538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800753c:	f383 8811 	msr	BASEPRI, r3
 8007540:	f3bf 8f6f 	isb	sy
 8007544:	f3bf 8f4f 	dsb	sy
 8007548:	603b      	str	r3, [r7, #0]
    }
 800754a:	bf00      	nop
 800754c:	e7fe      	b.n	800754c <vPortValidateInterruptPriority+0x60>
    }
 800754e:	bf00      	nop
 8007550:	3714      	adds	r7, #20
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr
 800755a:	bf00      	nop
 800755c:	e000e3f0 	.word	0xe000e3f0
 8007560:	20000368 	.word	0x20000368
 8007564:	e000ed0c 	.word	0xe000ed0c
 8007568:	2000036c 	.word	0x2000036c

0800756c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b08a      	sub	sp, #40	; 0x28
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8007574:	2300      	movs	r3, #0
 8007576:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8007578:	f7fe fa82 	bl	8005a80 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800757c:	4b65      	ldr	r3, [pc, #404]	; (8007714 <pvPortMalloc+0x1a8>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d101      	bne.n	8007588 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8007584:	f000 f934 	bl	80077f0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007588:	4b63      	ldr	r3, [pc, #396]	; (8007718 <pvPortMalloc+0x1ac>)
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	4013      	ands	r3, r2
 8007590:	2b00      	cmp	r3, #0
 8007592:	f040 80a7 	bne.w	80076e4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d02d      	beq.n	80075f8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800759c:	2208      	movs	r2, #8
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d227      	bcs.n	80075f8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80075a8:	2208      	movs	r2, #8
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	4413      	add	r3, r2
 80075ae:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f003 0307 	and.w	r3, r3, #7
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d021      	beq.n	80075fe <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f023 0307 	bic.w	r3, r3, #7
 80075c0:	3308      	adds	r3, #8
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d214      	bcs.n	80075f2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f023 0307 	bic.w	r3, r3, #7
 80075ce:	3308      	adds	r3, #8
 80075d0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f003 0307 	and.w	r3, r3, #7
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d010      	beq.n	80075fe <pvPortMalloc+0x92>
        __asm volatile
 80075dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e0:	f383 8811 	msr	BASEPRI, r3
 80075e4:	f3bf 8f6f 	isb	sy
 80075e8:	f3bf 8f4f 	dsb	sy
 80075ec:	617b      	str	r3, [r7, #20]
    }
 80075ee:	bf00      	nop
 80075f0:	e7fe      	b.n	80075f0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80075f2:	2300      	movs	r3, #0
 80075f4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80075f6:	e002      	b.n	80075fe <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80075f8:	2300      	movs	r3, #0
 80075fa:	607b      	str	r3, [r7, #4]
 80075fc:	e000      	b.n	8007600 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80075fe:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d06e      	beq.n	80076e4 <pvPortMalloc+0x178>
 8007606:	4b45      	ldr	r3, [pc, #276]	; (800771c <pvPortMalloc+0x1b0>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	429a      	cmp	r2, r3
 800760e:	d869      	bhi.n	80076e4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8007610:	4b43      	ldr	r3, [pc, #268]	; (8007720 <pvPortMalloc+0x1b4>)
 8007612:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8007614:	4b42      	ldr	r3, [pc, #264]	; (8007720 <pvPortMalloc+0x1b4>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800761a:	e004      	b.n	8007626 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800761c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800761e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8007620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	687a      	ldr	r2, [r7, #4]
 800762c:	429a      	cmp	r2, r3
 800762e:	d903      	bls.n	8007638 <pvPortMalloc+0xcc>
 8007630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d1f1      	bne.n	800761c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8007638:	4b36      	ldr	r3, [pc, #216]	; (8007714 <pvPortMalloc+0x1a8>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800763e:	429a      	cmp	r2, r3
 8007640:	d050      	beq.n	80076e4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007642:	6a3b      	ldr	r3, [r7, #32]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	2208      	movs	r2, #8
 8007648:	4413      	add	r3, r2
 800764a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800764c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764e:	681a      	ldr	r2, [r3, #0]
 8007650:	6a3b      	ldr	r3, [r7, #32]
 8007652:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007656:	685a      	ldr	r2, [r3, #4]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	1ad2      	subs	r2, r2, r3
 800765c:	2308      	movs	r3, #8
 800765e:	005b      	lsls	r3, r3, #1
 8007660:	429a      	cmp	r2, r3
 8007662:	d91f      	bls.n	80076a4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	4413      	add	r3, r2
 800766a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800766c:	69bb      	ldr	r3, [r7, #24]
 800766e:	f003 0307 	and.w	r3, r3, #7
 8007672:	2b00      	cmp	r3, #0
 8007674:	d00a      	beq.n	800768c <pvPortMalloc+0x120>
        __asm volatile
 8007676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800767a:	f383 8811 	msr	BASEPRI, r3
 800767e:	f3bf 8f6f 	isb	sy
 8007682:	f3bf 8f4f 	dsb	sy
 8007686:	613b      	str	r3, [r7, #16]
    }
 8007688:	bf00      	nop
 800768a:	e7fe      	b.n	800768a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800768c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800768e:	685a      	ldr	r2, [r3, #4]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	1ad2      	subs	r2, r2, r3
 8007694:	69bb      	ldr	r3, [r7, #24]
 8007696:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8007698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769a:	687a      	ldr	r2, [r7, #4]
 800769c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800769e:	69b8      	ldr	r0, [r7, #24]
 80076a0:	f000 f908 	bl	80078b4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80076a4:	4b1d      	ldr	r3, [pc, #116]	; (800771c <pvPortMalloc+0x1b0>)
 80076a6:	681a      	ldr	r2, [r3, #0]
 80076a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	1ad3      	subs	r3, r2, r3
 80076ae:	4a1b      	ldr	r2, [pc, #108]	; (800771c <pvPortMalloc+0x1b0>)
 80076b0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80076b2:	4b1a      	ldr	r3, [pc, #104]	; (800771c <pvPortMalloc+0x1b0>)
 80076b4:	681a      	ldr	r2, [r3, #0]
 80076b6:	4b1b      	ldr	r3, [pc, #108]	; (8007724 <pvPortMalloc+0x1b8>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d203      	bcs.n	80076c6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80076be:	4b17      	ldr	r3, [pc, #92]	; (800771c <pvPortMalloc+0x1b0>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a18      	ldr	r2, [pc, #96]	; (8007724 <pvPortMalloc+0x1b8>)
 80076c4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80076c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c8:	685a      	ldr	r2, [r3, #4]
 80076ca:	4b13      	ldr	r3, [pc, #76]	; (8007718 <pvPortMalloc+0x1ac>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	431a      	orrs	r2, r3
 80076d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80076d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d6:	2200      	movs	r2, #0
 80076d8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80076da:	4b13      	ldr	r3, [pc, #76]	; (8007728 <pvPortMalloc+0x1bc>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	3301      	adds	r3, #1
 80076e0:	4a11      	ldr	r2, [pc, #68]	; (8007728 <pvPortMalloc+0x1bc>)
 80076e2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80076e4:	f7fe f9da 	bl	8005a9c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80076e8:	69fb      	ldr	r3, [r7, #28]
 80076ea:	f003 0307 	and.w	r3, r3, #7
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d00a      	beq.n	8007708 <pvPortMalloc+0x19c>
        __asm volatile
 80076f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f6:	f383 8811 	msr	BASEPRI, r3
 80076fa:	f3bf 8f6f 	isb	sy
 80076fe:	f3bf 8f4f 	dsb	sy
 8007702:	60fb      	str	r3, [r7, #12]
    }
 8007704:	bf00      	nop
 8007706:	e7fe      	b.n	8007706 <pvPortMalloc+0x19a>
    return pvReturn;
 8007708:	69fb      	ldr	r3, [r7, #28]
}
 800770a:	4618      	mov	r0, r3
 800770c:	3728      	adds	r7, #40	; 0x28
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}
 8007712:	bf00      	nop
 8007714:	20012f78 	.word	0x20012f78
 8007718:	20012f8c 	.word	0x20012f8c
 800771c:	20012f7c 	.word	0x20012f7c
 8007720:	20012f70 	.word	0x20012f70
 8007724:	20012f80 	.word	0x20012f80
 8007728:	20012f84 	.word	0x20012f84

0800772c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b086      	sub	sp, #24
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d04d      	beq.n	80077da <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800773e:	2308      	movs	r3, #8
 8007740:	425b      	negs	r3, r3
 8007742:	697a      	ldr	r2, [r7, #20]
 8007744:	4413      	add	r3, r2
 8007746:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	685a      	ldr	r2, [r3, #4]
 8007750:	4b24      	ldr	r3, [pc, #144]	; (80077e4 <vPortFree+0xb8>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4013      	ands	r3, r2
 8007756:	2b00      	cmp	r3, #0
 8007758:	d10a      	bne.n	8007770 <vPortFree+0x44>
        __asm volatile
 800775a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800775e:	f383 8811 	msr	BASEPRI, r3
 8007762:	f3bf 8f6f 	isb	sy
 8007766:	f3bf 8f4f 	dsb	sy
 800776a:	60fb      	str	r3, [r7, #12]
    }
 800776c:	bf00      	nop
 800776e:	e7fe      	b.n	800776e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d00a      	beq.n	800778e <vPortFree+0x62>
        __asm volatile
 8007778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800777c:	f383 8811 	msr	BASEPRI, r3
 8007780:	f3bf 8f6f 	isb	sy
 8007784:	f3bf 8f4f 	dsb	sy
 8007788:	60bb      	str	r3, [r7, #8]
    }
 800778a:	bf00      	nop
 800778c:	e7fe      	b.n	800778c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	685a      	ldr	r2, [r3, #4]
 8007792:	4b14      	ldr	r3, [pc, #80]	; (80077e4 <vPortFree+0xb8>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4013      	ands	r3, r2
 8007798:	2b00      	cmp	r3, #0
 800779a:	d01e      	beq.n	80077da <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d11a      	bne.n	80077da <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	685a      	ldr	r2, [r3, #4]
 80077a8:	4b0e      	ldr	r3, [pc, #56]	; (80077e4 <vPortFree+0xb8>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	43db      	mvns	r3, r3
 80077ae:	401a      	ands	r2, r3
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80077b4:	f7fe f964 	bl	8005a80 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	685a      	ldr	r2, [r3, #4]
 80077bc:	4b0a      	ldr	r3, [pc, #40]	; (80077e8 <vPortFree+0xbc>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4413      	add	r3, r2
 80077c2:	4a09      	ldr	r2, [pc, #36]	; (80077e8 <vPortFree+0xbc>)
 80077c4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80077c6:	6938      	ldr	r0, [r7, #16]
 80077c8:	f000 f874 	bl	80078b4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80077cc:	4b07      	ldr	r3, [pc, #28]	; (80077ec <vPortFree+0xc0>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	3301      	adds	r3, #1
 80077d2:	4a06      	ldr	r2, [pc, #24]	; (80077ec <vPortFree+0xc0>)
 80077d4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80077d6:	f7fe f961 	bl	8005a9c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80077da:	bf00      	nop
 80077dc:	3718      	adds	r7, #24
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}
 80077e2:	bf00      	nop
 80077e4:	20012f8c 	.word	0x20012f8c
 80077e8:	20012f7c 	.word	0x20012f7c
 80077ec:	20012f88 	.word	0x20012f88

080077f0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80077f0:	b480      	push	{r7}
 80077f2:	b085      	sub	sp, #20
 80077f4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80077f6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80077fa:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80077fc:	4b27      	ldr	r3, [pc, #156]	; (800789c <prvHeapInit+0xac>)
 80077fe:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f003 0307 	and.w	r3, r3, #7
 8007806:	2b00      	cmp	r3, #0
 8007808:	d00c      	beq.n	8007824 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	3307      	adds	r3, #7
 800780e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f023 0307 	bic.w	r3, r3, #7
 8007816:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007818:	68ba      	ldr	r2, [r7, #8]
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	1ad3      	subs	r3, r2, r3
 800781e:	4a1f      	ldr	r2, [pc, #124]	; (800789c <prvHeapInit+0xac>)
 8007820:	4413      	add	r3, r2
 8007822:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007828:	4a1d      	ldr	r2, [pc, #116]	; (80078a0 <prvHeapInit+0xb0>)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800782e:	4b1c      	ldr	r3, [pc, #112]	; (80078a0 <prvHeapInit+0xb0>)
 8007830:	2200      	movs	r2, #0
 8007832:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	68ba      	ldr	r2, [r7, #8]
 8007838:	4413      	add	r3, r2
 800783a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800783c:	2208      	movs	r2, #8
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	1a9b      	subs	r3, r3, r2
 8007842:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f023 0307 	bic.w	r3, r3, #7
 800784a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	4a15      	ldr	r2, [pc, #84]	; (80078a4 <prvHeapInit+0xb4>)
 8007850:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8007852:	4b14      	ldr	r3, [pc, #80]	; (80078a4 <prvHeapInit+0xb4>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	2200      	movs	r2, #0
 8007858:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800785a:	4b12      	ldr	r3, [pc, #72]	; (80078a4 <prvHeapInit+0xb4>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	2200      	movs	r2, #0
 8007860:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	68fa      	ldr	r2, [r7, #12]
 800786a:	1ad2      	subs	r2, r2, r3
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007870:	4b0c      	ldr	r3, [pc, #48]	; (80078a4 <prvHeapInit+0xb4>)
 8007872:	681a      	ldr	r2, [r3, #0]
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	4a0a      	ldr	r2, [pc, #40]	; (80078a8 <prvHeapInit+0xb8>)
 800787e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	4a09      	ldr	r2, [pc, #36]	; (80078ac <prvHeapInit+0xbc>)
 8007886:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007888:	4b09      	ldr	r3, [pc, #36]	; (80078b0 <prvHeapInit+0xc0>)
 800788a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800788e:	601a      	str	r2, [r3, #0]
}
 8007890:	bf00      	nop
 8007892:	3714      	adds	r7, #20
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr
 800789c:	20000370 	.word	0x20000370
 80078a0:	20012f70 	.word	0x20012f70
 80078a4:	20012f78 	.word	0x20012f78
 80078a8:	20012f80 	.word	0x20012f80
 80078ac:	20012f7c 	.word	0x20012f7c
 80078b0:	20012f8c 	.word	0x20012f8c

080078b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80078b4:	b480      	push	{r7}
 80078b6:	b085      	sub	sp, #20
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80078bc:	4b28      	ldr	r3, [pc, #160]	; (8007960 <prvInsertBlockIntoFreeList+0xac>)
 80078be:	60fb      	str	r3, [r7, #12]
 80078c0:	e002      	b.n	80078c8 <prvInsertBlockIntoFreeList+0x14>
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	60fb      	str	r3, [r7, #12]
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	687a      	ldr	r2, [r7, #4]
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d8f7      	bhi.n	80078c2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	68ba      	ldr	r2, [r7, #8]
 80078dc:	4413      	add	r3, r2
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	429a      	cmp	r2, r3
 80078e2:	d108      	bne.n	80078f6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	685a      	ldr	r2, [r3, #4]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	441a      	add	r2, r3
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	68ba      	ldr	r2, [r7, #8]
 8007900:	441a      	add	r2, r3
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	429a      	cmp	r2, r3
 8007908:	d118      	bne.n	800793c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681a      	ldr	r2, [r3, #0]
 800790e:	4b15      	ldr	r3, [pc, #84]	; (8007964 <prvInsertBlockIntoFreeList+0xb0>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	429a      	cmp	r2, r3
 8007914:	d00d      	beq.n	8007932 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	685a      	ldr	r2, [r3, #4]
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	441a      	add	r2, r3
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	681a      	ldr	r2, [r3, #0]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	601a      	str	r2, [r3, #0]
 8007930:	e008      	b.n	8007944 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007932:	4b0c      	ldr	r3, [pc, #48]	; (8007964 <prvInsertBlockIntoFreeList+0xb0>)
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	601a      	str	r2, [r3, #0]
 800793a:	e003      	b.n	8007944 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8007944:	68fa      	ldr	r2, [r7, #12]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	429a      	cmp	r2, r3
 800794a:	d002      	beq.n	8007952 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	687a      	ldr	r2, [r7, #4]
 8007950:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007952:	bf00      	nop
 8007954:	3714      	adds	r7, #20
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr
 800795e:	bf00      	nop
 8007960:	20012f70 	.word	0x20012f70
 8007964:	20012f78 	.word	0x20012f78

08007968 <__errno>:
 8007968:	4b01      	ldr	r3, [pc, #4]	; (8007970 <__errno+0x8>)
 800796a:	6818      	ldr	r0, [r3, #0]
 800796c:	4770      	bx	lr
 800796e:	bf00      	nop
 8007970:	20000028 	.word	0x20000028

08007974 <__libc_init_array>:
 8007974:	b570      	push	{r4, r5, r6, lr}
 8007976:	4d0d      	ldr	r5, [pc, #52]	; (80079ac <__libc_init_array+0x38>)
 8007978:	4c0d      	ldr	r4, [pc, #52]	; (80079b0 <__libc_init_array+0x3c>)
 800797a:	1b64      	subs	r4, r4, r5
 800797c:	10a4      	asrs	r4, r4, #2
 800797e:	2600      	movs	r6, #0
 8007980:	42a6      	cmp	r6, r4
 8007982:	d109      	bne.n	8007998 <__libc_init_array+0x24>
 8007984:	4d0b      	ldr	r5, [pc, #44]	; (80079b4 <__libc_init_array+0x40>)
 8007986:	4c0c      	ldr	r4, [pc, #48]	; (80079b8 <__libc_init_array+0x44>)
 8007988:	f000 fc8e 	bl	80082a8 <_init>
 800798c:	1b64      	subs	r4, r4, r5
 800798e:	10a4      	asrs	r4, r4, #2
 8007990:	2600      	movs	r6, #0
 8007992:	42a6      	cmp	r6, r4
 8007994:	d105      	bne.n	80079a2 <__libc_init_array+0x2e>
 8007996:	bd70      	pop	{r4, r5, r6, pc}
 8007998:	f855 3b04 	ldr.w	r3, [r5], #4
 800799c:	4798      	blx	r3
 800799e:	3601      	adds	r6, #1
 80079a0:	e7ee      	b.n	8007980 <__libc_init_array+0xc>
 80079a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80079a6:	4798      	blx	r3
 80079a8:	3601      	adds	r6, #1
 80079aa:	e7f2      	b.n	8007992 <__libc_init_array+0x1e>
 80079ac:	080086c8 	.word	0x080086c8
 80079b0:	080086c8 	.word	0x080086c8
 80079b4:	080086c8 	.word	0x080086c8
 80079b8:	080086cc 	.word	0x080086cc

080079bc <memcpy>:
 80079bc:	440a      	add	r2, r1
 80079be:	4291      	cmp	r1, r2
 80079c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80079c4:	d100      	bne.n	80079c8 <memcpy+0xc>
 80079c6:	4770      	bx	lr
 80079c8:	b510      	push	{r4, lr}
 80079ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80079d2:	4291      	cmp	r1, r2
 80079d4:	d1f9      	bne.n	80079ca <memcpy+0xe>
 80079d6:	bd10      	pop	{r4, pc}

080079d8 <memset>:
 80079d8:	4402      	add	r2, r0
 80079da:	4603      	mov	r3, r0
 80079dc:	4293      	cmp	r3, r2
 80079de:	d100      	bne.n	80079e2 <memset+0xa>
 80079e0:	4770      	bx	lr
 80079e2:	f803 1b01 	strb.w	r1, [r3], #1
 80079e6:	e7f9      	b.n	80079dc <memset+0x4>

080079e8 <siprintf>:
 80079e8:	b40e      	push	{r1, r2, r3}
 80079ea:	b500      	push	{lr}
 80079ec:	b09c      	sub	sp, #112	; 0x70
 80079ee:	ab1d      	add	r3, sp, #116	; 0x74
 80079f0:	9002      	str	r0, [sp, #8]
 80079f2:	9006      	str	r0, [sp, #24]
 80079f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80079f8:	4809      	ldr	r0, [pc, #36]	; (8007a20 <siprintf+0x38>)
 80079fa:	9107      	str	r1, [sp, #28]
 80079fc:	9104      	str	r1, [sp, #16]
 80079fe:	4909      	ldr	r1, [pc, #36]	; (8007a24 <siprintf+0x3c>)
 8007a00:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a04:	9105      	str	r1, [sp, #20]
 8007a06:	6800      	ldr	r0, [r0, #0]
 8007a08:	9301      	str	r3, [sp, #4]
 8007a0a:	a902      	add	r1, sp, #8
 8007a0c:	f000 f868 	bl	8007ae0 <_svfiprintf_r>
 8007a10:	9b02      	ldr	r3, [sp, #8]
 8007a12:	2200      	movs	r2, #0
 8007a14:	701a      	strb	r2, [r3, #0]
 8007a16:	b01c      	add	sp, #112	; 0x70
 8007a18:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a1c:	b003      	add	sp, #12
 8007a1e:	4770      	bx	lr
 8007a20:	20000028 	.word	0x20000028
 8007a24:	ffff0208 	.word	0xffff0208

08007a28 <__ssputs_r>:
 8007a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a2c:	688e      	ldr	r6, [r1, #8]
 8007a2e:	429e      	cmp	r6, r3
 8007a30:	4682      	mov	sl, r0
 8007a32:	460c      	mov	r4, r1
 8007a34:	4690      	mov	r8, r2
 8007a36:	461f      	mov	r7, r3
 8007a38:	d838      	bhi.n	8007aac <__ssputs_r+0x84>
 8007a3a:	898a      	ldrh	r2, [r1, #12]
 8007a3c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007a40:	d032      	beq.n	8007aa8 <__ssputs_r+0x80>
 8007a42:	6825      	ldr	r5, [r4, #0]
 8007a44:	6909      	ldr	r1, [r1, #16]
 8007a46:	eba5 0901 	sub.w	r9, r5, r1
 8007a4a:	6965      	ldr	r5, [r4, #20]
 8007a4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a50:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007a54:	3301      	adds	r3, #1
 8007a56:	444b      	add	r3, r9
 8007a58:	106d      	asrs	r5, r5, #1
 8007a5a:	429d      	cmp	r5, r3
 8007a5c:	bf38      	it	cc
 8007a5e:	461d      	movcc	r5, r3
 8007a60:	0553      	lsls	r3, r2, #21
 8007a62:	d531      	bpl.n	8007ac8 <__ssputs_r+0xa0>
 8007a64:	4629      	mov	r1, r5
 8007a66:	f000 fb55 	bl	8008114 <_malloc_r>
 8007a6a:	4606      	mov	r6, r0
 8007a6c:	b950      	cbnz	r0, 8007a84 <__ssputs_r+0x5c>
 8007a6e:	230c      	movs	r3, #12
 8007a70:	f8ca 3000 	str.w	r3, [sl]
 8007a74:	89a3      	ldrh	r3, [r4, #12]
 8007a76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a7a:	81a3      	strh	r3, [r4, #12]
 8007a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a84:	6921      	ldr	r1, [r4, #16]
 8007a86:	464a      	mov	r2, r9
 8007a88:	f7ff ff98 	bl	80079bc <memcpy>
 8007a8c:	89a3      	ldrh	r3, [r4, #12]
 8007a8e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007a92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a96:	81a3      	strh	r3, [r4, #12]
 8007a98:	6126      	str	r6, [r4, #16]
 8007a9a:	6165      	str	r5, [r4, #20]
 8007a9c:	444e      	add	r6, r9
 8007a9e:	eba5 0509 	sub.w	r5, r5, r9
 8007aa2:	6026      	str	r6, [r4, #0]
 8007aa4:	60a5      	str	r5, [r4, #8]
 8007aa6:	463e      	mov	r6, r7
 8007aa8:	42be      	cmp	r6, r7
 8007aaa:	d900      	bls.n	8007aae <__ssputs_r+0x86>
 8007aac:	463e      	mov	r6, r7
 8007aae:	6820      	ldr	r0, [r4, #0]
 8007ab0:	4632      	mov	r2, r6
 8007ab2:	4641      	mov	r1, r8
 8007ab4:	f000 faa8 	bl	8008008 <memmove>
 8007ab8:	68a3      	ldr	r3, [r4, #8]
 8007aba:	1b9b      	subs	r3, r3, r6
 8007abc:	60a3      	str	r3, [r4, #8]
 8007abe:	6823      	ldr	r3, [r4, #0]
 8007ac0:	4433      	add	r3, r6
 8007ac2:	6023      	str	r3, [r4, #0]
 8007ac4:	2000      	movs	r0, #0
 8007ac6:	e7db      	b.n	8007a80 <__ssputs_r+0x58>
 8007ac8:	462a      	mov	r2, r5
 8007aca:	f000 fb97 	bl	80081fc <_realloc_r>
 8007ace:	4606      	mov	r6, r0
 8007ad0:	2800      	cmp	r0, #0
 8007ad2:	d1e1      	bne.n	8007a98 <__ssputs_r+0x70>
 8007ad4:	6921      	ldr	r1, [r4, #16]
 8007ad6:	4650      	mov	r0, sl
 8007ad8:	f000 fab0 	bl	800803c <_free_r>
 8007adc:	e7c7      	b.n	8007a6e <__ssputs_r+0x46>
	...

08007ae0 <_svfiprintf_r>:
 8007ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ae4:	4698      	mov	r8, r3
 8007ae6:	898b      	ldrh	r3, [r1, #12]
 8007ae8:	061b      	lsls	r3, r3, #24
 8007aea:	b09d      	sub	sp, #116	; 0x74
 8007aec:	4607      	mov	r7, r0
 8007aee:	460d      	mov	r5, r1
 8007af0:	4614      	mov	r4, r2
 8007af2:	d50e      	bpl.n	8007b12 <_svfiprintf_r+0x32>
 8007af4:	690b      	ldr	r3, [r1, #16]
 8007af6:	b963      	cbnz	r3, 8007b12 <_svfiprintf_r+0x32>
 8007af8:	2140      	movs	r1, #64	; 0x40
 8007afa:	f000 fb0b 	bl	8008114 <_malloc_r>
 8007afe:	6028      	str	r0, [r5, #0]
 8007b00:	6128      	str	r0, [r5, #16]
 8007b02:	b920      	cbnz	r0, 8007b0e <_svfiprintf_r+0x2e>
 8007b04:	230c      	movs	r3, #12
 8007b06:	603b      	str	r3, [r7, #0]
 8007b08:	f04f 30ff 	mov.w	r0, #4294967295
 8007b0c:	e0d1      	b.n	8007cb2 <_svfiprintf_r+0x1d2>
 8007b0e:	2340      	movs	r3, #64	; 0x40
 8007b10:	616b      	str	r3, [r5, #20]
 8007b12:	2300      	movs	r3, #0
 8007b14:	9309      	str	r3, [sp, #36]	; 0x24
 8007b16:	2320      	movs	r3, #32
 8007b18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b20:	2330      	movs	r3, #48	; 0x30
 8007b22:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007ccc <_svfiprintf_r+0x1ec>
 8007b26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b2a:	f04f 0901 	mov.w	r9, #1
 8007b2e:	4623      	mov	r3, r4
 8007b30:	469a      	mov	sl, r3
 8007b32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b36:	b10a      	cbz	r2, 8007b3c <_svfiprintf_r+0x5c>
 8007b38:	2a25      	cmp	r2, #37	; 0x25
 8007b3a:	d1f9      	bne.n	8007b30 <_svfiprintf_r+0x50>
 8007b3c:	ebba 0b04 	subs.w	fp, sl, r4
 8007b40:	d00b      	beq.n	8007b5a <_svfiprintf_r+0x7a>
 8007b42:	465b      	mov	r3, fp
 8007b44:	4622      	mov	r2, r4
 8007b46:	4629      	mov	r1, r5
 8007b48:	4638      	mov	r0, r7
 8007b4a:	f7ff ff6d 	bl	8007a28 <__ssputs_r>
 8007b4e:	3001      	adds	r0, #1
 8007b50:	f000 80aa 	beq.w	8007ca8 <_svfiprintf_r+0x1c8>
 8007b54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b56:	445a      	add	r2, fp
 8007b58:	9209      	str	r2, [sp, #36]	; 0x24
 8007b5a:	f89a 3000 	ldrb.w	r3, [sl]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	f000 80a2 	beq.w	8007ca8 <_svfiprintf_r+0x1c8>
 8007b64:	2300      	movs	r3, #0
 8007b66:	f04f 32ff 	mov.w	r2, #4294967295
 8007b6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b6e:	f10a 0a01 	add.w	sl, sl, #1
 8007b72:	9304      	str	r3, [sp, #16]
 8007b74:	9307      	str	r3, [sp, #28]
 8007b76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b7a:	931a      	str	r3, [sp, #104]	; 0x68
 8007b7c:	4654      	mov	r4, sl
 8007b7e:	2205      	movs	r2, #5
 8007b80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b84:	4851      	ldr	r0, [pc, #324]	; (8007ccc <_svfiprintf_r+0x1ec>)
 8007b86:	f7f8 fb3b 	bl	8000200 <memchr>
 8007b8a:	9a04      	ldr	r2, [sp, #16]
 8007b8c:	b9d8      	cbnz	r0, 8007bc6 <_svfiprintf_r+0xe6>
 8007b8e:	06d0      	lsls	r0, r2, #27
 8007b90:	bf44      	itt	mi
 8007b92:	2320      	movmi	r3, #32
 8007b94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b98:	0711      	lsls	r1, r2, #28
 8007b9a:	bf44      	itt	mi
 8007b9c:	232b      	movmi	r3, #43	; 0x2b
 8007b9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ba2:	f89a 3000 	ldrb.w	r3, [sl]
 8007ba6:	2b2a      	cmp	r3, #42	; 0x2a
 8007ba8:	d015      	beq.n	8007bd6 <_svfiprintf_r+0xf6>
 8007baa:	9a07      	ldr	r2, [sp, #28]
 8007bac:	4654      	mov	r4, sl
 8007bae:	2000      	movs	r0, #0
 8007bb0:	f04f 0c0a 	mov.w	ip, #10
 8007bb4:	4621      	mov	r1, r4
 8007bb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007bba:	3b30      	subs	r3, #48	; 0x30
 8007bbc:	2b09      	cmp	r3, #9
 8007bbe:	d94e      	bls.n	8007c5e <_svfiprintf_r+0x17e>
 8007bc0:	b1b0      	cbz	r0, 8007bf0 <_svfiprintf_r+0x110>
 8007bc2:	9207      	str	r2, [sp, #28]
 8007bc4:	e014      	b.n	8007bf0 <_svfiprintf_r+0x110>
 8007bc6:	eba0 0308 	sub.w	r3, r0, r8
 8007bca:	fa09 f303 	lsl.w	r3, r9, r3
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	9304      	str	r3, [sp, #16]
 8007bd2:	46a2      	mov	sl, r4
 8007bd4:	e7d2      	b.n	8007b7c <_svfiprintf_r+0x9c>
 8007bd6:	9b03      	ldr	r3, [sp, #12]
 8007bd8:	1d19      	adds	r1, r3, #4
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	9103      	str	r1, [sp, #12]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	bfbb      	ittet	lt
 8007be2:	425b      	neglt	r3, r3
 8007be4:	f042 0202 	orrlt.w	r2, r2, #2
 8007be8:	9307      	strge	r3, [sp, #28]
 8007bea:	9307      	strlt	r3, [sp, #28]
 8007bec:	bfb8      	it	lt
 8007bee:	9204      	strlt	r2, [sp, #16]
 8007bf0:	7823      	ldrb	r3, [r4, #0]
 8007bf2:	2b2e      	cmp	r3, #46	; 0x2e
 8007bf4:	d10c      	bne.n	8007c10 <_svfiprintf_r+0x130>
 8007bf6:	7863      	ldrb	r3, [r4, #1]
 8007bf8:	2b2a      	cmp	r3, #42	; 0x2a
 8007bfa:	d135      	bne.n	8007c68 <_svfiprintf_r+0x188>
 8007bfc:	9b03      	ldr	r3, [sp, #12]
 8007bfe:	1d1a      	adds	r2, r3, #4
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	9203      	str	r2, [sp, #12]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	bfb8      	it	lt
 8007c08:	f04f 33ff 	movlt.w	r3, #4294967295
 8007c0c:	3402      	adds	r4, #2
 8007c0e:	9305      	str	r3, [sp, #20]
 8007c10:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007cdc <_svfiprintf_r+0x1fc>
 8007c14:	7821      	ldrb	r1, [r4, #0]
 8007c16:	2203      	movs	r2, #3
 8007c18:	4650      	mov	r0, sl
 8007c1a:	f7f8 faf1 	bl	8000200 <memchr>
 8007c1e:	b140      	cbz	r0, 8007c32 <_svfiprintf_r+0x152>
 8007c20:	2340      	movs	r3, #64	; 0x40
 8007c22:	eba0 000a 	sub.w	r0, r0, sl
 8007c26:	fa03 f000 	lsl.w	r0, r3, r0
 8007c2a:	9b04      	ldr	r3, [sp, #16]
 8007c2c:	4303      	orrs	r3, r0
 8007c2e:	3401      	adds	r4, #1
 8007c30:	9304      	str	r3, [sp, #16]
 8007c32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c36:	4826      	ldr	r0, [pc, #152]	; (8007cd0 <_svfiprintf_r+0x1f0>)
 8007c38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c3c:	2206      	movs	r2, #6
 8007c3e:	f7f8 fadf 	bl	8000200 <memchr>
 8007c42:	2800      	cmp	r0, #0
 8007c44:	d038      	beq.n	8007cb8 <_svfiprintf_r+0x1d8>
 8007c46:	4b23      	ldr	r3, [pc, #140]	; (8007cd4 <_svfiprintf_r+0x1f4>)
 8007c48:	bb1b      	cbnz	r3, 8007c92 <_svfiprintf_r+0x1b2>
 8007c4a:	9b03      	ldr	r3, [sp, #12]
 8007c4c:	3307      	adds	r3, #7
 8007c4e:	f023 0307 	bic.w	r3, r3, #7
 8007c52:	3308      	adds	r3, #8
 8007c54:	9303      	str	r3, [sp, #12]
 8007c56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c58:	4433      	add	r3, r6
 8007c5a:	9309      	str	r3, [sp, #36]	; 0x24
 8007c5c:	e767      	b.n	8007b2e <_svfiprintf_r+0x4e>
 8007c5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c62:	460c      	mov	r4, r1
 8007c64:	2001      	movs	r0, #1
 8007c66:	e7a5      	b.n	8007bb4 <_svfiprintf_r+0xd4>
 8007c68:	2300      	movs	r3, #0
 8007c6a:	3401      	adds	r4, #1
 8007c6c:	9305      	str	r3, [sp, #20]
 8007c6e:	4619      	mov	r1, r3
 8007c70:	f04f 0c0a 	mov.w	ip, #10
 8007c74:	4620      	mov	r0, r4
 8007c76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c7a:	3a30      	subs	r2, #48	; 0x30
 8007c7c:	2a09      	cmp	r2, #9
 8007c7e:	d903      	bls.n	8007c88 <_svfiprintf_r+0x1a8>
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d0c5      	beq.n	8007c10 <_svfiprintf_r+0x130>
 8007c84:	9105      	str	r1, [sp, #20]
 8007c86:	e7c3      	b.n	8007c10 <_svfiprintf_r+0x130>
 8007c88:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c8c:	4604      	mov	r4, r0
 8007c8e:	2301      	movs	r3, #1
 8007c90:	e7f0      	b.n	8007c74 <_svfiprintf_r+0x194>
 8007c92:	ab03      	add	r3, sp, #12
 8007c94:	9300      	str	r3, [sp, #0]
 8007c96:	462a      	mov	r2, r5
 8007c98:	4b0f      	ldr	r3, [pc, #60]	; (8007cd8 <_svfiprintf_r+0x1f8>)
 8007c9a:	a904      	add	r1, sp, #16
 8007c9c:	4638      	mov	r0, r7
 8007c9e:	f3af 8000 	nop.w
 8007ca2:	1c42      	adds	r2, r0, #1
 8007ca4:	4606      	mov	r6, r0
 8007ca6:	d1d6      	bne.n	8007c56 <_svfiprintf_r+0x176>
 8007ca8:	89ab      	ldrh	r3, [r5, #12]
 8007caa:	065b      	lsls	r3, r3, #25
 8007cac:	f53f af2c 	bmi.w	8007b08 <_svfiprintf_r+0x28>
 8007cb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007cb2:	b01d      	add	sp, #116	; 0x74
 8007cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cb8:	ab03      	add	r3, sp, #12
 8007cba:	9300      	str	r3, [sp, #0]
 8007cbc:	462a      	mov	r2, r5
 8007cbe:	4b06      	ldr	r3, [pc, #24]	; (8007cd8 <_svfiprintf_r+0x1f8>)
 8007cc0:	a904      	add	r1, sp, #16
 8007cc2:	4638      	mov	r0, r7
 8007cc4:	f000 f87a 	bl	8007dbc <_printf_i>
 8007cc8:	e7eb      	b.n	8007ca2 <_svfiprintf_r+0x1c2>
 8007cca:	bf00      	nop
 8007ccc:	0800868c 	.word	0x0800868c
 8007cd0:	08008696 	.word	0x08008696
 8007cd4:	00000000 	.word	0x00000000
 8007cd8:	08007a29 	.word	0x08007a29
 8007cdc:	08008692 	.word	0x08008692

08007ce0 <_printf_common>:
 8007ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ce4:	4616      	mov	r6, r2
 8007ce6:	4699      	mov	r9, r3
 8007ce8:	688a      	ldr	r2, [r1, #8]
 8007cea:	690b      	ldr	r3, [r1, #16]
 8007cec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	bfb8      	it	lt
 8007cf4:	4613      	movlt	r3, r2
 8007cf6:	6033      	str	r3, [r6, #0]
 8007cf8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007cfc:	4607      	mov	r7, r0
 8007cfe:	460c      	mov	r4, r1
 8007d00:	b10a      	cbz	r2, 8007d06 <_printf_common+0x26>
 8007d02:	3301      	adds	r3, #1
 8007d04:	6033      	str	r3, [r6, #0]
 8007d06:	6823      	ldr	r3, [r4, #0]
 8007d08:	0699      	lsls	r1, r3, #26
 8007d0a:	bf42      	ittt	mi
 8007d0c:	6833      	ldrmi	r3, [r6, #0]
 8007d0e:	3302      	addmi	r3, #2
 8007d10:	6033      	strmi	r3, [r6, #0]
 8007d12:	6825      	ldr	r5, [r4, #0]
 8007d14:	f015 0506 	ands.w	r5, r5, #6
 8007d18:	d106      	bne.n	8007d28 <_printf_common+0x48>
 8007d1a:	f104 0a19 	add.w	sl, r4, #25
 8007d1e:	68e3      	ldr	r3, [r4, #12]
 8007d20:	6832      	ldr	r2, [r6, #0]
 8007d22:	1a9b      	subs	r3, r3, r2
 8007d24:	42ab      	cmp	r3, r5
 8007d26:	dc26      	bgt.n	8007d76 <_printf_common+0x96>
 8007d28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007d2c:	1e13      	subs	r3, r2, #0
 8007d2e:	6822      	ldr	r2, [r4, #0]
 8007d30:	bf18      	it	ne
 8007d32:	2301      	movne	r3, #1
 8007d34:	0692      	lsls	r2, r2, #26
 8007d36:	d42b      	bmi.n	8007d90 <_printf_common+0xb0>
 8007d38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d3c:	4649      	mov	r1, r9
 8007d3e:	4638      	mov	r0, r7
 8007d40:	47c0      	blx	r8
 8007d42:	3001      	adds	r0, #1
 8007d44:	d01e      	beq.n	8007d84 <_printf_common+0xa4>
 8007d46:	6823      	ldr	r3, [r4, #0]
 8007d48:	68e5      	ldr	r5, [r4, #12]
 8007d4a:	6832      	ldr	r2, [r6, #0]
 8007d4c:	f003 0306 	and.w	r3, r3, #6
 8007d50:	2b04      	cmp	r3, #4
 8007d52:	bf08      	it	eq
 8007d54:	1aad      	subeq	r5, r5, r2
 8007d56:	68a3      	ldr	r3, [r4, #8]
 8007d58:	6922      	ldr	r2, [r4, #16]
 8007d5a:	bf0c      	ite	eq
 8007d5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d60:	2500      	movne	r5, #0
 8007d62:	4293      	cmp	r3, r2
 8007d64:	bfc4      	itt	gt
 8007d66:	1a9b      	subgt	r3, r3, r2
 8007d68:	18ed      	addgt	r5, r5, r3
 8007d6a:	2600      	movs	r6, #0
 8007d6c:	341a      	adds	r4, #26
 8007d6e:	42b5      	cmp	r5, r6
 8007d70:	d11a      	bne.n	8007da8 <_printf_common+0xc8>
 8007d72:	2000      	movs	r0, #0
 8007d74:	e008      	b.n	8007d88 <_printf_common+0xa8>
 8007d76:	2301      	movs	r3, #1
 8007d78:	4652      	mov	r2, sl
 8007d7a:	4649      	mov	r1, r9
 8007d7c:	4638      	mov	r0, r7
 8007d7e:	47c0      	blx	r8
 8007d80:	3001      	adds	r0, #1
 8007d82:	d103      	bne.n	8007d8c <_printf_common+0xac>
 8007d84:	f04f 30ff 	mov.w	r0, #4294967295
 8007d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d8c:	3501      	adds	r5, #1
 8007d8e:	e7c6      	b.n	8007d1e <_printf_common+0x3e>
 8007d90:	18e1      	adds	r1, r4, r3
 8007d92:	1c5a      	adds	r2, r3, #1
 8007d94:	2030      	movs	r0, #48	; 0x30
 8007d96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d9a:	4422      	add	r2, r4
 8007d9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007da0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007da4:	3302      	adds	r3, #2
 8007da6:	e7c7      	b.n	8007d38 <_printf_common+0x58>
 8007da8:	2301      	movs	r3, #1
 8007daa:	4622      	mov	r2, r4
 8007dac:	4649      	mov	r1, r9
 8007dae:	4638      	mov	r0, r7
 8007db0:	47c0      	blx	r8
 8007db2:	3001      	adds	r0, #1
 8007db4:	d0e6      	beq.n	8007d84 <_printf_common+0xa4>
 8007db6:	3601      	adds	r6, #1
 8007db8:	e7d9      	b.n	8007d6e <_printf_common+0x8e>
	...

08007dbc <_printf_i>:
 8007dbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007dc0:	7e0f      	ldrb	r7, [r1, #24]
 8007dc2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007dc4:	2f78      	cmp	r7, #120	; 0x78
 8007dc6:	4691      	mov	r9, r2
 8007dc8:	4680      	mov	r8, r0
 8007dca:	460c      	mov	r4, r1
 8007dcc:	469a      	mov	sl, r3
 8007dce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007dd2:	d807      	bhi.n	8007de4 <_printf_i+0x28>
 8007dd4:	2f62      	cmp	r7, #98	; 0x62
 8007dd6:	d80a      	bhi.n	8007dee <_printf_i+0x32>
 8007dd8:	2f00      	cmp	r7, #0
 8007dda:	f000 80d8 	beq.w	8007f8e <_printf_i+0x1d2>
 8007dde:	2f58      	cmp	r7, #88	; 0x58
 8007de0:	f000 80a3 	beq.w	8007f2a <_printf_i+0x16e>
 8007de4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007de8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007dec:	e03a      	b.n	8007e64 <_printf_i+0xa8>
 8007dee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007df2:	2b15      	cmp	r3, #21
 8007df4:	d8f6      	bhi.n	8007de4 <_printf_i+0x28>
 8007df6:	a101      	add	r1, pc, #4	; (adr r1, 8007dfc <_printf_i+0x40>)
 8007df8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007dfc:	08007e55 	.word	0x08007e55
 8007e00:	08007e69 	.word	0x08007e69
 8007e04:	08007de5 	.word	0x08007de5
 8007e08:	08007de5 	.word	0x08007de5
 8007e0c:	08007de5 	.word	0x08007de5
 8007e10:	08007de5 	.word	0x08007de5
 8007e14:	08007e69 	.word	0x08007e69
 8007e18:	08007de5 	.word	0x08007de5
 8007e1c:	08007de5 	.word	0x08007de5
 8007e20:	08007de5 	.word	0x08007de5
 8007e24:	08007de5 	.word	0x08007de5
 8007e28:	08007f75 	.word	0x08007f75
 8007e2c:	08007e99 	.word	0x08007e99
 8007e30:	08007f57 	.word	0x08007f57
 8007e34:	08007de5 	.word	0x08007de5
 8007e38:	08007de5 	.word	0x08007de5
 8007e3c:	08007f97 	.word	0x08007f97
 8007e40:	08007de5 	.word	0x08007de5
 8007e44:	08007e99 	.word	0x08007e99
 8007e48:	08007de5 	.word	0x08007de5
 8007e4c:	08007de5 	.word	0x08007de5
 8007e50:	08007f5f 	.word	0x08007f5f
 8007e54:	682b      	ldr	r3, [r5, #0]
 8007e56:	1d1a      	adds	r2, r3, #4
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	602a      	str	r2, [r5, #0]
 8007e5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e64:	2301      	movs	r3, #1
 8007e66:	e0a3      	b.n	8007fb0 <_printf_i+0x1f4>
 8007e68:	6820      	ldr	r0, [r4, #0]
 8007e6a:	6829      	ldr	r1, [r5, #0]
 8007e6c:	0606      	lsls	r6, r0, #24
 8007e6e:	f101 0304 	add.w	r3, r1, #4
 8007e72:	d50a      	bpl.n	8007e8a <_printf_i+0xce>
 8007e74:	680e      	ldr	r6, [r1, #0]
 8007e76:	602b      	str	r3, [r5, #0]
 8007e78:	2e00      	cmp	r6, #0
 8007e7a:	da03      	bge.n	8007e84 <_printf_i+0xc8>
 8007e7c:	232d      	movs	r3, #45	; 0x2d
 8007e7e:	4276      	negs	r6, r6
 8007e80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e84:	485e      	ldr	r0, [pc, #376]	; (8008000 <_printf_i+0x244>)
 8007e86:	230a      	movs	r3, #10
 8007e88:	e019      	b.n	8007ebe <_printf_i+0x102>
 8007e8a:	680e      	ldr	r6, [r1, #0]
 8007e8c:	602b      	str	r3, [r5, #0]
 8007e8e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007e92:	bf18      	it	ne
 8007e94:	b236      	sxthne	r6, r6
 8007e96:	e7ef      	b.n	8007e78 <_printf_i+0xbc>
 8007e98:	682b      	ldr	r3, [r5, #0]
 8007e9a:	6820      	ldr	r0, [r4, #0]
 8007e9c:	1d19      	adds	r1, r3, #4
 8007e9e:	6029      	str	r1, [r5, #0]
 8007ea0:	0601      	lsls	r1, r0, #24
 8007ea2:	d501      	bpl.n	8007ea8 <_printf_i+0xec>
 8007ea4:	681e      	ldr	r6, [r3, #0]
 8007ea6:	e002      	b.n	8007eae <_printf_i+0xf2>
 8007ea8:	0646      	lsls	r6, r0, #25
 8007eaa:	d5fb      	bpl.n	8007ea4 <_printf_i+0xe8>
 8007eac:	881e      	ldrh	r6, [r3, #0]
 8007eae:	4854      	ldr	r0, [pc, #336]	; (8008000 <_printf_i+0x244>)
 8007eb0:	2f6f      	cmp	r7, #111	; 0x6f
 8007eb2:	bf0c      	ite	eq
 8007eb4:	2308      	moveq	r3, #8
 8007eb6:	230a      	movne	r3, #10
 8007eb8:	2100      	movs	r1, #0
 8007eba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007ebe:	6865      	ldr	r5, [r4, #4]
 8007ec0:	60a5      	str	r5, [r4, #8]
 8007ec2:	2d00      	cmp	r5, #0
 8007ec4:	bfa2      	ittt	ge
 8007ec6:	6821      	ldrge	r1, [r4, #0]
 8007ec8:	f021 0104 	bicge.w	r1, r1, #4
 8007ecc:	6021      	strge	r1, [r4, #0]
 8007ece:	b90e      	cbnz	r6, 8007ed4 <_printf_i+0x118>
 8007ed0:	2d00      	cmp	r5, #0
 8007ed2:	d04d      	beq.n	8007f70 <_printf_i+0x1b4>
 8007ed4:	4615      	mov	r5, r2
 8007ed6:	fbb6 f1f3 	udiv	r1, r6, r3
 8007eda:	fb03 6711 	mls	r7, r3, r1, r6
 8007ede:	5dc7      	ldrb	r7, [r0, r7]
 8007ee0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007ee4:	4637      	mov	r7, r6
 8007ee6:	42bb      	cmp	r3, r7
 8007ee8:	460e      	mov	r6, r1
 8007eea:	d9f4      	bls.n	8007ed6 <_printf_i+0x11a>
 8007eec:	2b08      	cmp	r3, #8
 8007eee:	d10b      	bne.n	8007f08 <_printf_i+0x14c>
 8007ef0:	6823      	ldr	r3, [r4, #0]
 8007ef2:	07de      	lsls	r6, r3, #31
 8007ef4:	d508      	bpl.n	8007f08 <_printf_i+0x14c>
 8007ef6:	6923      	ldr	r3, [r4, #16]
 8007ef8:	6861      	ldr	r1, [r4, #4]
 8007efa:	4299      	cmp	r1, r3
 8007efc:	bfde      	ittt	le
 8007efe:	2330      	movle	r3, #48	; 0x30
 8007f00:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007f04:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007f08:	1b52      	subs	r2, r2, r5
 8007f0a:	6122      	str	r2, [r4, #16]
 8007f0c:	f8cd a000 	str.w	sl, [sp]
 8007f10:	464b      	mov	r3, r9
 8007f12:	aa03      	add	r2, sp, #12
 8007f14:	4621      	mov	r1, r4
 8007f16:	4640      	mov	r0, r8
 8007f18:	f7ff fee2 	bl	8007ce0 <_printf_common>
 8007f1c:	3001      	adds	r0, #1
 8007f1e:	d14c      	bne.n	8007fba <_printf_i+0x1fe>
 8007f20:	f04f 30ff 	mov.w	r0, #4294967295
 8007f24:	b004      	add	sp, #16
 8007f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f2a:	4835      	ldr	r0, [pc, #212]	; (8008000 <_printf_i+0x244>)
 8007f2c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007f30:	6829      	ldr	r1, [r5, #0]
 8007f32:	6823      	ldr	r3, [r4, #0]
 8007f34:	f851 6b04 	ldr.w	r6, [r1], #4
 8007f38:	6029      	str	r1, [r5, #0]
 8007f3a:	061d      	lsls	r5, r3, #24
 8007f3c:	d514      	bpl.n	8007f68 <_printf_i+0x1ac>
 8007f3e:	07df      	lsls	r7, r3, #31
 8007f40:	bf44      	itt	mi
 8007f42:	f043 0320 	orrmi.w	r3, r3, #32
 8007f46:	6023      	strmi	r3, [r4, #0]
 8007f48:	b91e      	cbnz	r6, 8007f52 <_printf_i+0x196>
 8007f4a:	6823      	ldr	r3, [r4, #0]
 8007f4c:	f023 0320 	bic.w	r3, r3, #32
 8007f50:	6023      	str	r3, [r4, #0]
 8007f52:	2310      	movs	r3, #16
 8007f54:	e7b0      	b.n	8007eb8 <_printf_i+0xfc>
 8007f56:	6823      	ldr	r3, [r4, #0]
 8007f58:	f043 0320 	orr.w	r3, r3, #32
 8007f5c:	6023      	str	r3, [r4, #0]
 8007f5e:	2378      	movs	r3, #120	; 0x78
 8007f60:	4828      	ldr	r0, [pc, #160]	; (8008004 <_printf_i+0x248>)
 8007f62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007f66:	e7e3      	b.n	8007f30 <_printf_i+0x174>
 8007f68:	0659      	lsls	r1, r3, #25
 8007f6a:	bf48      	it	mi
 8007f6c:	b2b6      	uxthmi	r6, r6
 8007f6e:	e7e6      	b.n	8007f3e <_printf_i+0x182>
 8007f70:	4615      	mov	r5, r2
 8007f72:	e7bb      	b.n	8007eec <_printf_i+0x130>
 8007f74:	682b      	ldr	r3, [r5, #0]
 8007f76:	6826      	ldr	r6, [r4, #0]
 8007f78:	6961      	ldr	r1, [r4, #20]
 8007f7a:	1d18      	adds	r0, r3, #4
 8007f7c:	6028      	str	r0, [r5, #0]
 8007f7e:	0635      	lsls	r5, r6, #24
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	d501      	bpl.n	8007f88 <_printf_i+0x1cc>
 8007f84:	6019      	str	r1, [r3, #0]
 8007f86:	e002      	b.n	8007f8e <_printf_i+0x1d2>
 8007f88:	0670      	lsls	r0, r6, #25
 8007f8a:	d5fb      	bpl.n	8007f84 <_printf_i+0x1c8>
 8007f8c:	8019      	strh	r1, [r3, #0]
 8007f8e:	2300      	movs	r3, #0
 8007f90:	6123      	str	r3, [r4, #16]
 8007f92:	4615      	mov	r5, r2
 8007f94:	e7ba      	b.n	8007f0c <_printf_i+0x150>
 8007f96:	682b      	ldr	r3, [r5, #0]
 8007f98:	1d1a      	adds	r2, r3, #4
 8007f9a:	602a      	str	r2, [r5, #0]
 8007f9c:	681d      	ldr	r5, [r3, #0]
 8007f9e:	6862      	ldr	r2, [r4, #4]
 8007fa0:	2100      	movs	r1, #0
 8007fa2:	4628      	mov	r0, r5
 8007fa4:	f7f8 f92c 	bl	8000200 <memchr>
 8007fa8:	b108      	cbz	r0, 8007fae <_printf_i+0x1f2>
 8007faa:	1b40      	subs	r0, r0, r5
 8007fac:	6060      	str	r0, [r4, #4]
 8007fae:	6863      	ldr	r3, [r4, #4]
 8007fb0:	6123      	str	r3, [r4, #16]
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fb8:	e7a8      	b.n	8007f0c <_printf_i+0x150>
 8007fba:	6923      	ldr	r3, [r4, #16]
 8007fbc:	462a      	mov	r2, r5
 8007fbe:	4649      	mov	r1, r9
 8007fc0:	4640      	mov	r0, r8
 8007fc2:	47d0      	blx	sl
 8007fc4:	3001      	adds	r0, #1
 8007fc6:	d0ab      	beq.n	8007f20 <_printf_i+0x164>
 8007fc8:	6823      	ldr	r3, [r4, #0]
 8007fca:	079b      	lsls	r3, r3, #30
 8007fcc:	d413      	bmi.n	8007ff6 <_printf_i+0x23a>
 8007fce:	68e0      	ldr	r0, [r4, #12]
 8007fd0:	9b03      	ldr	r3, [sp, #12]
 8007fd2:	4298      	cmp	r0, r3
 8007fd4:	bfb8      	it	lt
 8007fd6:	4618      	movlt	r0, r3
 8007fd8:	e7a4      	b.n	8007f24 <_printf_i+0x168>
 8007fda:	2301      	movs	r3, #1
 8007fdc:	4632      	mov	r2, r6
 8007fde:	4649      	mov	r1, r9
 8007fe0:	4640      	mov	r0, r8
 8007fe2:	47d0      	blx	sl
 8007fe4:	3001      	adds	r0, #1
 8007fe6:	d09b      	beq.n	8007f20 <_printf_i+0x164>
 8007fe8:	3501      	adds	r5, #1
 8007fea:	68e3      	ldr	r3, [r4, #12]
 8007fec:	9903      	ldr	r1, [sp, #12]
 8007fee:	1a5b      	subs	r3, r3, r1
 8007ff0:	42ab      	cmp	r3, r5
 8007ff2:	dcf2      	bgt.n	8007fda <_printf_i+0x21e>
 8007ff4:	e7eb      	b.n	8007fce <_printf_i+0x212>
 8007ff6:	2500      	movs	r5, #0
 8007ff8:	f104 0619 	add.w	r6, r4, #25
 8007ffc:	e7f5      	b.n	8007fea <_printf_i+0x22e>
 8007ffe:	bf00      	nop
 8008000:	0800869d 	.word	0x0800869d
 8008004:	080086ae 	.word	0x080086ae

08008008 <memmove>:
 8008008:	4288      	cmp	r0, r1
 800800a:	b510      	push	{r4, lr}
 800800c:	eb01 0402 	add.w	r4, r1, r2
 8008010:	d902      	bls.n	8008018 <memmove+0x10>
 8008012:	4284      	cmp	r4, r0
 8008014:	4623      	mov	r3, r4
 8008016:	d807      	bhi.n	8008028 <memmove+0x20>
 8008018:	1e43      	subs	r3, r0, #1
 800801a:	42a1      	cmp	r1, r4
 800801c:	d008      	beq.n	8008030 <memmove+0x28>
 800801e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008022:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008026:	e7f8      	b.n	800801a <memmove+0x12>
 8008028:	4402      	add	r2, r0
 800802a:	4601      	mov	r1, r0
 800802c:	428a      	cmp	r2, r1
 800802e:	d100      	bne.n	8008032 <memmove+0x2a>
 8008030:	bd10      	pop	{r4, pc}
 8008032:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008036:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800803a:	e7f7      	b.n	800802c <memmove+0x24>

0800803c <_free_r>:
 800803c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800803e:	2900      	cmp	r1, #0
 8008040:	d044      	beq.n	80080cc <_free_r+0x90>
 8008042:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008046:	9001      	str	r0, [sp, #4]
 8008048:	2b00      	cmp	r3, #0
 800804a:	f1a1 0404 	sub.w	r4, r1, #4
 800804e:	bfb8      	it	lt
 8008050:	18e4      	addlt	r4, r4, r3
 8008052:	f000 f913 	bl	800827c <__malloc_lock>
 8008056:	4a1e      	ldr	r2, [pc, #120]	; (80080d0 <_free_r+0x94>)
 8008058:	9801      	ldr	r0, [sp, #4]
 800805a:	6813      	ldr	r3, [r2, #0]
 800805c:	b933      	cbnz	r3, 800806c <_free_r+0x30>
 800805e:	6063      	str	r3, [r4, #4]
 8008060:	6014      	str	r4, [r2, #0]
 8008062:	b003      	add	sp, #12
 8008064:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008068:	f000 b90e 	b.w	8008288 <__malloc_unlock>
 800806c:	42a3      	cmp	r3, r4
 800806e:	d908      	bls.n	8008082 <_free_r+0x46>
 8008070:	6825      	ldr	r5, [r4, #0]
 8008072:	1961      	adds	r1, r4, r5
 8008074:	428b      	cmp	r3, r1
 8008076:	bf01      	itttt	eq
 8008078:	6819      	ldreq	r1, [r3, #0]
 800807a:	685b      	ldreq	r3, [r3, #4]
 800807c:	1949      	addeq	r1, r1, r5
 800807e:	6021      	streq	r1, [r4, #0]
 8008080:	e7ed      	b.n	800805e <_free_r+0x22>
 8008082:	461a      	mov	r2, r3
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	b10b      	cbz	r3, 800808c <_free_r+0x50>
 8008088:	42a3      	cmp	r3, r4
 800808a:	d9fa      	bls.n	8008082 <_free_r+0x46>
 800808c:	6811      	ldr	r1, [r2, #0]
 800808e:	1855      	adds	r5, r2, r1
 8008090:	42a5      	cmp	r5, r4
 8008092:	d10b      	bne.n	80080ac <_free_r+0x70>
 8008094:	6824      	ldr	r4, [r4, #0]
 8008096:	4421      	add	r1, r4
 8008098:	1854      	adds	r4, r2, r1
 800809a:	42a3      	cmp	r3, r4
 800809c:	6011      	str	r1, [r2, #0]
 800809e:	d1e0      	bne.n	8008062 <_free_r+0x26>
 80080a0:	681c      	ldr	r4, [r3, #0]
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	6053      	str	r3, [r2, #4]
 80080a6:	4421      	add	r1, r4
 80080a8:	6011      	str	r1, [r2, #0]
 80080aa:	e7da      	b.n	8008062 <_free_r+0x26>
 80080ac:	d902      	bls.n	80080b4 <_free_r+0x78>
 80080ae:	230c      	movs	r3, #12
 80080b0:	6003      	str	r3, [r0, #0]
 80080b2:	e7d6      	b.n	8008062 <_free_r+0x26>
 80080b4:	6825      	ldr	r5, [r4, #0]
 80080b6:	1961      	adds	r1, r4, r5
 80080b8:	428b      	cmp	r3, r1
 80080ba:	bf04      	itt	eq
 80080bc:	6819      	ldreq	r1, [r3, #0]
 80080be:	685b      	ldreq	r3, [r3, #4]
 80080c0:	6063      	str	r3, [r4, #4]
 80080c2:	bf04      	itt	eq
 80080c4:	1949      	addeq	r1, r1, r5
 80080c6:	6021      	streq	r1, [r4, #0]
 80080c8:	6054      	str	r4, [r2, #4]
 80080ca:	e7ca      	b.n	8008062 <_free_r+0x26>
 80080cc:	b003      	add	sp, #12
 80080ce:	bd30      	pop	{r4, r5, pc}
 80080d0:	20012f90 	.word	0x20012f90

080080d4 <sbrk_aligned>:
 80080d4:	b570      	push	{r4, r5, r6, lr}
 80080d6:	4e0e      	ldr	r6, [pc, #56]	; (8008110 <sbrk_aligned+0x3c>)
 80080d8:	460c      	mov	r4, r1
 80080da:	6831      	ldr	r1, [r6, #0]
 80080dc:	4605      	mov	r5, r0
 80080de:	b911      	cbnz	r1, 80080e6 <sbrk_aligned+0x12>
 80080e0:	f000 f8bc 	bl	800825c <_sbrk_r>
 80080e4:	6030      	str	r0, [r6, #0]
 80080e6:	4621      	mov	r1, r4
 80080e8:	4628      	mov	r0, r5
 80080ea:	f000 f8b7 	bl	800825c <_sbrk_r>
 80080ee:	1c43      	adds	r3, r0, #1
 80080f0:	d00a      	beq.n	8008108 <sbrk_aligned+0x34>
 80080f2:	1cc4      	adds	r4, r0, #3
 80080f4:	f024 0403 	bic.w	r4, r4, #3
 80080f8:	42a0      	cmp	r0, r4
 80080fa:	d007      	beq.n	800810c <sbrk_aligned+0x38>
 80080fc:	1a21      	subs	r1, r4, r0
 80080fe:	4628      	mov	r0, r5
 8008100:	f000 f8ac 	bl	800825c <_sbrk_r>
 8008104:	3001      	adds	r0, #1
 8008106:	d101      	bne.n	800810c <sbrk_aligned+0x38>
 8008108:	f04f 34ff 	mov.w	r4, #4294967295
 800810c:	4620      	mov	r0, r4
 800810e:	bd70      	pop	{r4, r5, r6, pc}
 8008110:	20012f94 	.word	0x20012f94

08008114 <_malloc_r>:
 8008114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008118:	1ccd      	adds	r5, r1, #3
 800811a:	f025 0503 	bic.w	r5, r5, #3
 800811e:	3508      	adds	r5, #8
 8008120:	2d0c      	cmp	r5, #12
 8008122:	bf38      	it	cc
 8008124:	250c      	movcc	r5, #12
 8008126:	2d00      	cmp	r5, #0
 8008128:	4607      	mov	r7, r0
 800812a:	db01      	blt.n	8008130 <_malloc_r+0x1c>
 800812c:	42a9      	cmp	r1, r5
 800812e:	d905      	bls.n	800813c <_malloc_r+0x28>
 8008130:	230c      	movs	r3, #12
 8008132:	603b      	str	r3, [r7, #0]
 8008134:	2600      	movs	r6, #0
 8008136:	4630      	mov	r0, r6
 8008138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800813c:	4e2e      	ldr	r6, [pc, #184]	; (80081f8 <_malloc_r+0xe4>)
 800813e:	f000 f89d 	bl	800827c <__malloc_lock>
 8008142:	6833      	ldr	r3, [r6, #0]
 8008144:	461c      	mov	r4, r3
 8008146:	bb34      	cbnz	r4, 8008196 <_malloc_r+0x82>
 8008148:	4629      	mov	r1, r5
 800814a:	4638      	mov	r0, r7
 800814c:	f7ff ffc2 	bl	80080d4 <sbrk_aligned>
 8008150:	1c43      	adds	r3, r0, #1
 8008152:	4604      	mov	r4, r0
 8008154:	d14d      	bne.n	80081f2 <_malloc_r+0xde>
 8008156:	6834      	ldr	r4, [r6, #0]
 8008158:	4626      	mov	r6, r4
 800815a:	2e00      	cmp	r6, #0
 800815c:	d140      	bne.n	80081e0 <_malloc_r+0xcc>
 800815e:	6823      	ldr	r3, [r4, #0]
 8008160:	4631      	mov	r1, r6
 8008162:	4638      	mov	r0, r7
 8008164:	eb04 0803 	add.w	r8, r4, r3
 8008168:	f000 f878 	bl	800825c <_sbrk_r>
 800816c:	4580      	cmp	r8, r0
 800816e:	d13a      	bne.n	80081e6 <_malloc_r+0xd2>
 8008170:	6821      	ldr	r1, [r4, #0]
 8008172:	3503      	adds	r5, #3
 8008174:	1a6d      	subs	r5, r5, r1
 8008176:	f025 0503 	bic.w	r5, r5, #3
 800817a:	3508      	adds	r5, #8
 800817c:	2d0c      	cmp	r5, #12
 800817e:	bf38      	it	cc
 8008180:	250c      	movcc	r5, #12
 8008182:	4629      	mov	r1, r5
 8008184:	4638      	mov	r0, r7
 8008186:	f7ff ffa5 	bl	80080d4 <sbrk_aligned>
 800818a:	3001      	adds	r0, #1
 800818c:	d02b      	beq.n	80081e6 <_malloc_r+0xd2>
 800818e:	6823      	ldr	r3, [r4, #0]
 8008190:	442b      	add	r3, r5
 8008192:	6023      	str	r3, [r4, #0]
 8008194:	e00e      	b.n	80081b4 <_malloc_r+0xa0>
 8008196:	6822      	ldr	r2, [r4, #0]
 8008198:	1b52      	subs	r2, r2, r5
 800819a:	d41e      	bmi.n	80081da <_malloc_r+0xc6>
 800819c:	2a0b      	cmp	r2, #11
 800819e:	d916      	bls.n	80081ce <_malloc_r+0xba>
 80081a0:	1961      	adds	r1, r4, r5
 80081a2:	42a3      	cmp	r3, r4
 80081a4:	6025      	str	r5, [r4, #0]
 80081a6:	bf18      	it	ne
 80081a8:	6059      	strne	r1, [r3, #4]
 80081aa:	6863      	ldr	r3, [r4, #4]
 80081ac:	bf08      	it	eq
 80081ae:	6031      	streq	r1, [r6, #0]
 80081b0:	5162      	str	r2, [r4, r5]
 80081b2:	604b      	str	r3, [r1, #4]
 80081b4:	4638      	mov	r0, r7
 80081b6:	f104 060b 	add.w	r6, r4, #11
 80081ba:	f000 f865 	bl	8008288 <__malloc_unlock>
 80081be:	f026 0607 	bic.w	r6, r6, #7
 80081c2:	1d23      	adds	r3, r4, #4
 80081c4:	1af2      	subs	r2, r6, r3
 80081c6:	d0b6      	beq.n	8008136 <_malloc_r+0x22>
 80081c8:	1b9b      	subs	r3, r3, r6
 80081ca:	50a3      	str	r3, [r4, r2]
 80081cc:	e7b3      	b.n	8008136 <_malloc_r+0x22>
 80081ce:	6862      	ldr	r2, [r4, #4]
 80081d0:	42a3      	cmp	r3, r4
 80081d2:	bf0c      	ite	eq
 80081d4:	6032      	streq	r2, [r6, #0]
 80081d6:	605a      	strne	r2, [r3, #4]
 80081d8:	e7ec      	b.n	80081b4 <_malloc_r+0xa0>
 80081da:	4623      	mov	r3, r4
 80081dc:	6864      	ldr	r4, [r4, #4]
 80081de:	e7b2      	b.n	8008146 <_malloc_r+0x32>
 80081e0:	4634      	mov	r4, r6
 80081e2:	6876      	ldr	r6, [r6, #4]
 80081e4:	e7b9      	b.n	800815a <_malloc_r+0x46>
 80081e6:	230c      	movs	r3, #12
 80081e8:	603b      	str	r3, [r7, #0]
 80081ea:	4638      	mov	r0, r7
 80081ec:	f000 f84c 	bl	8008288 <__malloc_unlock>
 80081f0:	e7a1      	b.n	8008136 <_malloc_r+0x22>
 80081f2:	6025      	str	r5, [r4, #0]
 80081f4:	e7de      	b.n	80081b4 <_malloc_r+0xa0>
 80081f6:	bf00      	nop
 80081f8:	20012f90 	.word	0x20012f90

080081fc <_realloc_r>:
 80081fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008200:	4680      	mov	r8, r0
 8008202:	4614      	mov	r4, r2
 8008204:	460e      	mov	r6, r1
 8008206:	b921      	cbnz	r1, 8008212 <_realloc_r+0x16>
 8008208:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800820c:	4611      	mov	r1, r2
 800820e:	f7ff bf81 	b.w	8008114 <_malloc_r>
 8008212:	b92a      	cbnz	r2, 8008220 <_realloc_r+0x24>
 8008214:	f7ff ff12 	bl	800803c <_free_r>
 8008218:	4625      	mov	r5, r4
 800821a:	4628      	mov	r0, r5
 800821c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008220:	f000 f838 	bl	8008294 <_malloc_usable_size_r>
 8008224:	4284      	cmp	r4, r0
 8008226:	4607      	mov	r7, r0
 8008228:	d802      	bhi.n	8008230 <_realloc_r+0x34>
 800822a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800822e:	d812      	bhi.n	8008256 <_realloc_r+0x5a>
 8008230:	4621      	mov	r1, r4
 8008232:	4640      	mov	r0, r8
 8008234:	f7ff ff6e 	bl	8008114 <_malloc_r>
 8008238:	4605      	mov	r5, r0
 800823a:	2800      	cmp	r0, #0
 800823c:	d0ed      	beq.n	800821a <_realloc_r+0x1e>
 800823e:	42bc      	cmp	r4, r7
 8008240:	4622      	mov	r2, r4
 8008242:	4631      	mov	r1, r6
 8008244:	bf28      	it	cs
 8008246:	463a      	movcs	r2, r7
 8008248:	f7ff fbb8 	bl	80079bc <memcpy>
 800824c:	4631      	mov	r1, r6
 800824e:	4640      	mov	r0, r8
 8008250:	f7ff fef4 	bl	800803c <_free_r>
 8008254:	e7e1      	b.n	800821a <_realloc_r+0x1e>
 8008256:	4635      	mov	r5, r6
 8008258:	e7df      	b.n	800821a <_realloc_r+0x1e>
	...

0800825c <_sbrk_r>:
 800825c:	b538      	push	{r3, r4, r5, lr}
 800825e:	4d06      	ldr	r5, [pc, #24]	; (8008278 <_sbrk_r+0x1c>)
 8008260:	2300      	movs	r3, #0
 8008262:	4604      	mov	r4, r0
 8008264:	4608      	mov	r0, r1
 8008266:	602b      	str	r3, [r5, #0]
 8008268:	f7f9 f88c 	bl	8001384 <_sbrk>
 800826c:	1c43      	adds	r3, r0, #1
 800826e:	d102      	bne.n	8008276 <_sbrk_r+0x1a>
 8008270:	682b      	ldr	r3, [r5, #0]
 8008272:	b103      	cbz	r3, 8008276 <_sbrk_r+0x1a>
 8008274:	6023      	str	r3, [r4, #0]
 8008276:	bd38      	pop	{r3, r4, r5, pc}
 8008278:	20012f98 	.word	0x20012f98

0800827c <__malloc_lock>:
 800827c:	4801      	ldr	r0, [pc, #4]	; (8008284 <__malloc_lock+0x8>)
 800827e:	f000 b811 	b.w	80082a4 <__retarget_lock_acquire_recursive>
 8008282:	bf00      	nop
 8008284:	20012f9c 	.word	0x20012f9c

08008288 <__malloc_unlock>:
 8008288:	4801      	ldr	r0, [pc, #4]	; (8008290 <__malloc_unlock+0x8>)
 800828a:	f000 b80c 	b.w	80082a6 <__retarget_lock_release_recursive>
 800828e:	bf00      	nop
 8008290:	20012f9c 	.word	0x20012f9c

08008294 <_malloc_usable_size_r>:
 8008294:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008298:	1f18      	subs	r0, r3, #4
 800829a:	2b00      	cmp	r3, #0
 800829c:	bfbc      	itt	lt
 800829e:	580b      	ldrlt	r3, [r1, r0]
 80082a0:	18c0      	addlt	r0, r0, r3
 80082a2:	4770      	bx	lr

080082a4 <__retarget_lock_acquire_recursive>:
 80082a4:	4770      	bx	lr

080082a6 <__retarget_lock_release_recursive>:
 80082a6:	4770      	bx	lr

080082a8 <_init>:
 80082a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082aa:	bf00      	nop
 80082ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082ae:	bc08      	pop	{r3}
 80082b0:	469e      	mov	lr, r3
 80082b2:	4770      	bx	lr

080082b4 <_fini>:
 80082b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082b6:	bf00      	nop
 80082b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082ba:	bc08      	pop	{r3}
 80082bc:	469e      	mov	lr, r3
 80082be:	4770      	bx	lr
