
008Queue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c74  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08005e04  08005e04  00015e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e54  08005e54  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08005e54  08005e54  00015e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e5c  08005e5c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e5c  08005e5c  00015e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e60  08005e60  00015e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005e64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00012e90  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20012ea4  20012ea4  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015383  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000301a  00000000  00000000  000353c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012c8  00000000  00000000  000383e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001190  00000000  00000000  000396b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022ec0  00000000  00000000  0003a840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000164c5  00000000  00000000  0005d700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da278  00000000  00000000  00073bc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014de3d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004e40  00000000  00000000  0014de90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005dec 	.word	0x08005dec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	08005dec 	.word	0x08005dec

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b08a      	sub	sp, #40	; 0x28
 80004d8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004da:	f000 fcb1 	bl	8000e40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004de:	f000 f8df 	bl	80006a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e2:	f000 f999 	bl	8000818 <MX_GPIO_Init>
  MX_RTC_Init();
 80004e6:	f000 f947 	bl	8000778 <MX_RTC_Init>
  MX_USART2_UART_Init();
 80004ea:	f000 f96b 	bl	80007c4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  DWT_CTRL |= (1 << 0);
 80004ee:	4b5a      	ldr	r3, [pc, #360]	; (8000658 <main+0x184>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4a59      	ldr	r2, [pc, #356]	; (8000658 <main+0x184>)
 80004f4:	f043 0301 	orr.w	r3, r3, #1
 80004f8:	6013      	str	r3, [r2, #0]

  status = xTaskCreate(menu_task, "MENU", 250, NULL, 2, &menu_task_handle);
 80004fa:	4b58      	ldr	r3, [pc, #352]	; (800065c <main+0x188>)
 80004fc:	9301      	str	r3, [sp, #4]
 80004fe:	2302      	movs	r3, #2
 8000500:	9300      	str	r3, [sp, #0]
 8000502:	2300      	movs	r3, #0
 8000504:	22fa      	movs	r2, #250	; 0xfa
 8000506:	4956      	ldr	r1, [pc, #344]	; (8000660 <main+0x18c>)
 8000508:	4856      	ldr	r0, [pc, #344]	; (8000664 <main+0x190>)
 800050a:	f003 fe01 	bl	8004110 <xTaskCreate>
 800050e:	61f8      	str	r0, [r7, #28]
	configASSERT(status == pdPASS);
 8000510:	69fb      	ldr	r3, [r7, #28]
 8000512:	2b01      	cmp	r3, #1
 8000514:	d00a      	beq.n	800052c <main+0x58>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800051a:	f383 8811 	msr	BASEPRI, r3
 800051e:	f3bf 8f6f 	isb	sy
 8000522:	f3bf 8f4f 	dsb	sy
 8000526:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000528:	bf00      	nop
 800052a:	e7fe      	b.n	800052a <main+0x56>

	status = xTaskCreate(led_task, "LED", 250, NULL, 2, &led_task_handle);
 800052c:	4b4e      	ldr	r3, [pc, #312]	; (8000668 <main+0x194>)
 800052e:	9301      	str	r3, [sp, #4]
 8000530:	2302      	movs	r3, #2
 8000532:	9300      	str	r3, [sp, #0]
 8000534:	2300      	movs	r3, #0
 8000536:	22fa      	movs	r2, #250	; 0xfa
 8000538:	494c      	ldr	r1, [pc, #304]	; (800066c <main+0x198>)
 800053a:	484d      	ldr	r0, [pc, #308]	; (8000670 <main+0x19c>)
 800053c:	f003 fde8 	bl	8004110 <xTaskCreate>
 8000540:	61f8      	str	r0, [r7, #28]
	configASSERT(status == pdPASS);
 8000542:	69fb      	ldr	r3, [r7, #28]
 8000544:	2b01      	cmp	r3, #1
 8000546:	d00a      	beq.n	800055e <main+0x8a>
        __asm volatile
 8000548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800054c:	f383 8811 	msr	BASEPRI, r3
 8000550:	f3bf 8f6f 	isb	sy
 8000554:	f3bf 8f4f 	dsb	sy
 8000558:	617b      	str	r3, [r7, #20]
    }
 800055a:	bf00      	nop
 800055c:	e7fe      	b.n	800055c <main+0x88>

	status = xTaskCreate(rtc_task, "RTC", 250, NULL, 2, &rtc_task_handle);
 800055e:	4b45      	ldr	r3, [pc, #276]	; (8000674 <main+0x1a0>)
 8000560:	9301      	str	r3, [sp, #4]
 8000562:	2302      	movs	r3, #2
 8000564:	9300      	str	r3, [sp, #0]
 8000566:	2300      	movs	r3, #0
 8000568:	22fa      	movs	r2, #250	; 0xfa
 800056a:	4943      	ldr	r1, [pc, #268]	; (8000678 <main+0x1a4>)
 800056c:	4843      	ldr	r0, [pc, #268]	; (800067c <main+0x1a8>)
 800056e:	f003 fdcf 	bl	8004110 <xTaskCreate>
 8000572:	61f8      	str	r0, [r7, #28]
	configASSERT(status == pdPASS);
 8000574:	69fb      	ldr	r3, [r7, #28]
 8000576:	2b01      	cmp	r3, #1
 8000578:	d00a      	beq.n	8000590 <main+0xbc>
        __asm volatile
 800057a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800057e:	f383 8811 	msr	BASEPRI, r3
 8000582:	f3bf 8f6f 	isb	sy
 8000586:	f3bf 8f4f 	dsb	sy
 800058a:	613b      	str	r3, [r7, #16]
    }
 800058c:	bf00      	nop
 800058e:	e7fe      	b.n	800058e <main+0xba>

	status = xTaskCreate(print_task, "PRINT", 250, NULL, 2, &print_task_handle);
 8000590:	4b3b      	ldr	r3, [pc, #236]	; (8000680 <main+0x1ac>)
 8000592:	9301      	str	r3, [sp, #4]
 8000594:	2302      	movs	r3, #2
 8000596:	9300      	str	r3, [sp, #0]
 8000598:	2300      	movs	r3, #0
 800059a:	22fa      	movs	r2, #250	; 0xfa
 800059c:	4939      	ldr	r1, [pc, #228]	; (8000684 <main+0x1b0>)
 800059e:	483a      	ldr	r0, [pc, #232]	; (8000688 <main+0x1b4>)
 80005a0:	f003 fdb6 	bl	8004110 <xTaskCreate>
 80005a4:	61f8      	str	r0, [r7, #28]
	configASSERT(status == pdPASS);
 80005a6:	69fb      	ldr	r3, [r7, #28]
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d00a      	beq.n	80005c2 <main+0xee>
        __asm volatile
 80005ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005b0:	f383 8811 	msr	BASEPRI, r3
 80005b4:	f3bf 8f6f 	isb	sy
 80005b8:	f3bf 8f4f 	dsb	sy
 80005bc:	60fb      	str	r3, [r7, #12]
    }
 80005be:	bf00      	nop
 80005c0:	e7fe      	b.n	80005c0 <main+0xec>

	status = xTaskCreate(command_handling_task, "COMMAND", 250, NULL, 2, &command_handling_task_handle);
 80005c2:	4b32      	ldr	r3, [pc, #200]	; (800068c <main+0x1b8>)
 80005c4:	9301      	str	r3, [sp, #4]
 80005c6:	2302      	movs	r3, #2
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	2300      	movs	r3, #0
 80005cc:	22fa      	movs	r2, #250	; 0xfa
 80005ce:	4930      	ldr	r1, [pc, #192]	; (8000690 <main+0x1bc>)
 80005d0:	4830      	ldr	r0, [pc, #192]	; (8000694 <main+0x1c0>)
 80005d2:	f003 fd9d 	bl	8004110 <xTaskCreate>
 80005d6:	61f8      	str	r0, [r7, #28]
	configASSERT(status == pdPASS);
 80005d8:	69fb      	ldr	r3, [r7, #28]
 80005da:	2b01      	cmp	r3, #1
 80005dc:	d00a      	beq.n	80005f4 <main+0x120>
        __asm volatile
 80005de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005e2:	f383 8811 	msr	BASEPRI, r3
 80005e6:	f3bf 8f6f 	isb	sy
 80005ea:	f3bf 8f4f 	dsb	sy
 80005ee:	60bb      	str	r3, [r7, #8]
    }
 80005f0:	bf00      	nop
 80005f2:	e7fe      	b.n	80005f2 <main+0x11e>

	input_data_queue_handle = xQueueCreate(10, sizeof(char));
 80005f4:	2200      	movs	r2, #0
 80005f6:	2101      	movs	r1, #1
 80005f8:	200a      	movs	r0, #10
 80005fa:	f003 f911 	bl	8003820 <xQueueGenericCreate>
 80005fe:	4603      	mov	r3, r0
 8000600:	4a25      	ldr	r2, [pc, #148]	; (8000698 <main+0x1c4>)
 8000602:	6013      	str	r3, [r2, #0]
	configASSERT(input_data_queue_handle != NULL);
 8000604:	4b24      	ldr	r3, [pc, #144]	; (8000698 <main+0x1c4>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d10a      	bne.n	8000622 <main+0x14e>
        __asm volatile
 800060c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000610:	f383 8811 	msr	BASEPRI, r3
 8000614:	f3bf 8f6f 	isb	sy
 8000618:	f3bf 8f4f 	dsb	sy
 800061c:	607b      	str	r3, [r7, #4]
    }
 800061e:	bf00      	nop
 8000620:	e7fe      	b.n	8000620 <main+0x14c>
	print_queue_handle = xQueueCreate(10, sizeof(size_t));
 8000622:	2200      	movs	r2, #0
 8000624:	2104      	movs	r1, #4
 8000626:	200a      	movs	r0, #10
 8000628:	f003 f8fa 	bl	8003820 <xQueueGenericCreate>
 800062c:	4603      	mov	r3, r0
 800062e:	4a1b      	ldr	r2, [pc, #108]	; (800069c <main+0x1c8>)
 8000630:	6013      	str	r3, [r2, #0]
	configASSERT(print_queue_handle != NULL);
 8000632:	4b1a      	ldr	r3, [pc, #104]	; (800069c <main+0x1c8>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d10a      	bne.n	8000650 <main+0x17c>
        __asm volatile
 800063a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800063e:	f383 8811 	msr	BASEPRI, r3
 8000642:	f3bf 8f6f 	isb	sy
 8000646:	f3bf 8f4f 	dsb	sy
 800064a:	603b      	str	r3, [r7, #0]
    }
 800064c:	bf00      	nop
 800064e:	e7fe      	b.n	800064e <main+0x17a>

  vTaskStartScheduler();
 8000650:	f003 fea4 	bl	800439c <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000654:	e7fe      	b.n	8000654 <main+0x180>
 8000656:	bf00      	nop
 8000658:	e0001000 	.word	0xe0001000
 800065c:	20000094 	.word	0x20000094
 8000660:	08005e04 	.word	0x08005e04
 8000664:	08000db9 	.word	0x08000db9
 8000668:	20000098 	.word	0x20000098
 800066c:	08005e0c 	.word	0x08005e0c
 8000670:	08000dc3 	.word	0x08000dc3
 8000674:	2000009c 	.word	0x2000009c
 8000678:	08005e10 	.word	0x08005e10
 800067c:	08000dcd 	.word	0x08000dcd
 8000680:	200000a0 	.word	0x200000a0
 8000684:	08005e14 	.word	0x08005e14
 8000688:	08000dd7 	.word	0x08000dd7
 800068c:	200000a4 	.word	0x200000a4
 8000690:	08005e1c 	.word	0x08005e1c
 8000694:	08000de1 	.word	0x08000de1
 8000698:	200000a8 	.word	0x200000a8
 800069c:	200000ac 	.word	0x200000ac

080006a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b094      	sub	sp, #80	; 0x50
 80006a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a6:	f107 0320 	add.w	r3, r7, #32
 80006aa:	2230      	movs	r2, #48	; 0x30
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f005 fb94 	bl	8005ddc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b4:	f107 030c 	add.w	r3, r7, #12
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c4:	2300      	movs	r3, #0
 80006c6:	60bb      	str	r3, [r7, #8]
 80006c8:	4b29      	ldr	r3, [pc, #164]	; (8000770 <SystemClock_Config+0xd0>)
 80006ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006cc:	4a28      	ldr	r2, [pc, #160]	; (8000770 <SystemClock_Config+0xd0>)
 80006ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d2:	6413      	str	r3, [r2, #64]	; 0x40
 80006d4:	4b26      	ldr	r3, [pc, #152]	; (8000770 <SystemClock_Config+0xd0>)
 80006d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006dc:	60bb      	str	r3, [r7, #8]
 80006de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e0:	2300      	movs	r3, #0
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	4b23      	ldr	r3, [pc, #140]	; (8000774 <SystemClock_Config+0xd4>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a22      	ldr	r2, [pc, #136]	; (8000774 <SystemClock_Config+0xd4>)
 80006ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ee:	6013      	str	r3, [r2, #0]
 80006f0:	4b20      	ldr	r3, [pc, #128]	; (8000774 <SystemClock_Config+0xd4>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80006fc:	230a      	movs	r3, #10
 80006fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000700:	2301      	movs	r3, #1
 8000702:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000704:	2310      	movs	r3, #16
 8000706:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000708:	2301      	movs	r3, #1
 800070a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070c:	2302      	movs	r3, #2
 800070e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000710:	2300      	movs	r3, #0
 8000712:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000714:	2308      	movs	r3, #8
 8000716:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000718:	23a8      	movs	r3, #168	; 0xa8
 800071a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800071c:	2302      	movs	r3, #2
 800071e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000720:	2307      	movs	r3, #7
 8000722:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000724:	f107 0320 	add.w	r3, r7, #32
 8000728:	4618      	mov	r0, r3
 800072a:	f000 fef5 	bl	8001518 <HAL_RCC_OscConfig>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000734:	f000 f9e0 	bl	8000af8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000738:	230f      	movs	r3, #15
 800073a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073c:	2302      	movs	r3, #2
 800073e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000744:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000748:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800074a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800074e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000750:	f107 030c 	add.w	r3, r7, #12
 8000754:	2105      	movs	r1, #5
 8000756:	4618      	mov	r0, r3
 8000758:	f001 f956 	bl	8001a08 <HAL_RCC_ClockConfig>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000762:	f000 f9c9 	bl	8000af8 <Error_Handler>
  }
}
 8000766:	bf00      	nop
 8000768:	3750      	adds	r7, #80	; 0x50
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40023800 	.word	0x40023800
 8000774:	40007000 	.word	0x40007000

08000778 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800077c:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <MX_RTC_Init+0x44>)
 800077e:	4a10      	ldr	r2, [pc, #64]	; (80007c0 <MX_RTC_Init+0x48>)
 8000780:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000782:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <MX_RTC_Init+0x44>)
 8000784:	2240      	movs	r2, #64	; 0x40
 8000786:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000788:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <MX_RTC_Init+0x44>)
 800078a:	227f      	movs	r2, #127	; 0x7f
 800078c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800078e:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <MX_RTC_Init+0x44>)
 8000790:	22ff      	movs	r2, #255	; 0xff
 8000792:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000794:	4b09      	ldr	r3, [pc, #36]	; (80007bc <MX_RTC_Init+0x44>)
 8000796:	2200      	movs	r2, #0
 8000798:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800079a:	4b08      	ldr	r3, [pc, #32]	; (80007bc <MX_RTC_Init+0x44>)
 800079c:	2200      	movs	r2, #0
 800079e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80007a0:	4b06      	ldr	r3, [pc, #24]	; (80007bc <MX_RTC_Init+0x44>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80007a6:	4805      	ldr	r0, [pc, #20]	; (80007bc <MX_RTC_Init+0x44>)
 80007a8:	f001 fc62 	bl	8002070 <HAL_RTC_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80007b2:	f000 f9a1 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20000030 	.word	0x20000030
 80007c0:	40002800 	.word	0x40002800

080007c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007c8:	4b11      	ldr	r3, [pc, #68]	; (8000810 <MX_USART2_UART_Init+0x4c>)
 80007ca:	4a12      	ldr	r2, [pc, #72]	; (8000814 <MX_USART2_UART_Init+0x50>)
 80007cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ce:	4b10      	ldr	r3, [pc, #64]	; (8000810 <MX_USART2_UART_Init+0x4c>)
 80007d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007d6:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <MX_USART2_UART_Init+0x4c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007dc:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <MX_USART2_UART_Init+0x4c>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007e2:	4b0b      	ldr	r3, [pc, #44]	; (8000810 <MX_USART2_UART_Init+0x4c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007e8:	4b09      	ldr	r3, [pc, #36]	; (8000810 <MX_USART2_UART_Init+0x4c>)
 80007ea:	220c      	movs	r2, #12
 80007ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ee:	4b08      	ldr	r3, [pc, #32]	; (8000810 <MX_USART2_UART_Init+0x4c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f4:	4b06      	ldr	r3, [pc, #24]	; (8000810 <MX_USART2_UART_Init+0x4c>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007fa:	4805      	ldr	r0, [pc, #20]	; (8000810 <MX_USART2_UART_Init+0x4c>)
 80007fc:	f001 ffe0 	bl	80027c0 <HAL_UART_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000806:	f000 f977 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20000050 	.word	0x20000050
 8000814:	40004400 	.word	0x40004400

08000818 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08c      	sub	sp, #48	; 0x30
 800081c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081e:	f107 031c 	add.w	r3, r7, #28
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
 800082a:	60da      	str	r2, [r3, #12]
 800082c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	61bb      	str	r3, [r7, #24]
 8000832:	4ba2      	ldr	r3, [pc, #648]	; (8000abc <MX_GPIO_Init+0x2a4>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4aa1      	ldr	r2, [pc, #644]	; (8000abc <MX_GPIO_Init+0x2a4>)
 8000838:	f043 0310 	orr.w	r3, r3, #16
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b9f      	ldr	r3, [pc, #636]	; (8000abc <MX_GPIO_Init+0x2a4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0310 	and.w	r3, r3, #16
 8000846:	61bb      	str	r3, [r7, #24]
 8000848:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	617b      	str	r3, [r7, #20]
 800084e:	4b9b      	ldr	r3, [pc, #620]	; (8000abc <MX_GPIO_Init+0x2a4>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a9a      	ldr	r2, [pc, #616]	; (8000abc <MX_GPIO_Init+0x2a4>)
 8000854:	f043 0304 	orr.w	r3, r3, #4
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b98      	ldr	r3, [pc, #608]	; (8000abc <MX_GPIO_Init+0x2a4>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0304 	and.w	r3, r3, #4
 8000862:	617b      	str	r3, [r7, #20]
 8000864:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	613b      	str	r3, [r7, #16]
 800086a:	4b94      	ldr	r3, [pc, #592]	; (8000abc <MX_GPIO_Init+0x2a4>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a93      	ldr	r2, [pc, #588]	; (8000abc <MX_GPIO_Init+0x2a4>)
 8000870:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b91      	ldr	r3, [pc, #580]	; (8000abc <MX_GPIO_Init+0x2a4>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800087e:	613b      	str	r3, [r7, #16]
 8000880:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	60fb      	str	r3, [r7, #12]
 8000886:	4b8d      	ldr	r3, [pc, #564]	; (8000abc <MX_GPIO_Init+0x2a4>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a8c      	ldr	r2, [pc, #560]	; (8000abc <MX_GPIO_Init+0x2a4>)
 800088c:	f043 0301 	orr.w	r3, r3, #1
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b8a      	ldr	r3, [pc, #552]	; (8000abc <MX_GPIO_Init+0x2a4>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	60bb      	str	r3, [r7, #8]
 80008a2:	4b86      	ldr	r3, [pc, #536]	; (8000abc <MX_GPIO_Init+0x2a4>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a85      	ldr	r2, [pc, #532]	; (8000abc <MX_GPIO_Init+0x2a4>)
 80008a8:	f043 0302 	orr.w	r3, r3, #2
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b83      	ldr	r3, [pc, #524]	; (8000abc <MX_GPIO_Init+0x2a4>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f003 0302 	and.w	r3, r3, #2
 80008b6:	60bb      	str	r3, [r7, #8]
 80008b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	607b      	str	r3, [r7, #4]
 80008be:	4b7f      	ldr	r3, [pc, #508]	; (8000abc <MX_GPIO_Init+0x2a4>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a7e      	ldr	r2, [pc, #504]	; (8000abc <MX_GPIO_Init+0x2a4>)
 80008c4:	f043 0308 	orr.w	r3, r3, #8
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b7c      	ldr	r3, [pc, #496]	; (8000abc <MX_GPIO_Init+0x2a4>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f003 0308 	and.w	r3, r3, #8
 80008d2:	607b      	str	r3, [r7, #4]
 80008d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008d6:	2200      	movs	r2, #0
 80008d8:	2108      	movs	r1, #8
 80008da:	4879      	ldr	r0, [pc, #484]	; (8000ac0 <MX_GPIO_Init+0x2a8>)
 80008dc:	f000 fe02 	bl	80014e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008e0:	2201      	movs	r2, #1
 80008e2:	2101      	movs	r1, #1
 80008e4:	4877      	ldr	r0, [pc, #476]	; (8000ac4 <MX_GPIO_Init+0x2ac>)
 80008e6:	f000 fdfd 	bl	80014e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008ea:	2200      	movs	r2, #0
 80008ec:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008f0:	4875      	ldr	r0, [pc, #468]	; (8000ac8 <MX_GPIO_Init+0x2b0>)
 80008f2:	f000 fdf7 	bl	80014e4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008f6:	2308      	movs	r3, #8
 80008f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fa:	2301      	movs	r3, #1
 80008fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000902:	2300      	movs	r3, #0
 8000904:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000906:	f107 031c 	add.w	r3, r7, #28
 800090a:	4619      	mov	r1, r3
 800090c:	486c      	ldr	r0, [pc, #432]	; (8000ac0 <MX_GPIO_Init+0x2a8>)
 800090e:	f000 fc4d 	bl	80011ac <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000912:	2301      	movs	r3, #1
 8000914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000916:	2301      	movs	r3, #1
 8000918:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091e:	2300      	movs	r3, #0
 8000920:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000922:	f107 031c 	add.w	r3, r7, #28
 8000926:	4619      	mov	r1, r3
 8000928:	4866      	ldr	r0, [pc, #408]	; (8000ac4 <MX_GPIO_Init+0x2ac>)
 800092a:	f000 fc3f 	bl	80011ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800092e:	2308      	movs	r3, #8
 8000930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000932:	2302      	movs	r3, #2
 8000934:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093a:	2300      	movs	r3, #0
 800093c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800093e:	2305      	movs	r3, #5
 8000940:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	4619      	mov	r1, r3
 8000948:	485e      	ldr	r0, [pc, #376]	; (8000ac4 <MX_GPIO_Init+0x2ac>)
 800094a:	f000 fc2f 	bl	80011ac <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800094e:	2301      	movs	r3, #1
 8000950:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000952:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000956:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800095c:	f107 031c 	add.w	r3, r7, #28
 8000960:	4619      	mov	r1, r3
 8000962:	485a      	ldr	r0, [pc, #360]	; (8000acc <MX_GPIO_Init+0x2b4>)
 8000964:	f000 fc22 	bl	80011ac <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000968:	2310      	movs	r3, #16
 800096a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096c:	2302      	movs	r3, #2
 800096e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000974:	2300      	movs	r3, #0
 8000976:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000978:	2306      	movs	r3, #6
 800097a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800097c:	f107 031c 	add.w	r3, r7, #28
 8000980:	4619      	mov	r1, r3
 8000982:	4852      	ldr	r0, [pc, #328]	; (8000acc <MX_GPIO_Init+0x2b4>)
 8000984:	f000 fc12 	bl	80011ac <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000988:	23e0      	movs	r3, #224	; 0xe0
 800098a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098c:	2302      	movs	r3, #2
 800098e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000994:	2300      	movs	r3, #0
 8000996:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000998:	2305      	movs	r3, #5
 800099a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099c:	f107 031c 	add.w	r3, r7, #28
 80009a0:	4619      	mov	r1, r3
 80009a2:	484a      	ldr	r0, [pc, #296]	; (8000acc <MX_GPIO_Init+0x2b4>)
 80009a4:	f000 fc02 	bl	80011ac <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80009a8:	2304      	movs	r3, #4
 80009aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ac:	2300      	movs	r3, #0
 80009ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80009b4:	f107 031c 	add.w	r3, r7, #28
 80009b8:	4619      	mov	r1, r3
 80009ba:	4845      	ldr	r0, [pc, #276]	; (8000ad0 <MX_GPIO_Init+0x2b8>)
 80009bc:	f000 fbf6 	bl	80011ac <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80009c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c6:	2302      	movs	r3, #2
 80009c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ce:	2300      	movs	r3, #0
 80009d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009d2:	2305      	movs	r3, #5
 80009d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009d6:	f107 031c 	add.w	r3, r7, #28
 80009da:	4619      	mov	r1, r3
 80009dc:	483c      	ldr	r0, [pc, #240]	; (8000ad0 <MX_GPIO_Init+0x2b8>)
 80009de:	f000 fbe5 	bl	80011ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009e2:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009e6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e8:	2301      	movs	r3, #1
 80009ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009f4:	f107 031c 	add.w	r3, r7, #28
 80009f8:	4619      	mov	r1, r3
 80009fa:	4833      	ldr	r0, [pc, #204]	; (8000ac8 <MX_GPIO_Init+0x2b0>)
 80009fc:	f000 fbd6 	bl	80011ac <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000a00:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000a04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a06:	2302      	movs	r3, #2
 8000a08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a12:	2306      	movs	r3, #6
 8000a14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a16:	f107 031c 	add.w	r3, r7, #28
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4829      	ldr	r0, [pc, #164]	; (8000ac4 <MX_GPIO_Init+0x2ac>)
 8000a1e:	f000 fbc5 	bl	80011ac <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000a22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000a30:	f107 031c 	add.w	r3, r7, #28
 8000a34:	4619      	mov	r1, r3
 8000a36:	4825      	ldr	r0, [pc, #148]	; (8000acc <MX_GPIO_Init+0x2b4>)
 8000a38:	f000 fbb8 	bl	80011ac <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000a3c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a42:	2302      	movs	r3, #2
 8000a44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a4e:	230a      	movs	r3, #10
 8000a50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a52:	f107 031c 	add.w	r3, r7, #28
 8000a56:	4619      	mov	r1, r3
 8000a58:	481c      	ldr	r0, [pc, #112]	; (8000acc <MX_GPIO_Init+0x2b4>)
 8000a5a:	f000 fba7 	bl	80011ac <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a5e:	2320      	movs	r3, #32
 8000a60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a62:	2300      	movs	r3, #0
 8000a64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a6a:	f107 031c 	add.w	r3, r7, #28
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4815      	ldr	r0, [pc, #84]	; (8000ac8 <MX_GPIO_Init+0x2b0>)
 8000a72:	f000 fb9b 	bl	80011ac <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a76:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a7c:	2312      	movs	r3, #18
 8000a7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a84:	2300      	movs	r3, #0
 8000a86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a88:	2304      	movs	r3, #4
 8000a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a8c:	f107 031c 	add.w	r3, r7, #28
 8000a90:	4619      	mov	r1, r3
 8000a92:	480f      	ldr	r0, [pc, #60]	; (8000ad0 <MX_GPIO_Init+0x2b8>)
 8000a94:	f000 fb8a 	bl	80011ac <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a9c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000aa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000aa6:	f107 031c 	add.w	r3, r7, #28
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4804      	ldr	r0, [pc, #16]	; (8000ac0 <MX_GPIO_Init+0x2a8>)
 8000aae:	f000 fb7d 	bl	80011ac <HAL_GPIO_Init>

}
 8000ab2:	bf00      	nop
 8000ab4:	3730      	adds	r7, #48	; 0x30
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	40021000 	.word	0x40021000
 8000ac4:	40020800 	.word	0x40020800
 8000ac8:	40020c00 	.word	0x40020c00
 8000acc:	40020000 	.word	0x40020000
 8000ad0:	40020400 	.word	0x40020400

08000ad4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a04      	ldr	r2, [pc, #16]	; (8000af4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d101      	bne.n	8000aea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ae6:	f000 f9cd 	bl	8000e84 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40001000 	.word	0x40001000

08000af8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000afc:	b672      	cpsid	i
}
 8000afe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <Error_Handler+0x8>
	...

08000b04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	607b      	str	r3, [r7, #4]
 8000b0e:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b12:	4a0f      	ldr	r2, [pc, #60]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b18:	6453      	str	r3, [r2, #68]	; 0x44
 8000b1a:	4b0d      	ldr	r3, [pc, #52]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	603b      	str	r3, [r7, #0]
 8000b2a:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	4a08      	ldr	r2, [pc, #32]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b34:	6413      	str	r3, [r2, #64]	; 0x40
 8000b36:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3e:	603b      	str	r3, [r7, #0]
 8000b40:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000b42:	f004 fd79 	bl	8005638 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000b46:	bf00      	nop
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40023800 	.word	0x40023800

08000b54 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b086      	sub	sp, #24
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b5c:	f107 0308 	add.w	r3, r7, #8
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4a0c      	ldr	r2, [pc, #48]	; (8000ba0 <HAL_RTC_MspInit+0x4c>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d111      	bne.n	8000b98 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000b74:	2302      	movs	r3, #2
 8000b76:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000b78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b7c:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b7e:	f107 0308 	add.w	r3, r7, #8
 8000b82:	4618      	mov	r0, r3
 8000b84:	f001 f992 	bl	8001eac <HAL_RCCEx_PeriphCLKConfig>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000b8e:	f7ff ffb3 	bl	8000af8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000b92:	4b04      	ldr	r3, [pc, #16]	; (8000ba4 <HAL_RTC_MspInit+0x50>)
 8000b94:	2201      	movs	r2, #1
 8000b96:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000b98:	bf00      	nop
 8000b9a:	3718      	adds	r7, #24
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40002800 	.word	0x40002800
 8000ba4:	42470e3c 	.word	0x42470e3c

08000ba8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08a      	sub	sp, #40	; 0x28
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a1d      	ldr	r2, [pc, #116]	; (8000c3c <HAL_UART_MspInit+0x94>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d133      	bne.n	8000c32 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	613b      	str	r3, [r7, #16]
 8000bce:	4b1c      	ldr	r3, [pc, #112]	; (8000c40 <HAL_UART_MspInit+0x98>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd2:	4a1b      	ldr	r2, [pc, #108]	; (8000c40 <HAL_UART_MspInit+0x98>)
 8000bd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bda:	4b19      	ldr	r3, [pc, #100]	; (8000c40 <HAL_UART_MspInit+0x98>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000be2:	613b      	str	r3, [r7, #16]
 8000be4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	60fb      	str	r3, [r7, #12]
 8000bea:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <HAL_UART_MspInit+0x98>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	4a14      	ldr	r2, [pc, #80]	; (8000c40 <HAL_UART_MspInit+0x98>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf6:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <HAL_UART_MspInit+0x98>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c02:	230c      	movs	r3, #12
 8000c04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c06:	2302      	movs	r3, #2
 8000c08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0e:	2303      	movs	r3, #3
 8000c10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c12:	2307      	movs	r3, #7
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c16:	f107 0314 	add.w	r3, r7, #20
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4809      	ldr	r0, [pc, #36]	; (8000c44 <HAL_UART_MspInit+0x9c>)
 8000c1e:	f000 fac5 	bl	80011ac <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2106      	movs	r1, #6
 8000c26:	2026      	movs	r0, #38	; 0x26
 8000c28:	f000 fa04 	bl	8001034 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c2c:	2026      	movs	r0, #38	; 0x26
 8000c2e:	f000 fa1d 	bl	800106c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c32:	bf00      	nop
 8000c34:	3728      	adds	r7, #40	; 0x28
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40004400 	.word	0x40004400
 8000c40:	40023800 	.word	0x40023800
 8000c44:	40020000 	.word	0x40020000

08000c48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08e      	sub	sp, #56	; 0x38
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000c54:	2300      	movs	r3, #0
 8000c56:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c58:	2300      	movs	r3, #0
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	4b33      	ldr	r3, [pc, #204]	; (8000d2c <HAL_InitTick+0xe4>)
 8000c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c60:	4a32      	ldr	r2, [pc, #200]	; (8000d2c <HAL_InitTick+0xe4>)
 8000c62:	f043 0310 	orr.w	r3, r3, #16
 8000c66:	6413      	str	r3, [r2, #64]	; 0x40
 8000c68:	4b30      	ldr	r3, [pc, #192]	; (8000d2c <HAL_InitTick+0xe4>)
 8000c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6c:	f003 0310 	and.w	r3, r3, #16
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c74:	f107 0210 	add.w	r2, r7, #16
 8000c78:	f107 0314 	add.w	r3, r7, #20
 8000c7c:	4611      	mov	r1, r2
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f001 f8e2 	bl	8001e48 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c84:	6a3b      	ldr	r3, [r7, #32]
 8000c86:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d103      	bne.n	8000c96 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c8e:	f001 f8b3 	bl	8001df8 <HAL_RCC_GetPCLK1Freq>
 8000c92:	6378      	str	r0, [r7, #52]	; 0x34
 8000c94:	e004      	b.n	8000ca0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c96:	f001 f8af 	bl	8001df8 <HAL_RCC_GetPCLK1Freq>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	005b      	lsls	r3, r3, #1
 8000c9e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ca2:	4a23      	ldr	r2, [pc, #140]	; (8000d30 <HAL_InitTick+0xe8>)
 8000ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ca8:	0c9b      	lsrs	r3, r3, #18
 8000caa:	3b01      	subs	r3, #1
 8000cac:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000cae:	4b21      	ldr	r3, [pc, #132]	; (8000d34 <HAL_InitTick+0xec>)
 8000cb0:	4a21      	ldr	r2, [pc, #132]	; (8000d38 <HAL_InitTick+0xf0>)
 8000cb2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000cb4:	4b1f      	ldr	r3, [pc, #124]	; (8000d34 <HAL_InitTick+0xec>)
 8000cb6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cba:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000cbc:	4a1d      	ldr	r2, [pc, #116]	; (8000d34 <HAL_InitTick+0xec>)
 8000cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cc0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000cc2:	4b1c      	ldr	r3, [pc, #112]	; (8000d34 <HAL_InitTick+0xec>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cc8:	4b1a      	ldr	r3, [pc, #104]	; (8000d34 <HAL_InitTick+0xec>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cce:	4b19      	ldr	r3, [pc, #100]	; (8000d34 <HAL_InitTick+0xec>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000cd4:	4817      	ldr	r0, [pc, #92]	; (8000d34 <HAL_InitTick+0xec>)
 8000cd6:	f001 fac5 	bl	8002264 <HAL_TIM_Base_Init>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000ce0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d11b      	bne.n	8000d20 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000ce8:	4812      	ldr	r0, [pc, #72]	; (8000d34 <HAL_InitTick+0xec>)
 8000cea:	f001 fb15 	bl	8002318 <HAL_TIM_Base_Start_IT>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000cf4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d111      	bne.n	8000d20 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cfc:	2036      	movs	r0, #54	; 0x36
 8000cfe:	f000 f9b5 	bl	800106c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2b0f      	cmp	r3, #15
 8000d06:	d808      	bhi.n	8000d1a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	6879      	ldr	r1, [r7, #4]
 8000d0c:	2036      	movs	r0, #54	; 0x36
 8000d0e:	f000 f991 	bl	8001034 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d12:	4a0a      	ldr	r2, [pc, #40]	; (8000d3c <HAL_InitTick+0xf4>)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6013      	str	r3, [r2, #0]
 8000d18:	e002      	b.n	8000d20 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d20:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3738      	adds	r7, #56	; 0x38
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	431bde83 	.word	0x431bde83
 8000d34:	200000b0 	.word	0x200000b0
 8000d38:	40001000 	.word	0x40001000
 8000d3c:	20000004 	.word	0x20000004

08000d40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <NMI_Handler+0x4>

08000d46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d4a:	e7fe      	b.n	8000d4a <HardFault_Handler+0x4>

08000d4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d50:	e7fe      	b.n	8000d50 <MemManage_Handler+0x4>

08000d52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d56:	e7fe      	b.n	8000d56 <BusFault_Handler+0x4>

08000d58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d5c:	e7fe      	b.n	8000d5c <UsageFault_Handler+0x4>

08000d5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d70:	4802      	ldr	r0, [pc, #8]	; (8000d7c <USART2_IRQHandler+0x10>)
 8000d72:	f001 fd73 	bl	800285c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000050 	.word	0x20000050

08000d80 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d84:	4802      	ldr	r0, [pc, #8]	; (8000d90 <TIM6_DAC_IRQHandler+0x10>)
 8000d86:	f001 fb37 	bl	80023f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	200000b0 	.word	0x200000b0

08000d94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <SystemInit+0x20>)
 8000d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d9e:	4a05      	ldr	r2, [pc, #20]	; (8000db4 <SystemInit+0x20>)
 8000da0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000da4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <menu_task>:

#include "main.h"


void menu_task(void* parameters)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
	while(1)
 8000dc0:	e7fe      	b.n	8000dc0 <menu_task+0x8>

08000dc2 <led_task>:

	}
}

void led_task(void* parameters)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	b083      	sub	sp, #12
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
	while(1)
 8000dca:	e7fe      	b.n	8000dca <led_task+0x8>

08000dcc <rtc_task>:

	}
}

void rtc_task(void* parameters)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
	while(1)
 8000dd4:	e7fe      	b.n	8000dd4 <rtc_task+0x8>

08000dd6 <print_task>:

	}
}

void print_task(void* parameters)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	b083      	sub	sp, #12
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
	while(1)
 8000dde:	e7fe      	b.n	8000dde <print_task+0x8>

08000de0 <command_handling_task>:

	}
}

void command_handling_task(void* parameters)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
	while(1)
 8000de8:	e7fe      	b.n	8000de8 <command_handling_task+0x8>
	...

08000dec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000dec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e24 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000df0:	480d      	ldr	r0, [pc, #52]	; (8000e28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000df2:	490e      	ldr	r1, [pc, #56]	; (8000e2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000df4:	4a0e      	ldr	r2, [pc, #56]	; (8000e30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000df6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df8:	e002      	b.n	8000e00 <LoopCopyDataInit>

08000dfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dfe:	3304      	adds	r3, #4

08000e00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e04:	d3f9      	bcc.n	8000dfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e06:	4a0b      	ldr	r2, [pc, #44]	; (8000e34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e08:	4c0b      	ldr	r4, [pc, #44]	; (8000e38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e0c:	e001      	b.n	8000e12 <LoopFillZerobss>

08000e0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e10:	3204      	adds	r2, #4

08000e12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e14:	d3fb      	bcc.n	8000e0e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e16:	f7ff ffbd 	bl	8000d94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e1a:	f004 ffad 	bl	8005d78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e1e:	f7ff fb59 	bl	80004d4 <main>
  bx  lr    
 8000e22:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e2c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000e30:	08005e64 	.word	0x08005e64
  ldr r2, =_sbss
 8000e34:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000e38:	20012ea4 	.word	0x20012ea4

08000e3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e3c:	e7fe      	b.n	8000e3c <ADC_IRQHandler>
	...

08000e40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e44:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <HAL_Init+0x40>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a0d      	ldr	r2, [pc, #52]	; (8000e80 <HAL_Init+0x40>)
 8000e4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e50:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <HAL_Init+0x40>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a0a      	ldr	r2, [pc, #40]	; (8000e80 <HAL_Init+0x40>)
 8000e56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e5c:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <HAL_Init+0x40>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a07      	ldr	r2, [pc, #28]	; (8000e80 <HAL_Init+0x40>)
 8000e62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e68:	2003      	movs	r0, #3
 8000e6a:	f000 f8d8 	bl	800101e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e6e:	2000      	movs	r0, #0
 8000e70:	f7ff feea 	bl	8000c48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e74:	f7ff fe46 	bl	8000b04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40023c00 	.word	0x40023c00

08000e84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <HAL_IncTick+0x20>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <HAL_IncTick+0x24>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4413      	add	r3, r2
 8000e94:	4a04      	ldr	r2, [pc, #16]	; (8000ea8 <HAL_IncTick+0x24>)
 8000e96:	6013      	str	r3, [r2, #0]
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	20000008 	.word	0x20000008
 8000ea8:	200000f8 	.word	0x200000f8

08000eac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb0:	4b03      	ldr	r3, [pc, #12]	; (8000ec0 <HAL_GetTick+0x14>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	200000f8 	.word	0x200000f8

08000ec4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed4:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eda:	68ba      	ldr	r2, [r7, #8]
 8000edc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ef6:	4a04      	ldr	r2, [pc, #16]	; (8000f08 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	60d3      	str	r3, [r2, #12]
}
 8000efc:	bf00      	nop
 8000efe:	3714      	adds	r7, #20
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f10:	4b04      	ldr	r3, [pc, #16]	; (8000f24 <__NVIC_GetPriorityGrouping+0x18>)
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	0a1b      	lsrs	r3, r3, #8
 8000f16:	f003 0307 	and.w	r3, r3, #7
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	db0b      	blt.n	8000f52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	f003 021f 	and.w	r2, r3, #31
 8000f40:	4907      	ldr	r1, [pc, #28]	; (8000f60 <__NVIC_EnableIRQ+0x38>)
 8000f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f46:	095b      	lsrs	r3, r3, #5
 8000f48:	2001      	movs	r0, #1
 8000f4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f52:	bf00      	nop
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	e000e100 	.word	0xe000e100

08000f64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	6039      	str	r1, [r7, #0]
 8000f6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	db0a      	blt.n	8000f8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	b2da      	uxtb	r2, r3
 8000f7c:	490c      	ldr	r1, [pc, #48]	; (8000fb0 <__NVIC_SetPriority+0x4c>)
 8000f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f82:	0112      	lsls	r2, r2, #4
 8000f84:	b2d2      	uxtb	r2, r2
 8000f86:	440b      	add	r3, r1
 8000f88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f8c:	e00a      	b.n	8000fa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	b2da      	uxtb	r2, r3
 8000f92:	4908      	ldr	r1, [pc, #32]	; (8000fb4 <__NVIC_SetPriority+0x50>)
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	f003 030f 	and.w	r3, r3, #15
 8000f9a:	3b04      	subs	r3, #4
 8000f9c:	0112      	lsls	r2, r2, #4
 8000f9e:	b2d2      	uxtb	r2, r2
 8000fa0:	440b      	add	r3, r1
 8000fa2:	761a      	strb	r2, [r3, #24]
}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	e000e100 	.word	0xe000e100
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b089      	sub	sp, #36	; 0x24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	f003 0307 	and.w	r3, r3, #7
 8000fca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	f1c3 0307 	rsb	r3, r3, #7
 8000fd2:	2b04      	cmp	r3, #4
 8000fd4:	bf28      	it	cs
 8000fd6:	2304      	movcs	r3, #4
 8000fd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	3304      	adds	r3, #4
 8000fde:	2b06      	cmp	r3, #6
 8000fe0:	d902      	bls.n	8000fe8 <NVIC_EncodePriority+0x30>
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	3b03      	subs	r3, #3
 8000fe6:	e000      	b.n	8000fea <NVIC_EncodePriority+0x32>
 8000fe8:	2300      	movs	r3, #0
 8000fea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fec:	f04f 32ff 	mov.w	r2, #4294967295
 8000ff0:	69bb      	ldr	r3, [r7, #24]
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	43da      	mvns	r2, r3
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	401a      	ands	r2, r3
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001000:	f04f 31ff 	mov.w	r1, #4294967295
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	fa01 f303 	lsl.w	r3, r1, r3
 800100a:	43d9      	mvns	r1, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001010:	4313      	orrs	r3, r2
         );
}
 8001012:	4618      	mov	r0, r3
 8001014:	3724      	adds	r7, #36	; 0x24
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b082      	sub	sp, #8
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f7ff ff4c 	bl	8000ec4 <__NVIC_SetPriorityGrouping>
}
 800102c:	bf00      	nop
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
 8001040:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001042:	2300      	movs	r3, #0
 8001044:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001046:	f7ff ff61 	bl	8000f0c <__NVIC_GetPriorityGrouping>
 800104a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	68b9      	ldr	r1, [r7, #8]
 8001050:	6978      	ldr	r0, [r7, #20]
 8001052:	f7ff ffb1 	bl	8000fb8 <NVIC_EncodePriority>
 8001056:	4602      	mov	r2, r0
 8001058:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800105c:	4611      	mov	r1, r2
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff ff80 	bl	8000f64 <__NVIC_SetPriority>
}
 8001064:	bf00      	nop
 8001066:	3718      	adds	r7, #24
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff ff54 	bl	8000f28 <__NVIC_EnableIRQ>
}
 8001080:	bf00      	nop
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001094:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001096:	f7ff ff09 	bl	8000eac <HAL_GetTick>
 800109a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d008      	beq.n	80010ba <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2280      	movs	r2, #128	; 0x80
 80010ac:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2200      	movs	r2, #0
 80010b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e052      	b.n	8001160 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f022 0216 	bic.w	r2, r2, #22
 80010c8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	695a      	ldr	r2, [r3, #20]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010d8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d103      	bne.n	80010ea <HAL_DMA_Abort+0x62>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d007      	beq.n	80010fa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f022 0208 	bic.w	r2, r2, #8
 80010f8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f022 0201 	bic.w	r2, r2, #1
 8001108:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800110a:	e013      	b.n	8001134 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800110c:	f7ff fece 	bl	8000eac <HAL_GetTick>
 8001110:	4602      	mov	r2, r0
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	2b05      	cmp	r3, #5
 8001118:	d90c      	bls.n	8001134 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2220      	movs	r2, #32
 800111e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2203      	movs	r2, #3
 8001124:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2200      	movs	r2, #0
 800112c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001130:	2303      	movs	r3, #3
 8001132:	e015      	b.n	8001160 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	2b00      	cmp	r3, #0
 8001140:	d1e4      	bne.n	800110c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001146:	223f      	movs	r2, #63	; 0x3f
 8001148:	409a      	lsls	r2, r3
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2201      	movs	r2, #1
 8001152:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2200      	movs	r2, #0
 800115a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800115e:	2300      	movs	r3, #0
}
 8001160:	4618      	mov	r0, r3
 8001162:	3710      	adds	r7, #16
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001176:	b2db      	uxtb	r3, r3
 8001178:	2b02      	cmp	r3, #2
 800117a:	d004      	beq.n	8001186 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2280      	movs	r2, #128	; 0x80
 8001180:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e00c      	b.n	80011a0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2205      	movs	r2, #5
 800118a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f022 0201 	bic.w	r2, r2, #1
 800119c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800119e:	2300      	movs	r3, #0
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b089      	sub	sp, #36	; 0x24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011b6:	2300      	movs	r3, #0
 80011b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011ba:	2300      	movs	r3, #0
 80011bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011be:	2300      	movs	r3, #0
 80011c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011c2:	2300      	movs	r3, #0
 80011c4:	61fb      	str	r3, [r7, #28]
 80011c6:	e16b      	b.n	80014a0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011c8:	2201      	movs	r2, #1
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	697a      	ldr	r2, [r7, #20]
 80011d8:	4013      	ands	r3, r2
 80011da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011dc:	693a      	ldr	r2, [r7, #16]
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	f040 815a 	bne.w	800149a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f003 0303 	and.w	r3, r3, #3
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d005      	beq.n	80011fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d130      	bne.n	8001260 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	2203      	movs	r2, #3
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	43db      	mvns	r3, r3
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4013      	ands	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	68da      	ldr	r2, [r3, #12]
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4313      	orrs	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001234:	2201      	movs	r2, #1
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	43db      	mvns	r3, r3
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4013      	ands	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	091b      	lsrs	r3, r3, #4
 800124a:	f003 0201 	and.w	r2, r3, #1
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4313      	orrs	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f003 0303 	and.w	r3, r3, #3
 8001268:	2b03      	cmp	r3, #3
 800126a:	d017      	beq.n	800129c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	2203      	movs	r2, #3
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	43db      	mvns	r3, r3
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4013      	ands	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	689a      	ldr	r2, [r3, #8]
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4313      	orrs	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f003 0303 	and.w	r3, r3, #3
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d123      	bne.n	80012f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	08da      	lsrs	r2, r3, #3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3208      	adds	r2, #8
 80012b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	f003 0307 	and.w	r3, r3, #7
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	220f      	movs	r2, #15
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	43db      	mvns	r3, r3
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4013      	ands	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	691a      	ldr	r2, [r3, #16]
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	f003 0307 	and.w	r3, r3, #7
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	4313      	orrs	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	08da      	lsrs	r2, r3, #3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	3208      	adds	r2, #8
 80012ea:	69b9      	ldr	r1, [r7, #24]
 80012ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	2203      	movs	r2, #3
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	43db      	mvns	r3, r3
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4013      	ands	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f003 0203 	and.w	r2, r3, #3
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4313      	orrs	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800132c:	2b00      	cmp	r3, #0
 800132e:	f000 80b4 	beq.w	800149a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	60fb      	str	r3, [r7, #12]
 8001336:	4b60      	ldr	r3, [pc, #384]	; (80014b8 <HAL_GPIO_Init+0x30c>)
 8001338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133a:	4a5f      	ldr	r2, [pc, #380]	; (80014b8 <HAL_GPIO_Init+0x30c>)
 800133c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001340:	6453      	str	r3, [r2, #68]	; 0x44
 8001342:	4b5d      	ldr	r3, [pc, #372]	; (80014b8 <HAL_GPIO_Init+0x30c>)
 8001344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001346:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800134e:	4a5b      	ldr	r2, [pc, #364]	; (80014bc <HAL_GPIO_Init+0x310>)
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	089b      	lsrs	r3, r3, #2
 8001354:	3302      	adds	r3, #2
 8001356:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800135a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	f003 0303 	and.w	r3, r3, #3
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	220f      	movs	r2, #15
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	43db      	mvns	r3, r3
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	4013      	ands	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a52      	ldr	r2, [pc, #328]	; (80014c0 <HAL_GPIO_Init+0x314>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d02b      	beq.n	80013d2 <HAL_GPIO_Init+0x226>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a51      	ldr	r2, [pc, #324]	; (80014c4 <HAL_GPIO_Init+0x318>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d025      	beq.n	80013ce <HAL_GPIO_Init+0x222>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a50      	ldr	r2, [pc, #320]	; (80014c8 <HAL_GPIO_Init+0x31c>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d01f      	beq.n	80013ca <HAL_GPIO_Init+0x21e>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a4f      	ldr	r2, [pc, #316]	; (80014cc <HAL_GPIO_Init+0x320>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d019      	beq.n	80013c6 <HAL_GPIO_Init+0x21a>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a4e      	ldr	r2, [pc, #312]	; (80014d0 <HAL_GPIO_Init+0x324>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d013      	beq.n	80013c2 <HAL_GPIO_Init+0x216>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a4d      	ldr	r2, [pc, #308]	; (80014d4 <HAL_GPIO_Init+0x328>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d00d      	beq.n	80013be <HAL_GPIO_Init+0x212>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a4c      	ldr	r2, [pc, #304]	; (80014d8 <HAL_GPIO_Init+0x32c>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d007      	beq.n	80013ba <HAL_GPIO_Init+0x20e>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a4b      	ldr	r2, [pc, #300]	; (80014dc <HAL_GPIO_Init+0x330>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d101      	bne.n	80013b6 <HAL_GPIO_Init+0x20a>
 80013b2:	2307      	movs	r3, #7
 80013b4:	e00e      	b.n	80013d4 <HAL_GPIO_Init+0x228>
 80013b6:	2308      	movs	r3, #8
 80013b8:	e00c      	b.n	80013d4 <HAL_GPIO_Init+0x228>
 80013ba:	2306      	movs	r3, #6
 80013bc:	e00a      	b.n	80013d4 <HAL_GPIO_Init+0x228>
 80013be:	2305      	movs	r3, #5
 80013c0:	e008      	b.n	80013d4 <HAL_GPIO_Init+0x228>
 80013c2:	2304      	movs	r3, #4
 80013c4:	e006      	b.n	80013d4 <HAL_GPIO_Init+0x228>
 80013c6:	2303      	movs	r3, #3
 80013c8:	e004      	b.n	80013d4 <HAL_GPIO_Init+0x228>
 80013ca:	2302      	movs	r3, #2
 80013cc:	e002      	b.n	80013d4 <HAL_GPIO_Init+0x228>
 80013ce:	2301      	movs	r3, #1
 80013d0:	e000      	b.n	80013d4 <HAL_GPIO_Init+0x228>
 80013d2:	2300      	movs	r3, #0
 80013d4:	69fa      	ldr	r2, [r7, #28]
 80013d6:	f002 0203 	and.w	r2, r2, #3
 80013da:	0092      	lsls	r2, r2, #2
 80013dc:	4093      	lsls	r3, r2
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013e4:	4935      	ldr	r1, [pc, #212]	; (80014bc <HAL_GPIO_Init+0x310>)
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	089b      	lsrs	r3, r3, #2
 80013ea:	3302      	adds	r3, #2
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013f2:	4b3b      	ldr	r3, [pc, #236]	; (80014e0 <HAL_GPIO_Init+0x334>)
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	43db      	mvns	r3, r3
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	4013      	ands	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d003      	beq.n	8001416 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	4313      	orrs	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001416:	4a32      	ldr	r2, [pc, #200]	; (80014e0 <HAL_GPIO_Init+0x334>)
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800141c:	4b30      	ldr	r3, [pc, #192]	; (80014e0 <HAL_GPIO_Init+0x334>)
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	43db      	mvns	r3, r3
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	4013      	ands	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d003      	beq.n	8001440 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	4313      	orrs	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001440:	4a27      	ldr	r2, [pc, #156]	; (80014e0 <HAL_GPIO_Init+0x334>)
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001446:	4b26      	ldr	r3, [pc, #152]	; (80014e0 <HAL_GPIO_Init+0x334>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	43db      	mvns	r3, r3
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	4013      	ands	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d003      	beq.n	800146a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	4313      	orrs	r3, r2
 8001468:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800146a:	4a1d      	ldr	r2, [pc, #116]	; (80014e0 <HAL_GPIO_Init+0x334>)
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001470:	4b1b      	ldr	r3, [pc, #108]	; (80014e0 <HAL_GPIO_Init+0x334>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	43db      	mvns	r3, r3
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	4013      	ands	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d003      	beq.n	8001494 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	4313      	orrs	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001494:	4a12      	ldr	r2, [pc, #72]	; (80014e0 <HAL_GPIO_Init+0x334>)
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	3301      	adds	r3, #1
 800149e:	61fb      	str	r3, [r7, #28]
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	2b0f      	cmp	r3, #15
 80014a4:	f67f ae90 	bls.w	80011c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014a8:	bf00      	nop
 80014aa:	bf00      	nop
 80014ac:	3724      	adds	r7, #36	; 0x24
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	40023800 	.word	0x40023800
 80014bc:	40013800 	.word	0x40013800
 80014c0:	40020000 	.word	0x40020000
 80014c4:	40020400 	.word	0x40020400
 80014c8:	40020800 	.word	0x40020800
 80014cc:	40020c00 	.word	0x40020c00
 80014d0:	40021000 	.word	0x40021000
 80014d4:	40021400 	.word	0x40021400
 80014d8:	40021800 	.word	0x40021800
 80014dc:	40021c00 	.word	0x40021c00
 80014e0:	40013c00 	.word	0x40013c00

080014e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	460b      	mov	r3, r1
 80014ee:	807b      	strh	r3, [r7, #2]
 80014f0:	4613      	mov	r3, r2
 80014f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014f4:	787b      	ldrb	r3, [r7, #1]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d003      	beq.n	8001502 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014fa:	887a      	ldrh	r2, [r7, #2]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001500:	e003      	b.n	800150a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001502:	887b      	ldrh	r3, [r7, #2]
 8001504:	041a      	lsls	r2, r3, #16
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	619a      	str	r2, [r3, #24]
}
 800150a:	bf00      	nop
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
	...

08001518 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d101      	bne.n	800152a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e267      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	2b00      	cmp	r3, #0
 8001534:	d075      	beq.n	8001622 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001536:	4b88      	ldr	r3, [pc, #544]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	f003 030c 	and.w	r3, r3, #12
 800153e:	2b04      	cmp	r3, #4
 8001540:	d00c      	beq.n	800155c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001542:	4b85      	ldr	r3, [pc, #532]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800154a:	2b08      	cmp	r3, #8
 800154c:	d112      	bne.n	8001574 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800154e:	4b82      	ldr	r3, [pc, #520]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001556:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800155a:	d10b      	bne.n	8001574 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800155c:	4b7e      	ldr	r3, [pc, #504]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d05b      	beq.n	8001620 <HAL_RCC_OscConfig+0x108>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d157      	bne.n	8001620 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e242      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800157c:	d106      	bne.n	800158c <HAL_RCC_OscConfig+0x74>
 800157e:	4b76      	ldr	r3, [pc, #472]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a75      	ldr	r2, [pc, #468]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 8001584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001588:	6013      	str	r3, [r2, #0]
 800158a:	e01d      	b.n	80015c8 <HAL_RCC_OscConfig+0xb0>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001594:	d10c      	bne.n	80015b0 <HAL_RCC_OscConfig+0x98>
 8001596:	4b70      	ldr	r3, [pc, #448]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a6f      	ldr	r2, [pc, #444]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 800159c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015a0:	6013      	str	r3, [r2, #0]
 80015a2:	4b6d      	ldr	r3, [pc, #436]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a6c      	ldr	r2, [pc, #432]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 80015a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015ac:	6013      	str	r3, [r2, #0]
 80015ae:	e00b      	b.n	80015c8 <HAL_RCC_OscConfig+0xb0>
 80015b0:	4b69      	ldr	r3, [pc, #420]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a68      	ldr	r2, [pc, #416]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 80015b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015ba:	6013      	str	r3, [r2, #0]
 80015bc:	4b66      	ldr	r3, [pc, #408]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a65      	ldr	r2, [pc, #404]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 80015c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d013      	beq.n	80015f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d0:	f7ff fc6c 	bl	8000eac <HAL_GetTick>
 80015d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015d6:	e008      	b.n	80015ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015d8:	f7ff fc68 	bl	8000eac <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b64      	cmp	r3, #100	; 0x64
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e207      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ea:	4b5b      	ldr	r3, [pc, #364]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d0f0      	beq.n	80015d8 <HAL_RCC_OscConfig+0xc0>
 80015f6:	e014      	b.n	8001622 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f8:	f7ff fc58 	bl	8000eac <HAL_GetTick>
 80015fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015fe:	e008      	b.n	8001612 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001600:	f7ff fc54 	bl	8000eac <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b64      	cmp	r3, #100	; 0x64
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e1f3      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001612:	4b51      	ldr	r3, [pc, #324]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d1f0      	bne.n	8001600 <HAL_RCC_OscConfig+0xe8>
 800161e:	e000      	b.n	8001622 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001620:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d063      	beq.n	80016f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800162e:	4b4a      	ldr	r3, [pc, #296]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f003 030c 	and.w	r3, r3, #12
 8001636:	2b00      	cmp	r3, #0
 8001638:	d00b      	beq.n	8001652 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800163a:	4b47      	ldr	r3, [pc, #284]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001642:	2b08      	cmp	r3, #8
 8001644:	d11c      	bne.n	8001680 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001646:	4b44      	ldr	r3, [pc, #272]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d116      	bne.n	8001680 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001652:	4b41      	ldr	r3, [pc, #260]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d005      	beq.n	800166a <HAL_RCC_OscConfig+0x152>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	2b01      	cmp	r3, #1
 8001664:	d001      	beq.n	800166a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e1c7      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800166a:	4b3b      	ldr	r3, [pc, #236]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	691b      	ldr	r3, [r3, #16]
 8001676:	00db      	lsls	r3, r3, #3
 8001678:	4937      	ldr	r1, [pc, #220]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 800167a:	4313      	orrs	r3, r2
 800167c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800167e:	e03a      	b.n	80016f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d020      	beq.n	80016ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001688:	4b34      	ldr	r3, [pc, #208]	; (800175c <HAL_RCC_OscConfig+0x244>)
 800168a:	2201      	movs	r2, #1
 800168c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800168e:	f7ff fc0d 	bl	8000eac <HAL_GetTick>
 8001692:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001694:	e008      	b.n	80016a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001696:	f7ff fc09 	bl	8000eac <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d901      	bls.n	80016a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e1a8      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016a8:	4b2b      	ldr	r3, [pc, #172]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d0f0      	beq.n	8001696 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016b4:	4b28      	ldr	r3, [pc, #160]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	691b      	ldr	r3, [r3, #16]
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	4925      	ldr	r1, [pc, #148]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 80016c4:	4313      	orrs	r3, r2
 80016c6:	600b      	str	r3, [r1, #0]
 80016c8:	e015      	b.n	80016f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016ca:	4b24      	ldr	r3, [pc, #144]	; (800175c <HAL_RCC_OscConfig+0x244>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d0:	f7ff fbec 	bl	8000eac <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016d8:	f7ff fbe8 	bl	8000eac <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e187      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ea:	4b1b      	ldr	r3, [pc, #108]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1f0      	bne.n	80016d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0308 	and.w	r3, r3, #8
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d036      	beq.n	8001770 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	695b      	ldr	r3, [r3, #20]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d016      	beq.n	8001738 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800170a:	4b15      	ldr	r3, [pc, #84]	; (8001760 <HAL_RCC_OscConfig+0x248>)
 800170c:	2201      	movs	r2, #1
 800170e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001710:	f7ff fbcc 	bl	8000eac <HAL_GetTick>
 8001714:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001716:	e008      	b.n	800172a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001718:	f7ff fbc8 	bl	8000eac <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b02      	cmp	r3, #2
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e167      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800172a:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 800172c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d0f0      	beq.n	8001718 <HAL_RCC_OscConfig+0x200>
 8001736:	e01b      	b.n	8001770 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001738:	4b09      	ldr	r3, [pc, #36]	; (8001760 <HAL_RCC_OscConfig+0x248>)
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800173e:	f7ff fbb5 	bl	8000eac <HAL_GetTick>
 8001742:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001744:	e00e      	b.n	8001764 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001746:	f7ff fbb1 	bl	8000eac <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	2b02      	cmp	r3, #2
 8001752:	d907      	bls.n	8001764 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e150      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
 8001758:	40023800 	.word	0x40023800
 800175c:	42470000 	.word	0x42470000
 8001760:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001764:	4b88      	ldr	r3, [pc, #544]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 8001766:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001768:	f003 0302 	and.w	r3, r3, #2
 800176c:	2b00      	cmp	r3, #0
 800176e:	d1ea      	bne.n	8001746 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0304 	and.w	r3, r3, #4
 8001778:	2b00      	cmp	r3, #0
 800177a:	f000 8097 	beq.w	80018ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800177e:	2300      	movs	r3, #0
 8001780:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001782:	4b81      	ldr	r3, [pc, #516]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d10f      	bne.n	80017ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	60bb      	str	r3, [r7, #8]
 8001792:	4b7d      	ldr	r3, [pc, #500]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	4a7c      	ldr	r2, [pc, #496]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 8001798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800179c:	6413      	str	r3, [r2, #64]	; 0x40
 800179e:	4b7a      	ldr	r3, [pc, #488]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 80017a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a6:	60bb      	str	r3, [r7, #8]
 80017a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017aa:	2301      	movs	r3, #1
 80017ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ae:	4b77      	ldr	r3, [pc, #476]	; (800198c <HAL_RCC_OscConfig+0x474>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d118      	bne.n	80017ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017ba:	4b74      	ldr	r3, [pc, #464]	; (800198c <HAL_RCC_OscConfig+0x474>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a73      	ldr	r2, [pc, #460]	; (800198c <HAL_RCC_OscConfig+0x474>)
 80017c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017c6:	f7ff fb71 	bl	8000eac <HAL_GetTick>
 80017ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017cc:	e008      	b.n	80017e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017ce:	f7ff fb6d 	bl	8000eac <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d901      	bls.n	80017e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e10c      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e0:	4b6a      	ldr	r3, [pc, #424]	; (800198c <HAL_RCC_OscConfig+0x474>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d0f0      	beq.n	80017ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d106      	bne.n	8001802 <HAL_RCC_OscConfig+0x2ea>
 80017f4:	4b64      	ldr	r3, [pc, #400]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 80017f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017f8:	4a63      	ldr	r2, [pc, #396]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 80017fa:	f043 0301 	orr.w	r3, r3, #1
 80017fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001800:	e01c      	b.n	800183c <HAL_RCC_OscConfig+0x324>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	2b05      	cmp	r3, #5
 8001808:	d10c      	bne.n	8001824 <HAL_RCC_OscConfig+0x30c>
 800180a:	4b5f      	ldr	r3, [pc, #380]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 800180c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800180e:	4a5e      	ldr	r2, [pc, #376]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 8001810:	f043 0304 	orr.w	r3, r3, #4
 8001814:	6713      	str	r3, [r2, #112]	; 0x70
 8001816:	4b5c      	ldr	r3, [pc, #368]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 8001818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800181a:	4a5b      	ldr	r2, [pc, #364]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 800181c:	f043 0301 	orr.w	r3, r3, #1
 8001820:	6713      	str	r3, [r2, #112]	; 0x70
 8001822:	e00b      	b.n	800183c <HAL_RCC_OscConfig+0x324>
 8001824:	4b58      	ldr	r3, [pc, #352]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 8001826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001828:	4a57      	ldr	r2, [pc, #348]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 800182a:	f023 0301 	bic.w	r3, r3, #1
 800182e:	6713      	str	r3, [r2, #112]	; 0x70
 8001830:	4b55      	ldr	r3, [pc, #340]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 8001832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001834:	4a54      	ldr	r2, [pc, #336]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 8001836:	f023 0304 	bic.w	r3, r3, #4
 800183a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d015      	beq.n	8001870 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001844:	f7ff fb32 	bl	8000eac <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800184a:	e00a      	b.n	8001862 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800184c:	f7ff fb2e 	bl	8000eac <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	f241 3288 	movw	r2, #5000	; 0x1388
 800185a:	4293      	cmp	r3, r2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e0cb      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001862:	4b49      	ldr	r3, [pc, #292]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 8001864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	2b00      	cmp	r3, #0
 800186c:	d0ee      	beq.n	800184c <HAL_RCC_OscConfig+0x334>
 800186e:	e014      	b.n	800189a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001870:	f7ff fb1c 	bl	8000eac <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001876:	e00a      	b.n	800188e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001878:	f7ff fb18 	bl	8000eac <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	f241 3288 	movw	r2, #5000	; 0x1388
 8001886:	4293      	cmp	r3, r2
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e0b5      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800188e:	4b3e      	ldr	r3, [pc, #248]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 8001890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	2b00      	cmp	r3, #0
 8001898:	d1ee      	bne.n	8001878 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800189a:	7dfb      	ldrb	r3, [r7, #23]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d105      	bne.n	80018ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018a0:	4b39      	ldr	r3, [pc, #228]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 80018a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a4:	4a38      	ldr	r2, [pc, #224]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 80018a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	f000 80a1 	beq.w	80019f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018b6:	4b34      	ldr	r3, [pc, #208]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f003 030c 	and.w	r3, r3, #12
 80018be:	2b08      	cmp	r3, #8
 80018c0:	d05c      	beq.n	800197c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	699b      	ldr	r3, [r3, #24]
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d141      	bne.n	800194e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ca:	4b31      	ldr	r3, [pc, #196]	; (8001990 <HAL_RCC_OscConfig+0x478>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d0:	f7ff faec 	bl	8000eac <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018d6:	e008      	b.n	80018ea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018d8:	f7ff fae8 	bl	8000eac <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e087      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ea:	4b27      	ldr	r3, [pc, #156]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d1f0      	bne.n	80018d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	69da      	ldr	r2, [r3, #28]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a1b      	ldr	r3, [r3, #32]
 80018fe:	431a      	orrs	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001904:	019b      	lsls	r3, r3, #6
 8001906:	431a      	orrs	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800190c:	085b      	lsrs	r3, r3, #1
 800190e:	3b01      	subs	r3, #1
 8001910:	041b      	lsls	r3, r3, #16
 8001912:	431a      	orrs	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001918:	061b      	lsls	r3, r3, #24
 800191a:	491b      	ldr	r1, [pc, #108]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 800191c:	4313      	orrs	r3, r2
 800191e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001920:	4b1b      	ldr	r3, [pc, #108]	; (8001990 <HAL_RCC_OscConfig+0x478>)
 8001922:	2201      	movs	r2, #1
 8001924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001926:	f7ff fac1 	bl	8000eac <HAL_GetTick>
 800192a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800192c:	e008      	b.n	8001940 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800192e:	f7ff fabd 	bl	8000eac <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d901      	bls.n	8001940 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e05c      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001940:	4b11      	ldr	r3, [pc, #68]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d0f0      	beq.n	800192e <HAL_RCC_OscConfig+0x416>
 800194c:	e054      	b.n	80019f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800194e:	4b10      	ldr	r3, [pc, #64]	; (8001990 <HAL_RCC_OscConfig+0x478>)
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001954:	f7ff faaa 	bl	8000eac <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800195a:	e008      	b.n	800196e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800195c:	f7ff faa6 	bl	8000eac <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b02      	cmp	r3, #2
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e045      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800196e:	4b06      	ldr	r3, [pc, #24]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1f0      	bne.n	800195c <HAL_RCC_OscConfig+0x444>
 800197a:	e03d      	b.n	80019f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d107      	bne.n	8001994 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e038      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
 8001988:	40023800 	.word	0x40023800
 800198c:	40007000 	.word	0x40007000
 8001990:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001994:	4b1b      	ldr	r3, [pc, #108]	; (8001a04 <HAL_RCC_OscConfig+0x4ec>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d028      	beq.n	80019f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d121      	bne.n	80019f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d11a      	bne.n	80019f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80019c4:	4013      	ands	r3, r2
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d111      	bne.n	80019f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019da:	085b      	lsrs	r3, r3, #1
 80019dc:	3b01      	subs	r3, #1
 80019de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d107      	bne.n	80019f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d001      	beq.n	80019f8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e000      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3718      	adds	r7, #24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40023800 	.word	0x40023800

08001a08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d101      	bne.n	8001a1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e0cc      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a1c:	4b68      	ldr	r3, [pc, #416]	; (8001bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0307 	and.w	r3, r3, #7
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d90c      	bls.n	8001a44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a2a:	4b65      	ldr	r3, [pc, #404]	; (8001bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a2c:	683a      	ldr	r2, [r7, #0]
 8001a2e:	b2d2      	uxtb	r2, r2
 8001a30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a32:	4b63      	ldr	r3, [pc, #396]	; (8001bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0307 	and.w	r3, r3, #7
 8001a3a:	683a      	ldr	r2, [r7, #0]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d001      	beq.n	8001a44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e0b8      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d020      	beq.n	8001a92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0304 	and.w	r3, r3, #4
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d005      	beq.n	8001a68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a5c:	4b59      	ldr	r3, [pc, #356]	; (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	4a58      	ldr	r2, [pc, #352]	; (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0308 	and.w	r3, r3, #8
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d005      	beq.n	8001a80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a74:	4b53      	ldr	r3, [pc, #332]	; (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	4a52      	ldr	r2, [pc, #328]	; (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a80:	4b50      	ldr	r3, [pc, #320]	; (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	494d      	ldr	r1, [pc, #308]	; (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d044      	beq.n	8001b28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d107      	bne.n	8001ab6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa6:	4b47      	ldr	r3, [pc, #284]	; (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d119      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e07f      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d003      	beq.n	8001ac6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ac2:	2b03      	cmp	r3, #3
 8001ac4:	d107      	bne.n	8001ad6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ac6:	4b3f      	ldr	r3, [pc, #252]	; (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d109      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e06f      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ad6:	4b3b      	ldr	r3, [pc, #236]	; (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d101      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e067      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ae6:	4b37      	ldr	r3, [pc, #220]	; (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f023 0203 	bic.w	r2, r3, #3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	4934      	ldr	r1, [pc, #208]	; (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001af4:	4313      	orrs	r3, r2
 8001af6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001af8:	f7ff f9d8 	bl	8000eac <HAL_GetTick>
 8001afc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001afe:	e00a      	b.n	8001b16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b00:	f7ff f9d4 	bl	8000eac <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e04f      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b16:	4b2b      	ldr	r3, [pc, #172]	; (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f003 020c 	and.w	r2, r3, #12
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d1eb      	bne.n	8001b00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b28:	4b25      	ldr	r3, [pc, #148]	; (8001bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0307 	and.w	r3, r3, #7
 8001b30:	683a      	ldr	r2, [r7, #0]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d20c      	bcs.n	8001b50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b36:	4b22      	ldr	r3, [pc, #136]	; (8001bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b38:	683a      	ldr	r2, [r7, #0]
 8001b3a:	b2d2      	uxtb	r2, r2
 8001b3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b3e:	4b20      	ldr	r3, [pc, #128]	; (8001bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0307 	and.w	r3, r3, #7
 8001b46:	683a      	ldr	r2, [r7, #0]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d001      	beq.n	8001b50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e032      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0304 	and.w	r3, r3, #4
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d008      	beq.n	8001b6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b5c:	4b19      	ldr	r3, [pc, #100]	; (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	4916      	ldr	r1, [pc, #88]	; (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0308 	and.w	r3, r3, #8
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d009      	beq.n	8001b8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b7a:	4b12      	ldr	r3, [pc, #72]	; (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	691b      	ldr	r3, [r3, #16]
 8001b86:	00db      	lsls	r3, r3, #3
 8001b88:	490e      	ldr	r1, [pc, #56]	; (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b8e:	f000 f821 	bl	8001bd4 <HAL_RCC_GetSysClockFreq>
 8001b92:	4602      	mov	r2, r0
 8001b94:	4b0b      	ldr	r3, [pc, #44]	; (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	091b      	lsrs	r3, r3, #4
 8001b9a:	f003 030f 	and.w	r3, r3, #15
 8001b9e:	490a      	ldr	r1, [pc, #40]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001ba0:	5ccb      	ldrb	r3, [r1, r3]
 8001ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ba6:	4a09      	ldr	r2, [pc, #36]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001ba8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001baa:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff f84a 	bl	8000c48 <HAL_InitTick>

  return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40023c00 	.word	0x40023c00
 8001bc4:	40023800 	.word	0x40023800
 8001bc8:	08005e3c 	.word	0x08005e3c
 8001bcc:	20000000 	.word	0x20000000
 8001bd0:	20000004 	.word	0x20000004

08001bd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bd8:	b094      	sub	sp, #80	; 0x50
 8001bda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	647b      	str	r3, [r7, #68]	; 0x44
 8001be0:	2300      	movs	r3, #0
 8001be2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001be4:	2300      	movs	r3, #0
 8001be6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001be8:	2300      	movs	r3, #0
 8001bea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bec:	4b79      	ldr	r3, [pc, #484]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f003 030c 	and.w	r3, r3, #12
 8001bf4:	2b08      	cmp	r3, #8
 8001bf6:	d00d      	beq.n	8001c14 <HAL_RCC_GetSysClockFreq+0x40>
 8001bf8:	2b08      	cmp	r3, #8
 8001bfa:	f200 80e1 	bhi.w	8001dc0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d002      	beq.n	8001c08 <HAL_RCC_GetSysClockFreq+0x34>
 8001c02:	2b04      	cmp	r3, #4
 8001c04:	d003      	beq.n	8001c0e <HAL_RCC_GetSysClockFreq+0x3a>
 8001c06:	e0db      	b.n	8001dc0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c08:	4b73      	ldr	r3, [pc, #460]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c0a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001c0c:	e0db      	b.n	8001dc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c0e:	4b73      	ldr	r3, [pc, #460]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x208>)
 8001c10:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c12:	e0d8      	b.n	8001dc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c14:	4b6f      	ldr	r3, [pc, #444]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c1c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c1e:	4b6d      	ldr	r3, [pc, #436]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d063      	beq.n	8001cf2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c2a:	4b6a      	ldr	r3, [pc, #424]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	099b      	lsrs	r3, r3, #6
 8001c30:	2200      	movs	r2, #0
 8001c32:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c34:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c3c:	633b      	str	r3, [r7, #48]	; 0x30
 8001c3e:	2300      	movs	r3, #0
 8001c40:	637b      	str	r3, [r7, #52]	; 0x34
 8001c42:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001c46:	4622      	mov	r2, r4
 8001c48:	462b      	mov	r3, r5
 8001c4a:	f04f 0000 	mov.w	r0, #0
 8001c4e:	f04f 0100 	mov.w	r1, #0
 8001c52:	0159      	lsls	r1, r3, #5
 8001c54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c58:	0150      	lsls	r0, r2, #5
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	4621      	mov	r1, r4
 8001c60:	1a51      	subs	r1, r2, r1
 8001c62:	6139      	str	r1, [r7, #16]
 8001c64:	4629      	mov	r1, r5
 8001c66:	eb63 0301 	sbc.w	r3, r3, r1
 8001c6a:	617b      	str	r3, [r7, #20]
 8001c6c:	f04f 0200 	mov.w	r2, #0
 8001c70:	f04f 0300 	mov.w	r3, #0
 8001c74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c78:	4659      	mov	r1, fp
 8001c7a:	018b      	lsls	r3, r1, #6
 8001c7c:	4651      	mov	r1, sl
 8001c7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c82:	4651      	mov	r1, sl
 8001c84:	018a      	lsls	r2, r1, #6
 8001c86:	4651      	mov	r1, sl
 8001c88:	ebb2 0801 	subs.w	r8, r2, r1
 8001c8c:	4659      	mov	r1, fp
 8001c8e:	eb63 0901 	sbc.w	r9, r3, r1
 8001c92:	f04f 0200 	mov.w	r2, #0
 8001c96:	f04f 0300 	mov.w	r3, #0
 8001c9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ca2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ca6:	4690      	mov	r8, r2
 8001ca8:	4699      	mov	r9, r3
 8001caa:	4623      	mov	r3, r4
 8001cac:	eb18 0303 	adds.w	r3, r8, r3
 8001cb0:	60bb      	str	r3, [r7, #8]
 8001cb2:	462b      	mov	r3, r5
 8001cb4:	eb49 0303 	adc.w	r3, r9, r3
 8001cb8:	60fb      	str	r3, [r7, #12]
 8001cba:	f04f 0200 	mov.w	r2, #0
 8001cbe:	f04f 0300 	mov.w	r3, #0
 8001cc2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001cc6:	4629      	mov	r1, r5
 8001cc8:	024b      	lsls	r3, r1, #9
 8001cca:	4621      	mov	r1, r4
 8001ccc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001cd0:	4621      	mov	r1, r4
 8001cd2:	024a      	lsls	r2, r1, #9
 8001cd4:	4610      	mov	r0, r2
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cda:	2200      	movs	r2, #0
 8001cdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cde:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ce0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ce4:	f7fe fa74 	bl	80001d0 <__aeabi_uldivmod>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	460b      	mov	r3, r1
 8001cec:	4613      	mov	r3, r2
 8001cee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001cf0:	e058      	b.n	8001da4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cf2:	4b38      	ldr	r3, [pc, #224]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	099b      	lsrs	r3, r3, #6
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	4611      	mov	r1, r2
 8001cfe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d02:	623b      	str	r3, [r7, #32]
 8001d04:	2300      	movs	r3, #0
 8001d06:	627b      	str	r3, [r7, #36]	; 0x24
 8001d08:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d0c:	4642      	mov	r2, r8
 8001d0e:	464b      	mov	r3, r9
 8001d10:	f04f 0000 	mov.w	r0, #0
 8001d14:	f04f 0100 	mov.w	r1, #0
 8001d18:	0159      	lsls	r1, r3, #5
 8001d1a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d1e:	0150      	lsls	r0, r2, #5
 8001d20:	4602      	mov	r2, r0
 8001d22:	460b      	mov	r3, r1
 8001d24:	4641      	mov	r1, r8
 8001d26:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d2a:	4649      	mov	r1, r9
 8001d2c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d30:	f04f 0200 	mov.w	r2, #0
 8001d34:	f04f 0300 	mov.w	r3, #0
 8001d38:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d3c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d40:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d44:	ebb2 040a 	subs.w	r4, r2, sl
 8001d48:	eb63 050b 	sbc.w	r5, r3, fp
 8001d4c:	f04f 0200 	mov.w	r2, #0
 8001d50:	f04f 0300 	mov.w	r3, #0
 8001d54:	00eb      	lsls	r3, r5, #3
 8001d56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d5a:	00e2      	lsls	r2, r4, #3
 8001d5c:	4614      	mov	r4, r2
 8001d5e:	461d      	mov	r5, r3
 8001d60:	4643      	mov	r3, r8
 8001d62:	18e3      	adds	r3, r4, r3
 8001d64:	603b      	str	r3, [r7, #0]
 8001d66:	464b      	mov	r3, r9
 8001d68:	eb45 0303 	adc.w	r3, r5, r3
 8001d6c:	607b      	str	r3, [r7, #4]
 8001d6e:	f04f 0200 	mov.w	r2, #0
 8001d72:	f04f 0300 	mov.w	r3, #0
 8001d76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d7a:	4629      	mov	r1, r5
 8001d7c:	028b      	lsls	r3, r1, #10
 8001d7e:	4621      	mov	r1, r4
 8001d80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d84:	4621      	mov	r1, r4
 8001d86:	028a      	lsls	r2, r1, #10
 8001d88:	4610      	mov	r0, r2
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d8e:	2200      	movs	r2, #0
 8001d90:	61bb      	str	r3, [r7, #24]
 8001d92:	61fa      	str	r2, [r7, #28]
 8001d94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d98:	f7fe fa1a 	bl	80001d0 <__aeabi_uldivmod>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	460b      	mov	r3, r1
 8001da0:	4613      	mov	r3, r2
 8001da2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001da4:	4b0b      	ldr	r3, [pc, #44]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	0c1b      	lsrs	r3, r3, #16
 8001daa:	f003 0303 	and.w	r3, r3, #3
 8001dae:	3301      	adds	r3, #1
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001db4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001db6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dbc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001dbe:	e002      	b.n	8001dc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001dc0:	4b05      	ldr	r3, [pc, #20]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001dc2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001dc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3750      	adds	r7, #80	; 0x50
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dd2:	bf00      	nop
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	00f42400 	.word	0x00f42400
 8001ddc:	007a1200 	.word	0x007a1200

08001de0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001de4:	4b03      	ldr	r3, [pc, #12]	; (8001df4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001de6:	681b      	ldr	r3, [r3, #0]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	20000000 	.word	0x20000000

08001df8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001dfc:	f7ff fff0 	bl	8001de0 <HAL_RCC_GetHCLKFreq>
 8001e00:	4602      	mov	r2, r0
 8001e02:	4b05      	ldr	r3, [pc, #20]	; (8001e18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	0a9b      	lsrs	r3, r3, #10
 8001e08:	f003 0307 	and.w	r3, r3, #7
 8001e0c:	4903      	ldr	r1, [pc, #12]	; (8001e1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e0e:	5ccb      	ldrb	r3, [r1, r3]
 8001e10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	08005e4c 	.word	0x08005e4c

08001e20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e24:	f7ff ffdc 	bl	8001de0 <HAL_RCC_GetHCLKFreq>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	4b05      	ldr	r3, [pc, #20]	; (8001e40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	0b5b      	lsrs	r3, r3, #13
 8001e30:	f003 0307 	and.w	r3, r3, #7
 8001e34:	4903      	ldr	r1, [pc, #12]	; (8001e44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e36:	5ccb      	ldrb	r3, [r1, r3]
 8001e38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40023800 	.word	0x40023800
 8001e44:	08005e4c 	.word	0x08005e4c

08001e48 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	220f      	movs	r2, #15
 8001e56:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e58:	4b12      	ldr	r3, [pc, #72]	; (8001ea4 <HAL_RCC_GetClockConfig+0x5c>)
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f003 0203 	and.w	r2, r3, #3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001e64:	4b0f      	ldr	r3, [pc, #60]	; (8001ea4 <HAL_RCC_GetClockConfig+0x5c>)
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001e70:	4b0c      	ldr	r3, [pc, #48]	; (8001ea4 <HAL_RCC_GetClockConfig+0x5c>)
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001e7c:	4b09      	ldr	r3, [pc, #36]	; (8001ea4 <HAL_RCC_GetClockConfig+0x5c>)
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	08db      	lsrs	r3, r3, #3
 8001e82:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e8a:	4b07      	ldr	r3, [pc, #28]	; (8001ea8 <HAL_RCC_GetClockConfig+0x60>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0207 	and.w	r2, r3, #7
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	601a      	str	r2, [r3, #0]
}
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	40023c00 	.word	0x40023c00

08001eac <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0301 	and.w	r3, r3, #1
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d105      	bne.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d035      	beq.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001ed4:	4b62      	ldr	r3, [pc, #392]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001eda:	f7fe ffe7 	bl	8000eac <HAL_GetTick>
 8001ede:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001ee0:	e008      	b.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001ee2:	f7fe ffe3 	bl	8000eac <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e0b0      	b.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001ef4:	4b5b      	ldr	r3, [pc, #364]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d1f0      	bne.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	019a      	lsls	r2, r3, #6
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	071b      	lsls	r3, r3, #28
 8001f0c:	4955      	ldr	r1, [pc, #340]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001f14:	4b52      	ldr	r3, [pc, #328]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001f16:	2201      	movs	r2, #1
 8001f18:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001f1a:	f7fe ffc7 	bl	8000eac <HAL_GetTick>
 8001f1e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001f20:	e008      	b.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001f22:	f7fe ffc3 	bl	8000eac <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e090      	b.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001f34:	4b4b      	ldr	r3, [pc, #300]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d0f0      	beq.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	f000 8083 	beq.w	8002054 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f4e:	2300      	movs	r3, #0
 8001f50:	60fb      	str	r3, [r7, #12]
 8001f52:	4b44      	ldr	r3, [pc, #272]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f56:	4a43      	ldr	r2, [pc, #268]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001f58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f5e:	4b41      	ldr	r3, [pc, #260]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f66:	60fb      	str	r3, [r7, #12]
 8001f68:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001f6a:	4b3f      	ldr	r3, [pc, #252]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a3e      	ldr	r2, [pc, #248]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001f70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f74:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001f76:	f7fe ff99 	bl	8000eac <HAL_GetTick>
 8001f7a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001f7c:	e008      	b.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001f7e:	f7fe ff95 	bl	8000eac <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d901      	bls.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e062      	b.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001f90:	4b35      	ldr	r3, [pc, #212]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d0f0      	beq.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f9c:	4b31      	ldr	r3, [pc, #196]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fa0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fa4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d02f      	beq.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d028      	beq.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001fba:	4b2a      	ldr	r3, [pc, #168]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fc2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001fc4:	4b29      	ldr	r3, [pc, #164]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001fca:	4b28      	ldr	r3, [pc, #160]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001fd0:	4a24      	ldr	r2, [pc, #144]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001fd6:	4b23      	ldr	r3, [pc, #140]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d114      	bne.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001fe2:	f7fe ff63 	bl	8000eac <HAL_GetTick>
 8001fe6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fe8:	e00a      	b.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fea:	f7fe ff5f 	bl	8000eac <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e02a      	b.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002000:	4b18      	ldr	r3, [pc, #96]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d0ee      	beq.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002014:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002018:	d10d      	bne.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800201a:	4b12      	ldr	r3, [pc, #72]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800202a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800202e:	490d      	ldr	r1, [pc, #52]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002030:	4313      	orrs	r3, r2
 8002032:	608b      	str	r3, [r1, #8]
 8002034:	e005      	b.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002036:	4b0b      	ldr	r3, [pc, #44]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	4a0a      	ldr	r2, [pc, #40]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800203c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002040:	6093      	str	r3, [r2, #8]
 8002042:	4b08      	ldr	r3, [pc, #32]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002044:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800204e:	4905      	ldr	r1, [pc, #20]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002050:	4313      	orrs	r3, r2
 8002052:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3718      	adds	r7, #24
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	42470068 	.word	0x42470068
 8002064:	40023800 	.word	0x40023800
 8002068:	40007000 	.word	0x40007000
 800206c:	42470e40 	.word	0x42470e40

08002070 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d101      	bne.n	8002086 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e066      	b.n	8002154 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	7f5b      	ldrb	r3, [r3, #29]
 800208a:	b2db      	uxtb	r3, r3
 800208c:	2b00      	cmp	r3, #0
 800208e:	d105      	bne.n	800209c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f7fe fd5c 	bl	8000b54 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2202      	movs	r2, #2
 80020a0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	22ca      	movs	r2, #202	; 0xca
 80020a8:	625a      	str	r2, [r3, #36]	; 0x24
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2253      	movs	r2, #83	; 0x53
 80020b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 f87a 	bl	80021ac <RTC_EnterInitMode>
 80020b8:	4603      	mov	r3, r0
 80020ba:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80020bc:	7bfb      	ldrb	r3, [r7, #15]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d12c      	bne.n	800211c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	6812      	ldr	r2, [r2, #0]
 80020cc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80020d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80020d4:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	6899      	ldr	r1, [r3, #8]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685a      	ldr	r2, [r3, #4]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	691b      	ldr	r3, [r3, #16]
 80020e4:	431a      	orrs	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	431a      	orrs	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	430a      	orrs	r2, r1
 80020f2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	68d2      	ldr	r2, [r2, #12]
 80020fc:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	6919      	ldr	r1, [r3, #16]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	041a      	lsls	r2, r3, #16
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	430a      	orrs	r2, r1
 8002110:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 f881 	bl	800221a <RTC_ExitInitMode>
 8002118:	4603      	mov	r3, r0
 800211a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800211c:	7bfb      	ldrb	r3, [r7, #15]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d113      	bne.n	800214a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002130:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	699a      	ldr	r2, [r3, #24]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	430a      	orrs	r2, r1
 8002142:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	22ff      	movs	r2, #255	; 0xff
 8002150:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8002152:	7bfb      	ldrb	r3, [r7, #15]
}
 8002154:	4618      	mov	r0, r3
 8002156:	3710      	adds	r7, #16
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002164:	2300      	movs	r3, #0
 8002166:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	68da      	ldr	r2, [r3, #12]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002176:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002178:	f7fe fe98 	bl	8000eac <HAL_GetTick>
 800217c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800217e:	e009      	b.n	8002194 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002180:	f7fe fe94 	bl	8000eac <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800218e:	d901      	bls.n	8002194 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e007      	b.n	80021a4 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	f003 0320 	and.w	r3, r3, #32
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d0ee      	beq.n	8002180 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3710      	adds	r7, #16
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021b4:	2300      	movs	r3, #0
 80021b6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80021b8:	2300      	movs	r3, #0
 80021ba:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d122      	bne.n	8002210 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	68da      	ldr	r2, [r3, #12]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80021d8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80021da:	f7fe fe67 	bl	8000eac <HAL_GetTick>
 80021de:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80021e0:	e00c      	b.n	80021fc <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80021e2:	f7fe fe63 	bl	8000eac <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021f0:	d904      	bls.n	80021fc <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2204      	movs	r2, #4
 80021f6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002206:	2b00      	cmp	r3, #0
 8002208:	d102      	bne.n	8002210 <RTC_EnterInitMode+0x64>
 800220a:	7bfb      	ldrb	r3, [r7, #15]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d1e8      	bne.n	80021e2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002210:	7bfb      	ldrb	r3, [r7, #15]
}
 8002212:	4618      	mov	r0, r3
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b084      	sub	sp, #16
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002222:	2300      	movs	r3, #0
 8002224:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68da      	ldr	r2, [r3, #12]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002234:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f003 0320 	and.w	r3, r3, #32
 8002240:	2b00      	cmp	r3, #0
 8002242:	d10a      	bne.n	800225a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f7ff ff89 	bl	800215c <HAL_RTC_WaitForSynchro>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d004      	beq.n	800225a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2204      	movs	r2, #4
 8002254:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800225a:	7bfb      	ldrb	r3, [r7, #15]
}
 800225c:	4618      	mov	r0, r3
 800225e:	3710      	adds	r7, #16
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e041      	b.n	80022fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	d106      	bne.n	8002290 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f000 f839 	bl	8002302 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2202      	movs	r2, #2
 8002294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	3304      	adds	r3, #4
 80022a0:	4619      	mov	r1, r3
 80022a2:	4610      	mov	r0, r2
 80022a4:	f000 f9d8 	bl	8002658 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002302:	b480      	push	{r7}
 8002304:	b083      	sub	sp, #12
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800230a:	bf00      	nop
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
	...

08002318 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002326:	b2db      	uxtb	r3, r3
 8002328:	2b01      	cmp	r3, #1
 800232a:	d001      	beq.n	8002330 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e04e      	b.n	80023ce <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2202      	movs	r2, #2
 8002334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68da      	ldr	r2, [r3, #12]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f042 0201 	orr.w	r2, r2, #1
 8002346:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a23      	ldr	r2, [pc, #140]	; (80023dc <HAL_TIM_Base_Start_IT+0xc4>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d022      	beq.n	8002398 <HAL_TIM_Base_Start_IT+0x80>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800235a:	d01d      	beq.n	8002398 <HAL_TIM_Base_Start_IT+0x80>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a1f      	ldr	r2, [pc, #124]	; (80023e0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d018      	beq.n	8002398 <HAL_TIM_Base_Start_IT+0x80>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a1e      	ldr	r2, [pc, #120]	; (80023e4 <HAL_TIM_Base_Start_IT+0xcc>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d013      	beq.n	8002398 <HAL_TIM_Base_Start_IT+0x80>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a1c      	ldr	r2, [pc, #112]	; (80023e8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d00e      	beq.n	8002398 <HAL_TIM_Base_Start_IT+0x80>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a1b      	ldr	r2, [pc, #108]	; (80023ec <HAL_TIM_Base_Start_IT+0xd4>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d009      	beq.n	8002398 <HAL_TIM_Base_Start_IT+0x80>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a19      	ldr	r2, [pc, #100]	; (80023f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d004      	beq.n	8002398 <HAL_TIM_Base_Start_IT+0x80>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a18      	ldr	r2, [pc, #96]	; (80023f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d111      	bne.n	80023bc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f003 0307 	and.w	r3, r3, #7
 80023a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2b06      	cmp	r3, #6
 80023a8:	d010      	beq.n	80023cc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f042 0201 	orr.w	r2, r2, #1
 80023b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023ba:	e007      	b.n	80023cc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f042 0201 	orr.w	r2, r2, #1
 80023ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3714      	adds	r7, #20
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	40010000 	.word	0x40010000
 80023e0:	40000400 	.word	0x40000400
 80023e4:	40000800 	.word	0x40000800
 80023e8:	40000c00 	.word	0x40000c00
 80023ec:	40010400 	.word	0x40010400
 80023f0:	40014000 	.word	0x40014000
 80023f4:	40001800 	.word	0x40001800

080023f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b02      	cmp	r3, #2
 800240c:	d122      	bne.n	8002454 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	2b02      	cmp	r3, #2
 800241a:	d11b      	bne.n	8002454 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f06f 0202 	mvn.w	r2, #2
 8002424:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2201      	movs	r2, #1
 800242a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	f003 0303 	and.w	r3, r3, #3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d003      	beq.n	8002442 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 f8ee 	bl	800261c <HAL_TIM_IC_CaptureCallback>
 8002440:	e005      	b.n	800244e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 f8e0 	bl	8002608 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f000 f8f1 	bl	8002630 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	f003 0304 	and.w	r3, r3, #4
 800245e:	2b04      	cmp	r3, #4
 8002460:	d122      	bne.n	80024a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	f003 0304 	and.w	r3, r3, #4
 800246c:	2b04      	cmp	r3, #4
 800246e:	d11b      	bne.n	80024a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f06f 0204 	mvn.w	r2, #4
 8002478:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2202      	movs	r2, #2
 800247e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800248a:	2b00      	cmp	r3, #0
 800248c:	d003      	beq.n	8002496 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 f8c4 	bl	800261c <HAL_TIM_IC_CaptureCallback>
 8002494:	e005      	b.n	80024a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f000 f8b6 	bl	8002608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f000 f8c7 	bl	8002630 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	f003 0308 	and.w	r3, r3, #8
 80024b2:	2b08      	cmp	r3, #8
 80024b4:	d122      	bne.n	80024fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	f003 0308 	and.w	r3, r3, #8
 80024c0:	2b08      	cmp	r3, #8
 80024c2:	d11b      	bne.n	80024fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f06f 0208 	mvn.w	r2, #8
 80024cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2204      	movs	r2, #4
 80024d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	f003 0303 	and.w	r3, r3, #3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d003      	beq.n	80024ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 f89a 	bl	800261c <HAL_TIM_IC_CaptureCallback>
 80024e8:	e005      	b.n	80024f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f000 f88c 	bl	8002608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f000 f89d 	bl	8002630 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	f003 0310 	and.w	r3, r3, #16
 8002506:	2b10      	cmp	r3, #16
 8002508:	d122      	bne.n	8002550 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	f003 0310 	and.w	r3, r3, #16
 8002514:	2b10      	cmp	r3, #16
 8002516:	d11b      	bne.n	8002550 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f06f 0210 	mvn.w	r2, #16
 8002520:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2208      	movs	r2, #8
 8002526:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	69db      	ldr	r3, [r3, #28]
 800252e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002532:	2b00      	cmp	r3, #0
 8002534:	d003      	beq.n	800253e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 f870 	bl	800261c <HAL_TIM_IC_CaptureCallback>
 800253c:	e005      	b.n	800254a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 f862 	bl	8002608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f000 f873 	bl	8002630 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	2b01      	cmp	r3, #1
 800255c:	d10e      	bne.n	800257c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	f003 0301 	and.w	r3, r3, #1
 8002568:	2b01      	cmp	r3, #1
 800256a:	d107      	bne.n	800257c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f06f 0201 	mvn.w	r2, #1
 8002574:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f7fe faac 	bl	8000ad4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002586:	2b80      	cmp	r3, #128	; 0x80
 8002588:	d10e      	bne.n	80025a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002594:	2b80      	cmp	r3, #128	; 0x80
 8002596:	d107      	bne.n	80025a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80025a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f000 f902 	bl	80027ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025b2:	2b40      	cmp	r3, #64	; 0x40
 80025b4:	d10e      	bne.n	80025d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025c0:	2b40      	cmp	r3, #64	; 0x40
 80025c2:	d107      	bne.n	80025d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80025cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 f838 	bl	8002644 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	f003 0320 	and.w	r3, r3, #32
 80025de:	2b20      	cmp	r3, #32
 80025e0:	d10e      	bne.n	8002600 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	f003 0320 	and.w	r3, r3, #32
 80025ec:	2b20      	cmp	r3, #32
 80025ee:	d107      	bne.n	8002600 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f06f 0220 	mvn.w	r2, #32
 80025f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 f8cc 	bl	8002798 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002600:	bf00      	nop
 8002602:	3708      	adds	r7, #8
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002610:	bf00      	nop
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002624:	bf00      	nop
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002638:	bf00      	nop
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a40      	ldr	r2, [pc, #256]	; (800276c <TIM_Base_SetConfig+0x114>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d013      	beq.n	8002698 <TIM_Base_SetConfig+0x40>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002676:	d00f      	beq.n	8002698 <TIM_Base_SetConfig+0x40>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a3d      	ldr	r2, [pc, #244]	; (8002770 <TIM_Base_SetConfig+0x118>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d00b      	beq.n	8002698 <TIM_Base_SetConfig+0x40>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4a3c      	ldr	r2, [pc, #240]	; (8002774 <TIM_Base_SetConfig+0x11c>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d007      	beq.n	8002698 <TIM_Base_SetConfig+0x40>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a3b      	ldr	r2, [pc, #236]	; (8002778 <TIM_Base_SetConfig+0x120>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d003      	beq.n	8002698 <TIM_Base_SetConfig+0x40>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4a3a      	ldr	r2, [pc, #232]	; (800277c <TIM_Base_SetConfig+0x124>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d108      	bne.n	80026aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800269e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a2f      	ldr	r2, [pc, #188]	; (800276c <TIM_Base_SetConfig+0x114>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d02b      	beq.n	800270a <TIM_Base_SetConfig+0xb2>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026b8:	d027      	beq.n	800270a <TIM_Base_SetConfig+0xb2>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a2c      	ldr	r2, [pc, #176]	; (8002770 <TIM_Base_SetConfig+0x118>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d023      	beq.n	800270a <TIM_Base_SetConfig+0xb2>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a2b      	ldr	r2, [pc, #172]	; (8002774 <TIM_Base_SetConfig+0x11c>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d01f      	beq.n	800270a <TIM_Base_SetConfig+0xb2>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a2a      	ldr	r2, [pc, #168]	; (8002778 <TIM_Base_SetConfig+0x120>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d01b      	beq.n	800270a <TIM_Base_SetConfig+0xb2>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a29      	ldr	r2, [pc, #164]	; (800277c <TIM_Base_SetConfig+0x124>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d017      	beq.n	800270a <TIM_Base_SetConfig+0xb2>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a28      	ldr	r2, [pc, #160]	; (8002780 <TIM_Base_SetConfig+0x128>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d013      	beq.n	800270a <TIM_Base_SetConfig+0xb2>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a27      	ldr	r2, [pc, #156]	; (8002784 <TIM_Base_SetConfig+0x12c>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d00f      	beq.n	800270a <TIM_Base_SetConfig+0xb2>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a26      	ldr	r2, [pc, #152]	; (8002788 <TIM_Base_SetConfig+0x130>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d00b      	beq.n	800270a <TIM_Base_SetConfig+0xb2>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a25      	ldr	r2, [pc, #148]	; (800278c <TIM_Base_SetConfig+0x134>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d007      	beq.n	800270a <TIM_Base_SetConfig+0xb2>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a24      	ldr	r2, [pc, #144]	; (8002790 <TIM_Base_SetConfig+0x138>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d003      	beq.n	800270a <TIM_Base_SetConfig+0xb2>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a23      	ldr	r2, [pc, #140]	; (8002794 <TIM_Base_SetConfig+0x13c>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d108      	bne.n	800271c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002710:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	4313      	orrs	r3, r2
 800271a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	4313      	orrs	r3, r2
 8002728:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	68fa      	ldr	r2, [r7, #12]
 800272e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	689a      	ldr	r2, [r3, #8]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4a0a      	ldr	r2, [pc, #40]	; (800276c <TIM_Base_SetConfig+0x114>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d003      	beq.n	8002750 <TIM_Base_SetConfig+0xf8>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4a0c      	ldr	r2, [pc, #48]	; (800277c <TIM_Base_SetConfig+0x124>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d103      	bne.n	8002758 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	691a      	ldr	r2, [r3, #16]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	615a      	str	r2, [r3, #20]
}
 800275e:	bf00      	nop
 8002760:	3714      	adds	r7, #20
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	40010000 	.word	0x40010000
 8002770:	40000400 	.word	0x40000400
 8002774:	40000800 	.word	0x40000800
 8002778:	40000c00 	.word	0x40000c00
 800277c:	40010400 	.word	0x40010400
 8002780:	40014000 	.word	0x40014000
 8002784:	40014400 	.word	0x40014400
 8002788:	40014800 	.word	0x40014800
 800278c:	40001800 	.word	0x40001800
 8002790:	40001c00 	.word	0x40001c00
 8002794:	40002000 	.word	0x40002000

08002798 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80027b4:	bf00      	nop
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d101      	bne.n	80027d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e03f      	b.n	8002852 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d106      	bne.n	80027ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f7fe f9de 	bl	8000ba8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2224      	movs	r2, #36	; 0x24
 80027f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68da      	ldr	r2, [r3, #12]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002802:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f000 fc7b 	bl	8003100 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	691a      	ldr	r2, [r3, #16]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002818:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	695a      	ldr	r2, [r3, #20]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002828:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68da      	ldr	r2, [r3, #12]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002838:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2220      	movs	r2, #32
 8002844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2220      	movs	r2, #32
 800284c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
	...

0800285c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b0ba      	sub	sp, #232	; 0xe8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002882:	2300      	movs	r3, #0
 8002884:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002888:	2300      	movs	r3, #0
 800288a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800288e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002892:	f003 030f 	and.w	r3, r3, #15
 8002896:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800289a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d10f      	bne.n	80028c2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80028a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028a6:	f003 0320 	and.w	r3, r3, #32
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d009      	beq.n	80028c2 <HAL_UART_IRQHandler+0x66>
 80028ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028b2:	f003 0320 	and.w	r3, r3, #32
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d003      	beq.n	80028c2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f000 fb65 	bl	8002f8a <UART_Receive_IT>
      return;
 80028c0:	e256      	b.n	8002d70 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80028c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	f000 80de 	beq.w	8002a88 <HAL_UART_IRQHandler+0x22c>
 80028cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d106      	bne.n	80028e6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80028d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028dc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	f000 80d1 	beq.w	8002a88 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80028e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00b      	beq.n	800290a <HAL_UART_IRQHandler+0xae>
 80028f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d005      	beq.n	800290a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002902:	f043 0201 	orr.w	r2, r3, #1
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800290a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800290e:	f003 0304 	and.w	r3, r3, #4
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00b      	beq.n	800292e <HAL_UART_IRQHandler+0xd2>
 8002916:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	2b00      	cmp	r3, #0
 8002920:	d005      	beq.n	800292e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002926:	f043 0202 	orr.w	r2, r3, #2
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800292e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d00b      	beq.n	8002952 <HAL_UART_IRQHandler+0xf6>
 800293a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	2b00      	cmp	r3, #0
 8002944:	d005      	beq.n	8002952 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294a:	f043 0204 	orr.w	r2, r3, #4
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002956:	f003 0308 	and.w	r3, r3, #8
 800295a:	2b00      	cmp	r3, #0
 800295c:	d011      	beq.n	8002982 <HAL_UART_IRQHandler+0x126>
 800295e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002962:	f003 0320 	and.w	r3, r3, #32
 8002966:	2b00      	cmp	r3, #0
 8002968:	d105      	bne.n	8002976 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800296a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	d005      	beq.n	8002982 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297a:	f043 0208 	orr.w	r2, r3, #8
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002986:	2b00      	cmp	r3, #0
 8002988:	f000 81ed 	beq.w	8002d66 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800298c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002990:	f003 0320 	and.w	r3, r3, #32
 8002994:	2b00      	cmp	r3, #0
 8002996:	d008      	beq.n	80029aa <HAL_UART_IRQHandler+0x14e>
 8002998:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800299c:	f003 0320 	and.w	r3, r3, #32
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d002      	beq.n	80029aa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f000 faf0 	bl	8002f8a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	695b      	ldr	r3, [r3, #20]
 80029b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029b4:	2b40      	cmp	r3, #64	; 0x40
 80029b6:	bf0c      	ite	eq
 80029b8:	2301      	moveq	r3, #1
 80029ba:	2300      	movne	r3, #0
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c6:	f003 0308 	and.w	r3, r3, #8
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d103      	bne.n	80029d6 <HAL_UART_IRQHandler+0x17a>
 80029ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d04f      	beq.n	8002a76 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 f9f8 	bl	8002dcc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029e6:	2b40      	cmp	r3, #64	; 0x40
 80029e8:	d141      	bne.n	8002a6e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	3314      	adds	r3, #20
 80029f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80029f8:	e853 3f00 	ldrex	r3, [r3]
 80029fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002a00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	3314      	adds	r3, #20
 8002a12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002a16:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002a1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002a22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002a26:	e841 2300 	strex	r3, r2, [r1]
 8002a2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002a2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d1d9      	bne.n	80029ea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d013      	beq.n	8002a66 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a42:	4a7d      	ldr	r2, [pc, #500]	; (8002c38 <HAL_UART_IRQHandler+0x3dc>)
 8002a44:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7fe fb8c 	bl	8001168 <HAL_DMA_Abort_IT>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d016      	beq.n	8002a84 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a60:	4610      	mov	r0, r2
 8002a62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a64:	e00e      	b.n	8002a84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 f99a 	bl	8002da0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a6c:	e00a      	b.n	8002a84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 f996 	bl	8002da0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a74:	e006      	b.n	8002a84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 f992 	bl	8002da0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002a82:	e170      	b.n	8002d66 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a84:	bf00      	nop
    return;
 8002a86:	e16e      	b.n	8002d66 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	f040 814a 	bne.w	8002d26 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002a92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a96:	f003 0310 	and.w	r3, r3, #16
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	f000 8143 	beq.w	8002d26 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002aa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002aa4:	f003 0310 	and.w	r3, r3, #16
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f000 813c 	beq.w	8002d26 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002aae:	2300      	movs	r3, #0
 8002ab0:	60bb      	str	r3, [r7, #8]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	60bb      	str	r3, [r7, #8]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	60bb      	str	r3, [r7, #8]
 8002ac2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ace:	2b40      	cmp	r3, #64	; 0x40
 8002ad0:	f040 80b4 	bne.w	8002c3c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002ae0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	f000 8140 	beq.w	8002d6a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002aee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002af2:	429a      	cmp	r2, r3
 8002af4:	f080 8139 	bcs.w	8002d6a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002afe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b04:	69db      	ldr	r3, [r3, #28]
 8002b06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b0a:	f000 8088 	beq.w	8002c1e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	330c      	adds	r3, #12
 8002b14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b1c:	e853 3f00 	ldrex	r3, [r3]
 8002b20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002b24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	330c      	adds	r3, #12
 8002b36:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002b3a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002b3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b42:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002b46:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002b4a:	e841 2300 	strex	r3, r2, [r1]
 8002b4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002b52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d1d9      	bne.n	8002b0e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	3314      	adds	r3, #20
 8002b60:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b64:	e853 3f00 	ldrex	r3, [r3]
 8002b68:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002b6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b6c:	f023 0301 	bic.w	r3, r3, #1
 8002b70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	3314      	adds	r3, #20
 8002b7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002b7e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002b82:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b84:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002b86:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002b8a:	e841 2300 	strex	r3, r2, [r1]
 8002b8e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002b90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1e1      	bne.n	8002b5a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	3314      	adds	r3, #20
 8002b9c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ba0:	e853 3f00 	ldrex	r3, [r3]
 8002ba4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002ba6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ba8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	3314      	adds	r3, #20
 8002bb6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002bba:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002bbc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bbe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002bc0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002bc2:	e841 2300 	strex	r3, r2, [r1]
 8002bc6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002bc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1e3      	bne.n	8002b96 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2220      	movs	r2, #32
 8002bd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	330c      	adds	r3, #12
 8002be2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002be4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002be6:	e853 3f00 	ldrex	r3, [r3]
 8002bea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002bec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bee:	f023 0310 	bic.w	r3, r3, #16
 8002bf2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	330c      	adds	r3, #12
 8002bfc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002c00:	65ba      	str	r2, [r7, #88]	; 0x58
 8002c02:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c04:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002c06:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c08:	e841 2300 	strex	r3, r2, [r1]
 8002c0c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002c0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1e3      	bne.n	8002bdc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7fe fa35 	bl	8001088 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 f8c0 	bl	8002db4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002c34:	e099      	b.n	8002d6a <HAL_UART_IRQHandler+0x50e>
 8002c36:	bf00      	nop
 8002c38:	08002e93 	.word	0x08002e93
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	f000 808b 	beq.w	8002d6e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002c58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f000 8086 	beq.w	8002d6e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	330c      	adds	r3, #12
 8002c68:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c6c:	e853 3f00 	ldrex	r3, [r3]
 8002c70:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002c78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	330c      	adds	r3, #12
 8002c82:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002c86:	647a      	str	r2, [r7, #68]	; 0x44
 8002c88:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c8a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002c8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c8e:	e841 2300 	strex	r3, r2, [r1]
 8002c92:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002c94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d1e3      	bne.n	8002c62 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	3314      	adds	r3, #20
 8002ca0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca4:	e853 3f00 	ldrex	r3, [r3]
 8002ca8:	623b      	str	r3, [r7, #32]
   return(result);
 8002caa:	6a3b      	ldr	r3, [r7, #32]
 8002cac:	f023 0301 	bic.w	r3, r3, #1
 8002cb0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	3314      	adds	r3, #20
 8002cba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002cbe:	633a      	str	r2, [r7, #48]	; 0x30
 8002cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002cc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cc6:	e841 2300 	strex	r3, r2, [r1]
 8002cca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d1e3      	bne.n	8002c9a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2220      	movs	r2, #32
 8002cd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	330c      	adds	r3, #12
 8002ce6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	e853 3f00 	ldrex	r3, [r3]
 8002cee:	60fb      	str	r3, [r7, #12]
   return(result);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f023 0310 	bic.w	r3, r3, #16
 8002cf6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	330c      	adds	r3, #12
 8002d00:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002d04:	61fa      	str	r2, [r7, #28]
 8002d06:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d08:	69b9      	ldr	r1, [r7, #24]
 8002d0a:	69fa      	ldr	r2, [r7, #28]
 8002d0c:	e841 2300 	strex	r3, r2, [r1]
 8002d10:	617b      	str	r3, [r7, #20]
   return(result);
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d1e3      	bne.n	8002ce0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002d18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 f848 	bl	8002db4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002d24:	e023      	b.n	8002d6e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d009      	beq.n	8002d46 <HAL_UART_IRQHandler+0x4ea>
 8002d32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d003      	beq.n	8002d46 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 f8bb 	bl	8002eba <UART_Transmit_IT>
    return;
 8002d44:	e014      	b.n	8002d70 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00e      	beq.n	8002d70 <HAL_UART_IRQHandler+0x514>
 8002d52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d008      	beq.n	8002d70 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 f8fb 	bl	8002f5a <UART_EndTransmit_IT>
    return;
 8002d64:	e004      	b.n	8002d70 <HAL_UART_IRQHandler+0x514>
    return;
 8002d66:	bf00      	nop
 8002d68:	e002      	b.n	8002d70 <HAL_UART_IRQHandler+0x514>
      return;
 8002d6a:	bf00      	nop
 8002d6c:	e000      	b.n	8002d70 <HAL_UART_IRQHandler+0x514>
      return;
 8002d6e:	bf00      	nop
  }
}
 8002d70:	37e8      	adds	r7, #232	; 0xe8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop

08002d78 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002d80:	bf00      	nop
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002d94:	bf00      	nop
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002dc0:	bf00      	nop
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b095      	sub	sp, #84	; 0x54
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	330c      	adds	r3, #12
 8002dda:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dde:	e853 3f00 	ldrex	r3, [r3]
 8002de2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002dea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	330c      	adds	r3, #12
 8002df2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002df4:	643a      	str	r2, [r7, #64]	; 0x40
 8002df6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002df8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002dfa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002dfc:	e841 2300 	strex	r3, r2, [r1]
 8002e00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d1e5      	bne.n	8002dd4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	3314      	adds	r3, #20
 8002e0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e10:	6a3b      	ldr	r3, [r7, #32]
 8002e12:	e853 3f00 	ldrex	r3, [r3]
 8002e16:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	f023 0301 	bic.w	r3, r3, #1
 8002e1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	3314      	adds	r3, #20
 8002e26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e28:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e30:	e841 2300 	strex	r3, r2, [r1]
 8002e34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d1e5      	bne.n	8002e08 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d119      	bne.n	8002e78 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	330c      	adds	r3, #12
 8002e4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	e853 3f00 	ldrex	r3, [r3]
 8002e52:	60bb      	str	r3, [r7, #8]
   return(result);
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	f023 0310 	bic.w	r3, r3, #16
 8002e5a:	647b      	str	r3, [r7, #68]	; 0x44
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	330c      	adds	r3, #12
 8002e62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e64:	61ba      	str	r2, [r7, #24]
 8002e66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e68:	6979      	ldr	r1, [r7, #20]
 8002e6a:	69ba      	ldr	r2, [r7, #24]
 8002e6c:	e841 2300 	strex	r3, r2, [r1]
 8002e70:	613b      	str	r3, [r7, #16]
   return(result);
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d1e5      	bne.n	8002e44 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2220      	movs	r2, #32
 8002e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002e86:	bf00      	nop
 8002e88:	3754      	adds	r7, #84	; 0x54
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr

08002e92 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002e92:	b580      	push	{r7, lr}
 8002e94:	b084      	sub	sp, #16
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e9e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002eac:	68f8      	ldr	r0, [r7, #12]
 8002eae:	f7ff ff77 	bl	8002da0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002eb2:	bf00      	nop
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	b085      	sub	sp, #20
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b21      	cmp	r3, #33	; 0x21
 8002ecc:	d13e      	bne.n	8002f4c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ed6:	d114      	bne.n	8002f02 <UART_Transmit_IT+0x48>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d110      	bne.n	8002f02 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a1b      	ldr	r3, [r3, #32]
 8002ee4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	881b      	ldrh	r3, [r3, #0]
 8002eea:	461a      	mov	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ef4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
 8002efa:	1c9a      	adds	r2, r3, #2
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	621a      	str	r2, [r3, #32]
 8002f00:	e008      	b.n	8002f14 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a1b      	ldr	r3, [r3, #32]
 8002f06:	1c59      	adds	r1, r3, #1
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	6211      	str	r1, [r2, #32]
 8002f0c:	781a      	ldrb	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	4619      	mov	r1, r3
 8002f22:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d10f      	bne.n	8002f48 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68da      	ldr	r2, [r3, #12]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f36:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68da      	ldr	r2, [r3, #12]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f46:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	e000      	b.n	8002f4e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002f4c:	2302      	movs	r3, #2
  }
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3714      	adds	r7, #20
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr

08002f5a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b082      	sub	sp, #8
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68da      	ldr	r2, [r3, #12]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f70:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2220      	movs	r2, #32
 8002f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f7ff fefc 	bl	8002d78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3708      	adds	r7, #8
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b08c      	sub	sp, #48	; 0x30
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b22      	cmp	r3, #34	; 0x22
 8002f9c:	f040 80ab 	bne.w	80030f6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fa8:	d117      	bne.n	8002fda <UART_Receive_IT+0x50>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d113      	bne.n	8002fda <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fba:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fcc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd2:	1c9a      	adds	r2, r3, #2
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	629a      	str	r2, [r3, #40]	; 0x28
 8002fd8:	e026      	b.n	8003028 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fde:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fec:	d007      	beq.n	8002ffe <UART_Receive_IT+0x74>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d10a      	bne.n	800300c <UART_Receive_IT+0x82>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d106      	bne.n	800300c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	b2da      	uxtb	r2, r3
 8003006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003008:	701a      	strb	r2, [r3, #0]
 800300a:	e008      	b.n	800301e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	b2db      	uxtb	r3, r3
 8003014:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003018:	b2da      	uxtb	r2, r3
 800301a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800301c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003022:	1c5a      	adds	r2, r3, #1
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800302c:	b29b      	uxth	r3, r3
 800302e:	3b01      	subs	r3, #1
 8003030:	b29b      	uxth	r3, r3
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	4619      	mov	r1, r3
 8003036:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003038:	2b00      	cmp	r3, #0
 800303a:	d15a      	bne.n	80030f2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68da      	ldr	r2, [r3, #12]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f022 0220 	bic.w	r2, r2, #32
 800304a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	68da      	ldr	r2, [r3, #12]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800305a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	695a      	ldr	r2, [r3, #20]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f022 0201 	bic.w	r2, r2, #1
 800306a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2220      	movs	r2, #32
 8003070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003078:	2b01      	cmp	r3, #1
 800307a:	d135      	bne.n	80030e8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	330c      	adds	r3, #12
 8003088:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	e853 3f00 	ldrex	r3, [r3]
 8003090:	613b      	str	r3, [r7, #16]
   return(result);
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	f023 0310 	bic.w	r3, r3, #16
 8003098:	627b      	str	r3, [r7, #36]	; 0x24
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	330c      	adds	r3, #12
 80030a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030a2:	623a      	str	r2, [r7, #32]
 80030a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030a6:	69f9      	ldr	r1, [r7, #28]
 80030a8:	6a3a      	ldr	r2, [r7, #32]
 80030aa:	e841 2300 	strex	r3, r2, [r1]
 80030ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d1e5      	bne.n	8003082 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0310 	and.w	r3, r3, #16
 80030c0:	2b10      	cmp	r3, #16
 80030c2:	d10a      	bne.n	80030da <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80030c4:	2300      	movs	r3, #0
 80030c6:	60fb      	str	r3, [r7, #12]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	60fb      	str	r3, [r7, #12]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	60fb      	str	r3, [r7, #12]
 80030d8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80030de:	4619      	mov	r1, r3
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f7ff fe67 	bl	8002db4 <HAL_UARTEx_RxEventCallback>
 80030e6:	e002      	b.n	80030ee <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f7ff fe4f 	bl	8002d8c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80030ee:	2300      	movs	r3, #0
 80030f0:	e002      	b.n	80030f8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80030f2:	2300      	movs	r3, #0
 80030f4:	e000      	b.n	80030f8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80030f6:	2302      	movs	r3, #2
  }
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3730      	adds	r7, #48	; 0x30
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003100:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003104:	b0c0      	sub	sp, #256	; 0x100
 8003106:	af00      	add	r7, sp, #0
 8003108:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800310c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800311c:	68d9      	ldr	r1, [r3, #12]
 800311e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	ea40 0301 	orr.w	r3, r0, r1
 8003128:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800312a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800312e:	689a      	ldr	r2, [r3, #8]
 8003130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	431a      	orrs	r2, r3
 8003138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	431a      	orrs	r2, r3
 8003140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003144:	69db      	ldr	r3, [r3, #28]
 8003146:	4313      	orrs	r3, r2
 8003148:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800314c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003158:	f021 010c 	bic.w	r1, r1, #12
 800315c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003166:	430b      	orrs	r3, r1
 8003168:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800316a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800317a:	6999      	ldr	r1, [r3, #24]
 800317c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	ea40 0301 	orr.w	r3, r0, r1
 8003186:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	4b8f      	ldr	r3, [pc, #572]	; (80033cc <UART_SetConfig+0x2cc>)
 8003190:	429a      	cmp	r2, r3
 8003192:	d005      	beq.n	80031a0 <UART_SetConfig+0xa0>
 8003194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	4b8d      	ldr	r3, [pc, #564]	; (80033d0 <UART_SetConfig+0x2d0>)
 800319c:	429a      	cmp	r2, r3
 800319e:	d104      	bne.n	80031aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80031a0:	f7fe fe3e 	bl	8001e20 <HAL_RCC_GetPCLK2Freq>
 80031a4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80031a8:	e003      	b.n	80031b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80031aa:	f7fe fe25 	bl	8001df8 <HAL_RCC_GetPCLK1Freq>
 80031ae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031b6:	69db      	ldr	r3, [r3, #28]
 80031b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031bc:	f040 810c 	bne.w	80033d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80031c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031c4:	2200      	movs	r2, #0
 80031c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80031ca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80031ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80031d2:	4622      	mov	r2, r4
 80031d4:	462b      	mov	r3, r5
 80031d6:	1891      	adds	r1, r2, r2
 80031d8:	65b9      	str	r1, [r7, #88]	; 0x58
 80031da:	415b      	adcs	r3, r3
 80031dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80031e2:	4621      	mov	r1, r4
 80031e4:	eb12 0801 	adds.w	r8, r2, r1
 80031e8:	4629      	mov	r1, r5
 80031ea:	eb43 0901 	adc.w	r9, r3, r1
 80031ee:	f04f 0200 	mov.w	r2, #0
 80031f2:	f04f 0300 	mov.w	r3, #0
 80031f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003202:	4690      	mov	r8, r2
 8003204:	4699      	mov	r9, r3
 8003206:	4623      	mov	r3, r4
 8003208:	eb18 0303 	adds.w	r3, r8, r3
 800320c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003210:	462b      	mov	r3, r5
 8003212:	eb49 0303 	adc.w	r3, r9, r3
 8003216:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800321a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003226:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800322a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800322e:	460b      	mov	r3, r1
 8003230:	18db      	adds	r3, r3, r3
 8003232:	653b      	str	r3, [r7, #80]	; 0x50
 8003234:	4613      	mov	r3, r2
 8003236:	eb42 0303 	adc.w	r3, r2, r3
 800323a:	657b      	str	r3, [r7, #84]	; 0x54
 800323c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003240:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003244:	f7fc ffc4 	bl	80001d0 <__aeabi_uldivmod>
 8003248:	4602      	mov	r2, r0
 800324a:	460b      	mov	r3, r1
 800324c:	4b61      	ldr	r3, [pc, #388]	; (80033d4 <UART_SetConfig+0x2d4>)
 800324e:	fba3 2302 	umull	r2, r3, r3, r2
 8003252:	095b      	lsrs	r3, r3, #5
 8003254:	011c      	lsls	r4, r3, #4
 8003256:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800325a:	2200      	movs	r2, #0
 800325c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003260:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003264:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003268:	4642      	mov	r2, r8
 800326a:	464b      	mov	r3, r9
 800326c:	1891      	adds	r1, r2, r2
 800326e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003270:	415b      	adcs	r3, r3
 8003272:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003274:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003278:	4641      	mov	r1, r8
 800327a:	eb12 0a01 	adds.w	sl, r2, r1
 800327e:	4649      	mov	r1, r9
 8003280:	eb43 0b01 	adc.w	fp, r3, r1
 8003284:	f04f 0200 	mov.w	r2, #0
 8003288:	f04f 0300 	mov.w	r3, #0
 800328c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003290:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003294:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003298:	4692      	mov	sl, r2
 800329a:	469b      	mov	fp, r3
 800329c:	4643      	mov	r3, r8
 800329e:	eb1a 0303 	adds.w	r3, sl, r3
 80032a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80032a6:	464b      	mov	r3, r9
 80032a8:	eb4b 0303 	adc.w	r3, fp, r3
 80032ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80032b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80032bc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80032c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80032c4:	460b      	mov	r3, r1
 80032c6:	18db      	adds	r3, r3, r3
 80032c8:	643b      	str	r3, [r7, #64]	; 0x40
 80032ca:	4613      	mov	r3, r2
 80032cc:	eb42 0303 	adc.w	r3, r2, r3
 80032d0:	647b      	str	r3, [r7, #68]	; 0x44
 80032d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80032d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80032da:	f7fc ff79 	bl	80001d0 <__aeabi_uldivmod>
 80032de:	4602      	mov	r2, r0
 80032e0:	460b      	mov	r3, r1
 80032e2:	4611      	mov	r1, r2
 80032e4:	4b3b      	ldr	r3, [pc, #236]	; (80033d4 <UART_SetConfig+0x2d4>)
 80032e6:	fba3 2301 	umull	r2, r3, r3, r1
 80032ea:	095b      	lsrs	r3, r3, #5
 80032ec:	2264      	movs	r2, #100	; 0x64
 80032ee:	fb02 f303 	mul.w	r3, r2, r3
 80032f2:	1acb      	subs	r3, r1, r3
 80032f4:	00db      	lsls	r3, r3, #3
 80032f6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80032fa:	4b36      	ldr	r3, [pc, #216]	; (80033d4 <UART_SetConfig+0x2d4>)
 80032fc:	fba3 2302 	umull	r2, r3, r3, r2
 8003300:	095b      	lsrs	r3, r3, #5
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003308:	441c      	add	r4, r3
 800330a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800330e:	2200      	movs	r2, #0
 8003310:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003314:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003318:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800331c:	4642      	mov	r2, r8
 800331e:	464b      	mov	r3, r9
 8003320:	1891      	adds	r1, r2, r2
 8003322:	63b9      	str	r1, [r7, #56]	; 0x38
 8003324:	415b      	adcs	r3, r3
 8003326:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003328:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800332c:	4641      	mov	r1, r8
 800332e:	1851      	adds	r1, r2, r1
 8003330:	6339      	str	r1, [r7, #48]	; 0x30
 8003332:	4649      	mov	r1, r9
 8003334:	414b      	adcs	r3, r1
 8003336:	637b      	str	r3, [r7, #52]	; 0x34
 8003338:	f04f 0200 	mov.w	r2, #0
 800333c:	f04f 0300 	mov.w	r3, #0
 8003340:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003344:	4659      	mov	r1, fp
 8003346:	00cb      	lsls	r3, r1, #3
 8003348:	4651      	mov	r1, sl
 800334a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800334e:	4651      	mov	r1, sl
 8003350:	00ca      	lsls	r2, r1, #3
 8003352:	4610      	mov	r0, r2
 8003354:	4619      	mov	r1, r3
 8003356:	4603      	mov	r3, r0
 8003358:	4642      	mov	r2, r8
 800335a:	189b      	adds	r3, r3, r2
 800335c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003360:	464b      	mov	r3, r9
 8003362:	460a      	mov	r2, r1
 8003364:	eb42 0303 	adc.w	r3, r2, r3
 8003368:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800336c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003378:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800337c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003380:	460b      	mov	r3, r1
 8003382:	18db      	adds	r3, r3, r3
 8003384:	62bb      	str	r3, [r7, #40]	; 0x28
 8003386:	4613      	mov	r3, r2
 8003388:	eb42 0303 	adc.w	r3, r2, r3
 800338c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800338e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003392:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003396:	f7fc ff1b 	bl	80001d0 <__aeabi_uldivmod>
 800339a:	4602      	mov	r2, r0
 800339c:	460b      	mov	r3, r1
 800339e:	4b0d      	ldr	r3, [pc, #52]	; (80033d4 <UART_SetConfig+0x2d4>)
 80033a0:	fba3 1302 	umull	r1, r3, r3, r2
 80033a4:	095b      	lsrs	r3, r3, #5
 80033a6:	2164      	movs	r1, #100	; 0x64
 80033a8:	fb01 f303 	mul.w	r3, r1, r3
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	3332      	adds	r3, #50	; 0x32
 80033b2:	4a08      	ldr	r2, [pc, #32]	; (80033d4 <UART_SetConfig+0x2d4>)
 80033b4:	fba2 2303 	umull	r2, r3, r2, r3
 80033b8:	095b      	lsrs	r3, r3, #5
 80033ba:	f003 0207 	and.w	r2, r3, #7
 80033be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4422      	add	r2, r4
 80033c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80033c8:	e105      	b.n	80035d6 <UART_SetConfig+0x4d6>
 80033ca:	bf00      	nop
 80033cc:	40011000 	.word	0x40011000
 80033d0:	40011400 	.word	0x40011400
 80033d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033dc:	2200      	movs	r2, #0
 80033de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80033e2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80033e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80033ea:	4642      	mov	r2, r8
 80033ec:	464b      	mov	r3, r9
 80033ee:	1891      	adds	r1, r2, r2
 80033f0:	6239      	str	r1, [r7, #32]
 80033f2:	415b      	adcs	r3, r3
 80033f4:	627b      	str	r3, [r7, #36]	; 0x24
 80033f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80033fa:	4641      	mov	r1, r8
 80033fc:	1854      	adds	r4, r2, r1
 80033fe:	4649      	mov	r1, r9
 8003400:	eb43 0501 	adc.w	r5, r3, r1
 8003404:	f04f 0200 	mov.w	r2, #0
 8003408:	f04f 0300 	mov.w	r3, #0
 800340c:	00eb      	lsls	r3, r5, #3
 800340e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003412:	00e2      	lsls	r2, r4, #3
 8003414:	4614      	mov	r4, r2
 8003416:	461d      	mov	r5, r3
 8003418:	4643      	mov	r3, r8
 800341a:	18e3      	adds	r3, r4, r3
 800341c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003420:	464b      	mov	r3, r9
 8003422:	eb45 0303 	adc.w	r3, r5, r3
 8003426:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800342a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003436:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800343a:	f04f 0200 	mov.w	r2, #0
 800343e:	f04f 0300 	mov.w	r3, #0
 8003442:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003446:	4629      	mov	r1, r5
 8003448:	008b      	lsls	r3, r1, #2
 800344a:	4621      	mov	r1, r4
 800344c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003450:	4621      	mov	r1, r4
 8003452:	008a      	lsls	r2, r1, #2
 8003454:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003458:	f7fc feba 	bl	80001d0 <__aeabi_uldivmod>
 800345c:	4602      	mov	r2, r0
 800345e:	460b      	mov	r3, r1
 8003460:	4b60      	ldr	r3, [pc, #384]	; (80035e4 <UART_SetConfig+0x4e4>)
 8003462:	fba3 2302 	umull	r2, r3, r3, r2
 8003466:	095b      	lsrs	r3, r3, #5
 8003468:	011c      	lsls	r4, r3, #4
 800346a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800346e:	2200      	movs	r2, #0
 8003470:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003474:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003478:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800347c:	4642      	mov	r2, r8
 800347e:	464b      	mov	r3, r9
 8003480:	1891      	adds	r1, r2, r2
 8003482:	61b9      	str	r1, [r7, #24]
 8003484:	415b      	adcs	r3, r3
 8003486:	61fb      	str	r3, [r7, #28]
 8003488:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800348c:	4641      	mov	r1, r8
 800348e:	1851      	adds	r1, r2, r1
 8003490:	6139      	str	r1, [r7, #16]
 8003492:	4649      	mov	r1, r9
 8003494:	414b      	adcs	r3, r1
 8003496:	617b      	str	r3, [r7, #20]
 8003498:	f04f 0200 	mov.w	r2, #0
 800349c:	f04f 0300 	mov.w	r3, #0
 80034a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034a4:	4659      	mov	r1, fp
 80034a6:	00cb      	lsls	r3, r1, #3
 80034a8:	4651      	mov	r1, sl
 80034aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034ae:	4651      	mov	r1, sl
 80034b0:	00ca      	lsls	r2, r1, #3
 80034b2:	4610      	mov	r0, r2
 80034b4:	4619      	mov	r1, r3
 80034b6:	4603      	mov	r3, r0
 80034b8:	4642      	mov	r2, r8
 80034ba:	189b      	adds	r3, r3, r2
 80034bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80034c0:	464b      	mov	r3, r9
 80034c2:	460a      	mov	r2, r1
 80034c4:	eb42 0303 	adc.w	r3, r2, r3
 80034c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80034cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80034d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80034d8:	f04f 0200 	mov.w	r2, #0
 80034dc:	f04f 0300 	mov.w	r3, #0
 80034e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80034e4:	4649      	mov	r1, r9
 80034e6:	008b      	lsls	r3, r1, #2
 80034e8:	4641      	mov	r1, r8
 80034ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034ee:	4641      	mov	r1, r8
 80034f0:	008a      	lsls	r2, r1, #2
 80034f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80034f6:	f7fc fe6b 	bl	80001d0 <__aeabi_uldivmod>
 80034fa:	4602      	mov	r2, r0
 80034fc:	460b      	mov	r3, r1
 80034fe:	4b39      	ldr	r3, [pc, #228]	; (80035e4 <UART_SetConfig+0x4e4>)
 8003500:	fba3 1302 	umull	r1, r3, r3, r2
 8003504:	095b      	lsrs	r3, r3, #5
 8003506:	2164      	movs	r1, #100	; 0x64
 8003508:	fb01 f303 	mul.w	r3, r1, r3
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	011b      	lsls	r3, r3, #4
 8003510:	3332      	adds	r3, #50	; 0x32
 8003512:	4a34      	ldr	r2, [pc, #208]	; (80035e4 <UART_SetConfig+0x4e4>)
 8003514:	fba2 2303 	umull	r2, r3, r2, r3
 8003518:	095b      	lsrs	r3, r3, #5
 800351a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800351e:	441c      	add	r4, r3
 8003520:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003524:	2200      	movs	r2, #0
 8003526:	673b      	str	r3, [r7, #112]	; 0x70
 8003528:	677a      	str	r2, [r7, #116]	; 0x74
 800352a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800352e:	4642      	mov	r2, r8
 8003530:	464b      	mov	r3, r9
 8003532:	1891      	adds	r1, r2, r2
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	415b      	adcs	r3, r3
 8003538:	60fb      	str	r3, [r7, #12]
 800353a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800353e:	4641      	mov	r1, r8
 8003540:	1851      	adds	r1, r2, r1
 8003542:	6039      	str	r1, [r7, #0]
 8003544:	4649      	mov	r1, r9
 8003546:	414b      	adcs	r3, r1
 8003548:	607b      	str	r3, [r7, #4]
 800354a:	f04f 0200 	mov.w	r2, #0
 800354e:	f04f 0300 	mov.w	r3, #0
 8003552:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003556:	4659      	mov	r1, fp
 8003558:	00cb      	lsls	r3, r1, #3
 800355a:	4651      	mov	r1, sl
 800355c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003560:	4651      	mov	r1, sl
 8003562:	00ca      	lsls	r2, r1, #3
 8003564:	4610      	mov	r0, r2
 8003566:	4619      	mov	r1, r3
 8003568:	4603      	mov	r3, r0
 800356a:	4642      	mov	r2, r8
 800356c:	189b      	adds	r3, r3, r2
 800356e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003570:	464b      	mov	r3, r9
 8003572:	460a      	mov	r2, r1
 8003574:	eb42 0303 	adc.w	r3, r2, r3
 8003578:	66fb      	str	r3, [r7, #108]	; 0x6c
 800357a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	663b      	str	r3, [r7, #96]	; 0x60
 8003584:	667a      	str	r2, [r7, #100]	; 0x64
 8003586:	f04f 0200 	mov.w	r2, #0
 800358a:	f04f 0300 	mov.w	r3, #0
 800358e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003592:	4649      	mov	r1, r9
 8003594:	008b      	lsls	r3, r1, #2
 8003596:	4641      	mov	r1, r8
 8003598:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800359c:	4641      	mov	r1, r8
 800359e:	008a      	lsls	r2, r1, #2
 80035a0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80035a4:	f7fc fe14 	bl	80001d0 <__aeabi_uldivmod>
 80035a8:	4602      	mov	r2, r0
 80035aa:	460b      	mov	r3, r1
 80035ac:	4b0d      	ldr	r3, [pc, #52]	; (80035e4 <UART_SetConfig+0x4e4>)
 80035ae:	fba3 1302 	umull	r1, r3, r3, r2
 80035b2:	095b      	lsrs	r3, r3, #5
 80035b4:	2164      	movs	r1, #100	; 0x64
 80035b6:	fb01 f303 	mul.w	r3, r1, r3
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	011b      	lsls	r3, r3, #4
 80035be:	3332      	adds	r3, #50	; 0x32
 80035c0:	4a08      	ldr	r2, [pc, #32]	; (80035e4 <UART_SetConfig+0x4e4>)
 80035c2:	fba2 2303 	umull	r2, r3, r2, r3
 80035c6:	095b      	lsrs	r3, r3, #5
 80035c8:	f003 020f 	and.w	r2, r3, #15
 80035cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4422      	add	r2, r4
 80035d4:	609a      	str	r2, [r3, #8]
}
 80035d6:	bf00      	nop
 80035d8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80035dc:	46bd      	mov	sp, r7
 80035de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035e2:	bf00      	nop
 80035e4:	51eb851f 	.word	0x51eb851f

080035e8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f103 0208 	add.w	r2, r3, #8
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003600:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f103 0208 	add.w	r2, r3, #8
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f103 0208 	add.w	r2, r3, #8
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003636:	bf00      	nop
 8003638:	370c      	adds	r7, #12
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr

08003642 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8003642:	b480      	push	{r7}
 8003644:	b085      	sub	sp, #20
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
 800364a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	689a      	ldr	r2, [r3, #8]
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	683a      	ldr	r2, [r7, #0]
 8003666:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	683a      	ldr	r2, [r7, #0]
 800366c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	1c5a      	adds	r2, r3, #1
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	601a      	str	r2, [r3, #0]
}
 800367e:	bf00      	nop
 8003680:	3714      	adds	r7, #20
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr

0800368a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800368a:	b480      	push	{r7}
 800368c:	b085      	sub	sp, #20
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
 8003692:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a0:	d103      	bne.n	80036aa <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	60fb      	str	r3, [r7, #12]
 80036a8:	e00c      	b.n	80036c4 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	3308      	adds	r3, #8
 80036ae:	60fb      	str	r3, [r7, #12]
 80036b0:	e002      	b.n	80036b8 <vListInsert+0x2e>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	60fb      	str	r3, [r7, #12]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68ba      	ldr	r2, [r7, #8]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d2f6      	bcs.n	80036b2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	685a      	ldr	r2, [r3, #4]
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	683a      	ldr	r2, [r7, #0]
 80036d2:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	68fa      	ldr	r2, [r7, #12]
 80036d8:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	683a      	ldr	r2, [r7, #0]
 80036de:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	1c5a      	adds	r2, r3, #1
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	601a      	str	r2, [r3, #0]
}
 80036f0:	bf00      	nop
 80036f2:	3714      	adds	r7, #20
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	6892      	ldr	r2, [r2, #8]
 8003712:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	6852      	ldr	r2, [r2, #4]
 800371c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	429a      	cmp	r2, r3
 8003726:	d103      	bne.n	8003730 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689a      	ldr	r2, [r3, #8]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	1e5a      	subs	r2, r3, #1
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
}
 8003744:	4618      	mov	r0, r3
 8003746:	3714      	adds	r7, #20
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d10a      	bne.n	800377a <xQueueGenericReset+0x2a>
        __asm volatile
 8003764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003768:	f383 8811 	msr	BASEPRI, r3
 800376c:	f3bf 8f6f 	isb	sy
 8003770:	f3bf 8f4f 	dsb	sy
 8003774:	60bb      	str	r3, [r7, #8]
    }
 8003776:	bf00      	nop
 8003778:	e7fe      	b.n	8003778 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 800377a:	f001 ffdb 	bl	8005734 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003786:	68f9      	ldr	r1, [r7, #12]
 8003788:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800378a:	fb01 f303 	mul.w	r3, r1, r3
 800378e:	441a      	add	r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2200      	movs	r2, #0
 8003798:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037aa:	3b01      	subs	r3, #1
 80037ac:	68f9      	ldr	r1, [r7, #12]
 80037ae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80037b0:	fb01 f303 	mul.w	r3, r1, r3
 80037b4:	441a      	add	r2, r3
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	22ff      	movs	r2, #255	; 0xff
 80037be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	22ff      	movs	r2, #255	; 0xff
 80037c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d114      	bne.n	80037fa <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d01a      	beq.n	800380e <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	3310      	adds	r3, #16
 80037dc:	4618      	mov	r0, r3
 80037de:	f001 f84d 	bl	800487c <xTaskRemoveFromEventList>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d012      	beq.n	800380e <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80037e8:	4b0c      	ldr	r3, [pc, #48]	; (800381c <xQueueGenericReset+0xcc>)
 80037ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037ee:	601a      	str	r2, [r3, #0]
 80037f0:	f3bf 8f4f 	dsb	sy
 80037f4:	f3bf 8f6f 	isb	sy
 80037f8:	e009      	b.n	800380e <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	3310      	adds	r3, #16
 80037fe:	4618      	mov	r0, r3
 8003800:	f7ff fef2 	bl	80035e8 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	3324      	adds	r3, #36	; 0x24
 8003808:	4618      	mov	r0, r3
 800380a:	f7ff feed 	bl	80035e8 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800380e:	f001 ffc1 	bl	8005794 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8003812:	2301      	movs	r3, #1
}
 8003814:	4618      	mov	r0, r3
 8003816:	3710      	adds	r7, #16
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	e000ed04 	.word	0xe000ed04

08003820 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8003820:	b580      	push	{r7, lr}
 8003822:	b08c      	sub	sp, #48	; 0x30
 8003824:	af02      	add	r7, sp, #8
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	4613      	mov	r3, r2
 800382c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d10a      	bne.n	800384a <xQueueGenericCreate+0x2a>
        __asm volatile
 8003834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003838:	f383 8811 	msr	BASEPRI, r3
 800383c:	f3bf 8f6f 	isb	sy
 8003840:	f3bf 8f4f 	dsb	sy
 8003844:	61bb      	str	r3, [r7, #24]
    }
 8003846:	bf00      	nop
 8003848:	e7fe      	b.n	8003848 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	68ba      	ldr	r2, [r7, #8]
 800384e:	fb02 f303 	mul.w	r3, r2, r3
 8003852:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d006      	beq.n	8003868 <xQueueGenericCreate+0x48>
 800385a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003862:	68fa      	ldr	r2, [r7, #12]
 8003864:	429a      	cmp	r2, r3
 8003866:	d101      	bne.n	800386c <xQueueGenericCreate+0x4c>
 8003868:	2301      	movs	r3, #1
 800386a:	e000      	b.n	800386e <xQueueGenericCreate+0x4e>
 800386c:	2300      	movs	r3, #0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d10a      	bne.n	8003888 <xQueueGenericCreate+0x68>
        __asm volatile
 8003872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003876:	f383 8811 	msr	BASEPRI, r3
 800387a:	f3bf 8f6f 	isb	sy
 800387e:	f3bf 8f4f 	dsb	sy
 8003882:	617b      	str	r3, [r7, #20]
    }
 8003884:	bf00      	nop
 8003886:	e7fe      	b.n	8003886 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8003888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388a:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800388e:	d90a      	bls.n	80038a6 <xQueueGenericCreate+0x86>
        __asm volatile
 8003890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003894:	f383 8811 	msr	BASEPRI, r3
 8003898:	f3bf 8f6f 	isb	sy
 800389c:	f3bf 8f4f 	dsb	sy
 80038a0:	613b      	str	r3, [r7, #16]
    }
 80038a2:	bf00      	nop
 80038a4:	e7fe      	b.n	80038a4 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80038a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a8:	3350      	adds	r3, #80	; 0x50
 80038aa:	4618      	mov	r0, r3
 80038ac:	f002 f866 	bl	800597c <pvPortMalloc>
 80038b0:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80038b2:	6a3b      	ldr	r3, [r7, #32]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00d      	beq.n	80038d4 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80038b8:	6a3b      	ldr	r3, [r7, #32]
 80038ba:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	3350      	adds	r3, #80	; 0x50
 80038c0:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80038c2:	79fa      	ldrb	r2, [r7, #7]
 80038c4:	6a3b      	ldr	r3, [r7, #32]
 80038c6:	9300      	str	r3, [sp, #0]
 80038c8:	4613      	mov	r3, r2
 80038ca:	69fa      	ldr	r2, [r7, #28]
 80038cc:	68b9      	ldr	r1, [r7, #8]
 80038ce:	68f8      	ldr	r0, [r7, #12]
 80038d0:	f000 f805 	bl	80038de <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80038d4:	6a3b      	ldr	r3, [r7, #32]
    }
 80038d6:	4618      	mov	r0, r3
 80038d8:	3728      	adds	r7, #40	; 0x28
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80038de:	b580      	push	{r7, lr}
 80038e0:	b084      	sub	sp, #16
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	60f8      	str	r0, [r7, #12]
 80038e6:	60b9      	str	r1, [r7, #8]
 80038e8:	607a      	str	r2, [r7, #4]
 80038ea:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d103      	bne.n	80038fa <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	601a      	str	r2, [r3, #0]
 80038f8:	e002      	b.n	8003900 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	68ba      	ldr	r2, [r7, #8]
 800390a:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800390c:	2101      	movs	r1, #1
 800390e:	69b8      	ldr	r0, [r7, #24]
 8003910:	f7ff ff1e 	bl	8003750 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	78fa      	ldrb	r2, [r7, #3]
 8003918:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800391c:	bf00      	nop
 800391e:	3710      	adds	r7, #16
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b08e      	sub	sp, #56	; 0x38
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	607a      	str	r2, [r7, #4]
 8003930:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003932:	2300      	movs	r3, #0
 8003934:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 800393a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800393c:	2b00      	cmp	r3, #0
 800393e:	d10a      	bne.n	8003956 <xQueueGenericSend+0x32>
        __asm volatile
 8003940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003944:	f383 8811 	msr	BASEPRI, r3
 8003948:	f3bf 8f6f 	isb	sy
 800394c:	f3bf 8f4f 	dsb	sy
 8003950:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8003952:	bf00      	nop
 8003954:	e7fe      	b.n	8003954 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d103      	bne.n	8003964 <xQueueGenericSend+0x40>
 800395c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800395e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003960:	2b00      	cmp	r3, #0
 8003962:	d101      	bne.n	8003968 <xQueueGenericSend+0x44>
 8003964:	2301      	movs	r3, #1
 8003966:	e000      	b.n	800396a <xQueueGenericSend+0x46>
 8003968:	2300      	movs	r3, #0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d10a      	bne.n	8003984 <xQueueGenericSend+0x60>
        __asm volatile
 800396e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003972:	f383 8811 	msr	BASEPRI, r3
 8003976:	f3bf 8f6f 	isb	sy
 800397a:	f3bf 8f4f 	dsb	sy
 800397e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8003980:	bf00      	nop
 8003982:	e7fe      	b.n	8003982 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	2b02      	cmp	r3, #2
 8003988:	d103      	bne.n	8003992 <xQueueGenericSend+0x6e>
 800398a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800398c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800398e:	2b01      	cmp	r3, #1
 8003990:	d101      	bne.n	8003996 <xQueueGenericSend+0x72>
 8003992:	2301      	movs	r3, #1
 8003994:	e000      	b.n	8003998 <xQueueGenericSend+0x74>
 8003996:	2300      	movs	r3, #0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d10a      	bne.n	80039b2 <xQueueGenericSend+0x8e>
        __asm volatile
 800399c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a0:	f383 8811 	msr	BASEPRI, r3
 80039a4:	f3bf 8f6f 	isb	sy
 80039a8:	f3bf 8f4f 	dsb	sy
 80039ac:	623b      	str	r3, [r7, #32]
    }
 80039ae:	bf00      	nop
 80039b0:	e7fe      	b.n	80039b0 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80039b2:	f001 f8ff 	bl	8004bb4 <xTaskGetSchedulerState>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d102      	bne.n	80039c2 <xQueueGenericSend+0x9e>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d101      	bne.n	80039c6 <xQueueGenericSend+0xa2>
 80039c2:	2301      	movs	r3, #1
 80039c4:	e000      	b.n	80039c8 <xQueueGenericSend+0xa4>
 80039c6:	2300      	movs	r3, #0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d10a      	bne.n	80039e2 <xQueueGenericSend+0xbe>
        __asm volatile
 80039cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d0:	f383 8811 	msr	BASEPRI, r3
 80039d4:	f3bf 8f6f 	isb	sy
 80039d8:	f3bf 8f4f 	dsb	sy
 80039dc:	61fb      	str	r3, [r7, #28]
    }
 80039de:	bf00      	nop
 80039e0:	e7fe      	b.n	80039e0 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80039e2:	f001 fea7 	bl	8005734 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80039e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d302      	bcc.n	80039f8 <xQueueGenericSend+0xd4>
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d129      	bne.n	8003a4c <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80039f8:	683a      	ldr	r2, [r7, #0]
 80039fa:	68b9      	ldr	r1, [r7, #8]
 80039fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039fe:	f000 fa19 	bl	8003e34 <prvCopyDataToQueue>
 8003a02:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d010      	beq.n	8003a2e <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a0e:	3324      	adds	r3, #36	; 0x24
 8003a10:	4618      	mov	r0, r3
 8003a12:	f000 ff33 	bl	800487c <xTaskRemoveFromEventList>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d013      	beq.n	8003a44 <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8003a1c:	4b3f      	ldr	r3, [pc, #252]	; (8003b1c <xQueueGenericSend+0x1f8>)
 8003a1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a22:	601a      	str	r2, [r3, #0]
 8003a24:	f3bf 8f4f 	dsb	sy
 8003a28:	f3bf 8f6f 	isb	sy
 8003a2c:	e00a      	b.n	8003a44 <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8003a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d007      	beq.n	8003a44 <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8003a34:	4b39      	ldr	r3, [pc, #228]	; (8003b1c <xQueueGenericSend+0x1f8>)
 8003a36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a3a:	601a      	str	r2, [r3, #0]
 8003a3c:	f3bf 8f4f 	dsb	sy
 8003a40:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8003a44:	f001 fea6 	bl	8005794 <vPortExitCritical>
                return pdPASS;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e063      	b.n	8003b14 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d103      	bne.n	8003a5a <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003a52:	f001 fe9f 	bl	8005794 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8003a56:	2300      	movs	r3, #0
 8003a58:	e05c      	b.n	8003b14 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d106      	bne.n	8003a6e <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003a60:	f107 0314 	add.w	r3, r7, #20
 8003a64:	4618      	mov	r0, r3
 8003a66:	f000 ff6b 	bl	8004940 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003a6e:	f001 fe91 	bl	8005794 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003a72:	f000 fce5 	bl	8004440 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003a76:	f001 fe5d 	bl	8005734 <vPortEnterCritical>
 8003a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a80:	b25b      	sxtb	r3, r3
 8003a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a86:	d103      	bne.n	8003a90 <xQueueGenericSend+0x16c>
 8003a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a96:	b25b      	sxtb	r3, r3
 8003a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a9c:	d103      	bne.n	8003aa6 <xQueueGenericSend+0x182>
 8003a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003aa6:	f001 fe75 	bl	8005794 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003aaa:	1d3a      	adds	r2, r7, #4
 8003aac:	f107 0314 	add.w	r3, r7, #20
 8003ab0:	4611      	mov	r1, r2
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f000 ff5a 	bl	800496c <xTaskCheckForTimeOut>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d124      	bne.n	8003b08 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003abe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ac0:	f000 fab0 	bl	8004024 <prvIsQueueFull>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d018      	beq.n	8003afc <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003acc:	3310      	adds	r3, #16
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	4611      	mov	r1, r2
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f000 fe82 	bl	80047dc <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8003ad8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ada:	f000 fa3b 	bl	8003f54 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8003ade:	f000 fcbd 	bl	800445c <xTaskResumeAll>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	f47f af7c 	bne.w	80039e2 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8003aea:	4b0c      	ldr	r3, [pc, #48]	; (8003b1c <xQueueGenericSend+0x1f8>)
 8003aec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003af0:	601a      	str	r2, [r3, #0]
 8003af2:	f3bf 8f4f 	dsb	sy
 8003af6:	f3bf 8f6f 	isb	sy
 8003afa:	e772      	b.n	80039e2 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8003afc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003afe:	f000 fa29 	bl	8003f54 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003b02:	f000 fcab 	bl	800445c <xTaskResumeAll>
 8003b06:	e76c      	b.n	80039e2 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8003b08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b0a:	f000 fa23 	bl	8003f54 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003b0e:	f000 fca5 	bl	800445c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8003b12:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3738      	adds	r7, #56	; 0x38
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	e000ed04 	.word	0xe000ed04

08003b20 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b090      	sub	sp, #64	; 0x40
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	607a      	str	r2, [r7, #4]
 8003b2c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8003b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d10a      	bne.n	8003b4e <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8003b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b3c:	f383 8811 	msr	BASEPRI, r3
 8003b40:	f3bf 8f6f 	isb	sy
 8003b44:	f3bf 8f4f 	dsb	sy
 8003b48:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8003b4a:	bf00      	nop
 8003b4c:	e7fe      	b.n	8003b4c <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d103      	bne.n	8003b5c <xQueueGenericSendFromISR+0x3c>
 8003b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d101      	bne.n	8003b60 <xQueueGenericSendFromISR+0x40>
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e000      	b.n	8003b62 <xQueueGenericSendFromISR+0x42>
 8003b60:	2300      	movs	r3, #0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d10a      	bne.n	8003b7c <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8003b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b6a:	f383 8811 	msr	BASEPRI, r3
 8003b6e:	f3bf 8f6f 	isb	sy
 8003b72:	f3bf 8f4f 	dsb	sy
 8003b76:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8003b78:	bf00      	nop
 8003b7a:	e7fe      	b.n	8003b7a <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d103      	bne.n	8003b8a <xQueueGenericSendFromISR+0x6a>
 8003b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d101      	bne.n	8003b8e <xQueueGenericSendFromISR+0x6e>
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e000      	b.n	8003b90 <xQueueGenericSendFromISR+0x70>
 8003b8e:	2300      	movs	r3, #0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d10a      	bne.n	8003baa <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8003b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b98:	f383 8811 	msr	BASEPRI, r3
 8003b9c:	f3bf 8f6f 	isb	sy
 8003ba0:	f3bf 8f4f 	dsb	sy
 8003ba4:	623b      	str	r3, [r7, #32]
    }
 8003ba6:	bf00      	nop
 8003ba8:	e7fe      	b.n	8003ba8 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003baa:	f001 fea7 	bl	80058fc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8003bae:	f3ef 8211 	mrs	r2, BASEPRI
 8003bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb6:	f383 8811 	msr	BASEPRI, r3
 8003bba:	f3bf 8f6f 	isb	sy
 8003bbe:	f3bf 8f4f 	dsb	sy
 8003bc2:	61fa      	str	r2, [r7, #28]
 8003bc4:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8003bc6:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003bc8:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d302      	bcc.n	8003bdc <xQueueGenericSendFromISR+0xbc>
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d13e      	bne.n	8003c5a <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8003bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003be2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bea:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003bec:	683a      	ldr	r2, [r7, #0]
 8003bee:	68b9      	ldr	r1, [r7, #8]
 8003bf0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003bf2:	f000 f91f 	bl	8003e34 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8003bf6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bfe:	d112      	bne.n	8003c26 <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d025      	beq.n	8003c54 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c0a:	3324      	adds	r3, #36	; 0x24
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f000 fe35 	bl	800487c <xTaskRemoveFromEventList>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d01d      	beq.n	8003c54 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d01a      	beq.n	8003c54 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2201      	movs	r2, #1
 8003c22:	601a      	str	r2, [r3, #0]
 8003c24:	e016      	b.n	8003c54 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8003c26:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003c2a:	2b7f      	cmp	r3, #127	; 0x7f
 8003c2c:	d10a      	bne.n	8003c44 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 8003c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c32:	f383 8811 	msr	BASEPRI, r3
 8003c36:	f3bf 8f6f 	isb	sy
 8003c3a:	f3bf 8f4f 	dsb	sy
 8003c3e:	617b      	str	r3, [r7, #20]
    }
 8003c40:	bf00      	nop
 8003c42:	e7fe      	b.n	8003c42 <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003c44:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003c48:	3301      	adds	r3, #1
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	b25a      	sxtb	r2, r3
 8003c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8003c54:	2301      	movs	r3, #1
 8003c56:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8003c58:	e001      	b.n	8003c5e <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c60:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003c68:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003c6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3740      	adds	r7, #64	; 0x40
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b08c      	sub	sp, #48	; 0x30
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003c80:	2300      	movs	r3, #0
 8003c82:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d10a      	bne.n	8003ca4 <xQueueReceive+0x30>
        __asm volatile
 8003c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c92:	f383 8811 	msr	BASEPRI, r3
 8003c96:	f3bf 8f6f 	isb	sy
 8003c9a:	f3bf 8f4f 	dsb	sy
 8003c9e:	623b      	str	r3, [r7, #32]
    }
 8003ca0:	bf00      	nop
 8003ca2:	e7fe      	b.n	8003ca2 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d103      	bne.n	8003cb2 <xQueueReceive+0x3e>
 8003caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d101      	bne.n	8003cb6 <xQueueReceive+0x42>
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e000      	b.n	8003cb8 <xQueueReceive+0x44>
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d10a      	bne.n	8003cd2 <xQueueReceive+0x5e>
        __asm volatile
 8003cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc0:	f383 8811 	msr	BASEPRI, r3
 8003cc4:	f3bf 8f6f 	isb	sy
 8003cc8:	f3bf 8f4f 	dsb	sy
 8003ccc:	61fb      	str	r3, [r7, #28]
    }
 8003cce:	bf00      	nop
 8003cd0:	e7fe      	b.n	8003cd0 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003cd2:	f000 ff6f 	bl	8004bb4 <xTaskGetSchedulerState>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d102      	bne.n	8003ce2 <xQueueReceive+0x6e>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d101      	bne.n	8003ce6 <xQueueReceive+0x72>
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e000      	b.n	8003ce8 <xQueueReceive+0x74>
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d10a      	bne.n	8003d02 <xQueueReceive+0x8e>
        __asm volatile
 8003cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf0:	f383 8811 	msr	BASEPRI, r3
 8003cf4:	f3bf 8f6f 	isb	sy
 8003cf8:	f3bf 8f4f 	dsb	sy
 8003cfc:	61bb      	str	r3, [r7, #24]
    }
 8003cfe:	bf00      	nop
 8003d00:	e7fe      	b.n	8003d00 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003d02:	f001 fd17 	bl	8005734 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d0a:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d01f      	beq.n	8003d52 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003d12:	68b9      	ldr	r1, [r7, #8]
 8003d14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d16:	f000 f8f7 	bl	8003f08 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1c:	1e5a      	subs	r2, r3, #1
 8003d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d20:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00f      	beq.n	8003d4a <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d2c:	3310      	adds	r3, #16
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f000 fda4 	bl	800487c <xTaskRemoveFromEventList>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d007      	beq.n	8003d4a <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003d3a:	4b3d      	ldr	r3, [pc, #244]	; (8003e30 <xQueueReceive+0x1bc>)
 8003d3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d40:	601a      	str	r2, [r3, #0]
 8003d42:	f3bf 8f4f 	dsb	sy
 8003d46:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003d4a:	f001 fd23 	bl	8005794 <vPortExitCritical>
                return pdPASS;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e069      	b.n	8003e26 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d103      	bne.n	8003d60 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003d58:	f001 fd1c 	bl	8005794 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	e062      	b.n	8003e26 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d106      	bne.n	8003d74 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003d66:	f107 0310 	add.w	r3, r7, #16
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f000 fde8 	bl	8004940 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003d70:	2301      	movs	r3, #1
 8003d72:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003d74:	f001 fd0e 	bl	8005794 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003d78:	f000 fb62 	bl	8004440 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003d7c:	f001 fcda 	bl	8005734 <vPortEnterCritical>
 8003d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d86:	b25b      	sxtb	r3, r3
 8003d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d8c:	d103      	bne.n	8003d96 <xQueueReceive+0x122>
 8003d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d9c:	b25b      	sxtb	r3, r3
 8003d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da2:	d103      	bne.n	8003dac <xQueueReceive+0x138>
 8003da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003dac:	f001 fcf2 	bl	8005794 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003db0:	1d3a      	adds	r2, r7, #4
 8003db2:	f107 0310 	add.w	r3, r7, #16
 8003db6:	4611      	mov	r1, r2
 8003db8:	4618      	mov	r0, r3
 8003dba:	f000 fdd7 	bl	800496c <xTaskCheckForTimeOut>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d123      	bne.n	8003e0c <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003dc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003dc6:	f000 f917 	bl	8003ff8 <prvIsQueueEmpty>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d017      	beq.n	8003e00 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd2:	3324      	adds	r3, #36	; 0x24
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	4611      	mov	r1, r2
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f000 fcff 	bl	80047dc <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003dde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003de0:	f000 f8b8 	bl	8003f54 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003de4:	f000 fb3a 	bl	800445c <xTaskResumeAll>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d189      	bne.n	8003d02 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8003dee:	4b10      	ldr	r3, [pc, #64]	; (8003e30 <xQueueReceive+0x1bc>)
 8003df0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003df4:	601a      	str	r2, [r3, #0]
 8003df6:	f3bf 8f4f 	dsb	sy
 8003dfa:	f3bf 8f6f 	isb	sy
 8003dfe:	e780      	b.n	8003d02 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003e00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e02:	f000 f8a7 	bl	8003f54 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003e06:	f000 fb29 	bl	800445c <xTaskResumeAll>
 8003e0a:	e77a      	b.n	8003d02 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003e0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e0e:	f000 f8a1 	bl	8003f54 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003e12:	f000 fb23 	bl	800445c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e18:	f000 f8ee 	bl	8003ff8 <prvIsQueueEmpty>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	f43f af6f 	beq.w	8003d02 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8003e24:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3730      	adds	r7, #48	; 0x30
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	e000ed04 	.word	0xe000ed04

08003e34 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b086      	sub	sp, #24
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8003e40:	2300      	movs	r3, #0
 8003e42:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e48:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d10d      	bne.n	8003e6e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d14d      	bne.n	8003ef6 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f000 fec6 	bl	8004bf0 <xTaskPriorityDisinherit>
 8003e64:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	609a      	str	r2, [r3, #8]
 8003e6c:	e043      	b.n	8003ef6 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d119      	bne.n	8003ea8 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6858      	ldr	r0, [r3, #4]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	68b9      	ldr	r1, [r7, #8]
 8003e80:	f001 ff9e 	bl	8005dc0 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	685a      	ldr	r2, [r3, #4]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8c:	441a      	add	r2, r3
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	685a      	ldr	r2, [r3, #4]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d32b      	bcc.n	8003ef6 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	605a      	str	r2, [r3, #4]
 8003ea6:	e026      	b.n	8003ef6 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	68d8      	ldr	r0, [r3, #12]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	68b9      	ldr	r1, [r7, #8]
 8003eb4:	f001 ff84 	bl	8005dc0 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	68da      	ldr	r2, [r3, #12]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec0:	425b      	negs	r3, r3
 8003ec2:	441a      	add	r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	68da      	ldr	r2, [r3, #12]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d207      	bcs.n	8003ee4 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	689a      	ldr	r2, [r3, #8]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003edc:	425b      	negs	r3, r3
 8003ede:	441a      	add	r2, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d105      	bne.n	8003ef6 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d002      	beq.n	8003ef6 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	1c5a      	adds	r2, r3, #1
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8003efe:	697b      	ldr	r3, [r7, #20]
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3718      	adds	r7, #24
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d018      	beq.n	8003f4c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	68da      	ldr	r2, [r3, #12]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f22:	441a      	add	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	68da      	ldr	r2, [r3, #12]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d303      	bcc.n	8003f3c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	68d9      	ldr	r1, [r3, #12]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f44:	461a      	mov	r2, r3
 8003f46:	6838      	ldr	r0, [r7, #0]
 8003f48:	f001 ff3a 	bl	8005dc0 <memcpy>
    }
}
 8003f4c:	bf00      	nop
 8003f4e:	3708      	adds	r7, #8
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003f5c:	f001 fbea 	bl	8005734 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f66:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f68:	e011      	b.n	8003f8e <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d012      	beq.n	8003f98 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	3324      	adds	r3, #36	; 0x24
 8003f76:	4618      	mov	r0, r3
 8003f78:	f000 fc80 	bl	800487c <xTaskRemoveFromEventList>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d001      	beq.n	8003f86 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8003f82:	f000 fd59 	bl	8004a38 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8003f86:	7bfb      	ldrb	r3, [r7, #15]
 8003f88:	3b01      	subs	r3, #1
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	dce9      	bgt.n	8003f6a <prvUnlockQueue+0x16>
 8003f96:	e000      	b.n	8003f9a <prvUnlockQueue+0x46>
                        break;
 8003f98:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	22ff      	movs	r2, #255	; 0xff
 8003f9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8003fa2:	f001 fbf7 	bl	8005794 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8003fa6:	f001 fbc5 	bl	8005734 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003fb0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003fb2:	e011      	b.n	8003fd8 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	691b      	ldr	r3, [r3, #16]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d012      	beq.n	8003fe2 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	3310      	adds	r3, #16
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f000 fc5b 	bl	800487c <xTaskRemoveFromEventList>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d001      	beq.n	8003fd0 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8003fcc:	f000 fd34 	bl	8004a38 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003fd0:	7bbb      	ldrb	r3, [r7, #14]
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003fd8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	dce9      	bgt.n	8003fb4 <prvUnlockQueue+0x60>
 8003fe0:	e000      	b.n	8003fe4 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8003fe2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	22ff      	movs	r2, #255	; 0xff
 8003fe8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8003fec:	f001 fbd2 	bl	8005794 <vPortExitCritical>
}
 8003ff0:	bf00      	nop
 8003ff2:	3710      	adds	r7, #16
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004000:	f001 fb98 	bl	8005734 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004008:	2b00      	cmp	r3, #0
 800400a:	d102      	bne.n	8004012 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800400c:	2301      	movs	r3, #1
 800400e:	60fb      	str	r3, [r7, #12]
 8004010:	e001      	b.n	8004016 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8004012:	2300      	movs	r3, #0
 8004014:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8004016:	f001 fbbd 	bl	8005794 <vPortExitCritical>

    return xReturn;
 800401a:	68fb      	ldr	r3, [r7, #12]
}
 800401c:	4618      	mov	r0, r3
 800401e:	3710      	adds	r7, #16
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800402c:	f001 fb82 	bl	8005734 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004038:	429a      	cmp	r2, r3
 800403a:	d102      	bne.n	8004042 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800403c:	2301      	movs	r3, #1
 800403e:	60fb      	str	r3, [r7, #12]
 8004040:	e001      	b.n	8004046 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8004042:	2300      	movs	r3, #0
 8004044:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8004046:	f001 fba5 	bl	8005794 <vPortExitCritical>

    return xReturn;
 800404a:	68fb      	ldr	r3, [r7, #12]
}
 800404c:	4618      	mov	r0, r3
 800404e:	3710      	adds	r7, #16
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8004054:	b480      	push	{r7}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800405e:	2300      	movs	r3, #0
 8004060:	60fb      	str	r3, [r7, #12]
 8004062:	e014      	b.n	800408e <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004064:	4a0f      	ldr	r2, [pc, #60]	; (80040a4 <vQueueAddToRegistry+0x50>)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d10b      	bne.n	8004088 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004070:	490c      	ldr	r1, [pc, #48]	; (80040a4 <vQueueAddToRegistry+0x50>)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	683a      	ldr	r2, [r7, #0]
 8004076:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 800407a:	4a0a      	ldr	r2, [pc, #40]	; (80040a4 <vQueueAddToRegistry+0x50>)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	00db      	lsls	r3, r3, #3
 8004080:	4413      	add	r3, r2
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8004086:	e006      	b.n	8004096 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	3301      	adds	r3, #1
 800408c:	60fb      	str	r3, [r7, #12]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2b07      	cmp	r3, #7
 8004092:	d9e7      	bls.n	8004064 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8004094:	bf00      	nop
 8004096:	bf00      	nop
 8004098:	3714      	adds	r7, #20
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	200000fc 	.word	0x200000fc

080040a8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80040b8:	f001 fb3c 	bl	8005734 <vPortEnterCritical>
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040c2:	b25b      	sxtb	r3, r3
 80040c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c8:	d103      	bne.n	80040d2 <vQueueWaitForMessageRestricted+0x2a>
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040d8:	b25b      	sxtb	r3, r3
 80040da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040de:	d103      	bne.n	80040e8 <vQueueWaitForMessageRestricted+0x40>
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040e8:	f001 fb54 	bl	8005794 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d106      	bne.n	8004102 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	3324      	adds	r3, #36	; 0x24
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	68b9      	ldr	r1, [r7, #8]
 80040fc:	4618      	mov	r0, r3
 80040fe:	f000 fb91 	bl	8004824 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8004102:	6978      	ldr	r0, [r7, #20]
 8004104:	f7ff ff26 	bl	8003f54 <prvUnlockQueue>
    }
 8004108:	bf00      	nop
 800410a:	3718      	adds	r7, #24
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8004110:	b580      	push	{r7, lr}
 8004112:	b08c      	sub	sp, #48	; 0x30
 8004114:	af04      	add	r7, sp, #16
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	603b      	str	r3, [r7, #0]
 800411c:	4613      	mov	r3, r2
 800411e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004120:	88fb      	ldrh	r3, [r7, #6]
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	4618      	mov	r0, r3
 8004126:	f001 fc29 	bl	800597c <pvPortMalloc>
 800412a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00e      	beq.n	8004150 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004132:	2058      	movs	r0, #88	; 0x58
 8004134:	f001 fc22 	bl	800597c <pvPortMalloc>
 8004138:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d003      	beq.n	8004148 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	697a      	ldr	r2, [r7, #20]
 8004144:	631a      	str	r2, [r3, #48]	; 0x30
 8004146:	e005      	b.n	8004154 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8004148:	6978      	ldr	r0, [r7, #20]
 800414a:	f001 fcf7 	bl	8005b3c <vPortFree>
 800414e:	e001      	b.n	8004154 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8004150:	2300      	movs	r3, #0
 8004152:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d013      	beq.n	8004182 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800415a:	88fa      	ldrh	r2, [r7, #6]
 800415c:	2300      	movs	r3, #0
 800415e:	9303      	str	r3, [sp, #12]
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	9302      	str	r3, [sp, #8]
 8004164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004166:	9301      	str	r3, [sp, #4]
 8004168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800416a:	9300      	str	r3, [sp, #0]
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	68b9      	ldr	r1, [r7, #8]
 8004170:	68f8      	ldr	r0, [r7, #12]
 8004172:	f000 f80e 	bl	8004192 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8004176:	69f8      	ldr	r0, [r7, #28]
 8004178:	f000 f8a2 	bl	80042c0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800417c:	2301      	movs	r3, #1
 800417e:	61bb      	str	r3, [r7, #24]
 8004180:	e002      	b.n	8004188 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004182:	f04f 33ff 	mov.w	r3, #4294967295
 8004186:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8004188:	69bb      	ldr	r3, [r7, #24]
    }
 800418a:	4618      	mov	r0, r3
 800418c:	3720      	adds	r7, #32
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}

08004192 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8004192:	b580      	push	{r7, lr}
 8004194:	b088      	sub	sp, #32
 8004196:	af00      	add	r7, sp, #0
 8004198:	60f8      	str	r0, [r7, #12]
 800419a:	60b9      	str	r1, [r7, #8]
 800419c:	607a      	str	r2, [r7, #4]
 800419e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80041a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	461a      	mov	r2, r3
 80041aa:	21a5      	movs	r1, #165	; 0xa5
 80041ac:	f001 fe16 	bl	8005ddc <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80041b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80041ba:	3b01      	subs	r3, #1
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	4413      	add	r3, r2
 80041c0:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	f023 0307 	bic.w	r3, r3, #7
 80041c8:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	f003 0307 	and.w	r3, r3, #7
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d00a      	beq.n	80041ea <prvInitialiseNewTask+0x58>
        __asm volatile
 80041d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d8:	f383 8811 	msr	BASEPRI, r3
 80041dc:	f3bf 8f6f 	isb	sy
 80041e0:	f3bf 8f4f 	dsb	sy
 80041e4:	617b      	str	r3, [r7, #20]
    }
 80041e6:	bf00      	nop
 80041e8:	e7fe      	b.n	80041e8 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d01f      	beq.n	8004230 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80041f0:	2300      	movs	r3, #0
 80041f2:	61fb      	str	r3, [r7, #28]
 80041f4:	e012      	b.n	800421c <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80041f6:	68ba      	ldr	r2, [r7, #8]
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	4413      	add	r3, r2
 80041fc:	7819      	ldrb	r1, [r3, #0]
 80041fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	4413      	add	r3, r2
 8004204:	3334      	adds	r3, #52	; 0x34
 8004206:	460a      	mov	r2, r1
 8004208:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800420a:	68ba      	ldr	r2, [r7, #8]
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	4413      	add	r3, r2
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d006      	beq.n	8004224 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	3301      	adds	r3, #1
 800421a:	61fb      	str	r3, [r7, #28]
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	2b09      	cmp	r3, #9
 8004220:	d9e9      	bls.n	80041f6 <prvInitialiseNewTask+0x64>
 8004222:	e000      	b.n	8004226 <prvInitialiseNewTask+0x94>
            {
                break;
 8004224:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004228:	2200      	movs	r2, #0
 800422a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800422e:	e003      	b.n	8004238 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004232:	2200      	movs	r2, #0
 8004234:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800423a:	2b04      	cmp	r3, #4
 800423c:	d901      	bls.n	8004242 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800423e:	2304      	movs	r3, #4
 8004240:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8004242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004244:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004246:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8004248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800424a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800424c:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800424e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004250:	2200      	movs	r2, #0
 8004252:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004256:	3304      	adds	r3, #4
 8004258:	4618      	mov	r0, r3
 800425a:	f7ff f9e5 	bl	8003628 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800425e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004260:	3318      	adds	r3, #24
 8004262:	4618      	mov	r0, r3
 8004264:	f7ff f9e0 	bl	8003628 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800426a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800426c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800426e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004270:	f1c3 0205 	rsb	r2, r3, #5
 8004274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004276:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800427a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800427c:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800427e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004280:	3350      	adds	r3, #80	; 0x50
 8004282:	2204      	movs	r2, #4
 8004284:	2100      	movs	r1, #0
 8004286:	4618      	mov	r0, r3
 8004288:	f001 fda8 	bl	8005ddc <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800428c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800428e:	3354      	adds	r3, #84	; 0x54
 8004290:	2201      	movs	r2, #1
 8004292:	2100      	movs	r1, #0
 8004294:	4618      	mov	r0, r3
 8004296:	f001 fda1 	bl	8005ddc <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800429a:	683a      	ldr	r2, [r7, #0]
 800429c:	68f9      	ldr	r1, [r7, #12]
 800429e:	69b8      	ldr	r0, [r7, #24]
 80042a0:	f001 f898 	bl	80053d4 <pxPortInitialiseStack>
 80042a4:	4602      	mov	r2, r0
 80042a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a8:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80042aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d002      	beq.n	80042b6 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80042b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042b4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80042b6:	bf00      	nop
 80042b8:	3720      	adds	r7, #32
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
	...

080042c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b082      	sub	sp, #8
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80042c8:	f001 fa34 	bl	8005734 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80042cc:	4b2c      	ldr	r3, [pc, #176]	; (8004380 <prvAddNewTaskToReadyList+0xc0>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	3301      	adds	r3, #1
 80042d2:	4a2b      	ldr	r2, [pc, #172]	; (8004380 <prvAddNewTaskToReadyList+0xc0>)
 80042d4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80042d6:	4b2b      	ldr	r3, [pc, #172]	; (8004384 <prvAddNewTaskToReadyList+0xc4>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d109      	bne.n	80042f2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80042de:	4a29      	ldr	r2, [pc, #164]	; (8004384 <prvAddNewTaskToReadyList+0xc4>)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80042e4:	4b26      	ldr	r3, [pc, #152]	; (8004380 <prvAddNewTaskToReadyList+0xc0>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d110      	bne.n	800430e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80042ec:	f000 fbc8 	bl	8004a80 <prvInitialiseTaskLists>
 80042f0:	e00d      	b.n	800430e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80042f2:	4b25      	ldr	r3, [pc, #148]	; (8004388 <prvAddNewTaskToReadyList+0xc8>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d109      	bne.n	800430e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80042fa:	4b22      	ldr	r3, [pc, #136]	; (8004384 <prvAddNewTaskToReadyList+0xc4>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004304:	429a      	cmp	r2, r3
 8004306:	d802      	bhi.n	800430e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8004308:	4a1e      	ldr	r2, [pc, #120]	; (8004384 <prvAddNewTaskToReadyList+0xc4>)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800430e:	4b1f      	ldr	r3, [pc, #124]	; (800438c <prvAddNewTaskToReadyList+0xcc>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	3301      	adds	r3, #1
 8004314:	4a1d      	ldr	r2, [pc, #116]	; (800438c <prvAddNewTaskToReadyList+0xcc>)
 8004316:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004318:	4b1c      	ldr	r3, [pc, #112]	; (800438c <prvAddNewTaskToReadyList+0xcc>)
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004324:	2201      	movs	r2, #1
 8004326:	409a      	lsls	r2, r3
 8004328:	4b19      	ldr	r3, [pc, #100]	; (8004390 <prvAddNewTaskToReadyList+0xd0>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4313      	orrs	r3, r2
 800432e:	4a18      	ldr	r2, [pc, #96]	; (8004390 <prvAddNewTaskToReadyList+0xd0>)
 8004330:	6013      	str	r3, [r2, #0]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004336:	4613      	mov	r3, r2
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	4413      	add	r3, r2
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	4a15      	ldr	r2, [pc, #84]	; (8004394 <prvAddNewTaskToReadyList+0xd4>)
 8004340:	441a      	add	r2, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	3304      	adds	r3, #4
 8004346:	4619      	mov	r1, r3
 8004348:	4610      	mov	r0, r2
 800434a:	f7ff f97a 	bl	8003642 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800434e:	f001 fa21 	bl	8005794 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8004352:	4b0d      	ldr	r3, [pc, #52]	; (8004388 <prvAddNewTaskToReadyList+0xc8>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00e      	beq.n	8004378 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800435a:	4b0a      	ldr	r3, [pc, #40]	; (8004384 <prvAddNewTaskToReadyList+0xc4>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004364:	429a      	cmp	r2, r3
 8004366:	d207      	bcs.n	8004378 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8004368:	4b0b      	ldr	r3, [pc, #44]	; (8004398 <prvAddNewTaskToReadyList+0xd8>)
 800436a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800436e:	601a      	str	r2, [r3, #0]
 8004370:	f3bf 8f4f 	dsb	sy
 8004374:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004378:	bf00      	nop
 800437a:	3708      	adds	r7, #8
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}
 8004380:	20000214 	.word	0x20000214
 8004384:	2000013c 	.word	0x2000013c
 8004388:	20000220 	.word	0x20000220
 800438c:	20000230 	.word	0x20000230
 8004390:	2000021c 	.word	0x2000021c
 8004394:	20000140 	.word	0x20000140
 8004398:	e000ed04 	.word	0xe000ed04

0800439c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b086      	sub	sp, #24
 80043a0:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80043a2:	4b20      	ldr	r3, [pc, #128]	; (8004424 <vTaskStartScheduler+0x88>)
 80043a4:	9301      	str	r3, [sp, #4]
 80043a6:	2300      	movs	r3, #0
 80043a8:	9300      	str	r3, [sp, #0]
 80043aa:	2300      	movs	r3, #0
 80043ac:	2282      	movs	r2, #130	; 0x82
 80043ae:	491e      	ldr	r1, [pc, #120]	; (8004428 <vTaskStartScheduler+0x8c>)
 80043b0:	481e      	ldr	r0, [pc, #120]	; (800442c <vTaskStartScheduler+0x90>)
 80043b2:	f7ff fead 	bl	8004110 <xTaskCreate>
 80043b6:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d102      	bne.n	80043c4 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80043be:	f000 fcf7 	bl	8004db0 <xTimerCreateTimerTask>
 80043c2:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d116      	bne.n	80043f8 <vTaskStartScheduler+0x5c>
        __asm volatile
 80043ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ce:	f383 8811 	msr	BASEPRI, r3
 80043d2:	f3bf 8f6f 	isb	sy
 80043d6:	f3bf 8f4f 	dsb	sy
 80043da:	60bb      	str	r3, [r7, #8]
    }
 80043dc:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80043de:	4b14      	ldr	r3, [pc, #80]	; (8004430 <vTaskStartScheduler+0x94>)
 80043e0:	f04f 32ff 	mov.w	r2, #4294967295
 80043e4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80043e6:	4b13      	ldr	r3, [pc, #76]	; (8004434 <vTaskStartScheduler+0x98>)
 80043e8:	2201      	movs	r2, #1
 80043ea:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80043ec:	4b12      	ldr	r3, [pc, #72]	; (8004438 <vTaskStartScheduler+0x9c>)
 80043ee:	2200      	movs	r2, #0
 80043f0:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80043f2:	f001 f87f 	bl	80054f4 <xPortStartScheduler>
 80043f6:	e00e      	b.n	8004416 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043fe:	d10a      	bne.n	8004416 <vTaskStartScheduler+0x7a>
        __asm volatile
 8004400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004404:	f383 8811 	msr	BASEPRI, r3
 8004408:	f3bf 8f6f 	isb	sy
 800440c:	f3bf 8f4f 	dsb	sy
 8004410:	607b      	str	r3, [r7, #4]
    }
 8004412:	bf00      	nop
 8004414:	e7fe      	b.n	8004414 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8004416:	4b09      	ldr	r3, [pc, #36]	; (800443c <vTaskStartScheduler+0xa0>)
 8004418:	681b      	ldr	r3, [r3, #0]
}
 800441a:	bf00      	nop
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	20000238 	.word	0x20000238
 8004428:	08005e24 	.word	0x08005e24
 800442c:	08004a51 	.word	0x08004a51
 8004430:	20000234 	.word	0x20000234
 8004434:	20000220 	.word	0x20000220
 8004438:	20000218 	.word	0x20000218
 800443c:	2000000c 	.word	0x2000000c

08004440 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004440:	b480      	push	{r7}
 8004442:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8004444:	4b04      	ldr	r3, [pc, #16]	; (8004458 <vTaskSuspendAll+0x18>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	3301      	adds	r3, #1
 800444a:	4a03      	ldr	r2, [pc, #12]	; (8004458 <vTaskSuspendAll+0x18>)
 800444c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800444e:	bf00      	nop
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr
 8004458:	2000023c 	.word	0x2000023c

0800445c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8004462:	2300      	movs	r3, #0
 8004464:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8004466:	2300      	movs	r3, #0
 8004468:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800446a:	4b41      	ldr	r3, [pc, #260]	; (8004570 <xTaskResumeAll+0x114>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d10a      	bne.n	8004488 <xTaskResumeAll+0x2c>
        __asm volatile
 8004472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004476:	f383 8811 	msr	BASEPRI, r3
 800447a:	f3bf 8f6f 	isb	sy
 800447e:	f3bf 8f4f 	dsb	sy
 8004482:	603b      	str	r3, [r7, #0]
    }
 8004484:	bf00      	nop
 8004486:	e7fe      	b.n	8004486 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8004488:	f001 f954 	bl	8005734 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800448c:	4b38      	ldr	r3, [pc, #224]	; (8004570 <xTaskResumeAll+0x114>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	3b01      	subs	r3, #1
 8004492:	4a37      	ldr	r2, [pc, #220]	; (8004570 <xTaskResumeAll+0x114>)
 8004494:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004496:	4b36      	ldr	r3, [pc, #216]	; (8004570 <xTaskResumeAll+0x114>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d161      	bne.n	8004562 <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800449e:	4b35      	ldr	r3, [pc, #212]	; (8004574 <xTaskResumeAll+0x118>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d05d      	beq.n	8004562 <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80044a6:	e02e      	b.n	8004506 <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044a8:	4b33      	ldr	r3, [pc, #204]	; (8004578 <xTaskResumeAll+0x11c>)
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	3318      	adds	r3, #24
 80044b4:	4618      	mov	r0, r3
 80044b6:	f7ff f921 	bl	80036fc <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	3304      	adds	r3, #4
 80044be:	4618      	mov	r0, r3
 80044c0:	f7ff f91c 	bl	80036fc <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c8:	2201      	movs	r2, #1
 80044ca:	409a      	lsls	r2, r3
 80044cc:	4b2b      	ldr	r3, [pc, #172]	; (800457c <xTaskResumeAll+0x120>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	4a2a      	ldr	r2, [pc, #168]	; (800457c <xTaskResumeAll+0x120>)
 80044d4:	6013      	str	r3, [r2, #0]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044da:	4613      	mov	r3, r2
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	4413      	add	r3, r2
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	4a27      	ldr	r2, [pc, #156]	; (8004580 <xTaskResumeAll+0x124>)
 80044e4:	441a      	add	r2, r3
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	3304      	adds	r3, #4
 80044ea:	4619      	mov	r1, r3
 80044ec:	4610      	mov	r0, r2
 80044ee:	f7ff f8a8 	bl	8003642 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044f6:	4b23      	ldr	r3, [pc, #140]	; (8004584 <xTaskResumeAll+0x128>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d302      	bcc.n	8004506 <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8004500:	4b21      	ldr	r3, [pc, #132]	; (8004588 <xTaskResumeAll+0x12c>)
 8004502:	2201      	movs	r2, #1
 8004504:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004506:	4b1c      	ldr	r3, [pc, #112]	; (8004578 <xTaskResumeAll+0x11c>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d1cc      	bne.n	80044a8 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d001      	beq.n	8004518 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8004514:	f000 fb32 	bl	8004b7c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004518:	4b1c      	ldr	r3, [pc, #112]	; (800458c <xTaskResumeAll+0x130>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d010      	beq.n	8004546 <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8004524:	f000 f846 	bl	80045b4 <xTaskIncrementTick>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d002      	beq.n	8004534 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 800452e:	4b16      	ldr	r3, [pc, #88]	; (8004588 <xTaskResumeAll+0x12c>)
 8004530:	2201      	movs	r2, #1
 8004532:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	3b01      	subs	r3, #1
 8004538:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d1f1      	bne.n	8004524 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8004540:	4b12      	ldr	r3, [pc, #72]	; (800458c <xTaskResumeAll+0x130>)
 8004542:	2200      	movs	r2, #0
 8004544:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8004546:	4b10      	ldr	r3, [pc, #64]	; (8004588 <xTaskResumeAll+0x12c>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d009      	beq.n	8004562 <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800454e:	2301      	movs	r3, #1
 8004550:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8004552:	4b0f      	ldr	r3, [pc, #60]	; (8004590 <xTaskResumeAll+0x134>)
 8004554:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004558:	601a      	str	r2, [r3, #0]
 800455a:	f3bf 8f4f 	dsb	sy
 800455e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8004562:	f001 f917 	bl	8005794 <vPortExitCritical>

    return xAlreadyYielded;
 8004566:	68bb      	ldr	r3, [r7, #8]
}
 8004568:	4618      	mov	r0, r3
 800456a:	3710      	adds	r7, #16
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	2000023c 	.word	0x2000023c
 8004574:	20000214 	.word	0x20000214
 8004578:	200001d4 	.word	0x200001d4
 800457c:	2000021c 	.word	0x2000021c
 8004580:	20000140 	.word	0x20000140
 8004584:	2000013c 	.word	0x2000013c
 8004588:	20000228 	.word	0x20000228
 800458c:	20000224 	.word	0x20000224
 8004590:	e000ed04 	.word	0xe000ed04

08004594 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800459a:	4b05      	ldr	r3, [pc, #20]	; (80045b0 <xTaskGetTickCount+0x1c>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80045a0:	687b      	ldr	r3, [r7, #4]
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	370c      	adds	r7, #12
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	20000218 	.word	0x20000218

080045b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b086      	sub	sp, #24
 80045b8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80045ba:	2300      	movs	r3, #0
 80045bc:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045be:	4b4e      	ldr	r3, [pc, #312]	; (80046f8 <xTaskIncrementTick+0x144>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	f040 808e 	bne.w	80046e4 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80045c8:	4b4c      	ldr	r3, [pc, #304]	; (80046fc <xTaskIncrementTick+0x148>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	3301      	adds	r3, #1
 80045ce:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80045d0:	4a4a      	ldr	r2, [pc, #296]	; (80046fc <xTaskIncrementTick+0x148>)
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d120      	bne.n	800461e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80045dc:	4b48      	ldr	r3, [pc, #288]	; (8004700 <xTaskIncrementTick+0x14c>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00a      	beq.n	80045fc <xTaskIncrementTick+0x48>
        __asm volatile
 80045e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ea:	f383 8811 	msr	BASEPRI, r3
 80045ee:	f3bf 8f6f 	isb	sy
 80045f2:	f3bf 8f4f 	dsb	sy
 80045f6:	603b      	str	r3, [r7, #0]
    }
 80045f8:	bf00      	nop
 80045fa:	e7fe      	b.n	80045fa <xTaskIncrementTick+0x46>
 80045fc:	4b40      	ldr	r3, [pc, #256]	; (8004700 <xTaskIncrementTick+0x14c>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	60fb      	str	r3, [r7, #12]
 8004602:	4b40      	ldr	r3, [pc, #256]	; (8004704 <xTaskIncrementTick+0x150>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a3e      	ldr	r2, [pc, #248]	; (8004700 <xTaskIncrementTick+0x14c>)
 8004608:	6013      	str	r3, [r2, #0]
 800460a:	4a3e      	ldr	r2, [pc, #248]	; (8004704 <xTaskIncrementTick+0x150>)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6013      	str	r3, [r2, #0]
 8004610:	4b3d      	ldr	r3, [pc, #244]	; (8004708 <xTaskIncrementTick+0x154>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	3301      	adds	r3, #1
 8004616:	4a3c      	ldr	r2, [pc, #240]	; (8004708 <xTaskIncrementTick+0x154>)
 8004618:	6013      	str	r3, [r2, #0]
 800461a:	f000 faaf 	bl	8004b7c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800461e:	4b3b      	ldr	r3, [pc, #236]	; (800470c <xTaskIncrementTick+0x158>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	693a      	ldr	r2, [r7, #16]
 8004624:	429a      	cmp	r2, r3
 8004626:	d348      	bcc.n	80046ba <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004628:	4b35      	ldr	r3, [pc, #212]	; (8004700 <xTaskIncrementTick+0x14c>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d104      	bne.n	800463c <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004632:	4b36      	ldr	r3, [pc, #216]	; (800470c <xTaskIncrementTick+0x158>)
 8004634:	f04f 32ff 	mov.w	r2, #4294967295
 8004638:	601a      	str	r2, [r3, #0]
                    break;
 800463a:	e03e      	b.n	80046ba <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800463c:	4b30      	ldr	r3, [pc, #192]	; (8004700 <xTaskIncrementTick+0x14c>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800464c:	693a      	ldr	r2, [r7, #16]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	429a      	cmp	r2, r3
 8004652:	d203      	bcs.n	800465c <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004654:	4a2d      	ldr	r2, [pc, #180]	; (800470c <xTaskIncrementTick+0x158>)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800465a:	e02e      	b.n	80046ba <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	3304      	adds	r3, #4
 8004660:	4618      	mov	r0, r3
 8004662:	f7ff f84b 	bl	80036fc <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800466a:	2b00      	cmp	r3, #0
 800466c:	d004      	beq.n	8004678 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	3318      	adds	r3, #24
 8004672:	4618      	mov	r0, r3
 8004674:	f7ff f842 	bl	80036fc <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467c:	2201      	movs	r2, #1
 800467e:	409a      	lsls	r2, r3
 8004680:	4b23      	ldr	r3, [pc, #140]	; (8004710 <xTaskIncrementTick+0x15c>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4313      	orrs	r3, r2
 8004686:	4a22      	ldr	r2, [pc, #136]	; (8004710 <xTaskIncrementTick+0x15c>)
 8004688:	6013      	str	r3, [r2, #0]
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800468e:	4613      	mov	r3, r2
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	4413      	add	r3, r2
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	4a1f      	ldr	r2, [pc, #124]	; (8004714 <xTaskIncrementTick+0x160>)
 8004698:	441a      	add	r2, r3
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	3304      	adds	r3, #4
 800469e:	4619      	mov	r1, r3
 80046a0:	4610      	mov	r0, r2
 80046a2:	f7fe ffce 	bl	8003642 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046aa:	4b1b      	ldr	r3, [pc, #108]	; (8004718 <xTaskIncrementTick+0x164>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d3b9      	bcc.n	8004628 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 80046b4:	2301      	movs	r3, #1
 80046b6:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046b8:	e7b6      	b.n	8004628 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80046ba:	4b17      	ldr	r3, [pc, #92]	; (8004718 <xTaskIncrementTick+0x164>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046c0:	4914      	ldr	r1, [pc, #80]	; (8004714 <xTaskIncrementTick+0x160>)
 80046c2:	4613      	mov	r3, r2
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	4413      	add	r3, r2
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	440b      	add	r3, r1
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d901      	bls.n	80046d6 <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 80046d2:	2301      	movs	r3, #1
 80046d4:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80046d6:	4b11      	ldr	r3, [pc, #68]	; (800471c <xTaskIncrementTick+0x168>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d007      	beq.n	80046ee <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 80046de:	2301      	movs	r3, #1
 80046e0:	617b      	str	r3, [r7, #20]
 80046e2:	e004      	b.n	80046ee <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80046e4:	4b0e      	ldr	r3, [pc, #56]	; (8004720 <xTaskIncrementTick+0x16c>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	3301      	adds	r3, #1
 80046ea:	4a0d      	ldr	r2, [pc, #52]	; (8004720 <xTaskIncrementTick+0x16c>)
 80046ec:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80046ee:	697b      	ldr	r3, [r7, #20]
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3718      	adds	r7, #24
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	2000023c 	.word	0x2000023c
 80046fc:	20000218 	.word	0x20000218
 8004700:	200001cc 	.word	0x200001cc
 8004704:	200001d0 	.word	0x200001d0
 8004708:	2000022c 	.word	0x2000022c
 800470c:	20000234 	.word	0x20000234
 8004710:	2000021c 	.word	0x2000021c
 8004714:	20000140 	.word	0x20000140
 8004718:	2000013c 	.word	0x2000013c
 800471c:	20000228 	.word	0x20000228
 8004720:	20000224 	.word	0x20000224

08004724 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004724:	b480      	push	{r7}
 8004726:	b087      	sub	sp, #28
 8004728:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800472a:	4b27      	ldr	r3, [pc, #156]	; (80047c8 <vTaskSwitchContext+0xa4>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d003      	beq.n	800473a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8004732:	4b26      	ldr	r3, [pc, #152]	; (80047cc <vTaskSwitchContext+0xa8>)
 8004734:	2201      	movs	r2, #1
 8004736:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8004738:	e03f      	b.n	80047ba <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 800473a:	4b24      	ldr	r3, [pc, #144]	; (80047cc <vTaskSwitchContext+0xa8>)
 800473c:	2200      	movs	r2, #0
 800473e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004740:	4b23      	ldr	r3, [pc, #140]	; (80047d0 <vTaskSwitchContext+0xac>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	fab3 f383 	clz	r3, r3
 800474c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800474e:	7afb      	ldrb	r3, [r7, #11]
 8004750:	f1c3 031f 	rsb	r3, r3, #31
 8004754:	617b      	str	r3, [r7, #20]
 8004756:	491f      	ldr	r1, [pc, #124]	; (80047d4 <vTaskSwitchContext+0xb0>)
 8004758:	697a      	ldr	r2, [r7, #20]
 800475a:	4613      	mov	r3, r2
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	4413      	add	r3, r2
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	440b      	add	r3, r1
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d10a      	bne.n	8004780 <vTaskSwitchContext+0x5c>
        __asm volatile
 800476a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800476e:	f383 8811 	msr	BASEPRI, r3
 8004772:	f3bf 8f6f 	isb	sy
 8004776:	f3bf 8f4f 	dsb	sy
 800477a:	607b      	str	r3, [r7, #4]
    }
 800477c:	bf00      	nop
 800477e:	e7fe      	b.n	800477e <vTaskSwitchContext+0x5a>
 8004780:	697a      	ldr	r2, [r7, #20]
 8004782:	4613      	mov	r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	4413      	add	r3, r2
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	4a12      	ldr	r2, [pc, #72]	; (80047d4 <vTaskSwitchContext+0xb0>)
 800478c:	4413      	add	r3, r2
 800478e:	613b      	str	r3, [r7, #16]
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	685a      	ldr	r2, [r3, #4]
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	605a      	str	r2, [r3, #4]
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	685a      	ldr	r2, [r3, #4]
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	3308      	adds	r3, #8
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d104      	bne.n	80047b0 <vTaskSwitchContext+0x8c>
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	685a      	ldr	r2, [r3, #4]
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	605a      	str	r2, [r3, #4]
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	4a08      	ldr	r2, [pc, #32]	; (80047d8 <vTaskSwitchContext+0xb4>)
 80047b8:	6013      	str	r3, [r2, #0]
}
 80047ba:	bf00      	nop
 80047bc:	371c      	adds	r7, #28
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop
 80047c8:	2000023c 	.word	0x2000023c
 80047cc:	20000228 	.word	0x20000228
 80047d0:	2000021c 	.word	0x2000021c
 80047d4:	20000140 	.word	0x20000140
 80047d8:	2000013c 	.word	0x2000013c

080047dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d10a      	bne.n	8004802 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80047ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f0:	f383 8811 	msr	BASEPRI, r3
 80047f4:	f3bf 8f6f 	isb	sy
 80047f8:	f3bf 8f4f 	dsb	sy
 80047fc:	60fb      	str	r3, [r7, #12]
    }
 80047fe:	bf00      	nop
 8004800:	e7fe      	b.n	8004800 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004802:	4b07      	ldr	r3, [pc, #28]	; (8004820 <vTaskPlaceOnEventList+0x44>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	3318      	adds	r3, #24
 8004808:	4619      	mov	r1, r3
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f7fe ff3d 	bl	800368a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004810:	2101      	movs	r1, #1
 8004812:	6838      	ldr	r0, [r7, #0]
 8004814:	f000 fa66 	bl	8004ce4 <prvAddCurrentTaskToDelayedList>
}
 8004818:	bf00      	nop
 800481a:	3710      	adds	r7, #16
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	2000013c 	.word	0x2000013c

08004824 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8004824:	b580      	push	{r7, lr}
 8004826:	b086      	sub	sp, #24
 8004828:	af00      	add	r7, sp, #0
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d10a      	bne.n	800484c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8004836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800483a:	f383 8811 	msr	BASEPRI, r3
 800483e:	f3bf 8f6f 	isb	sy
 8004842:	f3bf 8f4f 	dsb	sy
 8004846:	617b      	str	r3, [r7, #20]
    }
 8004848:	bf00      	nop
 800484a:	e7fe      	b.n	800484a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800484c:	4b0a      	ldr	r3, [pc, #40]	; (8004878 <vTaskPlaceOnEventListRestricted+0x54>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	3318      	adds	r3, #24
 8004852:	4619      	mov	r1, r3
 8004854:	68f8      	ldr	r0, [r7, #12]
 8004856:	f7fe fef4 	bl	8003642 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d002      	beq.n	8004866 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8004860:	f04f 33ff 	mov.w	r3, #4294967295
 8004864:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004866:	6879      	ldr	r1, [r7, #4]
 8004868:	68b8      	ldr	r0, [r7, #8]
 800486a:	f000 fa3b 	bl	8004ce4 <prvAddCurrentTaskToDelayedList>
    }
 800486e:	bf00      	nop
 8004870:	3718      	adds	r7, #24
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	2000013c 	.word	0x2000013c

0800487c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b086      	sub	sp, #24
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d10a      	bne.n	80048a8 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8004892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004896:	f383 8811 	msr	BASEPRI, r3
 800489a:	f3bf 8f6f 	isb	sy
 800489e:	f3bf 8f4f 	dsb	sy
 80048a2:	60fb      	str	r3, [r7, #12]
    }
 80048a4:	bf00      	nop
 80048a6:	e7fe      	b.n	80048a6 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	3318      	adds	r3, #24
 80048ac:	4618      	mov	r0, r3
 80048ae:	f7fe ff25 	bl	80036fc <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048b2:	4b1d      	ldr	r3, [pc, #116]	; (8004928 <xTaskRemoveFromEventList+0xac>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d11c      	bne.n	80048f4 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	3304      	adds	r3, #4
 80048be:	4618      	mov	r0, r3
 80048c0:	f7fe ff1c 	bl	80036fc <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c8:	2201      	movs	r2, #1
 80048ca:	409a      	lsls	r2, r3
 80048cc:	4b17      	ldr	r3, [pc, #92]	; (800492c <xTaskRemoveFromEventList+0xb0>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	4a16      	ldr	r2, [pc, #88]	; (800492c <xTaskRemoveFromEventList+0xb0>)
 80048d4:	6013      	str	r3, [r2, #0]
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048da:	4613      	mov	r3, r2
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	4413      	add	r3, r2
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	4a13      	ldr	r2, [pc, #76]	; (8004930 <xTaskRemoveFromEventList+0xb4>)
 80048e4:	441a      	add	r2, r3
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	3304      	adds	r3, #4
 80048ea:	4619      	mov	r1, r3
 80048ec:	4610      	mov	r0, r2
 80048ee:	f7fe fea8 	bl	8003642 <vListInsertEnd>
 80048f2:	e005      	b.n	8004900 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	3318      	adds	r3, #24
 80048f8:	4619      	mov	r1, r3
 80048fa:	480e      	ldr	r0, [pc, #56]	; (8004934 <xTaskRemoveFromEventList+0xb8>)
 80048fc:	f7fe fea1 	bl	8003642 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004904:	4b0c      	ldr	r3, [pc, #48]	; (8004938 <xTaskRemoveFromEventList+0xbc>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800490a:	429a      	cmp	r2, r3
 800490c:	d905      	bls.n	800491a <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800490e:	2301      	movs	r3, #1
 8004910:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8004912:	4b0a      	ldr	r3, [pc, #40]	; (800493c <xTaskRemoveFromEventList+0xc0>)
 8004914:	2201      	movs	r2, #1
 8004916:	601a      	str	r2, [r3, #0]
 8004918:	e001      	b.n	800491e <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 800491a:	2300      	movs	r3, #0
 800491c:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800491e:	697b      	ldr	r3, [r7, #20]
}
 8004920:	4618      	mov	r0, r3
 8004922:	3718      	adds	r7, #24
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	2000023c 	.word	0x2000023c
 800492c:	2000021c 	.word	0x2000021c
 8004930:	20000140 	.word	0x20000140
 8004934:	200001d4 	.word	0x200001d4
 8004938:	2000013c 	.word	0x2000013c
 800493c:	20000228 	.word	0x20000228

08004940 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004948:	4b06      	ldr	r3, [pc, #24]	; (8004964 <vTaskInternalSetTimeOutState+0x24>)
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004950:	4b05      	ldr	r3, [pc, #20]	; (8004968 <vTaskInternalSetTimeOutState+0x28>)
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	605a      	str	r2, [r3, #4]
}
 8004958:	bf00      	nop
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr
 8004964:	2000022c 	.word	0x2000022c
 8004968:	20000218 	.word	0x20000218

0800496c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b088      	sub	sp, #32
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d10a      	bne.n	8004992 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 800497c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004980:	f383 8811 	msr	BASEPRI, r3
 8004984:	f3bf 8f6f 	isb	sy
 8004988:	f3bf 8f4f 	dsb	sy
 800498c:	613b      	str	r3, [r7, #16]
    }
 800498e:	bf00      	nop
 8004990:	e7fe      	b.n	8004990 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d10a      	bne.n	80049ae <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8004998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800499c:	f383 8811 	msr	BASEPRI, r3
 80049a0:	f3bf 8f6f 	isb	sy
 80049a4:	f3bf 8f4f 	dsb	sy
 80049a8:	60fb      	str	r3, [r7, #12]
    }
 80049aa:	bf00      	nop
 80049ac:	e7fe      	b.n	80049ac <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80049ae:	f000 fec1 	bl	8005734 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80049b2:	4b1f      	ldr	r3, [pc, #124]	; (8004a30 <xTaskCheckForTimeOut+0xc4>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	69ba      	ldr	r2, [r7, #24]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ca:	d102      	bne.n	80049d2 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80049cc:	2300      	movs	r3, #0
 80049ce:	61fb      	str	r3, [r7, #28]
 80049d0:	e026      	b.n	8004a20 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	4b17      	ldr	r3, [pc, #92]	; (8004a34 <xTaskCheckForTimeOut+0xc8>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	429a      	cmp	r2, r3
 80049dc:	d00a      	beq.n	80049f4 <xTaskCheckForTimeOut+0x88>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	69ba      	ldr	r2, [r7, #24]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d305      	bcc.n	80049f4 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80049e8:	2301      	movs	r3, #1
 80049ea:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	2200      	movs	r2, #0
 80049f0:	601a      	str	r2, [r3, #0]
 80049f2:	e015      	b.n	8004a20 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	697a      	ldr	r2, [r7, #20]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d20b      	bcs.n	8004a16 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	1ad2      	subs	r2, r2, r3
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f7ff ff98 	bl	8004940 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004a10:	2300      	movs	r3, #0
 8004a12:	61fb      	str	r3, [r7, #28]
 8004a14:	e004      	b.n	8004a20 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004a20:	f000 feb8 	bl	8005794 <vPortExitCritical>

    return xReturn;
 8004a24:	69fb      	ldr	r3, [r7, #28]
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3720      	adds	r7, #32
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	20000218 	.word	0x20000218
 8004a34:	2000022c 	.word	0x2000022c

08004a38 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004a38:	b480      	push	{r7}
 8004a3a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8004a3c:	4b03      	ldr	r3, [pc, #12]	; (8004a4c <vTaskMissedYield+0x14>)
 8004a3e:	2201      	movs	r2, #1
 8004a40:	601a      	str	r2, [r3, #0]
}
 8004a42:	bf00      	nop
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr
 8004a4c:	20000228 	.word	0x20000228

08004a50 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004a58:	f000 f852 	bl	8004b00 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004a5c:	4b06      	ldr	r3, [pc, #24]	; (8004a78 <prvIdleTask+0x28>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d9f9      	bls.n	8004a58 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8004a64:	4b05      	ldr	r3, [pc, #20]	; (8004a7c <prvIdleTask+0x2c>)
 8004a66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a6a:	601a      	str	r2, [r3, #0]
 8004a6c:	f3bf 8f4f 	dsb	sy
 8004a70:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004a74:	e7f0      	b.n	8004a58 <prvIdleTask+0x8>
 8004a76:	bf00      	nop
 8004a78:	20000140 	.word	0x20000140
 8004a7c:	e000ed04 	.word	0xe000ed04

08004a80 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a86:	2300      	movs	r3, #0
 8004a88:	607b      	str	r3, [r7, #4]
 8004a8a:	e00c      	b.n	8004aa6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	4613      	mov	r3, r2
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	4413      	add	r3, r2
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	4a12      	ldr	r2, [pc, #72]	; (8004ae0 <prvInitialiseTaskLists+0x60>)
 8004a98:	4413      	add	r3, r2
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f7fe fda4 	bl	80035e8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	3301      	adds	r3, #1
 8004aa4:	607b      	str	r3, [r7, #4]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2b04      	cmp	r3, #4
 8004aaa:	d9ef      	bls.n	8004a8c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004aac:	480d      	ldr	r0, [pc, #52]	; (8004ae4 <prvInitialiseTaskLists+0x64>)
 8004aae:	f7fe fd9b 	bl	80035e8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004ab2:	480d      	ldr	r0, [pc, #52]	; (8004ae8 <prvInitialiseTaskLists+0x68>)
 8004ab4:	f7fe fd98 	bl	80035e8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004ab8:	480c      	ldr	r0, [pc, #48]	; (8004aec <prvInitialiseTaskLists+0x6c>)
 8004aba:	f7fe fd95 	bl	80035e8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8004abe:	480c      	ldr	r0, [pc, #48]	; (8004af0 <prvInitialiseTaskLists+0x70>)
 8004ac0:	f7fe fd92 	bl	80035e8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8004ac4:	480b      	ldr	r0, [pc, #44]	; (8004af4 <prvInitialiseTaskLists+0x74>)
 8004ac6:	f7fe fd8f 	bl	80035e8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8004aca:	4b0b      	ldr	r3, [pc, #44]	; (8004af8 <prvInitialiseTaskLists+0x78>)
 8004acc:	4a05      	ldr	r2, [pc, #20]	; (8004ae4 <prvInitialiseTaskLists+0x64>)
 8004ace:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004ad0:	4b0a      	ldr	r3, [pc, #40]	; (8004afc <prvInitialiseTaskLists+0x7c>)
 8004ad2:	4a05      	ldr	r2, [pc, #20]	; (8004ae8 <prvInitialiseTaskLists+0x68>)
 8004ad4:	601a      	str	r2, [r3, #0]
}
 8004ad6:	bf00      	nop
 8004ad8:	3708      	adds	r7, #8
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	20000140 	.word	0x20000140
 8004ae4:	200001a4 	.word	0x200001a4
 8004ae8:	200001b8 	.word	0x200001b8
 8004aec:	200001d4 	.word	0x200001d4
 8004af0:	200001e8 	.word	0x200001e8
 8004af4:	20000200 	.word	0x20000200
 8004af8:	200001cc 	.word	0x200001cc
 8004afc:	200001d0 	.word	0x200001d0

08004b00 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b082      	sub	sp, #8
 8004b04:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b06:	e019      	b.n	8004b3c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8004b08:	f000 fe14 	bl	8005734 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b0c:	4b10      	ldr	r3, [pc, #64]	; (8004b50 <prvCheckTasksWaitingTermination+0x50>)
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	3304      	adds	r3, #4
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f7fe fdef 	bl	80036fc <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8004b1e:	4b0d      	ldr	r3, [pc, #52]	; (8004b54 <prvCheckTasksWaitingTermination+0x54>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	3b01      	subs	r3, #1
 8004b24:	4a0b      	ldr	r2, [pc, #44]	; (8004b54 <prvCheckTasksWaitingTermination+0x54>)
 8004b26:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8004b28:	4b0b      	ldr	r3, [pc, #44]	; (8004b58 <prvCheckTasksWaitingTermination+0x58>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	3b01      	subs	r3, #1
 8004b2e:	4a0a      	ldr	r2, [pc, #40]	; (8004b58 <prvCheckTasksWaitingTermination+0x58>)
 8004b30:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8004b32:	f000 fe2f 	bl	8005794 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 f810 	bl	8004b5c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b3c:	4b06      	ldr	r3, [pc, #24]	; (8004b58 <prvCheckTasksWaitingTermination+0x58>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d1e1      	bne.n	8004b08 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8004b44:	bf00      	nop
 8004b46:	bf00      	nop
 8004b48:	3708      	adds	r7, #8
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	200001e8 	.word	0x200001e8
 8004b54:	20000214 	.word	0x20000214
 8004b58:	200001fc 	.word	0x200001fc

08004b5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f000 ffe7 	bl	8005b3c <vPortFree>
                vPortFree( pxTCB );
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 ffe4 	bl	8005b3c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004b74:	bf00      	nop
 8004b76:	3708      	adds	r7, #8
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b80:	4b0a      	ldr	r3, [pc, #40]	; (8004bac <prvResetNextTaskUnblockTime+0x30>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d104      	bne.n	8004b94 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8004b8a:	4b09      	ldr	r3, [pc, #36]	; (8004bb0 <prvResetNextTaskUnblockTime+0x34>)
 8004b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8004b90:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004b92:	e005      	b.n	8004ba0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004b94:	4b05      	ldr	r3, [pc, #20]	; (8004bac <prvResetNextTaskUnblockTime+0x30>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a04      	ldr	r2, [pc, #16]	; (8004bb0 <prvResetNextTaskUnblockTime+0x34>)
 8004b9e:	6013      	str	r3, [r2, #0]
}
 8004ba0:	bf00      	nop
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	200001cc 	.word	0x200001cc
 8004bb0:	20000234 	.word	0x20000234

08004bb4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8004bba:	4b0b      	ldr	r3, [pc, #44]	; (8004be8 <xTaskGetSchedulerState+0x34>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d102      	bne.n	8004bc8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	607b      	str	r3, [r7, #4]
 8004bc6:	e008      	b.n	8004bda <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bc8:	4b08      	ldr	r3, [pc, #32]	; (8004bec <xTaskGetSchedulerState+0x38>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d102      	bne.n	8004bd6 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004bd0:	2302      	movs	r3, #2
 8004bd2:	607b      	str	r3, [r7, #4]
 8004bd4:	e001      	b.n	8004bda <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8004bda:	687b      	ldr	r3, [r7, #4]
    }
 8004bdc:	4618      	mov	r0, r3
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr
 8004be8:	20000220 	.word	0x20000220
 8004bec:	2000023c 	.word	0x2000023c

08004bf0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b086      	sub	sp, #24
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d063      	beq.n	8004cce <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8004c06:	4b34      	ldr	r3, [pc, #208]	; (8004cd8 <xTaskPriorityDisinherit+0xe8>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	693a      	ldr	r2, [r7, #16]
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d00a      	beq.n	8004c26 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8004c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c14:	f383 8811 	msr	BASEPRI, r3
 8004c18:	f3bf 8f6f 	isb	sy
 8004c1c:	f3bf 8f4f 	dsb	sy
 8004c20:	60fb      	str	r3, [r7, #12]
    }
 8004c22:	bf00      	nop
 8004c24:	e7fe      	b.n	8004c24 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d10a      	bne.n	8004c44 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8004c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c32:	f383 8811 	msr	BASEPRI, r3
 8004c36:	f3bf 8f6f 	isb	sy
 8004c3a:	f3bf 8f4f 	dsb	sy
 8004c3e:	60bb      	str	r3, [r7, #8]
    }
 8004c40:	bf00      	nop
 8004c42:	e7fe      	b.n	8004c42 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c48:	1e5a      	subs	r2, r3, #1
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d039      	beq.n	8004cce <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d135      	bne.n	8004cce <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	3304      	adds	r3, #4
 8004c66:	4618      	mov	r0, r3
 8004c68:	f7fe fd48 	bl	80036fc <uxListRemove>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d10a      	bne.n	8004c88 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c76:	2201      	movs	r2, #1
 8004c78:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7c:	43da      	mvns	r2, r3
 8004c7e:	4b17      	ldr	r3, [pc, #92]	; (8004cdc <xTaskPriorityDisinherit+0xec>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4013      	ands	r3, r2
 8004c84:	4a15      	ldr	r2, [pc, #84]	; (8004cdc <xTaskPriorityDisinherit+0xec>)
 8004c86:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c94:	f1c3 0205 	rsb	r2, r3, #5
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	409a      	lsls	r2, r3
 8004ca4:	4b0d      	ldr	r3, [pc, #52]	; (8004cdc <xTaskPriorityDisinherit+0xec>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	4a0c      	ldr	r2, [pc, #48]	; (8004cdc <xTaskPriorityDisinherit+0xec>)
 8004cac:	6013      	str	r3, [r2, #0]
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cb2:	4613      	mov	r3, r2
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	4413      	add	r3, r2
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	4a09      	ldr	r2, [pc, #36]	; (8004ce0 <xTaskPriorityDisinherit+0xf0>)
 8004cbc:	441a      	add	r2, r3
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	3304      	adds	r3, #4
 8004cc2:	4619      	mov	r1, r3
 8004cc4:	4610      	mov	r0, r2
 8004cc6:	f7fe fcbc 	bl	8003642 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004cce:	697b      	ldr	r3, [r7, #20]
    }
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3718      	adds	r7, #24
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	2000013c 	.word	0x2000013c
 8004cdc:	2000021c 	.word	0x2000021c
 8004ce0:	20000140 	.word	0x20000140

08004ce4 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b084      	sub	sp, #16
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004cee:	4b29      	ldr	r3, [pc, #164]	; (8004d94 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004cf4:	4b28      	ldr	r3, [pc, #160]	; (8004d98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	3304      	adds	r3, #4
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7fe fcfe 	bl	80036fc <uxListRemove>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d10b      	bne.n	8004d1e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004d06:	4b24      	ldr	r3, [pc, #144]	; (8004d98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d12:	43da      	mvns	r2, r3
 8004d14:	4b21      	ldr	r3, [pc, #132]	; (8004d9c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4013      	ands	r3, r2
 8004d1a:	4a20      	ldr	r2, [pc, #128]	; (8004d9c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004d1c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d24:	d10a      	bne.n	8004d3c <prvAddCurrentTaskToDelayedList+0x58>
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d007      	beq.n	8004d3c <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d2c:	4b1a      	ldr	r3, [pc, #104]	; (8004d98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	3304      	adds	r3, #4
 8004d32:	4619      	mov	r1, r3
 8004d34:	481a      	ldr	r0, [pc, #104]	; (8004da0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004d36:	f7fe fc84 	bl	8003642 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004d3a:	e026      	b.n	8004d8a <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8004d3c:	68fa      	ldr	r2, [r7, #12]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4413      	add	r3, r2
 8004d42:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004d44:	4b14      	ldr	r3, [pc, #80]	; (8004d98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68ba      	ldr	r2, [r7, #8]
 8004d4a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8004d4c:	68ba      	ldr	r2, [r7, #8]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d209      	bcs.n	8004d68 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d54:	4b13      	ldr	r3, [pc, #76]	; (8004da4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	4b0f      	ldr	r3, [pc, #60]	; (8004d98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	3304      	adds	r3, #4
 8004d5e:	4619      	mov	r1, r3
 8004d60:	4610      	mov	r0, r2
 8004d62:	f7fe fc92 	bl	800368a <vListInsert>
}
 8004d66:	e010      	b.n	8004d8a <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d68:	4b0f      	ldr	r3, [pc, #60]	; (8004da8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	4b0a      	ldr	r3, [pc, #40]	; (8004d98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	3304      	adds	r3, #4
 8004d72:	4619      	mov	r1, r3
 8004d74:	4610      	mov	r0, r2
 8004d76:	f7fe fc88 	bl	800368a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8004d7a:	4b0c      	ldr	r3, [pc, #48]	; (8004dac <prvAddCurrentTaskToDelayedList+0xc8>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68ba      	ldr	r2, [r7, #8]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d202      	bcs.n	8004d8a <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8004d84:	4a09      	ldr	r2, [pc, #36]	; (8004dac <prvAddCurrentTaskToDelayedList+0xc8>)
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	6013      	str	r3, [r2, #0]
}
 8004d8a:	bf00      	nop
 8004d8c:	3710      	adds	r7, #16
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	20000218 	.word	0x20000218
 8004d98:	2000013c 	.word	0x2000013c
 8004d9c:	2000021c 	.word	0x2000021c
 8004da0:	20000200 	.word	0x20000200
 8004da4:	200001d0 	.word	0x200001d0
 8004da8:	200001cc 	.word	0x200001cc
 8004dac:	20000234 	.word	0x20000234

08004db0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8004db6:	2300      	movs	r3, #0
 8004db8:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8004dba:	f000 fad5 	bl	8005368 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8004dbe:	4b11      	ldr	r3, [pc, #68]	; (8004e04 <xTimerCreateTimerTask+0x54>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d00b      	beq.n	8004dde <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8004dc6:	4b10      	ldr	r3, [pc, #64]	; (8004e08 <xTimerCreateTimerTask+0x58>)
 8004dc8:	9301      	str	r3, [sp, #4]
 8004dca:	2302      	movs	r3, #2
 8004dcc:	9300      	str	r3, [sp, #0]
 8004dce:	2300      	movs	r3, #0
 8004dd0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004dd4:	490d      	ldr	r1, [pc, #52]	; (8004e0c <xTimerCreateTimerTask+0x5c>)
 8004dd6:	480e      	ldr	r0, [pc, #56]	; (8004e10 <xTimerCreateTimerTask+0x60>)
 8004dd8:	f7ff f99a 	bl	8004110 <xTaskCreate>
 8004ddc:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d10a      	bne.n	8004dfa <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8004de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de8:	f383 8811 	msr	BASEPRI, r3
 8004dec:	f3bf 8f6f 	isb	sy
 8004df0:	f3bf 8f4f 	dsb	sy
 8004df4:	603b      	str	r3, [r7, #0]
    }
 8004df6:	bf00      	nop
 8004df8:	e7fe      	b.n	8004df8 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8004dfa:	687b      	ldr	r3, [r7, #4]
    }
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3708      	adds	r7, #8
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	20000270 	.word	0x20000270
 8004e08:	20000274 	.word	0x20000274
 8004e0c:	08005e2c 	.word	0x08005e2c
 8004e10:	08004f49 	.word	0x08004f49

08004e14 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b08a      	sub	sp, #40	; 0x28
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	607a      	str	r2, [r7, #4]
 8004e20:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8004e22:	2300      	movs	r3, #0
 8004e24:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d10a      	bne.n	8004e42 <xTimerGenericCommand+0x2e>
        __asm volatile
 8004e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e30:	f383 8811 	msr	BASEPRI, r3
 8004e34:	f3bf 8f6f 	isb	sy
 8004e38:	f3bf 8f4f 	dsb	sy
 8004e3c:	623b      	str	r3, [r7, #32]
    }
 8004e3e:	bf00      	nop
 8004e40:	e7fe      	b.n	8004e40 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8004e42:	4b1a      	ldr	r3, [pc, #104]	; (8004eac <xTimerGenericCommand+0x98>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d02a      	beq.n	8004ea0 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	2b05      	cmp	r3, #5
 8004e5a:	dc18      	bgt.n	8004e8e <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004e5c:	f7ff feaa 	bl	8004bb4 <xTaskGetSchedulerState>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	d109      	bne.n	8004e7a <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004e66:	4b11      	ldr	r3, [pc, #68]	; (8004eac <xTimerGenericCommand+0x98>)
 8004e68:	6818      	ldr	r0, [r3, #0]
 8004e6a:	f107 0114 	add.w	r1, r7, #20
 8004e6e:	2300      	movs	r3, #0
 8004e70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e72:	f7fe fd57 	bl	8003924 <xQueueGenericSend>
 8004e76:	6278      	str	r0, [r7, #36]	; 0x24
 8004e78:	e012      	b.n	8004ea0 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004e7a:	4b0c      	ldr	r3, [pc, #48]	; (8004eac <xTimerGenericCommand+0x98>)
 8004e7c:	6818      	ldr	r0, [r3, #0]
 8004e7e:	f107 0114 	add.w	r1, r7, #20
 8004e82:	2300      	movs	r3, #0
 8004e84:	2200      	movs	r2, #0
 8004e86:	f7fe fd4d 	bl	8003924 <xQueueGenericSend>
 8004e8a:	6278      	str	r0, [r7, #36]	; 0x24
 8004e8c:	e008      	b.n	8004ea0 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004e8e:	4b07      	ldr	r3, [pc, #28]	; (8004eac <xTimerGenericCommand+0x98>)
 8004e90:	6818      	ldr	r0, [r3, #0]
 8004e92:	f107 0114 	add.w	r1, r7, #20
 8004e96:	2300      	movs	r3, #0
 8004e98:	683a      	ldr	r2, [r7, #0]
 8004e9a:	f7fe fe41 	bl	8003b20 <xQueueGenericSendFromISR>
 8004e9e:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3728      	adds	r7, #40	; 0x28
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	20000270 	.word	0x20000270

08004eb0 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b088      	sub	sp, #32
 8004eb4:	af02      	add	r7, sp, #8
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004eba:	4b22      	ldr	r3, [pc, #136]	; (8004f44 <prvProcessExpiredTimer+0x94>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	3304      	adds	r3, #4
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f7fe fc17 	bl	80036fc <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ed4:	f003 0304 	and.w	r3, r3, #4
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d022      	beq.n	8004f22 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	699a      	ldr	r2, [r3, #24]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	18d1      	adds	r1, r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	683a      	ldr	r2, [r7, #0]
 8004ee8:	6978      	ldr	r0, [r7, #20]
 8004eea:	f000 f8d1 	bl	8005090 <prvInsertTimerInActiveList>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d01f      	beq.n	8004f34 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	9300      	str	r3, [sp, #0]
 8004ef8:	2300      	movs	r3, #0
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	2100      	movs	r1, #0
 8004efe:	6978      	ldr	r0, [r7, #20]
 8004f00:	f7ff ff88 	bl	8004e14 <xTimerGenericCommand>
 8004f04:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d113      	bne.n	8004f34 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8004f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f10:	f383 8811 	msr	BASEPRI, r3
 8004f14:	f3bf 8f6f 	isb	sy
 8004f18:	f3bf 8f4f 	dsb	sy
 8004f1c:	60fb      	str	r3, [r7, #12]
    }
 8004f1e:	bf00      	nop
 8004f20:	e7fe      	b.n	8004f20 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f28:	f023 0301 	bic.w	r3, r3, #1
 8004f2c:	b2da      	uxtb	r2, r3
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	6a1b      	ldr	r3, [r3, #32]
 8004f38:	6978      	ldr	r0, [r7, #20]
 8004f3a:	4798      	blx	r3
    }
 8004f3c:	bf00      	nop
 8004f3e:	3718      	adds	r7, #24
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	20000268 	.word	0x20000268

08004f48 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004f50:	f107 0308 	add.w	r3, r7, #8
 8004f54:	4618      	mov	r0, r3
 8004f56:	f000 f857 	bl	8005008 <prvGetNextExpireTime>
 8004f5a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	4619      	mov	r1, r3
 8004f60:	68f8      	ldr	r0, [r7, #12]
 8004f62:	f000 f803 	bl	8004f6c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004f66:	f000 f8d5 	bl	8005114 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004f6a:	e7f1      	b.n	8004f50 <prvTimerTask+0x8>

08004f6c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004f76:	f7ff fa63 	bl	8004440 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004f7a:	f107 0308 	add.w	r3, r7, #8
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f000 f866 	bl	8005050 <prvSampleTimeNow>
 8004f84:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d130      	bne.n	8004fee <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d10a      	bne.n	8004fa8 <prvProcessTimerOrBlockTask+0x3c>
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d806      	bhi.n	8004fa8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8004f9a:	f7ff fa5f 	bl	800445c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004f9e:	68f9      	ldr	r1, [r7, #12]
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f7ff ff85 	bl	8004eb0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004fa6:	e024      	b.n	8004ff2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d008      	beq.n	8004fc0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004fae:	4b13      	ldr	r3, [pc, #76]	; (8004ffc <prvProcessTimerOrBlockTask+0x90>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d101      	bne.n	8004fbc <prvProcessTimerOrBlockTask+0x50>
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e000      	b.n	8004fbe <prvProcessTimerOrBlockTask+0x52>
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004fc0:	4b0f      	ldr	r3, [pc, #60]	; (8005000 <prvProcessTimerOrBlockTask+0x94>)
 8004fc2:	6818      	ldr	r0, [r3, #0]
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	683a      	ldr	r2, [r7, #0]
 8004fcc:	4619      	mov	r1, r3
 8004fce:	f7ff f86b 	bl	80040a8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004fd2:	f7ff fa43 	bl	800445c <xTaskResumeAll>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d10a      	bne.n	8004ff2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004fdc:	4b09      	ldr	r3, [pc, #36]	; (8005004 <prvProcessTimerOrBlockTask+0x98>)
 8004fde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fe2:	601a      	str	r2, [r3, #0]
 8004fe4:	f3bf 8f4f 	dsb	sy
 8004fe8:	f3bf 8f6f 	isb	sy
    }
 8004fec:	e001      	b.n	8004ff2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004fee:	f7ff fa35 	bl	800445c <xTaskResumeAll>
    }
 8004ff2:	bf00      	nop
 8004ff4:	3710      	adds	r7, #16
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	2000026c 	.word	0x2000026c
 8005000:	20000270 	.word	0x20000270
 8005004:	e000ed04 	.word	0xe000ed04

08005008 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8005008:	b480      	push	{r7}
 800500a:	b085      	sub	sp, #20
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005010:	4b0e      	ldr	r3, [pc, #56]	; (800504c <prvGetNextExpireTime+0x44>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d101      	bne.n	800501e <prvGetNextExpireTime+0x16>
 800501a:	2201      	movs	r2, #1
 800501c:	e000      	b.n	8005020 <prvGetNextExpireTime+0x18>
 800501e:	2200      	movs	r2, #0
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d105      	bne.n	8005038 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800502c:	4b07      	ldr	r3, [pc, #28]	; (800504c <prvGetNextExpireTime+0x44>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	60fb      	str	r3, [r7, #12]
 8005036:	e001      	b.n	800503c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8005038:	2300      	movs	r3, #0
 800503a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800503c:	68fb      	ldr	r3, [r7, #12]
    }
 800503e:	4618      	mov	r0, r3
 8005040:	3714      	adds	r7, #20
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	20000268 	.word	0x20000268

08005050 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8005058:	f7ff fa9c 	bl	8004594 <xTaskGetTickCount>
 800505c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800505e:	4b0b      	ldr	r3, [pc, #44]	; (800508c <prvSampleTimeNow+0x3c>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68fa      	ldr	r2, [r7, #12]
 8005064:	429a      	cmp	r2, r3
 8005066:	d205      	bcs.n	8005074 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8005068:	f000 f91a 	bl	80052a0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	601a      	str	r2, [r3, #0]
 8005072:	e002      	b.n	800507a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800507a:	4a04      	ldr	r2, [pc, #16]	; (800508c <prvSampleTimeNow+0x3c>)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8005080:	68fb      	ldr	r3, [r7, #12]
    }
 8005082:	4618      	mov	r0, r3
 8005084:	3710      	adds	r7, #16
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	20000278 	.word	0x20000278

08005090 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8005090:	b580      	push	{r7, lr}
 8005092:	b086      	sub	sp, #24
 8005094:	af00      	add	r7, sp, #0
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	607a      	str	r2, [r7, #4]
 800509c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800509e:	2300      	movs	r3, #0
 80050a0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	68ba      	ldr	r2, [r7, #8]
 80050a6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80050ae:	68ba      	ldr	r2, [r7, #8]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d812      	bhi.n	80050dc <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	1ad2      	subs	r2, r2, r3
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	699b      	ldr	r3, [r3, #24]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d302      	bcc.n	80050ca <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80050c4:	2301      	movs	r3, #1
 80050c6:	617b      	str	r3, [r7, #20]
 80050c8:	e01b      	b.n	8005102 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80050ca:	4b10      	ldr	r3, [pc, #64]	; (800510c <prvInsertTimerInActiveList+0x7c>)
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	3304      	adds	r3, #4
 80050d2:	4619      	mov	r1, r3
 80050d4:	4610      	mov	r0, r2
 80050d6:	f7fe fad8 	bl	800368a <vListInsert>
 80050da:	e012      	b.n	8005102 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d206      	bcs.n	80050f2 <prvInsertTimerInActiveList+0x62>
 80050e4:	68ba      	ldr	r2, [r7, #8]
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d302      	bcc.n	80050f2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80050ec:	2301      	movs	r3, #1
 80050ee:	617b      	str	r3, [r7, #20]
 80050f0:	e007      	b.n	8005102 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80050f2:	4b07      	ldr	r3, [pc, #28]	; (8005110 <prvInsertTimerInActiveList+0x80>)
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	3304      	adds	r3, #4
 80050fa:	4619      	mov	r1, r3
 80050fc:	4610      	mov	r0, r2
 80050fe:	f7fe fac4 	bl	800368a <vListInsert>
            }
        }

        return xProcessTimerNow;
 8005102:	697b      	ldr	r3, [r7, #20]
    }
 8005104:	4618      	mov	r0, r3
 8005106:	3718      	adds	r7, #24
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}
 800510c:	2000026c 	.word	0x2000026c
 8005110:	20000268 	.word	0x20000268

08005114 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8005114:	b580      	push	{r7, lr}
 8005116:	b08c      	sub	sp, #48	; 0x30
 8005118:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800511a:	e0ae      	b.n	800527a <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	2b00      	cmp	r3, #0
 8005120:	f2c0 80aa 	blt.w	8005278 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512a:	695b      	ldr	r3, [r3, #20]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d004      	beq.n	800513a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005132:	3304      	adds	r3, #4
 8005134:	4618      	mov	r0, r3
 8005136:	f7fe fae1 	bl	80036fc <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800513a:	1d3b      	adds	r3, r7, #4
 800513c:	4618      	mov	r0, r3
 800513e:	f7ff ff87 	bl	8005050 <prvSampleTimeNow>
 8005142:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	2b09      	cmp	r3, #9
 8005148:	f200 8097 	bhi.w	800527a <prvProcessReceivedCommands+0x166>
 800514c:	a201      	add	r2, pc, #4	; (adr r2, 8005154 <prvProcessReceivedCommands+0x40>)
 800514e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005152:	bf00      	nop
 8005154:	0800517d 	.word	0x0800517d
 8005158:	0800517d 	.word	0x0800517d
 800515c:	0800517d 	.word	0x0800517d
 8005160:	080051f1 	.word	0x080051f1
 8005164:	08005205 	.word	0x08005205
 8005168:	0800524f 	.word	0x0800524f
 800516c:	0800517d 	.word	0x0800517d
 8005170:	0800517d 	.word	0x0800517d
 8005174:	080051f1 	.word	0x080051f1
 8005178:	08005205 	.word	0x08005205
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800517c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005182:	f043 0301 	orr.w	r3, r3, #1
 8005186:	b2da      	uxtb	r2, r3
 8005188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800518e:	68fa      	ldr	r2, [r7, #12]
 8005190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	18d1      	adds	r1, r2, r3
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6a3a      	ldr	r2, [r7, #32]
 800519a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800519c:	f7ff ff78 	bl	8005090 <prvInsertTimerInActiveList>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d069      	beq.n	800527a <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80051a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a8:	6a1b      	ldr	r3, [r3, #32]
 80051aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80051ac:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80051ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051b4:	f003 0304 	and.w	r3, r3, #4
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d05e      	beq.n	800527a <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c0:	699b      	ldr	r3, [r3, #24]
 80051c2:	441a      	add	r2, r3
 80051c4:	2300      	movs	r3, #0
 80051c6:	9300      	str	r3, [sp, #0]
 80051c8:	2300      	movs	r3, #0
 80051ca:	2100      	movs	r1, #0
 80051cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80051ce:	f7ff fe21 	bl	8004e14 <xTimerGenericCommand>
 80051d2:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d14f      	bne.n	800527a <prvProcessReceivedCommands+0x166>
        __asm volatile
 80051da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051de:	f383 8811 	msr	BASEPRI, r3
 80051e2:	f3bf 8f6f 	isb	sy
 80051e6:	f3bf 8f4f 	dsb	sy
 80051ea:	61bb      	str	r3, [r7, #24]
    }
 80051ec:	bf00      	nop
 80051ee:	e7fe      	b.n	80051ee <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80051f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051f6:	f023 0301 	bic.w	r3, r3, #1
 80051fa:	b2da      	uxtb	r2, r3
 80051fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8005202:	e03a      	b.n	800527a <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005206:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800520a:	f043 0301 	orr.w	r3, r3, #1
 800520e:	b2da      	uxtb	r2, r3
 8005210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005212:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005216:	68fa      	ldr	r2, [r7, #12]
 8005218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800521c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521e:	699b      	ldr	r3, [r3, #24]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d10a      	bne.n	800523a <prvProcessReceivedCommands+0x126>
        __asm volatile
 8005224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005228:	f383 8811 	msr	BASEPRI, r3
 800522c:	f3bf 8f6f 	isb	sy
 8005230:	f3bf 8f4f 	dsb	sy
 8005234:	617b      	str	r3, [r7, #20]
    }
 8005236:	bf00      	nop
 8005238:	e7fe      	b.n	8005238 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800523a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523c:	699a      	ldr	r2, [r3, #24]
 800523e:	6a3b      	ldr	r3, [r7, #32]
 8005240:	18d1      	adds	r1, r2, r3
 8005242:	6a3b      	ldr	r3, [r7, #32]
 8005244:	6a3a      	ldr	r2, [r7, #32]
 8005246:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005248:	f7ff ff22 	bl	8005090 <prvInsertTimerInActiveList>
                        break;
 800524c:	e015      	b.n	800527a <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800524e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005250:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005254:	f003 0302 	and.w	r3, r3, #2
 8005258:	2b00      	cmp	r3, #0
 800525a:	d103      	bne.n	8005264 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 800525c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800525e:	f000 fc6d 	bl	8005b3c <vPortFree>
 8005262:	e00a      	b.n	800527a <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005266:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800526a:	f023 0301 	bic.w	r3, r3, #1
 800526e:	b2da      	uxtb	r2, r3
 8005270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005272:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8005276:	e000      	b.n	800527a <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8005278:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800527a:	4b08      	ldr	r3, [pc, #32]	; (800529c <prvProcessReceivedCommands+0x188>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f107 0108 	add.w	r1, r7, #8
 8005282:	2200      	movs	r2, #0
 8005284:	4618      	mov	r0, r3
 8005286:	f7fe fcf5 	bl	8003c74 <xQueueReceive>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	f47f af45 	bne.w	800511c <prvProcessReceivedCommands+0x8>
        }
    }
 8005292:	bf00      	nop
 8005294:	bf00      	nop
 8005296:	3728      	adds	r7, #40	; 0x28
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}
 800529c:	20000270 	.word	0x20000270

080052a0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b088      	sub	sp, #32
 80052a4:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80052a6:	e048      	b.n	800533a <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80052a8:	4b2d      	ldr	r3, [pc, #180]	; (8005360 <prvSwitchTimerLists+0xc0>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052b2:	4b2b      	ldr	r3, [pc, #172]	; (8005360 <prvSwitchTimerLists+0xc0>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	3304      	adds	r3, #4
 80052c0:	4618      	mov	r0, r3
 80052c2:	f7fe fa1b 	bl	80036fc <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6a1b      	ldr	r3, [r3, #32]
 80052ca:	68f8      	ldr	r0, [r7, #12]
 80052cc:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052d4:	f003 0304 	and.w	r3, r3, #4
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d02e      	beq.n	800533a <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	699b      	ldr	r3, [r3, #24]
 80052e0:	693a      	ldr	r2, [r7, #16]
 80052e2:	4413      	add	r3, r2
 80052e4:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 80052e6:	68ba      	ldr	r2, [r7, #8]
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d90e      	bls.n	800530c <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	68ba      	ldr	r2, [r7, #8]
 80052f2:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80052fa:	4b19      	ldr	r3, [pc, #100]	; (8005360 <prvSwitchTimerLists+0xc0>)
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	3304      	adds	r3, #4
 8005302:	4619      	mov	r1, r3
 8005304:	4610      	mov	r0, r2
 8005306:	f7fe f9c0 	bl	800368a <vListInsert>
 800530a:	e016      	b.n	800533a <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800530c:	2300      	movs	r3, #0
 800530e:	9300      	str	r3, [sp, #0]
 8005310:	2300      	movs	r3, #0
 8005312:	693a      	ldr	r2, [r7, #16]
 8005314:	2100      	movs	r1, #0
 8005316:	68f8      	ldr	r0, [r7, #12]
 8005318:	f7ff fd7c 	bl	8004e14 <xTimerGenericCommand>
 800531c:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d10a      	bne.n	800533a <prvSwitchTimerLists+0x9a>
        __asm volatile
 8005324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005328:	f383 8811 	msr	BASEPRI, r3
 800532c:	f3bf 8f6f 	isb	sy
 8005330:	f3bf 8f4f 	dsb	sy
 8005334:	603b      	str	r3, [r7, #0]
    }
 8005336:	bf00      	nop
 8005338:	e7fe      	b.n	8005338 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800533a:	4b09      	ldr	r3, [pc, #36]	; (8005360 <prvSwitchTimerLists+0xc0>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d1b1      	bne.n	80052a8 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8005344:	4b06      	ldr	r3, [pc, #24]	; (8005360 <prvSwitchTimerLists+0xc0>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800534a:	4b06      	ldr	r3, [pc, #24]	; (8005364 <prvSwitchTimerLists+0xc4>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a04      	ldr	r2, [pc, #16]	; (8005360 <prvSwitchTimerLists+0xc0>)
 8005350:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8005352:	4a04      	ldr	r2, [pc, #16]	; (8005364 <prvSwitchTimerLists+0xc4>)
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	6013      	str	r3, [r2, #0]
    }
 8005358:	bf00      	nop
 800535a:	3718      	adds	r7, #24
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}
 8005360:	20000268 	.word	0x20000268
 8005364:	2000026c 	.word	0x2000026c

08005368 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8005368:	b580      	push	{r7, lr}
 800536a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800536c:	f000 f9e2 	bl	8005734 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8005370:	4b12      	ldr	r3, [pc, #72]	; (80053bc <prvCheckForValidListAndQueue+0x54>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d11d      	bne.n	80053b4 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8005378:	4811      	ldr	r0, [pc, #68]	; (80053c0 <prvCheckForValidListAndQueue+0x58>)
 800537a:	f7fe f935 	bl	80035e8 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800537e:	4811      	ldr	r0, [pc, #68]	; (80053c4 <prvCheckForValidListAndQueue+0x5c>)
 8005380:	f7fe f932 	bl	80035e8 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8005384:	4b10      	ldr	r3, [pc, #64]	; (80053c8 <prvCheckForValidListAndQueue+0x60>)
 8005386:	4a0e      	ldr	r2, [pc, #56]	; (80053c0 <prvCheckForValidListAndQueue+0x58>)
 8005388:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800538a:	4b10      	ldr	r3, [pc, #64]	; (80053cc <prvCheckForValidListAndQueue+0x64>)
 800538c:	4a0d      	ldr	r2, [pc, #52]	; (80053c4 <prvCheckForValidListAndQueue+0x5c>)
 800538e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8005390:	2200      	movs	r2, #0
 8005392:	210c      	movs	r1, #12
 8005394:	200a      	movs	r0, #10
 8005396:	f7fe fa43 	bl	8003820 <xQueueGenericCreate>
 800539a:	4603      	mov	r3, r0
 800539c:	4a07      	ldr	r2, [pc, #28]	; (80053bc <prvCheckForValidListAndQueue+0x54>)
 800539e:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80053a0:	4b06      	ldr	r3, [pc, #24]	; (80053bc <prvCheckForValidListAndQueue+0x54>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d005      	beq.n	80053b4 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80053a8:	4b04      	ldr	r3, [pc, #16]	; (80053bc <prvCheckForValidListAndQueue+0x54>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4908      	ldr	r1, [pc, #32]	; (80053d0 <prvCheckForValidListAndQueue+0x68>)
 80053ae:	4618      	mov	r0, r3
 80053b0:	f7fe fe50 	bl	8004054 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80053b4:	f000 f9ee 	bl	8005794 <vPortExitCritical>
    }
 80053b8:	bf00      	nop
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	20000270 	.word	0x20000270
 80053c0:	20000240 	.word	0x20000240
 80053c4:	20000254 	.word	0x20000254
 80053c8:	20000268 	.word	0x20000268
 80053cc:	2000026c 	.word	0x2000026c
 80053d0:	08005e34 	.word	0x08005e34

080053d4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80053d4:	b480      	push	{r7}
 80053d6:	b085      	sub	sp, #20
 80053d8:	af00      	add	r7, sp, #0
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	60b9      	str	r1, [r7, #8]
 80053de:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	3b04      	subs	r3, #4
 80053e4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80053ec:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	3b04      	subs	r3, #4
 80053f2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	f023 0201 	bic.w	r2, r3, #1
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	3b04      	subs	r3, #4
 8005402:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8005404:	4a0c      	ldr	r2, [pc, #48]	; (8005438 <pxPortInitialiseStack+0x64>)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	3b14      	subs	r3, #20
 800540e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	3b04      	subs	r3, #4
 800541a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f06f 0202 	mvn.w	r2, #2
 8005422:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	3b20      	subs	r3, #32
 8005428:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800542a:	68fb      	ldr	r3, [r7, #12]
}
 800542c:	4618      	mov	r0, r3
 800542e:	3714      	adds	r7, #20
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr
 8005438:	0800543d 	.word	0x0800543d

0800543c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800543c:	b480      	push	{r7}
 800543e:	b085      	sub	sp, #20
 8005440:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8005442:	2300      	movs	r3, #0
 8005444:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8005446:	4b12      	ldr	r3, [pc, #72]	; (8005490 <prvTaskExitError+0x54>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800544e:	d00a      	beq.n	8005466 <prvTaskExitError+0x2a>
        __asm volatile
 8005450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005454:	f383 8811 	msr	BASEPRI, r3
 8005458:	f3bf 8f6f 	isb	sy
 800545c:	f3bf 8f4f 	dsb	sy
 8005460:	60fb      	str	r3, [r7, #12]
    }
 8005462:	bf00      	nop
 8005464:	e7fe      	b.n	8005464 <prvTaskExitError+0x28>
        __asm volatile
 8005466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800546a:	f383 8811 	msr	BASEPRI, r3
 800546e:	f3bf 8f6f 	isb	sy
 8005472:	f3bf 8f4f 	dsb	sy
 8005476:	60bb      	str	r3, [r7, #8]
    }
 8005478:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800547a:	bf00      	nop
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d0fc      	beq.n	800547c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8005482:	bf00      	nop
 8005484:	bf00      	nop
 8005486:	3714      	adds	r7, #20
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr
 8005490:	20000010 	.word	0x20000010
	...

080054a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80054a0:	4b07      	ldr	r3, [pc, #28]	; (80054c0 <pxCurrentTCBConst2>)
 80054a2:	6819      	ldr	r1, [r3, #0]
 80054a4:	6808      	ldr	r0, [r1, #0]
 80054a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054aa:	f380 8809 	msr	PSP, r0
 80054ae:	f3bf 8f6f 	isb	sy
 80054b2:	f04f 0000 	mov.w	r0, #0
 80054b6:	f380 8811 	msr	BASEPRI, r0
 80054ba:	4770      	bx	lr
 80054bc:	f3af 8000 	nop.w

080054c0 <pxCurrentTCBConst2>:
 80054c0:	2000013c 	.word	0x2000013c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80054c4:	bf00      	nop
 80054c6:	bf00      	nop

080054c8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80054c8:	4808      	ldr	r0, [pc, #32]	; (80054ec <prvPortStartFirstTask+0x24>)
 80054ca:	6800      	ldr	r0, [r0, #0]
 80054cc:	6800      	ldr	r0, [r0, #0]
 80054ce:	f380 8808 	msr	MSP, r0
 80054d2:	f04f 0000 	mov.w	r0, #0
 80054d6:	f380 8814 	msr	CONTROL, r0
 80054da:	b662      	cpsie	i
 80054dc:	b661      	cpsie	f
 80054de:	f3bf 8f4f 	dsb	sy
 80054e2:	f3bf 8f6f 	isb	sy
 80054e6:	df00      	svc	0
 80054e8:	bf00      	nop
 80054ea:	0000      	.short	0x0000
 80054ec:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80054f0:	bf00      	nop
 80054f2:	bf00      	nop

080054f4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b086      	sub	sp, #24
 80054f8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80054fa:	4b46      	ldr	r3, [pc, #280]	; (8005614 <xPortStartScheduler+0x120>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a46      	ldr	r2, [pc, #280]	; (8005618 <xPortStartScheduler+0x124>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d10a      	bne.n	800551a <xPortStartScheduler+0x26>
        __asm volatile
 8005504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005508:	f383 8811 	msr	BASEPRI, r3
 800550c:	f3bf 8f6f 	isb	sy
 8005510:	f3bf 8f4f 	dsb	sy
 8005514:	613b      	str	r3, [r7, #16]
    }
 8005516:	bf00      	nop
 8005518:	e7fe      	b.n	8005518 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800551a:	4b3e      	ldr	r3, [pc, #248]	; (8005614 <xPortStartScheduler+0x120>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a3f      	ldr	r2, [pc, #252]	; (800561c <xPortStartScheduler+0x128>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d10a      	bne.n	800553a <xPortStartScheduler+0x46>
        __asm volatile
 8005524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005528:	f383 8811 	msr	BASEPRI, r3
 800552c:	f3bf 8f6f 	isb	sy
 8005530:	f3bf 8f4f 	dsb	sy
 8005534:	60fb      	str	r3, [r7, #12]
    }
 8005536:	bf00      	nop
 8005538:	e7fe      	b.n	8005538 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800553a:	4b39      	ldr	r3, [pc, #228]	; (8005620 <xPortStartScheduler+0x12c>)
 800553c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	b2db      	uxtb	r3, r3
 8005544:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	22ff      	movs	r2, #255	; 0xff
 800554a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	b2db      	uxtb	r3, r3
 8005552:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005554:	78fb      	ldrb	r3, [r7, #3]
 8005556:	b2db      	uxtb	r3, r3
 8005558:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800555c:	b2da      	uxtb	r2, r3
 800555e:	4b31      	ldr	r3, [pc, #196]	; (8005624 <xPortStartScheduler+0x130>)
 8005560:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005562:	4b31      	ldr	r3, [pc, #196]	; (8005628 <xPortStartScheduler+0x134>)
 8005564:	2207      	movs	r2, #7
 8005566:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005568:	e009      	b.n	800557e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800556a:	4b2f      	ldr	r3, [pc, #188]	; (8005628 <xPortStartScheduler+0x134>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	3b01      	subs	r3, #1
 8005570:	4a2d      	ldr	r2, [pc, #180]	; (8005628 <xPortStartScheduler+0x134>)
 8005572:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005574:	78fb      	ldrb	r3, [r7, #3]
 8005576:	b2db      	uxtb	r3, r3
 8005578:	005b      	lsls	r3, r3, #1
 800557a:	b2db      	uxtb	r3, r3
 800557c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800557e:	78fb      	ldrb	r3, [r7, #3]
 8005580:	b2db      	uxtb	r3, r3
 8005582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005586:	2b80      	cmp	r3, #128	; 0x80
 8005588:	d0ef      	beq.n	800556a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800558a:	4b27      	ldr	r3, [pc, #156]	; (8005628 <xPortStartScheduler+0x134>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f1c3 0307 	rsb	r3, r3, #7
 8005592:	2b04      	cmp	r3, #4
 8005594:	d00a      	beq.n	80055ac <xPortStartScheduler+0xb8>
        __asm volatile
 8005596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800559a:	f383 8811 	msr	BASEPRI, r3
 800559e:	f3bf 8f6f 	isb	sy
 80055a2:	f3bf 8f4f 	dsb	sy
 80055a6:	60bb      	str	r3, [r7, #8]
    }
 80055a8:	bf00      	nop
 80055aa:	e7fe      	b.n	80055aa <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80055ac:	4b1e      	ldr	r3, [pc, #120]	; (8005628 <xPortStartScheduler+0x134>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	021b      	lsls	r3, r3, #8
 80055b2:	4a1d      	ldr	r2, [pc, #116]	; (8005628 <xPortStartScheduler+0x134>)
 80055b4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80055b6:	4b1c      	ldr	r3, [pc, #112]	; (8005628 <xPortStartScheduler+0x134>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80055be:	4a1a      	ldr	r2, [pc, #104]	; (8005628 <xPortStartScheduler+0x134>)
 80055c0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	b2da      	uxtb	r2, r3
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80055ca:	4b18      	ldr	r3, [pc, #96]	; (800562c <xPortStartScheduler+0x138>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a17      	ldr	r2, [pc, #92]	; (800562c <xPortStartScheduler+0x138>)
 80055d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80055d4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80055d6:	4b15      	ldr	r3, [pc, #84]	; (800562c <xPortStartScheduler+0x138>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a14      	ldr	r2, [pc, #80]	; (800562c <xPortStartScheduler+0x138>)
 80055dc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80055e0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80055e2:	f000 f95b 	bl	800589c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80055e6:	4b12      	ldr	r3, [pc, #72]	; (8005630 <xPortStartScheduler+0x13c>)
 80055e8:	2200      	movs	r2, #0
 80055ea:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80055ec:	f000 f97a 	bl	80058e4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80055f0:	4b10      	ldr	r3, [pc, #64]	; (8005634 <xPortStartScheduler+0x140>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a0f      	ldr	r2, [pc, #60]	; (8005634 <xPortStartScheduler+0x140>)
 80055f6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80055fa:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80055fc:	f7ff ff64 	bl	80054c8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8005600:	f7ff f890 	bl	8004724 <vTaskSwitchContext>
    prvTaskExitError();
 8005604:	f7ff ff1a 	bl	800543c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	3718      	adds	r7, #24
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
 8005612:	bf00      	nop
 8005614:	e000ed00 	.word	0xe000ed00
 8005618:	410fc271 	.word	0x410fc271
 800561c:	410fc270 	.word	0x410fc270
 8005620:	e000e400 	.word	0xe000e400
 8005624:	2000027c 	.word	0x2000027c
 8005628:	20000280 	.word	0x20000280
 800562c:	e000ed20 	.word	0xe000ed20
 8005630:	20000010 	.word	0x20000010
 8005634:	e000ef34 	.word	0xe000ef34

08005638 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8005638:	b480      	push	{r7}
 800563a:	b087      	sub	sp, #28
 800563c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800563e:	4b37      	ldr	r3, [pc, #220]	; (800571c <vInitPrioGroupValue+0xe4>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a37      	ldr	r2, [pc, #220]	; (8005720 <vInitPrioGroupValue+0xe8>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d10a      	bne.n	800565e <vInitPrioGroupValue+0x26>
        __asm volatile
 8005648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800564c:	f383 8811 	msr	BASEPRI, r3
 8005650:	f3bf 8f6f 	isb	sy
 8005654:	f3bf 8f4f 	dsb	sy
 8005658:	613b      	str	r3, [r7, #16]
    }
 800565a:	bf00      	nop
 800565c:	e7fe      	b.n	800565c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800565e:	4b2f      	ldr	r3, [pc, #188]	; (800571c <vInitPrioGroupValue+0xe4>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a30      	ldr	r2, [pc, #192]	; (8005724 <vInitPrioGroupValue+0xec>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d10a      	bne.n	800567e <vInitPrioGroupValue+0x46>
        __asm volatile
 8005668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800566c:	f383 8811 	msr	BASEPRI, r3
 8005670:	f3bf 8f6f 	isb	sy
 8005674:	f3bf 8f4f 	dsb	sy
 8005678:	60fb      	str	r3, [r7, #12]
    }
 800567a:	bf00      	nop
 800567c:	e7fe      	b.n	800567c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800567e:	4b2a      	ldr	r3, [pc, #168]	; (8005728 <vInitPrioGroupValue+0xf0>)
 8005680:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	b2db      	uxtb	r3, r3
 8005688:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	22ff      	movs	r2, #255	; 0xff
 800568e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	b2db      	uxtb	r3, r3
 8005696:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005698:	78fb      	ldrb	r3, [r7, #3]
 800569a:	b2db      	uxtb	r3, r3
 800569c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80056a0:	b2da      	uxtb	r2, r3
 80056a2:	4b22      	ldr	r3, [pc, #136]	; (800572c <vInitPrioGroupValue+0xf4>)
 80056a4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80056a6:	4b22      	ldr	r3, [pc, #136]	; (8005730 <vInitPrioGroupValue+0xf8>)
 80056a8:	2207      	movs	r2, #7
 80056aa:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80056ac:	e009      	b.n	80056c2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80056ae:	4b20      	ldr	r3, [pc, #128]	; (8005730 <vInitPrioGroupValue+0xf8>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	3b01      	subs	r3, #1
 80056b4:	4a1e      	ldr	r2, [pc, #120]	; (8005730 <vInitPrioGroupValue+0xf8>)
 80056b6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80056b8:	78fb      	ldrb	r3, [r7, #3]
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	005b      	lsls	r3, r3, #1
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80056c2:	78fb      	ldrb	r3, [r7, #3]
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ca:	2b80      	cmp	r3, #128	; 0x80
 80056cc:	d0ef      	beq.n	80056ae <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80056ce:	4b18      	ldr	r3, [pc, #96]	; (8005730 <vInitPrioGroupValue+0xf8>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f1c3 0307 	rsb	r3, r3, #7
 80056d6:	2b04      	cmp	r3, #4
 80056d8:	d00a      	beq.n	80056f0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 80056da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056de:	f383 8811 	msr	BASEPRI, r3
 80056e2:	f3bf 8f6f 	isb	sy
 80056e6:	f3bf 8f4f 	dsb	sy
 80056ea:	60bb      	str	r3, [r7, #8]
    }
 80056ec:	bf00      	nop
 80056ee:	e7fe      	b.n	80056ee <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80056f0:	4b0f      	ldr	r3, [pc, #60]	; (8005730 <vInitPrioGroupValue+0xf8>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	021b      	lsls	r3, r3, #8
 80056f6:	4a0e      	ldr	r2, [pc, #56]	; (8005730 <vInitPrioGroupValue+0xf8>)
 80056f8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80056fa:	4b0d      	ldr	r3, [pc, #52]	; (8005730 <vInitPrioGroupValue+0xf8>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005702:	4a0b      	ldr	r2, [pc, #44]	; (8005730 <vInitPrioGroupValue+0xf8>)
 8005704:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	b2da      	uxtb	r2, r3
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800570e:	bf00      	nop
 8005710:	371c      	adds	r7, #28
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr
 800571a:	bf00      	nop
 800571c:	e000ed00 	.word	0xe000ed00
 8005720:	410fc271 	.word	0x410fc271
 8005724:	410fc270 	.word	0x410fc270
 8005728:	e000e400 	.word	0xe000e400
 800572c:	2000027c 	.word	0x2000027c
 8005730:	20000280 	.word	0x20000280

08005734 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
        __asm volatile
 800573a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800573e:	f383 8811 	msr	BASEPRI, r3
 8005742:	f3bf 8f6f 	isb	sy
 8005746:	f3bf 8f4f 	dsb	sy
 800574a:	607b      	str	r3, [r7, #4]
    }
 800574c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800574e:	4b0f      	ldr	r3, [pc, #60]	; (800578c <vPortEnterCritical+0x58>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	3301      	adds	r3, #1
 8005754:	4a0d      	ldr	r2, [pc, #52]	; (800578c <vPortEnterCritical+0x58>)
 8005756:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8005758:	4b0c      	ldr	r3, [pc, #48]	; (800578c <vPortEnterCritical+0x58>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2b01      	cmp	r3, #1
 800575e:	d10f      	bne.n	8005780 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005760:	4b0b      	ldr	r3, [pc, #44]	; (8005790 <vPortEnterCritical+0x5c>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	b2db      	uxtb	r3, r3
 8005766:	2b00      	cmp	r3, #0
 8005768:	d00a      	beq.n	8005780 <vPortEnterCritical+0x4c>
        __asm volatile
 800576a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800576e:	f383 8811 	msr	BASEPRI, r3
 8005772:	f3bf 8f6f 	isb	sy
 8005776:	f3bf 8f4f 	dsb	sy
 800577a:	603b      	str	r3, [r7, #0]
    }
 800577c:	bf00      	nop
 800577e:	e7fe      	b.n	800577e <vPortEnterCritical+0x4a>
    }
}
 8005780:	bf00      	nop
 8005782:	370c      	adds	r7, #12
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr
 800578c:	20000010 	.word	0x20000010
 8005790:	e000ed04 	.word	0xe000ed04

08005794 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800579a:	4b12      	ldr	r3, [pc, #72]	; (80057e4 <vPortExitCritical+0x50>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d10a      	bne.n	80057b8 <vPortExitCritical+0x24>
        __asm volatile
 80057a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a6:	f383 8811 	msr	BASEPRI, r3
 80057aa:	f3bf 8f6f 	isb	sy
 80057ae:	f3bf 8f4f 	dsb	sy
 80057b2:	607b      	str	r3, [r7, #4]
    }
 80057b4:	bf00      	nop
 80057b6:	e7fe      	b.n	80057b6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80057b8:	4b0a      	ldr	r3, [pc, #40]	; (80057e4 <vPortExitCritical+0x50>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	3b01      	subs	r3, #1
 80057be:	4a09      	ldr	r2, [pc, #36]	; (80057e4 <vPortExitCritical+0x50>)
 80057c0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80057c2:	4b08      	ldr	r3, [pc, #32]	; (80057e4 <vPortExitCritical+0x50>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d105      	bne.n	80057d6 <vPortExitCritical+0x42>
 80057ca:	2300      	movs	r3, #0
 80057cc:	603b      	str	r3, [r7, #0]
        __asm volatile
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	f383 8811 	msr	BASEPRI, r3
    }
 80057d4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80057d6:	bf00      	nop
 80057d8:	370c      	adds	r7, #12
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop
 80057e4:	20000010 	.word	0x20000010
	...

080057f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80057f0:	f3ef 8009 	mrs	r0, PSP
 80057f4:	f3bf 8f6f 	isb	sy
 80057f8:	4b15      	ldr	r3, [pc, #84]	; (8005850 <pxCurrentTCBConst>)
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	f01e 0f10 	tst.w	lr, #16
 8005800:	bf08      	it	eq
 8005802:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005806:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800580a:	6010      	str	r0, [r2, #0]
 800580c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005810:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005814:	f380 8811 	msr	BASEPRI, r0
 8005818:	f3bf 8f4f 	dsb	sy
 800581c:	f3bf 8f6f 	isb	sy
 8005820:	f7fe ff80 	bl	8004724 <vTaskSwitchContext>
 8005824:	f04f 0000 	mov.w	r0, #0
 8005828:	f380 8811 	msr	BASEPRI, r0
 800582c:	bc09      	pop	{r0, r3}
 800582e:	6819      	ldr	r1, [r3, #0]
 8005830:	6808      	ldr	r0, [r1, #0]
 8005832:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005836:	f01e 0f10 	tst.w	lr, #16
 800583a:	bf08      	it	eq
 800583c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005840:	f380 8809 	msr	PSP, r0
 8005844:	f3bf 8f6f 	isb	sy
 8005848:	4770      	bx	lr
 800584a:	bf00      	nop
 800584c:	f3af 8000 	nop.w

08005850 <pxCurrentTCBConst>:
 8005850:	2000013c 	.word	0x2000013c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005854:	bf00      	nop
 8005856:	bf00      	nop

08005858 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
        __asm volatile
 800585e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005862:	f383 8811 	msr	BASEPRI, r3
 8005866:	f3bf 8f6f 	isb	sy
 800586a:	f3bf 8f4f 	dsb	sy
 800586e:	607b      	str	r3, [r7, #4]
    }
 8005870:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005872:	f7fe fe9f 	bl	80045b4 <xTaskIncrementTick>
 8005876:	4603      	mov	r3, r0
 8005878:	2b00      	cmp	r3, #0
 800587a:	d003      	beq.n	8005884 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800587c:	4b06      	ldr	r3, [pc, #24]	; (8005898 <SysTick_Handler+0x40>)
 800587e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005882:	601a      	str	r2, [r3, #0]
 8005884:	2300      	movs	r3, #0
 8005886:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	f383 8811 	msr	BASEPRI, r3
    }
 800588e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8005890:	bf00      	nop
 8005892:	3708      	adds	r7, #8
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}
 8005898:	e000ed04 	.word	0xe000ed04

0800589c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800589c:	b480      	push	{r7}
 800589e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80058a0:	4b0b      	ldr	r3, [pc, #44]	; (80058d0 <vPortSetupTimerInterrupt+0x34>)
 80058a2:	2200      	movs	r2, #0
 80058a4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80058a6:	4b0b      	ldr	r3, [pc, #44]	; (80058d4 <vPortSetupTimerInterrupt+0x38>)
 80058a8:	2200      	movs	r2, #0
 80058aa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80058ac:	4b0a      	ldr	r3, [pc, #40]	; (80058d8 <vPortSetupTimerInterrupt+0x3c>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a0a      	ldr	r2, [pc, #40]	; (80058dc <vPortSetupTimerInterrupt+0x40>)
 80058b2:	fba2 2303 	umull	r2, r3, r2, r3
 80058b6:	099b      	lsrs	r3, r3, #6
 80058b8:	4a09      	ldr	r2, [pc, #36]	; (80058e0 <vPortSetupTimerInterrupt+0x44>)
 80058ba:	3b01      	subs	r3, #1
 80058bc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80058be:	4b04      	ldr	r3, [pc, #16]	; (80058d0 <vPortSetupTimerInterrupt+0x34>)
 80058c0:	2207      	movs	r2, #7
 80058c2:	601a      	str	r2, [r3, #0]
}
 80058c4:	bf00      	nop
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr
 80058ce:	bf00      	nop
 80058d0:	e000e010 	.word	0xe000e010
 80058d4:	e000e018 	.word	0xe000e018
 80058d8:	20000000 	.word	0x20000000
 80058dc:	10624dd3 	.word	0x10624dd3
 80058e0:	e000e014 	.word	0xe000e014

080058e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80058e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80058f4 <vPortEnableVFP+0x10>
 80058e8:	6801      	ldr	r1, [r0, #0]
 80058ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80058ee:	6001      	str	r1, [r0, #0]
 80058f0:	4770      	bx	lr
 80058f2:	0000      	.short	0x0000
 80058f4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80058f8:	bf00      	nop
 80058fa:	bf00      	nop

080058fc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80058fc:	b480      	push	{r7}
 80058fe:	b085      	sub	sp, #20
 8005900:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8005902:	f3ef 8305 	mrs	r3, IPSR
 8005906:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2b0f      	cmp	r3, #15
 800590c:	d914      	bls.n	8005938 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800590e:	4a17      	ldr	r2, [pc, #92]	; (800596c <vPortValidateInterruptPriority+0x70>)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	4413      	add	r3, r2
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005918:	4b15      	ldr	r3, [pc, #84]	; (8005970 <vPortValidateInterruptPriority+0x74>)
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	7afa      	ldrb	r2, [r7, #11]
 800591e:	429a      	cmp	r2, r3
 8005920:	d20a      	bcs.n	8005938 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8005922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005926:	f383 8811 	msr	BASEPRI, r3
 800592a:	f3bf 8f6f 	isb	sy
 800592e:	f3bf 8f4f 	dsb	sy
 8005932:	607b      	str	r3, [r7, #4]
    }
 8005934:	bf00      	nop
 8005936:	e7fe      	b.n	8005936 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005938:	4b0e      	ldr	r3, [pc, #56]	; (8005974 <vPortValidateInterruptPriority+0x78>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005940:	4b0d      	ldr	r3, [pc, #52]	; (8005978 <vPortValidateInterruptPriority+0x7c>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	429a      	cmp	r2, r3
 8005946:	d90a      	bls.n	800595e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8005948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800594c:	f383 8811 	msr	BASEPRI, r3
 8005950:	f3bf 8f6f 	isb	sy
 8005954:	f3bf 8f4f 	dsb	sy
 8005958:	603b      	str	r3, [r7, #0]
    }
 800595a:	bf00      	nop
 800595c:	e7fe      	b.n	800595c <vPortValidateInterruptPriority+0x60>
    }
 800595e:	bf00      	nop
 8005960:	3714      	adds	r7, #20
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop
 800596c:	e000e3f0 	.word	0xe000e3f0
 8005970:	2000027c 	.word	0x2000027c
 8005974:	e000ed0c 	.word	0xe000ed0c
 8005978:	20000280 	.word	0x20000280

0800597c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b08a      	sub	sp, #40	; 0x28
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8005984:	2300      	movs	r3, #0
 8005986:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8005988:	f7fe fd5a 	bl	8004440 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800598c:	4b65      	ldr	r3, [pc, #404]	; (8005b24 <pvPortMalloc+0x1a8>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d101      	bne.n	8005998 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8005994:	f000 f934 	bl	8005c00 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005998:	4b63      	ldr	r3, [pc, #396]	; (8005b28 <pvPortMalloc+0x1ac>)
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4013      	ands	r3, r2
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	f040 80a7 	bne.w	8005af4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d02d      	beq.n	8005a08 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80059ac:	2208      	movs	r2, #8
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d227      	bcs.n	8005a08 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80059b8:	2208      	movs	r2, #8
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4413      	add	r3, r2
 80059be:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f003 0307 	and.w	r3, r3, #7
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d021      	beq.n	8005a0e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f023 0307 	bic.w	r3, r3, #7
 80059d0:	3308      	adds	r3, #8
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d214      	bcs.n	8005a02 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f023 0307 	bic.w	r3, r3, #7
 80059de:	3308      	adds	r3, #8
 80059e0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f003 0307 	and.w	r3, r3, #7
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d010      	beq.n	8005a0e <pvPortMalloc+0x92>
        __asm volatile
 80059ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f0:	f383 8811 	msr	BASEPRI, r3
 80059f4:	f3bf 8f6f 	isb	sy
 80059f8:	f3bf 8f4f 	dsb	sy
 80059fc:	617b      	str	r3, [r7, #20]
    }
 80059fe:	bf00      	nop
 8005a00:	e7fe      	b.n	8005a00 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8005a02:	2300      	movs	r3, #0
 8005a04:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005a06:	e002      	b.n	8005a0e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	607b      	str	r3, [r7, #4]
 8005a0c:	e000      	b.n	8005a10 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005a0e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d06e      	beq.n	8005af4 <pvPortMalloc+0x178>
 8005a16:	4b45      	ldr	r3, [pc, #276]	; (8005b2c <pvPortMalloc+0x1b0>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d869      	bhi.n	8005af4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8005a20:	4b43      	ldr	r3, [pc, #268]	; (8005b30 <pvPortMalloc+0x1b4>)
 8005a22:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8005a24:	4b42      	ldr	r3, [pc, #264]	; (8005b30 <pvPortMalloc+0x1b4>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005a2a:	e004      	b.n	8005a36 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8005a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8005a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d903      	bls.n	8005a48 <pvPortMalloc+0xcc>
 8005a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d1f1      	bne.n	8005a2c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8005a48:	4b36      	ldr	r3, [pc, #216]	; (8005b24 <pvPortMalloc+0x1a8>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d050      	beq.n	8005af4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005a52:	6a3b      	ldr	r3, [r7, #32]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	2208      	movs	r2, #8
 8005a58:	4413      	add	r3, r2
 8005a5a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	6a3b      	ldr	r3, [r7, #32]
 8005a62:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a66:	685a      	ldr	r2, [r3, #4]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	1ad2      	subs	r2, r2, r3
 8005a6c:	2308      	movs	r3, #8
 8005a6e:	005b      	lsls	r3, r3, #1
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d91f      	bls.n	8005ab4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4413      	add	r3, r2
 8005a7a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a7c:	69bb      	ldr	r3, [r7, #24]
 8005a7e:	f003 0307 	and.w	r3, r3, #7
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d00a      	beq.n	8005a9c <pvPortMalloc+0x120>
        __asm volatile
 8005a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a8a:	f383 8811 	msr	BASEPRI, r3
 8005a8e:	f3bf 8f6f 	isb	sy
 8005a92:	f3bf 8f4f 	dsb	sy
 8005a96:	613b      	str	r3, [r7, #16]
    }
 8005a98:	bf00      	nop
 8005a9a:	e7fe      	b.n	8005a9a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9e:	685a      	ldr	r2, [r3, #4]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	1ad2      	subs	r2, r2, r3
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005aae:	69b8      	ldr	r0, [r7, #24]
 8005ab0:	f000 f908 	bl	8005cc4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005ab4:	4b1d      	ldr	r3, [pc, #116]	; (8005b2c <pvPortMalloc+0x1b0>)
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	1ad3      	subs	r3, r2, r3
 8005abe:	4a1b      	ldr	r2, [pc, #108]	; (8005b2c <pvPortMalloc+0x1b0>)
 8005ac0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005ac2:	4b1a      	ldr	r3, [pc, #104]	; (8005b2c <pvPortMalloc+0x1b0>)
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	4b1b      	ldr	r3, [pc, #108]	; (8005b34 <pvPortMalloc+0x1b8>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d203      	bcs.n	8005ad6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005ace:	4b17      	ldr	r3, [pc, #92]	; (8005b2c <pvPortMalloc+0x1b0>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a18      	ldr	r2, [pc, #96]	; (8005b34 <pvPortMalloc+0x1b8>)
 8005ad4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad8:	685a      	ldr	r2, [r3, #4]
 8005ada:	4b13      	ldr	r3, [pc, #76]	; (8005b28 <pvPortMalloc+0x1ac>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	431a      	orrs	r2, r3
 8005ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8005aea:	4b13      	ldr	r3, [pc, #76]	; (8005b38 <pvPortMalloc+0x1bc>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	3301      	adds	r3, #1
 8005af0:	4a11      	ldr	r2, [pc, #68]	; (8005b38 <pvPortMalloc+0x1bc>)
 8005af2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005af4:	f7fe fcb2 	bl	800445c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	f003 0307 	and.w	r3, r3, #7
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d00a      	beq.n	8005b18 <pvPortMalloc+0x19c>
        __asm volatile
 8005b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b06:	f383 8811 	msr	BASEPRI, r3
 8005b0a:	f3bf 8f6f 	isb	sy
 8005b0e:	f3bf 8f4f 	dsb	sy
 8005b12:	60fb      	str	r3, [r7, #12]
    }
 8005b14:	bf00      	nop
 8005b16:	e7fe      	b.n	8005b16 <pvPortMalloc+0x19a>
    return pvReturn;
 8005b18:	69fb      	ldr	r3, [r7, #28]
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3728      	adds	r7, #40	; 0x28
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	20012e8c 	.word	0x20012e8c
 8005b28:	20012ea0 	.word	0x20012ea0
 8005b2c:	20012e90 	.word	0x20012e90
 8005b30:	20012e84 	.word	0x20012e84
 8005b34:	20012e94 	.word	0x20012e94
 8005b38:	20012e98 	.word	0x20012e98

08005b3c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b086      	sub	sp, #24
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d04d      	beq.n	8005bea <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8005b4e:	2308      	movs	r3, #8
 8005b50:	425b      	negs	r3, r3
 8005b52:	697a      	ldr	r2, [r7, #20]
 8005b54:	4413      	add	r3, r2
 8005b56:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	685a      	ldr	r2, [r3, #4]
 8005b60:	4b24      	ldr	r3, [pc, #144]	; (8005bf4 <vPortFree+0xb8>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4013      	ands	r3, r2
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d10a      	bne.n	8005b80 <vPortFree+0x44>
        __asm volatile
 8005b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b6e:	f383 8811 	msr	BASEPRI, r3
 8005b72:	f3bf 8f6f 	isb	sy
 8005b76:	f3bf 8f4f 	dsb	sy
 8005b7a:	60fb      	str	r3, [r7, #12]
    }
 8005b7c:	bf00      	nop
 8005b7e:	e7fe      	b.n	8005b7e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d00a      	beq.n	8005b9e <vPortFree+0x62>
        __asm volatile
 8005b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b8c:	f383 8811 	msr	BASEPRI, r3
 8005b90:	f3bf 8f6f 	isb	sy
 8005b94:	f3bf 8f4f 	dsb	sy
 8005b98:	60bb      	str	r3, [r7, #8]
    }
 8005b9a:	bf00      	nop
 8005b9c:	e7fe      	b.n	8005b9c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	685a      	ldr	r2, [r3, #4]
 8005ba2:	4b14      	ldr	r3, [pc, #80]	; (8005bf4 <vPortFree+0xb8>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d01e      	beq.n	8005bea <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d11a      	bne.n	8005bea <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	685a      	ldr	r2, [r3, #4]
 8005bb8:	4b0e      	ldr	r3, [pc, #56]	; (8005bf4 <vPortFree+0xb8>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	43db      	mvns	r3, r3
 8005bbe:	401a      	ands	r2, r3
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8005bc4:	f7fe fc3c 	bl	8004440 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	685a      	ldr	r2, [r3, #4]
 8005bcc:	4b0a      	ldr	r3, [pc, #40]	; (8005bf8 <vPortFree+0xbc>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4413      	add	r3, r2
 8005bd2:	4a09      	ldr	r2, [pc, #36]	; (8005bf8 <vPortFree+0xbc>)
 8005bd4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005bd6:	6938      	ldr	r0, [r7, #16]
 8005bd8:	f000 f874 	bl	8005cc4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005bdc:	4b07      	ldr	r3, [pc, #28]	; (8005bfc <vPortFree+0xc0>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	3301      	adds	r3, #1
 8005be2:	4a06      	ldr	r2, [pc, #24]	; (8005bfc <vPortFree+0xc0>)
 8005be4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005be6:	f7fe fc39 	bl	800445c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8005bea:	bf00      	nop
 8005bec:	3718      	adds	r7, #24
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	20012ea0 	.word	0x20012ea0
 8005bf8:	20012e90 	.word	0x20012e90
 8005bfc:	20012e9c 	.word	0x20012e9c

08005c00 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8005c00:	b480      	push	{r7}
 8005c02:	b085      	sub	sp, #20
 8005c04:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005c06:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8005c0a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8005c0c:	4b27      	ldr	r3, [pc, #156]	; (8005cac <prvHeapInit+0xac>)
 8005c0e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f003 0307 	and.w	r3, r3, #7
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00c      	beq.n	8005c34 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	3307      	adds	r3, #7
 8005c1e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f023 0307 	bic.w	r3, r3, #7
 8005c26:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005c28:	68ba      	ldr	r2, [r7, #8]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	1ad3      	subs	r3, r2, r3
 8005c2e:	4a1f      	ldr	r2, [pc, #124]	; (8005cac <prvHeapInit+0xac>)
 8005c30:	4413      	add	r3, r2
 8005c32:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005c38:	4a1d      	ldr	r2, [pc, #116]	; (8005cb0 <prvHeapInit+0xb0>)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8005c3e:	4b1c      	ldr	r3, [pc, #112]	; (8005cb0 <prvHeapInit+0xb0>)
 8005c40:	2200      	movs	r2, #0
 8005c42:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	68ba      	ldr	r2, [r7, #8]
 8005c48:	4413      	add	r3, r2
 8005c4a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8005c4c:	2208      	movs	r2, #8
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	1a9b      	subs	r3, r3, r2
 8005c52:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f023 0307 	bic.w	r3, r3, #7
 8005c5a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	4a15      	ldr	r2, [pc, #84]	; (8005cb4 <prvHeapInit+0xb4>)
 8005c60:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8005c62:	4b14      	ldr	r3, [pc, #80]	; (8005cb4 <prvHeapInit+0xb4>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	2200      	movs	r2, #0
 8005c68:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8005c6a:	4b12      	ldr	r3, [pc, #72]	; (8005cb4 <prvHeapInit+0xb4>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	68fa      	ldr	r2, [r7, #12]
 8005c7a:	1ad2      	subs	r2, r2, r3
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005c80:	4b0c      	ldr	r3, [pc, #48]	; (8005cb4 <prvHeapInit+0xb4>)
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	4a0a      	ldr	r2, [pc, #40]	; (8005cb8 <prvHeapInit+0xb8>)
 8005c8e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	4a09      	ldr	r2, [pc, #36]	; (8005cbc <prvHeapInit+0xbc>)
 8005c96:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005c98:	4b09      	ldr	r3, [pc, #36]	; (8005cc0 <prvHeapInit+0xc0>)
 8005c9a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005c9e:	601a      	str	r2, [r3, #0]
}
 8005ca0:	bf00      	nop
 8005ca2:	3714      	adds	r7, #20
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr
 8005cac:	20000284 	.word	0x20000284
 8005cb0:	20012e84 	.word	0x20012e84
 8005cb4:	20012e8c 	.word	0x20012e8c
 8005cb8:	20012e94 	.word	0x20012e94
 8005cbc:	20012e90 	.word	0x20012e90
 8005cc0:	20012ea0 	.word	0x20012ea0

08005cc4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b085      	sub	sp, #20
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005ccc:	4b28      	ldr	r3, [pc, #160]	; (8005d70 <prvInsertBlockIntoFreeList+0xac>)
 8005cce:	60fb      	str	r3, [r7, #12]
 8005cd0:	e002      	b.n	8005cd8 <prvInsertBlockIntoFreeList+0x14>
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	60fb      	str	r3, [r7, #12]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d8f7      	bhi.n	8005cd2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	68ba      	ldr	r2, [r7, #8]
 8005cec:	4413      	add	r3, r2
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d108      	bne.n	8005d06 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	685a      	ldr	r2, [r3, #4]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	441a      	add	r2, r3
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	68ba      	ldr	r2, [r7, #8]
 8005d10:	441a      	add	r2, r3
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d118      	bne.n	8005d4c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	4b15      	ldr	r3, [pc, #84]	; (8005d74 <prvInsertBlockIntoFreeList+0xb0>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d00d      	beq.n	8005d42 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	685a      	ldr	r2, [r3, #4]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	441a      	add	r2, r3
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	601a      	str	r2, [r3, #0]
 8005d40:	e008      	b.n	8005d54 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005d42:	4b0c      	ldr	r3, [pc, #48]	; (8005d74 <prvInsertBlockIntoFreeList+0xb0>)
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	601a      	str	r2, [r3, #0]
 8005d4a:	e003      	b.n	8005d54 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d002      	beq.n	8005d62 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005d62:	bf00      	nop
 8005d64:	3714      	adds	r7, #20
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr
 8005d6e:	bf00      	nop
 8005d70:	20012e84 	.word	0x20012e84
 8005d74:	20012e8c 	.word	0x20012e8c

08005d78 <__libc_init_array>:
 8005d78:	b570      	push	{r4, r5, r6, lr}
 8005d7a:	4d0d      	ldr	r5, [pc, #52]	; (8005db0 <__libc_init_array+0x38>)
 8005d7c:	4c0d      	ldr	r4, [pc, #52]	; (8005db4 <__libc_init_array+0x3c>)
 8005d7e:	1b64      	subs	r4, r4, r5
 8005d80:	10a4      	asrs	r4, r4, #2
 8005d82:	2600      	movs	r6, #0
 8005d84:	42a6      	cmp	r6, r4
 8005d86:	d109      	bne.n	8005d9c <__libc_init_array+0x24>
 8005d88:	4d0b      	ldr	r5, [pc, #44]	; (8005db8 <__libc_init_array+0x40>)
 8005d8a:	4c0c      	ldr	r4, [pc, #48]	; (8005dbc <__libc_init_array+0x44>)
 8005d8c:	f000 f82e 	bl	8005dec <_init>
 8005d90:	1b64      	subs	r4, r4, r5
 8005d92:	10a4      	asrs	r4, r4, #2
 8005d94:	2600      	movs	r6, #0
 8005d96:	42a6      	cmp	r6, r4
 8005d98:	d105      	bne.n	8005da6 <__libc_init_array+0x2e>
 8005d9a:	bd70      	pop	{r4, r5, r6, pc}
 8005d9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005da0:	4798      	blx	r3
 8005da2:	3601      	adds	r6, #1
 8005da4:	e7ee      	b.n	8005d84 <__libc_init_array+0xc>
 8005da6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005daa:	4798      	blx	r3
 8005dac:	3601      	adds	r6, #1
 8005dae:	e7f2      	b.n	8005d96 <__libc_init_array+0x1e>
 8005db0:	08005e5c 	.word	0x08005e5c
 8005db4:	08005e5c 	.word	0x08005e5c
 8005db8:	08005e5c 	.word	0x08005e5c
 8005dbc:	08005e60 	.word	0x08005e60

08005dc0 <memcpy>:
 8005dc0:	440a      	add	r2, r1
 8005dc2:	4291      	cmp	r1, r2
 8005dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005dc8:	d100      	bne.n	8005dcc <memcpy+0xc>
 8005dca:	4770      	bx	lr
 8005dcc:	b510      	push	{r4, lr}
 8005dce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005dd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005dd6:	4291      	cmp	r1, r2
 8005dd8:	d1f9      	bne.n	8005dce <memcpy+0xe>
 8005dda:	bd10      	pop	{r4, pc}

08005ddc <memset>:
 8005ddc:	4402      	add	r2, r0
 8005dde:	4603      	mov	r3, r0
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d100      	bne.n	8005de6 <memset+0xa>
 8005de4:	4770      	bx	lr
 8005de6:	f803 1b01 	strb.w	r1, [r3], #1
 8005dea:	e7f9      	b.n	8005de0 <memset+0x4>

08005dec <_init>:
 8005dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dee:	bf00      	nop
 8005df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005df2:	bc08      	pop	{r3}
 8005df4:	469e      	mov	lr, r3
 8005df6:	4770      	bx	lr

08005df8 <_fini>:
 8005df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dfa:	bf00      	nop
 8005dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dfe:	bc08      	pop	{r3}
 8005e00:	469e      	mov	lr, r3
 8005e02:	4770      	bx	lr
